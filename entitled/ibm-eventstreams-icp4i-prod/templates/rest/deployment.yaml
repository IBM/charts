###############################################################################
#
# Licensed Materials - Property of IBM
#
# 5737-H33
#
# (C) Copyright IBM Corp. 2019  All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
###############################################################################
# Defines the pod that runs the admin REST API
###############################################################################
{{ $root := . -}}
{{- include "sch.config.init" (list . "rest.sch.chart.config.values") | trim -}}
{{- include "sch.config.init" (list . "securitycontext.sch.chart.config.values") | trim -}}
# Define a tlsEnabled var from Values.
{{- include "sch.config.init" (list . "tls.sch.chart.config.values") -}}
{{ $namePrefix := .sch.chart.components.rest.deployment.name -}}
{{ $name := include "sch.names.fullCompName" (list . $namePrefix ) -}}
# Component is 'rest' as this makes up part of implementing the Admin REST API
{{ $compName := .sch.chart.components.rest.compName -}}
{{ $labels := include "sch.metadata.labels.standard" (list . $compName) -}}
# Service allowing access to the Kafka cluster
{{ $kafkaHeadlessService := .sch.chart.components.kafka.externalHeadless.name -}}
{{ $kafkaHeadlessServiceName := include "sch.names.fullCompName" (list . $kafkaHeadlessService) -}}
# Service allowing access to the ZooKeeper cluster
{{ $zookeeperHeadlessService := .sch.chart.components.zookeeper.externalHeadless.name -}}
{{ $zookeeperHeadlessServiceName := include "sch.names.fullCompName" (list . $zookeeperHeadlessService) -}}
# Service allowing access to the Schema Registry
{{ $schemaRegistryService:= .sch.chart.components.schemaregistry.service.name -}}
{{ $schemaRegistryServiceName := include "sch.names.fullCompName" (list . $schemaRegistryService) }}
# Service allowing access to the replicator cluster
{{ $replicatorService := .sch.chart.components.replicator.service.name -}}
{{ $replicatorServiceName := include "sch.names.fullCompName" (list . $replicatorService) -}}
# Service allowing access to the index manager
{{ $indexmgrService := .sch.chart.components.indexmgr.service.name -}}
{{ $indexmgrServiceName := include "sch.names.fullCompName" (list . $indexmgrService) -}}
# Service Account to grant Kubernetes access
{{ $serviceAccount := .sch.chart.components.rest.serviceAccount.name -}}
{{ $serviceAccountName := include "sch.names.fullCompName" (list . $serviceAccount ) -}}
# Secret and config map used by the proxy container
{{ $secret := .sch.chart.components.proxy.secret.name -}}
{{ $secretName := include "sch.names.fullCompName" (list . $secret) | quote -}}
{{ $stsNamePrefix := .sch.chart.components.kafka.statefulSet.name -}}
{{ $statefulSetName := include "sch.names.statefulSetName" (list . $stsNamePrefix) -}}
# Check if geo-replication is enabled
{{- $features := fromYaml (include "ibm-eventstreams.features" . ) -}}
{{- $replicatorEnabled := index $features "replicator" "enabled" -}}
# Secret containing Kafka consumer credentials and destination cluster details used by the geo-replicators
{{ $replicatorSecretNamePrefix := .sch.chart.components.replicator.credentialsSecret.name -}}
{{ $replicatorSecretName := include "sch.names.fullCompName" (list . $replicatorSecretNamePrefix) -}}
# Kafka proxy config map used to allow geo-replicators access to this cluster
{{ $kafkaProxyConfigMap := .sch.chart.components.proxy.configMap.name -}}
{{ $kafkaProxyConfigMapName := include "sch.names.fullCompName" (list . $kafkaProxyConfigMap) | quote -}}
# import security definitions
{{- include "sch.config.init" (list . "security.sch.chart.config.values") | trim -}}
# import port definitions
{{- include "sch.config.init" (list . "ports.sch.chart.config.values") | trim -}}
{{ $ports := .sch.config.ports }}
# Get accessController service name
{{ $accessControllerService := .sch.chart.components.security.accesscontroller.service.name -}}
{{ $accessControllerServiceName := include "sch.names.fullCompName" (list . $accessControllerService) -}}
# Proxy secret name which is used to get the cluster ca cert
{{ $proxySecret := .sch.chart.components.proxy.secret.name -}}
{{ $proxySecretName := include "sch.names.fullCompName" (list . $proxySecret) | quote -}}
# Internal configmap name for cluster env vars
{{ $releaseConfigMap := .sch.chart.components.essential.releaseConfigMap.name -}}
{{ $releaseConfigMapName := include "sch.names.fullCompName" (list . $releaseConfigMap) -}}
# default kafka version set as env var
{{ $kafkaInternalVersion := .sch.chart.components.kafka.kafkaInternalVersion -}}
# TLS Proxy config map name
{{ $tlsConfigMap := .sch.chart.components.rest.configMap.name -}}
{{ $tlsConfigMapName := include "sch.names.fullCompName" (list . $tlsConfigMap ) }}
{{ $httpProtocol := .sch.config.tlsInternal.httpProtocol }}
# k8s configuration
{{ $clusterName := .Values.global.k8s.clusterName -}}

{{ $zones := int (include "zones.to.template" (list .)) -}}
{{ range $zoneIndex, $e := until $zones -}}

{{ $nameLabel := include "name.including.zone" (list $namePrefix $zoneIndex) -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "name.including.zone" (list $name $zoneIndex) | quote }}
  labels:
{{ $labels | indent 4 }}
    externalCertificate: {{ $root.Values.global.security.externalCertificateLabel | quote }}
    internalCertificate: {{ $root.Values.global.security.internalCertificateLabel | quote }}
    externalHost: {{ $root.Values.proxy.externalEndpoint | quote }}
    serviceSelector: {{ $nameLabel | quote }}
spec:
  replicas: {{ include "replicas.for.zone" (list $root 1 $root.Values.global.zones.restReplicas) }}
  selector:
    matchLabels:
      release: {{ $root.Release.Name | quote }}
      serviceSelector: {{ $nameLabel | quote }}
  template:
    metadata:
      namespace: {{ include "restrict.namespace" (list $root $root.Release.Namespace) }}
      labels:
{{ $labels | indent 8 }}
        externalCertificate: {{ $root.Values.global.security.externalCertificateLabel | quote }}
        internalCertificate: {{ $root.Values.global.security.internalCertificateLabel | quote }}
        externalHost: {{ $root.Values.proxy.externalEndpoint | quote }}
        serviceSelector: {{ $nameLabel | quote }}
      annotations:
{{ include "ibm-eventstreams.metering" (list $root ) | indent 8 }}
    spec:
      serviceAccountName: {{ $serviceAccountName | quote }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
{{- include "sch.security.securityContext" (list $root $root.sch.chart.securitycontexts.pod) | indent 8 }}
      volumes:
      {{- include "license.accept.ref" $root | indent 6 }}
        - name: tlsproxy-config-map
          configMap:
            name: {{ $tlsConfigMapName }}
        - name: proxy-certs-volume
          secret:
            secretName: {{ $proxySecretName }}
            items:
            - key: podtls.cacert
              path: ca-certificates.crt
        - name: podtls-jks-volume
          secret:
            secretName: {{ $proxySecretName }}
            items:
            - key: podtls.jks
              path: podtls.jks
      {{- if $replicatorEnabled }}
        - name: replicator-secret-volume
          secret:
            secretName: {{ $replicatorSecretName }}
            items:
            - key: georeplicationdestinationclusters
              path: georeplicationdestinationclusters
      {{- end }}
        - name: proxy-config-volume
          projected:
            sources:
            - configMap:
                name: {{ $kafkaProxyConfigMapName }}
                items:
                  - key: routes
                    path: routes
                  - key: bootstrapServers
                    path: bootstrapServers
            - secret:
                name: {{ $secretName }}
                items:
                  - key: externalHostOrIP
                    path: externalHostOrIP
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
{{- include "ibm-eventstreams.archMatchExpression"  (list $root) | indent 16 }}
{{- include "ibm-eventstreams.zoneMatchExpression"  (list $root $zoneIndex) | indent 16 }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 10
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "release"
                      operator: In
                      values:
                        -  {{ $root.Release.Name | quote }}
                    - key: "serviceSelector"
                      operator: In
                      values:
                        -  {{ $nameLabel | quote }}
                topologyKey: "kubernetes.io/hostname"
      containers:
        # tls proxy sidecar - encrypts traffic to elastic search
        - name: tls-proxy
          image: {{ include "eventstreams.image" (list $root "eventstreams-proxy" $root.Values.global.image.imageTags.proxyTag) | quote }}
          imagePullPolicy: {{ $root.Values.global.image.pullPolicy }}
          securityContext:
{{- include "sch.security.securityContext" (list $root $root.sch.chart.securitycontexts.containerReadOnlyFilesystem) | indent 12 }}
          resources:
            requests:
{{ toYaml $root.Values.global.resources.tlsProxy.requests | indent 14 }}
            limits:
{{ toYaml $root.Values.global.resources.tlsProxy.limits | indent 14 }}
          env:
            {{- include "license.accept.env.ref" . | indent 10 }}
            - name: ES_CONFIG_PATH
              value: {{ $root.sch.chart.components.rest.tlsConfigPath | quote }}
          volumeMounts:
            - name: proxy-certs-volume
              mountPath: /etc/ssl/certs
              readOnly: true
            - name: tlsproxy-config-map
              mountPath: {{ $root.sch.chart.components.collector.tlsConfigPath | quote }}
              readOnly: true
          readinessProbe:
            httpGet:
              path: "/ready"
              port: {{ $ports.proxy.health }}
            initialDelaySeconds: 1
            periodSeconds: 5
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: "/live"
              port: {{ $ports.proxy.health }}
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 15
        - name: "rest"
          image: {{ include "eventstreams.image" (list $root "eventstreams-rest" $root.Values.global.image.imageTags.restTag) | quote }}
          imagePullPolicy: {{ $root.Values.global.image.pullPolicy }}
          securityContext:
{{- include "sch.security.securityContext" (list $root $root.sch.chart.securitycontexts.containerWritableFilesystem) | indent 12 }}
          resources:
            limits:
{{ toYaml $root.Values.global.resources.rest.limits | indent 14 }}
            requests:
{{ toYaml $root.Values.global.resources.rest.requests | indent 14 }}
          readinessProbe:
            httpGet:
              path: /liveness
              port: {{ $ports.rest.health }}
              scheme: HTTPS
              httpHeaders:
                - name: Accept
                  value: '*/*'
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /liveness
              port: {{ $ports.rest.health }}
              scheme: HTTPS
              httpHeaders:
                - name: Accept
                  value: '*/*'
            initialDelaySeconds: 240
            periodSeconds: 30
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 10
          env:
            {{- include "license.accept.env.ref" . | indent 10 }}
            - name: KAFKA_STS_NAME
              value: {{ $statefulSetName | quote }}
            - name: RELEASE
              value: {{ $root.Release.Name | quote }}
            - name: NAMESPACE
              value: {{ $root.Release.Namespace | quote }}
            - name: CONFIGMAP
              value: {{ $releaseConfigMapName | quote }}
            - name: CLUSTER_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName }}
                  key: "CLUSTER_NAME"
            - name: "CLUSTER_EXTERNAL_IP"
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName }}
                  key: "CLUSTER_ADDRESS"
            - name: "CLUSTER_EXTERNAL_PORT"
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName }}
                  key: "CLUSTER_ROUTER_HTTPS_PORT"
            - name: PROMETHEUS_HOST
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName }}
                  key: "CLUSTER_ADDRESS"
            - name: PROMETHEUS_PORT
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName }}
                  key: "CLUSTER_ROUTER_HTTPS_PORT"
            - name: "ES_CACERT"
              valueFrom:
                secretKeyRef:
                  name: {{ $proxySecretName }}
                  key: "tls.cacert"
            - name: "CLUSTER_CACERT"
              valueFrom:
                secretKeyRef:
                  name: {{ $proxySecretName }}
                  key: "tls.cluster"
            - name: "TLS_CERT"
              valueFrom:
                secretKeyRef:
                  name: {{ $proxySecretName }}
                  key: "podtls.cert"
            - name: "TLS_KEY"
              valueFrom:
                secretKeyRef:
                  name: {{ $proxySecretName }}
                  key: "podtls.key"
            - name: "PODTLS_JKS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ $proxySecretName }}
                  key: "podtls.jks.password"
            - name: KAFKA_BOOTSTRAP_URL
              value: "{{ $kafkaHeadlessServiceName }}.{{ $root.Release.Namespace }}.svc.{{ $clusterName }}:{{ $ports.kafka.internalEventStreamsSecureIntercept }}"
            - name: ZOOKEEPER_CONNECT
              value: "127.0.0.1:{{ $ports.zookeeper.client }}"
            - name: SCHEMA_REGISTRY_URL
              value: "https://{{ $schemaRegistryServiceName }}.{{ $root.Release.Namespace }}.svc.{{ $clusterName }}:{{ $ports.schemaregistry.server }}/api"
            - name: MESSAGE_INDEXING_DISABLED
              value: {{ (ne $root.Values.messageIndexing.messageIndexingEnabled true) | toString | quote }}
            - name: INDEX_MANAGER_URL
              value: "{{ $httpProtocol }}://{{ $indexmgrServiceName }}.{{ $root.Release.Namespace }}.svc.{{ $clusterName }}:{{ $ports.indexmgr.api }}"
            - name: ICP_PAP_SUFFIX
              value: {{ $root.sch.config.security.iamPAPSuffix | quote}}
            - name: ICP_IAM_TOKEN_SUFFIX
              value: {{ $root.sch.config.security.iamTokenSuffix | quote}}
            - name: ACCESS_CONTROLLER_SERVICE_NAME
              value: "{{ $accessControllerServiceName }}.{{ $.Release.Namespace }}.svc.{{ $clusterName }}"
            - name: ACCESS_CONTROLLER_SERVICE_PORT
              value: {{ $ports.security.accessController | quote}}
            - name: RELEASE_CONFIGMAP_NAME
              value: {{ $releaseConfigMapName | quote }}
            - name: DEFAULT_INTERNAL_KAFKA_VERSION
              value: {{ $kafkaInternalVersion | quote}}
            - name: "OPENSHIFT_DOMAIN"
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName | quote }}
                  key: "OPENSHIFT_DOMAIN"
                  optional: true
            - name: TRACE_SPEC
              value: "*=info"
          {{- if $replicatorEnabled }}
            - name: GEOREPLICATION_ENABLED
              value: "true"
            - name: REPLICATOR_SVC_URL
              value: "https://{{ $replicatorServiceName }}.{{ $root.Release.Namespace }}.svc.{{ $clusterName }}:{{ $ports.replicator.api }}"
            - name: KAFKA_HEADLESS_SVC_NAME
              value: {{ $kafkaHeadlessServiceName | quote }}
            - name: ZK_HEADLESS_SVC_NAME
              value: {{ $zookeeperHeadlessServiceName | quote }}
            - name: REPLICATORKEYS_SECRET_NAME
              value: {{ $replicatorSecretName | quote }}
          {{- end }}
          volumeMounts:
            - name: proxy-config-volume
              mountPath: /etc/proxy-configmap
            - name: proxy-certs-volume
              mountPath: /etc/ssl/certs
              readOnly: true
            - name: tlsproxy-config-map
              mountPath: {{ $root.sch.chart.components.rest.tlsConfigPath | quote }}
              readOnly: true
            - name: podtls-jks-volume
              mountPath: "/opt/ibm/wlp/usr/shared/resources/security"
              readOnly: true
          {{- if $replicatorEnabled }}
            - name: replicator-secret-volume
              mountPath: /etc/georeplication
              readOnly: true
          {{- end }}
        - name: "codegen"
          env:
            {{- include "license.accept.env.ref" . | indent 10 }}
          image: {{ include "eventstreams.image" (list $root "eventstreams-codegen"  $root.Values.global.image.imageTags.codegenTag) | quote }}
          imagePullPolicy: {{ $root.Values.global.image.pullPolicy }}
          securityContext:
{{- include "sch.security.securityContext" (list $root $root.sch.chart.securitycontexts.containerWritableFilesystem) | indent 12 }}
          resources:
            limits:
{{ toYaml $root.Values.global.resources.codegen.limits | indent 14 }}
            requests:
{{ toYaml $root.Values.global.resources.codegen.requests | indent 14 }}
          readinessProbe:
            httpGet:
              path: /health
              port: {{ $ports.codegen.server }}
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: {{ $ports.codegen.server }}
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 10
{{ if lt $zoneIndex (sub $zones 1) -}}
---
{{ end -}}
{{ end -}}
