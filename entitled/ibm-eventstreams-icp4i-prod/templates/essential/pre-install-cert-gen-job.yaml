###############################################################################
#
# Licensed Materials - Property of IBM
#
# 5737-H33
#
# (C) Copyright IBM Corp. 2018, 2019  All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
################################################################################
# Runs a container that either reads or generates certificates for the IBM Event
# Streams instance, and writes them out to the secret.
################################################################################
{{ if eq .Values.license "accept" -}}
{{- include "sch.config.init" (list . "sch.chart.config.values") -}}
{{- include "sch.config.init" (list . "securitycontext.sch.chart.config.values") | trim -}}
{{ $namePrefix := .sch.chart.components.essential.certGenJob.name -}}
{{ $name := include "sch.names.fullCompName" (list . $namePrefix ) -}}
# Component is 'essential'
{{ $compName := .sch.chart.components.essential.compName -}}
{{ $labels := include "sch.metadata.labels.standard" (list . $compName (dict "function" "setup-secrets")) -}}
# Name of the new temporary service account
{{ $serviceAccount := .sch.chart.components.essential.preInstallSA.name -}}
{{ $serviceAccountName := include "sch.names.fullCompName" (list . $serviceAccount) -}}
{{ $proxySecretNamePrefix := .sch.chart.components.proxy.secret.name -}}
{{ $proxySecretName := include "sch.names.fullCompName" (list . $proxySecretNamePrefix ) -}}
{{ $jmxSecretNamePrefix := .sch.chart.components.kafka.jmxSecret.name -}}
{{ $jmxSecretName := include "sch.names.fullCompName" (list . $jmxSecretNamePrefix ) -}}
{{ $kafkaInternalSVCPrefix := .sch.chart.components.kafka.internalHeadless.name -}}
{{ $kafkaInternalSVCName := include "sch.names.fullCompName" (list . $kafkaInternalSVCPrefix ) -}}
{{ $kafkaExternalSVCPrefix := .sch.chart.components.kafka.externalHeadless.name -}}
{{ $kafkaExternalSVCName := include "sch.names.fullCompName" (list . $kafkaExternalSVCPrefix ) -}}
{{ $zookeeperInternalSVCPrefix := .sch.chart.components.zookeeper.internalHeadless.name -}}
{{ $zookeeperInternalSVCName := include "sch.names.fullCompName" (list . $zookeeperInternalSVCPrefix ) -}}
{{ $zookeeperExternalSVCPrefix := .sch.chart.components.zookeeper.externalHeadless.name -}}
{{ $zookeeperExternalSVCName := include "sch.names.fullCompName" (list . $zookeeperExternalSVCPrefix ) -}}
{{ $elasticSVCPrefix := .sch.chart.components.elasticSearch.service.name -}}
{{ $elasticSVCName := include "sch.names.fullCompName" (list . $elasticSVCPrefix ) -}}
# Access Controller service name
{{ $accessControllerService := .sch.chart.components.security.accesscontroller.service.name -}}
{{ $accessControllerServiceName := include "sch.names.fullCompName" (list . $accessControllerService) -}}
# Name of configmap to create
{{ $releaseConfigMap := .sch.chart.components.essential.releaseConfigMap.name -}}
{{ $releaseConfigMapName := include "sch.names.fullCompName" (list . $releaseConfigMap) -}}
# Name of proxy map
# kafka proxy configmap name
{{ $kafkaProxyConfigMap := .sch.chart.components.proxy.configMap.name -}}
{{ $kafkaProxyConfigMapName := include "sch.names.fullCompName" (list . $kafkaProxyConfigMap) -}}
# Validation of user supplied input
{{- if eq .Values.tls.type  "provided"}}
  # user has supplied their own certificate details
  {{- if empty .Values.tls.key }}
    {{ fail "Configuration error: Please enter the Base64 encoded TLS private key in Secure connections section." }}
  {{- end }}
  {{- if empty .Values.tls.cert }}
    {{ fail "Configuration error: Please enter the Base64 encoded TLS certificate in Secure connections section." }}
  {{- end }}
  {{- if empty .Values.tls.cacert }}
    {{ fail "Configuration error: Please enter the Base64 encoded CA certificate in Secure connections section." }}
  {{- end }}
  {{- if eq (regexMatch "^[A-Za-z0-9+/]*={0,3}$" .Values.tls.key) false}}
    {{ fail "Configuration error: Please enter a valid Base64 encoded TLS private key in Secure connections section." }}
  {{- end }}
  {{- if eq (regexMatch "^[A-Za-z0-9+/]*={0,3}$" .Values.tls.cert) false }}
    {{ fail "Configuration error: Please enter a valid Base64 encoded TLS certificate in Secure connections section." }}
  {{- end }}
  {{- if eq (regexMatch "^[A-Za-z0-9+/]*={0,3}$" .Values.tls.cacert) false }}
    {{ fail "Configuration error: Please enter a valid Base64 encoded CA certificate in Secure connections section." }}
  {{- end }}
  {{- if .Values.tls.secretName }}
    {{ fail "Configuration error: Cannot specify a secret name when providing Base64 encoded certificates." }}
  {{- end }}
{{- end }}
{{- if eq .Values.tls.type  "secret"}}
  # read certificates and keys from a secret
  {{- if empty .Values.tls.secretName }}
    {{ fail "Configuration error: Please enter the name of the secret that contains the provided certificates in Secure connections section." }}
  {{- end }}
{{- end }}
{{- if eq .Values.tls.type  "selfsigned"}}
  {{- if .Values.tls.key }}
  {{ fail "Configuration error: You cannot select self-signed certificate and provide a TLS private key." }}
  {{- end }}
  {{- if .Values.tls.cert }}
  {{ fail "Configuration error: You cannot select self-signed certificate and provide a TLS certificate." }}
  {{- end }}
  {{- if .Values.tls.cacert }}
  {{ fail "Configuration error: You cannot select self-signed certificate and provide a CA certificate." }}
  {{- end }}
{{- end }}
# k8s configuration
{{ $clusterName := .Values.global.k8s.clusterName -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $name | quote }}
  labels:
{{ $labels | indent 4 }}
  annotations:
    # This needs to run before we deploy, as UI component installs
    # depend on the secrets existing already, and will fail to start
    # otherwise.
    "helm.sh/hook": pre-install, pre-upgrade, pre-rollback
    # We don't delete this if it fails, as the logs may be useful to
    # diagnose a failed install
    "helm.sh/hook-delete-policy": before-hook-creation
    # This needs to happen before all other jobs as they will need access to this
    # image pull secret
    "helm.sh/hook-weight": "5"
spec:
  template:
    metadata:
      labels:
{{ $labels | indent 8 }}
        job: "pre-install-cert-gen"
    spec:
      serviceAccountName: {{ $serviceAccountName }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
{{- include "sch.security.securityContext" (list . .sch.chart.securitycontexts.pod) | indent 8 }}
      affinity:
{{ include "ibm-eventstreams.customNodeaffinity"  (list .) | indent 8 }}
      restartPolicy: Never
      containers:
        - name: "cert-generator"
          image: {{ include "eventstreams.image" (list . "eventstreams-certs" .Values.global.image.imageTags.certGenTag) | quote }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          securityContext:
{{- include "sch.security.securityContext" (list . .sch.chart.securitycontexts.containerWritableFilesystem) | indent 12 }}
          env:
            {{- include "license.accept.env.ref" . | indent 10 }}
            - name: "ES_NAMESPACE"
              value: {{ .Release.Namespace | quote }}
            - name: "RELEASE_NAME"
              value: {{ .Release.Name | quote }}
            - name: "ES_SECRET_NAME"
              value: {{ $proxySecretName | quote }}
            {{- if eq (empty .Values.proxy.externalEndpoint) false}}
            - name: "ES_CNAME"
              value: {{ .Values.proxy.externalEndpoint }}
            {{- end }}
            {{- if eq .Values.tls.type  "provided"}}
            - name: "ES_CERT"
              value: {{ .Values.tls.cert }}
            - name: "ES_KEY"
              value: {{ .Values.tls.key }}
            - name: "ES_CACERT"
              value: {{ .Values.tls.cacert }}
            {{- end }}
            {{- if eq .Values.tls.type  "secret"}}
            #setting the defaults to be the common values for supplying certificates
            - name: "ES_CERT"
              value: {{ .Values.tls.cert | default "cert" | quote }}
            - name: "ES_KEY"
              value: {{ .Values.tls.key | default "key" | quote }}
            - name: "ES_CACERT"
              value: {{ .Values.tls.cacert | default "cacert" | quote }}
            - name: "ES_PROVIDED_SECRET_NAME"
              value: {{ .Values.tls.secretName }}
            {{- end }}
            - name: "GENERATE_JMX_SECRET"
              value: {{ .Values.kafka.openJMX | quote }}
            - name: "ES_JMX_SECRET_NAME"
              value: {{ $jmxSecretName | quote }}
            - name: "CLUSTER_NAME"
              value: {{ $clusterName | quote }}
            - name: "CLUSTER_ADDRESS"
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName | quote }}
                  key: "CLUSTER_ADDRESS"
            - name: "PROXY_ADDRESS"
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName | quote }}
                  key: "PROXY_ADDRESS"
            - name: "CLUSTER_CA_DOMAIN"
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName | quote }}
                  key: "CLUSTER_CA_DOMAIN"
            - name: "ELASTIC_SVC_NAME"
              value: {{ $elasticSVCName | quote }}
            - name: "KAFKA_EXTERNAL_SVC_NAME"
              value: {{ $kafkaExternalSVCName | quote }}
            - name: "ZK_EXTERNAL_SVC_NAME"
              value: {{ $zookeeperExternalSVCName | quote }}
            - name: "KAFKA_INTERNAL_SVC_NAME"
              value: {{ $kafkaInternalSVCName | quote }}
            - name: "ZK_INTERNAL_SVC_NAME"
              value: {{ $zookeeperInternalSVCName | quote }}
            - name: "ACCESS_CONTROLLER_SERVICE_NAME"
              value: "{{ $accessControllerServiceName }}.{{ $.Release.Namespace }}.svc.{{ $clusterName }}"
            - name: "NEW_EXTERNAL_CERT_LABEL"
              value: {{ .Values.global.security.externalCertificateLabel | quote }}
            - name: "CURRENT_EXTERNAL_CERT_LABEL"
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName | quote }}
                  key: "externalCertificateLabel"
                  optional: true
            - name: "PREVIOUS_EXTERNAL_CERT_LABEL"
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName | quote }}
                  key: "previousExternalCertificateLabel"
                  optional: true
            - name: "NEW_INTERNAL_CERT_LABEL"
              value: {{ .Values.global.security.internalCertificateLabel | quote }}
            - name: "CURRENT_INTERNAL_CERT_LABEL"
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName | quote }}
                  key: "internalCertificateLabel"
                  optional: true
            - name: "PREVIOUS_INTERNAL_CERT_LABEL"
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName | quote }}
                  key: "previousInternalCertificateLabel"
                  optional: true
            - name: "RELEASE_CONFIG_MAP_NAME"
              value: {{ $releaseConfigMapName | quote }}
            - name: "OPENSHIFT_DOMAIN"
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName }}
                  key: "OPENSHIFT_DOMAIN"
                  optional: true              
            - name: "PROXY_CONFIG_MAP_NAME"
              value: {{ $kafkaProxyConfigMapName | quote }}
{{ end -}}

