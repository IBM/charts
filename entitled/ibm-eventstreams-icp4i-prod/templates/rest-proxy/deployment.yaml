###############################################################################
#
# Licensed Materials - Property of IBM
#
# 5737-H33
#
# (C) Copyright IBM Corp. 2019  All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
###############################################################################
# Defines the pod that runs nginx as a rest proxy
###############################################################################
{{ $root := . -}}
{{- include "sch.config.init" (list . "ports.sch.chart.config.values") | trim -}}
{{- include "sch.config.init" (list . "securitycontext.sch.chart.config.values") | trim -}}
{{ $namePrefix := .sch.chart.components.restproxy.deployment.name -}}
{{ $name := include "sch.names.fullCompName" (list . $namePrefix ) -}}
# Component is 'restproxy'
{{ $compName := .sch.chart.components.restproxy.compName -}}
{{ $labels := include "sch.metadata.labels.standard" (list . $compName) -}}
# Service Account to grant Kubernetes access
{{ $serviceAccount := .sch.chart.components.restproxy.serviceAccount.name -}}
{{ $serviceAccountName := include "sch.names.fullCompName" (list . $serviceAccount ) -}}
# Rest api to connect to
{{ $restService := .sch.chart.components.rest.service.name -}}
{{ $restServiceName := include "sch.names.fullCompName" (list . $restService) -}}
# Rest producer to connect to
{{ $restProducer := .sch.chart.components.restproducer.service.name -}}
{{ $restProducerName := include "sch.names.fullCompName" (list . $restProducer) }}
# Schema Registry to connect to
{{ $schemaRegistryService:= .sch.chart.components.schemaregistry.service.name -}}
{{ $schemaRegistryServiceName := include "sch.names.fullCompName" (list . $schemaRegistryService) }}
# Secret containing certs
{{ $secret := .sch.chart.components.proxy.secret.name -}}
{{ $secretName := include "sch.names.fullCompName" (list . $secret) | quote -}}
# Import port definitions
{{ $ports := .sch.config.ports }}
# k8s configuration
{{ $clusterName := .Values.global.k8s.clusterName -}}
# Internal configmap name for cluster env vars
{{ $releaseConfigMap := .sch.chart.components.essential.releaseConfigMap.name -}}
{{ $releaseConfigMapName := include "sch.names.fullCompName" (list . $releaseConfigMap) -}}

{{ $zones := int (include "zones.to.template" (list .)) -}}
{{ range $zoneIndex, $e := until $zones -}}

{{ $nameLabel := include "name.including.zone" (list $namePrefix $zoneIndex) -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "name.including.zone" (list $name $zoneIndex) | quote }}
  labels:
{{ $labels | indent 4 }}
    internalCertificate: {{ $root.Values.global.security.internalCertificateLabel | quote }}
    externalCertificate: {{ $root.Values.global.security.externalCertificateLabel | quote }}
    externalHost: {{ $root.Values.proxy.externalEndpoint | quote }}
    serviceSelector: {{ $nameLabel | quote }}
spec:
  selector:
    matchLabels:
      release: {{ $root.Release.Name | quote }}
      serviceSelector: {{ $nameLabel | quote }}
  replicas: {{ include "replicas.for.zone" (list $root 1 $root.Values.global.zones.restProxyReplicas) }}
  template:
    metadata:
      namespace: {{ include "restrict.namespace" (list $root $root.Release.Namespace) }}
      labels:
{{ $labels | indent 8 }}
        internalCertificate: {{ $root.Values.global.security.internalCertificateLabel | quote }}
        externalCertificate: {{ $root.Values.global.security.externalCertificateLabel | quote }}
        externalHost: {{ $root.Values.proxy.externalEndpoint | quote }}
        serviceSelector: {{ $nameLabel | quote }}
      annotations:
{{ include "ibm-eventstreams.metering" (list $root ) | indent 8 }}
    spec:
      serviceAccountName: {{ $serviceAccountName | quote }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
{{- include "ibm-eventstreams.archMatchExpression"  (list $root) | indent 16 }}
{{- include "ibm-eventstreams.zoneMatchExpression"  (list $root $zoneIndex) | indent 16 }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 10
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "release"
                      operator: In
                      values:
                        -  {{ $root.Release.Name | quote }}
                    - key: "serviceSelector"
                      operator: In
                      values:
                        -  {{ $nameLabel | quote }}
                topologyKey: "kubernetes.io/hostname"
      volumes:
      {{- include "license.accept.ref" $root | indent 6 }}
        - name: secret-volume
          secret:
            secretName: {{ $secretName }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
{{- include "sch.security.securityContext" (list $root $root.sch.chart.securitycontexts.pod) | indent 8 }}
      containers:
      - name: "rest-proxy"
        image: {{ include "eventstreams.image" (list $root "eventstreams-rest-proxy" $root.Values.global.image.imageTags.restProxyTag) | quote }}
        imagePullPolicy: {{ $root.Values.global.image.pullPolicy }}
        resources:
          limits:
{{ toYaml $root.Values.global.resources.restProxy.limits | indent 12 }}
          requests:
{{ toYaml $root.Values.global.resources.restProxy.requests | indent 12 }}
        securityContext:
{{- include "sch.security.securityContext" (list $root $root.sch.chart.securitycontexts.containerWritableFilesystem) | indent 12 }}
        ports:
        - name: restendpoint
          containerPort: {{ $ports.restproxy.internal }}
        readinessProbe:
          httpGet:
            path: "/ready"
            port: {{ $ports.restproxy.health }}
          initialDelaySeconds: 1
          periodSeconds: 5
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: "/live"
            port: {{ $ports.restproxy.health }}
          initialDelaySeconds: 15
          periodSeconds: 15
          timeoutSeconds: 15
        volumeMounts:
        - mountPath: /etc/nginx/ssl
          name: secret-volume
        env:
        - name: API_URL
          value: "https://{{ $restServiceName }}.{{ $root.Release.Namespace }}.svc.{{ $clusterName }}:{{ $ports.rest.server }}"
        - name: REST_PRODUCER_URL
          value: "https://{{ $restProducerName }}.{{ $root.Release.Namespace }}.svc.{{ $clusterName }}:{{ $ports.restproducer.server }}/topics"
        - name: SCHEMA_REGISTRY_URL
          value: "https://{{ $schemaRegistryServiceName }}.{{ $root.Release.Namespace }}.svc.{{ $clusterName }}:{{ $ports.schemaregistry.server }}"
        - name: NAMESPACE
          value: {{ $root.Release.Namespace | quote }}
        - name: CONFIGMAP
          value: {{ $releaseConfigMapName | quote }}
        {{- include "license.accept.env.ref" . | indent 6 }}
      - name: "clientauth-proxy"
        image: {{ include "eventstreams.image" (list $root "eventstreams-clientauth-proxy" $root.Values.global.image.imageTags.clientauthProxyTag) | quote }}
        imagePullPolicy: {{ $root.Values.global.image.pullPolicy }}
        securityContext:
{{- include "sch.security.securityContext" (list $root $root.sch.chart.securitycontexts.containerReadOnlyFilesystem) | indent 12 }}
        resources:
          requests:
{{ toYaml $root.Values.global.resources.tlsProxy.requests | indent 12 }}
          limits:
{{ toYaml $root.Values.global.resources.tlsProxy.limits | indent 12 }}
        readinessProbe:
          httpGet:
            path: /health
            port: {{ $ports.clientauthproxy.external }}
            scheme: HTTPS
            httpHeaders:
            - name: Accept
              value: '*/*'
          initialDelaySeconds: 1
          periodSeconds: 5
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health
            port: {{ $ports.clientauthproxy.external }}
            scheme: HTTPS
            httpHeaders:
            - name: Accept
              value: '*/*'
          initialDelaySeconds: 15
          periodSeconds: 15
          timeoutSeconds: 15
          successThreshold: 1
          failureThreshold: 6
        env:
        {{- include "license.accept.env.ref" $root | indent 6 }}
        - name: TLS_CERT_FILE
          value: "/etc/nginx/ssl/tls.cert"
        - name: TLS_KEY_FILE
          value: "/etc/nginx/ssl/tls.key"
        - name: CLIENTAUTH_CERT_FILE
          value: "/etc/nginx/ssl/clientauth.cert"
        - name: CLIENTAUTH_KEY_FILE
          value: "/etc/nginx/ssl/clientauth.key"
        - name: BACK_ADDR
          value: "127.0.0.1:{{ $ports.restproxy.internal }}"
        - name: FRONT_PORT
          value: "{{ $ports.clientauthproxy.external }}"
        volumeMounts:
        - mountPath: /etc/nginx/ssl
          name: secret-volume
          readOnly: true

{{ if lt $zoneIndex (sub $zones 1) -}}
---
{{ end -}}
{{ end -}}
