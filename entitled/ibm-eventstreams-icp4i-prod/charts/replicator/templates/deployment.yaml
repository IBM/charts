###############################################################################
#
# Licensed Materials - Property of IBM
#
# 5737-H33
#
# (C) Copyright IBM Corp. 2018, 2019  All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
###############################################################################
# Defines the pod that runs the Replicator
###############################################################################
# Only install the deployment if replicator enabled
{{ $root := . -}}
{{- $features := fromYaml (include "ibm-eventstreams.features" . ) -}}
{{- $replicatorEnabled := index $features "replicator" "enabled" -}}
{{ if $replicatorEnabled -}}
###############################################################################
{{- include "sch.config.init" (list . "ports.sch.chart.config.values") | trim -}}
{{- include "sch.config.init" (list . "securitycontext.sch.chart.config.values") | trim -}}
{{ $namePrefix := .sch.chart.components.replicator.deployment.name -}}
{{ $name := include "sch.names.fullCompName" (list . $namePrefix ) -}}
{{ $id := (include "ibm-eventstreams.asDnsLabel" .Release.Name) -}}
# Component is 'replicator' as this makes up part of implementing the replicator
{{ $compName := .sch.chart.components.replicator.compName -}}
{{ $labels := include "sch.metadata.labels.standard" (list . $compName) -}}
# Service Account
{{ $serviceAccount := .sch.chart.components.replicator.serviceAccount.name -}}
{{ $serviceAccountName := include "sch.names.fullCompName" (list . $serviceAccount ) -}}
# Service allowing access to the Kafka cluster
{{ $kafkaHeadlessService := .sch.chart.components.kafka.externalHeadless.name -}}
{{ $kafkaHeadlessServiceName := include "sch.names.fullCompName" (list . $kafkaHeadlessService) -}}
# Secret containing cert and key for pod to pod security
{{ $proxySecretNamePrefix := .sch.chart.components.proxy.secret.name -}}
{{ $proxySecretName := include "sch.names.fullCompName" (list . $proxySecretNamePrefix) | quote -}}
# Config map used from the proxy pod in order to dictate the TLS on/off routes within the replicator pod
{{ $proxyConfigMap := .sch.chart.components.replicator.configMap.proxyConfigMap.name -}}
{{ $proxyConfigMapName := include "sch.names.fullCompName" (list . $proxyConfigMap ) }}
# Secret that provides the API key to allow the Replicator to access the Kafka cluster
{{ $iamServiceName := .sch.chart.components.security.serviceName -}}
{{ $iamSecret := .sch.chart.components.security.iamSecret.name -}}
{{ $iamSecretName := include "sch.names.fullCompName" (list . $iamSecret ) -}}
# Config map that identifies the metrics that should be pushed to Prometheus
{{ $kafkaMetricsConfigMap := .sch.chart.components.replicator.configMap.replicatorConfigMap.name -}}
{{ $kafkaMetricsConfigMapName := include "sch.names.fullCompName" (list . $kafkaMetricsConfigMap) | quote -}}
# Secret containing credentials for the consumers in replicators
{{ $secretNamePrefix := .sch.chart.components.replicator.credentialsSecret.name -}}
{{ $secretName := include "sch.names.fullCompName" (list . $secretNamePrefix) -}}
# import port definitions
{{ $ports := .sch.config.ports }}
# k8s configuration
{{ $clusterName := .Values.global.k8s.clusterName -}}
# Internal configmap name for cluster env vars
{{ $releaseConfigMap := .sch.chart.components.essential.releaseConfigMap.name -}}
{{ $releaseConfigMapName := include "sch.names.fullCompName" (list . $releaseConfigMap) -}}

{{ $zones := int (include "zones.to.template" (list .)) -}}
{{ range $zoneIndex, $e := until $zones -}}

{{ $nameLabel := include "name.including.zone" (list $namePrefix $zoneIndex) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "name.including.zone" (list $name $zoneIndex) | quote }}
  labels:
{{ $labels | indent 4 }}
    internalCertificate: {{ $root.Values.global.security.internalCertificateLabel | quote }}
    serviceSelector: {{ $nameLabel | quote }}
spec:
  replicas: {{ include "replicas.for.zone" (list $root 0 $root.Values.replicas) }}
  selector:
    matchLabels:
      release: {{ $root.Release.Name | quote }}
      serviceSelector: {{ $nameLabel | quote }}
  template:
    metadata:
      namespace: {{ include "restrict.namespace" (list $root $root.Release.Namespace) }}
      labels:
{{ $labels | indent 8 }}
        internalCertificate: {{ $root.Values.global.security.internalCertificateLabel | quote }}
        serviceSelector: {{ $nameLabel | quote }}
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '{{ $ports.prometheus.collectorKafka }}'
        prometheus.io/scheme: https
{{ include "ibm-eventstreams.metering" (list $root "replicator") | indent 8 }}
    spec:
      serviceAccountName: {{ $serviceAccountName | quote }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
{{- include "sch.security.securityContext" (list $root $root.sch.chart.securitycontexts.pod) | indent 8 }}
      volumes:
        - name: kafka-metrics-config-volume
          configMap:
            name: {{ $kafkaMetricsConfigMapName }}
        - name: consumer-credentials
          secret:
            secretName: {{ $secretName }}
        - name: proxy-certs-volume
          secret:
            secretName: {{ $proxySecretName }}
            items:
            - key: podtls.jks
              path: podtls.jks
        {{- include "license.accept.ref" $root | indent 6 }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
{{- include "ibm-eventstreams.archMatchExpression"  (list $root) | indent 16 }}
{{- include "ibm-eventstreams.zoneMatchExpression"  (list $root $zoneIndex) | indent 16 }}        # we don't want multiple co-located replicator nodes
        #  so this anti-affinity rule should prevent
        #  nodes with the replicator name being scheduled on
        #  the same host
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 10
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "release"
                      operator: In
                      values:
                        -  {{ $root.Release.Name | quote }}
                    - key: "serviceSelector"
                      operator: In
                      values:
                        - {{ $nameLabel | quote }}
                topologyKey: "kubernetes.io/hostname"
      initContainers:
        - name: wait-for-kafka-headless
          image: {{ include "eventstreams.image" (list $root "eventstreams-init" $root.Values.global.image.imageTags.initTag) | quote }}
          imagePullPolicy: {{ $root.Values.global.image.pullPolicy }}
          env:
            {{- include "license.accept.env.ref" $root | indent 12 }}
          securityContext:
{{- include "sch.security.securityContext" (list $root $root.sch.chart.securitycontexts.containerReadOnlyFilesystem) | indent 12 }}
          command: ['sh', '-c', 'echo Waiting for {{ $kafkaHeadlessServiceName }}; until getent hosts {{ $kafkaHeadlessServiceName }}; do echo "Waiting for {{ $kafkaHeadlessServiceName }}"; sleep 10; done;']
      containers:
        - name: "replicator"
          image: {{ include "eventstreams.image" (list $root "eventstreams-replicator" $root.Values.global.image.imageTags.replicatorTag) | quote }}
          imagePullPolicy: {{ $root.Values.global.image.pullPolicy }}
          securityContext:
{{- include "sch.security.securityContext" (list $root $root.sch.chart.securitycontexts.containerWritableFilesystem) | indent 12 }}
          resources:
            limits:
{{ toYaml $root.Values.resources.limits | indent 14 }}
            requests:
{{ toYaml $root.Values.resources.requests | indent 14 }}
          ports:
          - containerPort: {{ $ports.replicator.api }}
            name: api
          readinessProbe:
            httpGet:
              path: /
              port: {{ $ports.replicator.api }}
              scheme: HTTPS
              httpHeaders:
                - name: Accept
                  value: '*/*'
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /
              port: {{ $ports.replicator.api }}
              scheme: HTTPS
              httpHeaders:
                - name: Accept
                  value: '*/*'
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          env:
            {{- include "license.accept.env.ref" $root | indent 10 }}
            - name: "CONNECT_BOOTSTRAP_SERVERS"
              value: "{{ $kafkaHeadlessServiceName }}.{{ $root.Release.Namespace }}.svc.{{ $clusterName }}:{{ $ports.kafka.internalLoopbackIntercept }}"
            - name: "CONNECT_CLUSTER_GROUP_ID"
              value: "{{ $name }}-group"
            - name: "CONNECT_API_KEY"
              valueFrom:
                secretKeyRef:
                  name: "{{ $iamSecretName }}"
                  key: "{{ $iamServiceName }}-{{ $.Release.Name }}-api-key"
            - name: "PODTLS_JKS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  name: {{ $proxySecretName }}
                  key: "podtls.jks.password"
            - name: TLS_ENABLED
              value: "true"
            - name: ROOT_LOGLEVEL
              value: INFO
            - name: KAFKA_LOGLEVEL
              value: INFO
            - name: ES_LOGLEVEL
              value: INFO
            - name: REST_PORT
              value: "{{ $ports.replicator.api }}"
            - name: JMX_HOST
              value: "127.0.0.1"
            - name: KAFKA_HEAP_OPTS
              value: "-XX:+UseContainerSupport"
            - name: KAFKA_SECURITY_PROTOCOL
              value: "{{- if eq $root.Values.global.security.tlsInternal "enabled" -}}SASL_SSL{{- else -}}SASL_PLAINTEXT{{- end -}}"
            - name: NAMESPACE
              value: {{ $root.Release.Namespace | quote }}
            - name: CONFIGMAP
              value: {{ $releaseConfigMapName | quote }}
          volumeMounts:
            - name: consumer-credentials
              mountPath: /etc/consumer-credentials
              readOnly: true
            - name: proxy-certs-volume
              mountPath: /etc/ssl/certs
              readOnly: true
        #
        # Metrics reporter sidecars - receives Kafka Connect metrics and pushes to Prometheus
        - name: metrics-reporter
          imagePullPolicy: {{ $root.Values.global.image.pullPolicy }}
          image: {{ include "eventstreams.image" (list $root "eventstreams-kafka-metrics-reporter" $root.Values.global.image.imageTags.metricsReporterTag) | quote }}
          securityContext:
{{- include "sch.security.securityContext" (list $root $root.sch.chart.securitycontexts.containerWritableFilesystem) | indent 12 }}
          resources:
            limits:
{{ toYaml $root.Values.metricsReporterResources.limits | indent 14 }}
            requests:
{{ toYaml $root.Values.metricsReporterResources.requests | indent 14 }}
          env:
            {{- include "license.accept.env.ref" . | indent 10 }}
            - name: NAMESPACE
              value: {{ $root.Release.Namespace }}
            - name: METRICS_PORT
              value: "{{ $ports.kafka.metrics }}"
            - name: JMX_HOST
              value: "127.0.0.1"
            - name: IBM_JAVA_OPTIONS
              value: "-XX:+UseContainerSupport"
          ports:
            - containerPort: {{ $ports.kafka.metrics }}
              name: metrics-port
          readinessProbe:
            timeoutSeconds: 30
            periodSeconds: 30
            initialDelaySeconds: 90
            failureThreshold: 100
            httpGet:
              port: {{ $ports.kafka.metrics }}
              path: /metrics
          livenessProbe:
            timeoutSeconds: 30
            periodSeconds: 30
            initialDelaySeconds: 120
            failureThreshold: 100
            tcpSocket:
              port: {{ $ports.kafka.metrics }}
          volumeMounts:
            - name: kafka-metrics-config-volume
              mountPath: /etc/kafka-metrics-reporter
###############################################################################
{{ if lt $zoneIndex (sub $zones 1) -}}
---
{{ end -}}
{{ end -}}
{{ end -}}
