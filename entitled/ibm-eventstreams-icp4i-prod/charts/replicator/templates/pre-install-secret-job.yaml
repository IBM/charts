###############################################################################
#
# Licensed Materials - Property of IBM
#
# 5737-H33
#
# (C) Copyright IBM Corp. 2018, 2019  All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
###############################################################################
# Runs a job to create a secret for storing credentials used by geo-replicators
# (Created using a Job rather than a secret.yaml to keep the secret outside of
#  the helm lifecycle and persist it across helm updates and upgrades)
###############################################################################
{{- $features := fromYaml (include "ibm-eventstreams.features" . ) -}}
{{- $replicatorEnabled := index $features "replicator" "enabled" -}}
{{ if $replicatorEnabled -}}
###############################################################################
{{- include "sch.config.init" (list . "ports.sch.chart.config.values") | trim -}}
{{- include "sch.config.init" (list . "securitycontext.sch.chart.config.values") | trim -}}
{{ $namePrefix := .sch.chart.components.replicator.secretCreatorJob.name -}}
{{ $name := include "sch.names.fullCompName" (list . $namePrefix ) -}}
# Component is 'replicator'
{{ $compName := .sch.chart.components.replicator.compName -}}
{{ $labels := include "sch.metadata.labels.standard" (list . $compName) -}}
# Name of the secret to create
{{ $secretNamePrefix := .sch.chart.components.replicator.credentialsSecret.name -}}
{{ $secretName := include "sch.names.fullCompName" (list . $secretNamePrefix) -}}
# Name of the temporary service account that has permission to create secrets
{{ $serviceAccount := .sch.chart.components.essential.preInstallSA.name -}}
{{ $serviceAccountName := include "sch.names.fullCompName" (list . $serviceAccount) -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $name | quote }}
  labels:
{{ $labels | indent 4 }}
  annotations:
    # This needs to run before we deploy, as the replicator
    # deployment depends on the secret this job will create
    "helm.sh/hook": pre-install
    # We don't delete this if it fails, as the logs may be useful to
    # diagnose a failed install
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation
    # The job needs to run after the service account is created
    "helm.sh/hook-weight": "5"
spec:
  activeDeadlineSeconds: 100
  template:
    metadata:
      name: {{ $name | quote }}
      labels:
{{ $labels | indent 8 }}
        job: "pre-install-secret"
    spec:
      serviceAccountName: {{ $serviceAccountName | quote }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
{{- include "sch.security.securityContext" (list . .sch.chart.securitycontexts.pod) | indent 8 }}
      affinity:
{{ include "ibm-eventstreams.customNodeaffinity"  (list .) | indent 8 }}
      restartPolicy: Never
      containers:
        - name: {{ $namePrefix }}
          image: {{ include "eventstreams.image" (list . "eventstreams-kubectl" .Values.global.image.imageTags.kubectlTag) | quote }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          env:
            {{- include "license.accept.env.ref" . | indent 12 }}
          securityContext:
{{- include "sch.security.securityContext" (list . .sch.chart.securitycontexts.containerReadOnlyFilesystem) | indent 12 }}
          command:
            # Create the geo-replicator secret if it doesn't already exist, and
            #  add the labels that will make it consistent with the rest of the
            #  geo-replicator charts
            # If there is already a secret with existing credentials, this will
            #  be left as-is without causing the Job to fail
            - sh
            - -c
            - >
              if kubectl get secrets -n {{ .Release.Namespace }} {{ $secretName }}; then
                echo 'Leaving existing replicator secret'
              else
                kubectl create secret generic {{ $secretName }} -n {{ .Release.Namespace }} --from-literal=georeplicationdestinationclusters="[]" &&
                kubectl label secret {{ $secretName }} -n {{ .Release.Namespace }} --overwrite {{ $labels | replace ": " "=" | replace "\n" " " | replace "\"" "" }} &&
                echo 'Created replicator secret'
              fi
###############################################################################
{{ end -}}
