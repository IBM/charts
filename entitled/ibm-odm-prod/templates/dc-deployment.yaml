{{- if .Values.decisionCenter.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "odm.decisioncenter.fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    run: {{ template "odm.decisioncenter.fullname" . }}
{{ include "odm-additional-labels" (dict "componentName" "decisionCenter" "root" .) | indent 4 }}
spec:
  selector:
    matchLabels:
      release: "{{ .Release.Name }}"
      run: {{ template "odm.decisioncenter.fullname" . }}
  replicas: {{ .Values.decisionCenter.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        run: {{ template "odm.decisioncenter.fullname" . }}
        app: {{ template "name" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: {{ .Release.Name }}
        heritage: "{{ .Release.Service }}"
{{ include "odm-additional-labels" (dict "componentName" "decisionCenter" "root" .) | indent 8 }}
{{ include "odm-annotations" . | indent 6 }}
        productChargedContainers: {{ template "odm.decisioncenter.fullname" . }}
    spec:
{{ include "odm-serviceAccountName" . | indent 6 }}
      {{- if not (empty (.Values.customization.dedicatedNodeLabel))  }}
{{ include "odm-tolerations" . | indent 6 }}
     {{- end }}
{{ include "odm-spec-security-context" . | indent 6 }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          #If you specify multiple nodeSelectorTerms associated with nodeAffinity types,
          #then the pod can be scheduled onto a node if one of the nodeSelectorTerms is satisfied.
          #
          #If you specify multiple matchExpressions associated with nodeSelectorTerms,
          #then the pod can be scheduled onto a node only if all matchExpressions can be satisfied.
          #
          #valid operators: In, NotIn, Exists, DoesNotExist, Gt, Lt
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                {{- if .Values.image.arch }}
                - {{ .Values.image.arch }}
                {{- else }}
                - {{ template "arch" . }}
                {{- end }}
              {{- if not (empty (.Values.customization.dedicatedNodeLabel))  }}
              - key: {{ .Values.customization.dedicatedNodeLabel }}
                operator: "Exists"
              {{- end }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
      volumes:
{{ include "odm-dba-volumes-context" . | indent 6 }}
{{ include "odm-db-ssl-volumes-context" . | indent 6 }}
      {{- if not (empty (.Values.customization.securitySecretRef)) }}
      - name: {{ template "odm-security-secret-volume.fullname" . }}
        secret:
          secretName: {{ .Values.customization.securitySecretRef }}
          items:
            - key: keystore.jks
              path: keystore.jks
            - key: truststore.jks
              path: truststore.jks
      {{- end}}
      {{- if not (empty (.Values.customization.authSecretRef)) }}
      - name: {{ template "odm-auth-secret-volume.fullname" . }}
        secret:
          secretName: {{ .Values.customization.authSecretRef }}
      {{ else }}
      {{- if .Values.oidc.enabled }}
      - name: {{ template "odm-auth-secret-volume.fullname" . }}
        secret:
          secretName: {{ template "odm.oidc-auth-secret.fullname" . }}
      {{- end}}
      {{- end}}
      {{- if not (empty (.Values.externalCustomDatabase.datasourceRef)) }}
      - name: {{ template "odm-custom-secret-ds.fullname" . }}
        secret:
          secretName: {{ .Values.externalCustomDatabase.datasourceRef }}
      {{- end}}
      {{- if not (empty .Values.externalCustomDatabase.driverPvc) }}
      - name: {{ template "odm-driver-volume.fullname" . }}
        persistentVolumeClaim:
          claimName: {{ .Values.externalCustomDatabase.driverPvc }}
      {{- end }}
      - name: {{ template "odm-logging-volume.fullname" . }}
        configMap:
      {{- if not (empty .Values.decisionCenter.loggingRef) }}
          name: {{ .Values.decisionCenter.loggingRef }}
      {{ else }}
          name: {{ template "odm.dc-logging-configmap.fullname" .}}
      {{- end }}
          items:
           - key: dc-logging
             path: logging.xml
      - name: {{ template "odm-jvm-options-volume.fullname" . }}
        configMap:
      {{- if not (empty .Values.decisionCenter.jvmOptionsRef) }}
          name: {{ .Values.decisionCenter.jvmOptionsRef }}
      {{ else }}
          name: {{ template "odm.dc-jvm-options-configmap.fullname" .}}
      {{- end }}
          items:
           - key: dc-jvm-options
             path: jvm.options
      {{- if not (empty .Values.decisionCenter.customlibPvc) }}
      - name: {{ template "odm-dc-customlib-volume.fullname" . }}
        persistentVolumeClaim:
          claimName: {{ .Values.decisionCenter.customlibPvc }}
      {{- end }}
      - name: lib-workarea-volume
        emptyDir: {}
{{ include "odm-trusted-cert-volume" . | indent 6 }}
      initContainers:
      {{- if and (empty .Values.externalCustomDatabase.datasourceRef) (empty .Values.externalDatabase.serverName) }}
      - name: init-dc
{{ include "image.tagOrDigest" (dict "containerName" "dbserver" "containerTag" .Values.internalDatabase.tagOrDigest "root" .) | indent 8  }}
{{ include "odm-security-context" . | indent 8 }}
        command: ['sh','-c', '{{ template "odm-sql-internal-db-check" . }}']
        env:
{{ include "odm-sql-internal-db-check-env" . | indent 8 }}
        resources:
{{ toYaml .Values.decisionCenter.resources | indent 10 }}
      {{- end}}
{{ include "odm-dba-context" . | indent 6 }}
      containers:
      - name: {{ template "odm.decisioncenter.fullname" . }}
{{ include "image.tagOrDigest" (dict "containerName" "odm-decisioncenter" "containerTag" .Values.decisionCenter.tagOrDigest "root" .) | indent 8  }}
{{ include "odm-security-context" . | indent 8 }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        volumeMounts:
{{ include "odm-dba-volumemounts-context" . | indent 8 }}
{{ include "odm-db-ssl-volumemounts-context" . | indent 8 }}
{{ include "odm-trusted-cert-volume-mount" . | indent 8 }}
        {{- if not (empty (.Values.customization.securitySecretRef)) }}
        - name: {{ template "odm-security-secret-volume.fullname" . }}
          readOnly: true
          mountPath: {{ template "odm-security-dir" . }}
        {{- end}}
        {{- if or (not (empty (.Values.customization.authSecretRef))) (and (.Values.oidc.enabled) (empty (.Values.customization.authSecretRef))) }}
        - name: {{ template "odm-auth-secret-volume.fullname" . }}
          mountPath: {{ template "odm-auth-dir" . }}
        {{- end}}
        - name: {{ template "odm-logging-volume.fullname" . }}
          mountPath: {{ template "odm-log-dir" . }}
        - name: {{ template "odm-jvm-options-volume.fullname" . }}
          mountPath: {{ template "odm-jvm-options-dir" . }}
        {{- if not (empty (.Values.externalCustomDatabase.datasourceRef)) }}
        - name: {{ template "odm-custom-secret-ds.fullname" . }}
          mountPath: {{ template "odm-customdatasource-dir" . }}
        {{- end}}
        {{- if not (empty (.Values.externalCustomDatabase.driverPvc)) }}
        - name: {{ template "odm-driver-volume.fullname" . }}
          mountPath: {{ template "odm-driver-dir" . }}
        {{- end}}
        {{- if not (empty .Values.decisionCenter.customlibPvc) }}
        - name: {{ template "odm-dc-customlib-volume.fullname" . }}
          mountPath: {{ template "odm-dc-customlib-dir" . }}
        {{- end }}
        - name: lib-workarea-volume
          mountPath: /opt/ibm/wlp/output/defaultServer/workarea
        ports:
        {{- if .Values.service.enableTLS }}
        - name: dc-port
          containerPort: 9453
        {{ else }}
        - name: dc-port
          containerPort: 9060
        {{- end }}
        readinessProbe:
          httpGet:
            {{- if .Values.service.enableTLS }}
            scheme: HTTPS
            {{- else }}
            scheme: HTTP
            {{- end }}
            # decisioncenter-api start as last
            path: {{ .Values.decisionCenter.contextRoot }}/decisioncenter/healthCheck
            port: dc-port
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        livenessProbe:
          httpGet:
            {{- if .Values.service.enableTLS }}
            scheme: HTTPS
            {{- else }}
            scheme: HTTP
            {{- end }}
            # decisioncenter is the most important to check
            path: {{ .Values.decisionCenter.contextRoot }}/decisioncenter/healthCheck
            port: dc-port
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        env:
          {{- if not (empty (.Values.customization.securitySecretRef)) }}
          - name: KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.customization.securitySecretRef }}"
                key: {{ template "odm-keystore-password-key" . }}
          - name: TRUSTSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{ .Values.customization.securitySecretRef }}"
                key: {{ template "odm-truststore-password-key" . }}
          {{- end }}
{{ include "odm-db-config" . | indent 10 }}
{{ include "odm-metering-config" . | indent 10 }}
          - name: "DECISIONSERVERCONSOLE_NAME"
            value: {{ template "odm.decisionserverconsole.fullname" . }}
          - name: "DECISIONSERVERCONSOLE_PORT"
            value: "9443"
          - name: "DECISIONRUNNER_NAME"
            value: {{ template "odm.decisionrunner.fullname" . }}
          - name: "DECISIONRUNNER_PORT"
            value: "9443"
          - name: "DC_PERSISTENCE_LOCALE"
            value: "{{ .Values.decisionCenter.persistenceLocale}}"
          {{- if .Values.service.enableTLS }}
          - name: "ENABLE_TLS"
            value: "true"
          {{- end }}
          - name: "RELEASE_NAME"
            value: {{ .Release.Name }}
          {{- if and (not (empty .Values.decisionCenter.extendRoleMapping )) (.Values.decisionCenter.extendRoleMapping) }}
          - name: "DC_ROLE_GROUP_MAPPING"
            value: "true"
          {{- end }}
          {{- if (not (empty .Values.decisionCenter.contextRoot )) }}
          - name: "ODM_CONTEXT_ROOT"
            value: "{{ .Values.decisionCenter.contextRoot}}"
          {{- end }}
          {{- if (not (empty .Values.decisionCenter.refererList )) }}
          - name: "DC_REFERER_LIST"
            value: "{{ .Values.decisionCenter.refererList}}"
          {{- end }}
          {{- if (not (empty .Values.decisionServerConsole.contextRoot )) }}
          - name: "DECISIONSERVERCONSOLE_CONTEXT_ROOT"
            value: "{{ .Values.decisionServerConsole.contextRoot}}"
          {{- end }}
          {{- if (not (empty .Values.decisionRunner.contextRoot )) }}
          - name: "DECISIONRUNNER_CONTEXT_ROOT"
            value: "{{ .Values.decisionRunner.contextRoot}}"
          {{- end }}
{{ include "odm-db-ssl-env-context" . | indent 10 }}
{{ include "odm-kubeVersion" . | indent 10 }}
{{ include "odm-oidc-context" . | indent 10 }}
{{ include "odm-dba-env-context" . | indent 10 }}
{{ include "odm-dba-production" . | indent 10 }}
        resources:
{{ toYaml .Values.decisionCenter.resources | indent 10 }}
{{ include "odm-pullsecret-spec" . | indent 6 }}
{{- end }}
