{{- if and (empty .Values.externalDatabase.serverName) (empty .Values.externalCustomDatabase.datasourceRef) }}
{{- if semverCompare ">=1.11.1" .Capabilities.KubeVersion.GitVersion }}
apiVersion: apps/v1
{{- else if .Capabilities.APIVersions.Has "apps/v1beta2" }}
apiVersion: apps/v1beta2
{{- else }}
apiVersion: apps/v1beta1
{{- end }}
kind: Deployment
metadata:
  name: {{ template "odm.dbserver.fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    run: {{ template "odm.dbserver.fullname" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
      release: {{ .Release.Name }}
      run: {{ template "odm.dbserver.fullname" . }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        run: {{ template "odm.dbserver.fullname" . }}
        app: {{ template "name" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: {{ .Release.Name }}
        heritage: "{{ .Release.Service }}"
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsUser: 999
        fsGroup: 999
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          #If you specify multiple nodeSelectorTerms associated with nodeAffinity types,
          #then the pod can be scheduled onto a node if one of the nodeSelectorTerms is satisfied.
          #
          #If you specify multiple matchExpressions associated with nodeSelectorTerms,
          #then the pod can be scheduled onto a node only if all matchExpressions can be satisfied.
          #
          #valid operators: In, NotIn, Exists, DoesNotExist, Gt, Lt
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                {{- if .Values.image.arch }}
                - {{ .Values.image.arch }}
                {{- else }}
                - {{ template "arch" . }}
                {{- end }}
      {{- if .Values.internalDatabase.persistence.enabled }}
      volumes:
      - name: {{ template "fullname" . }}-volume
        persistentVolumeClaim:
          claimName: {{ template "odm.persistenceclaim.fullname" . }}
      initContainers:
      - name: init-chmod-data
        image: {{ template "odm.repository.name" . }}/dbserver:{{ .Values.image.tag }}{{ template "platform" . }}
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        command:
          - sh
          - -c
          - |
            chown -R 999:999 /var/lib/postgresql/pgdata
            if [ -d /var/lib/postgresql/pgdata ]; then
              chmod  0777 /var/lib/postgresql/pgdata;
            fi
        securityContext:
          runAsUser: {{ .Values.internalDatabase.securityContext.runAsUser }}
        volumeMounts:
        - name: {{ template "fullname" . }}-volume
          mountPath: /var/lib/postgresql/pgdata
      {{- end }}
      containers:
      - name: {{ template "odm.dbserver.fullname" . }}
        image: {{ template "odm.repository.name" . }}/dbserver:{{ .Values.image.tag }}{{ template "platform" . }}
        securityContext:
          runAsUser: 999
          runAsNonRoot: true
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: POSTGRES_DB
          value: "{{ .Values.internalDatabase.databaseName }}"
        {{- if not (empty .Values.internalDatabase.secretCredentials) }}
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: {{ .Values.internalDatabase.secretCredentials }}
              key: db-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.internalDatabase.secretCredentials }}
              key: db-password
        {{- else }}
        - name: POSTGRES_USER
          value: "{{ .Values.internalDatabase.user }}"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "odm.secret.fullname" . }}
              key: db-password
        {{- end }}
        - name: PGDATA
          value:  "/var/lib/postgresql/pgdata"
        - name: "KubeVersion"
          value: "{{ .Capabilities.KubeVersion.GitVersion }}"
        ports:
        - name: db-port
          containerPort: 5432
        readinessProbe:
          tcpSocket:
            port: 5432
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        livenessProbe:
          tcpSocket:
            port: db-port
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        {{- if .Values.internalDatabase.persistence.enabled }}
        volumeMounts:
          - name: {{ template "fullname" . }}-volume
            mountPath: /var/lib/postgresql/
            subPath : pgdata
        {{- end }}
        resources:
{{ toYaml .Values.internalDatabase.resources | indent 10 }}
      {{- if (not (empty .Values.image.pullSecrets )) }}
      imagePullSecrets:
      - name: {{ .Values.image.pullSecrets }}
         {{- end }}
{{- end }}
