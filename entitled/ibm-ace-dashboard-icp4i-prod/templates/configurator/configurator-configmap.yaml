###############################################################################
#  Licensed Materials - Property of IBM
#
# 5737-I89
# Â© Copyright IBM Corp. 2019 All Rights Reserved
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
###############################################################################
#  Script run by create secrets job
#
###############################################################################

{{- include "sch.config.init" (list . "ibm-ace.sch.chart.config.values") }}
{{- $cfgMapName := include "sch.names.fullCompName" (list . "create-configurator-config") }}
{{- $labels := include "sch.metadata.labels.standard" (list . "config") }}
{{- $fullName := include "sch.names.fullName" (list .) }}
{{- $secretName := include "sch.names.fullCompName" (list . "is-secret")}}
{{- $configMapName := include "sch.names.fullCompName" (list . "env")}}
{{- $routeName := include "sch.names.routeName" (list . .Release.Name .Release.Namespace "ui") }}
{{- $isServiceName := include "sch.names.fullCompName" (list . "is")  }}
{{- $oidcName := include "sch.names.fullCompName" (list . "oidc") }}

kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ $cfgMapName }}
  labels:
{{ $labels | indent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation
data:
  generateConfig.sh: |
    #!/bin/bash -ex

    SECRET_ARGS=
    CONFIG_ARGS=

    ######################################################
    # Set up configuration files
    ######################################################


    cat <<EOT >> ./dashboardcert.cnf
    [req]
    distinguished_name = req_distinguished_name
    prompt             = no

    [req_distinguished_name]
    CN                 = {{ $fullName }}
    EOT

    cat <<EOT >> ./rootcert.cnf
    [req]
    distinguished_name = req_distinguished_name
    prompt             = no

    [req_distinguished_name]
    CN                 = ace-control-ca
    EOT


    ######################################################
    # Generate rootcert.crt
    ######################################################

    echo "Generating CA"
    # Generate public/private keypair to form basis of the Root CA
    openssl genpkey -algorithm RSA -out rootkey.key -pkeyopt rsa_keygen_bits:2048
    # Create a certificate signing request (CSR)
    openssl req -new -key rootkey.key -out rootreq.csr -config rootcert.cnf
    # Sign the CSR with the private key
    openssl x509 -req -days 7305 -in rootreq.csr -signkey rootkey.key -out rootcert.crt

    ######################################################
    # Generate contentServer certificate and private key
    ######################################################

    echo "Generating private key and cert for content server"
    # Generate public/private keypair
    openssl genpkey -algorithm RSA -out content.key -pkeyopt rsa_keygen_bits:2048
    # Create a certificate signing request (CSR)
    openssl req -new -key content.key -out content.csr -config dashboardcert.cnf
    # Sign the CSR using the rootcert.crt and rootkey.key to genereate a certificate
    openssl x509 -req -days 7305 -in content.csr -CA rootcert.crt -CAkey rootkey.key -CAserial rootcert.srl -CAcreateserial -out content.crt

    SECRET_ARGS="${SECRET_ARGS} --from-file=contentServerCACert=./rootcert.crt"
    SECRET_ARGS="${SECRET_ARGS} --from-file=contentServerPrivateKey=./content.key "
    SECRET_ARGS="${SECRET_ARGS} --from-file=contentServerCert=./content.crt "

    ######################################################
    # Generate uuid v4 apikey
    ######################################################

    SECRET_ARGS="${SECRET_ARGS}  --from-literal=ibmAceControlApiKey=$(uuid -v4)"
    {{- if .Values.ssoEnabled }}
    ######################################################
    # Cluster information
    ######################################################

    IDENTITY_URL=`kubectl get cm ibmcloud-cluster-info -n kube-public -o jsonpath="https://{.data.cluster_address}:{.data.cluster_router_https_port}"`
    MASTER_IP=`kubectl get cm ibmcloud-cluster-info -n kube-public -o=jsonpath="{.data.cluster_address}" `
    CLUSTER_NAME=`kubectl get cm ibmcloud-cluster-info -n kube-public -o jsonpath="{.data.cluster_name}"`

    echo "IDENTITY_URL = ${IDENTITY_URL}"
    echo "MASTER_IP = ${MASTER_IP}"
    echo "CLUSTER_NAME = ${CLUSTER_NAME}"

    CONFIG_ARGS="${CONFIG_ARGS} --from-literal=CLUSTER_EXTERNAL_URL=$IDENTITY_URL"
    CONFIG_ARGS="${CONFIG_ARGS} --from-literal=CLUSTER_EXTERNAL_IP=$MASTER_IP"

    ######################################################
    # CRN information
    ######################################################

    ACE_DASHBOARD_CRN="crn:v1:icp:private:ace:$CLUSTER_NAME:n/{{ .Release.Namespace }}:r/{{ .Release.Name }}::"
    ACE_DASHBOARD_NAMESPACE_CRN="crn:v1:icp:private:k8:$CLUSTER_NAME:n/{{ .Release.Namespace }}:::"

    CONFIG_ARGS="${CONFIG_ARGS} --from-literal=ACE_DASHBOARD_CRN=${ACE_DASHBOARD_CRN}"
    CONFIG_ARGS="${CONFIG_ARGS} --from-literal=ACE_DASHBOARD_NAMESPACE_CRN=${ACE_DASHBOARD_NAMESPACE_CRN}"
    {{- end }}
    ######################################################
    # Dashboard Route URL
    ######################################################
    echo "Creating route"
    cat <<EOT >> ./route.yaml
    apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      name: {{ $routeName }}
      labels:
{{ $labels | indent 8 }}
      annotations:
        router.openshift.io/cookie_name: ace-dashboard-affinity-cookie
        icp4i.ibm.com/release: {{ .Release.Name }}
        icp4i.ibm.com/native-header: "true"
    spec:
      port:
        targetPort: controlui
      to:
        kind: Service
        name: {{ $fullName }}
      tls:
        termination: reencrypt
        inseureEdgeTerminationPolicy: Redirect
    EOT

    oc apply -f route.yaml
    /usr/local/bin/kubectl label route {{ $routeName }} --overwrite=true  release={{ .Release.Name }}

    ######################################################
    # Hostname
    ######################################################
    export ACE_INGRESS_HOSTNAME=$(kubectl get routes {{ include "sch.names.routeName" (list . .Release.Name .Release.Namespace "ui") }} -o jsonpath="{.spec.host}")
    CONFIG_ARGS="${CONFIG_ARGS} --from-literal=ACE_INGRESS_HOSTNAME=${ACE_INGRESS_HOSTNAME}"

    ######################################################
    # Create the Kubernetes secret resource
    ######################################################

    # Create secret if it does not exist (e.g. install vs upgrade)
    if [ -n "$(kubectl get secret {{ $fullName }})" ]; then
      echo "Secret already exists, skipping creation"
    else
      echo "Creating secret as it doesn't exist"
      # Create secret
      /usr/local/bin/kubectl create secret generic {{ $fullName }} ${SECRET_ARGS} --dry-run -o yaml | kubectl apply -f -
      # Set secret label
      /usr/local/bin/kubectl label secret {{ $fullName }} release={{ .Release.Name }} --overwrite
    fi

    echo "Creating configmap"
    # Create secret
    /usr/local/bin/kubectl create configmap {{ $configMapName }} ${CONFIG_ARGS} --dry-run -o yaml | kubectl apply -f -
    # Set secret label
    /usr/local/bin/kubectl label configmap {{ $configMapName }} release={{ .Release.Name }} --overwrite

    ######################################################
    # Create oidc job
    ######################################################
    {{- if .Values.ssoEnabled }}
    cat <<EOT >> ./oidc.yaml
    apiVersion: oidc.security.ibm.com/v1
    kind: Client
    metadata:
      name: {{ $oidcName }}
      namespace: {{ .Release.Namespace }}
      labels:
{{ $labels | indent 8 }}
    spec:
      secret: {{ $oidcName }}
      oidcLibertyClient:
        redirect_uris:
        - https://$ACE_INGRESS_HOSTNAME/oauth/callback
        trusted_uri_prefixes:
        - https://$ACE_INGRESS_HOSTNAME
        post_logout_redirect_uris:
        - https://$ACE_INGRESS_HOSTNAME
    EOT
    echo "Contents of oidc.yaml"
    cat ./oidc.yaml
    echo Applying
    /usr/local/bin/kubectl  apply -f ./oidc.yaml
    {{- end }}
