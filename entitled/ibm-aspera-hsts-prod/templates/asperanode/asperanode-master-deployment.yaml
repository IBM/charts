{{- include "sch.config.init" (list . "hsts.sch.chart.config.values") -}}
{{- $component := .sch.chart.components.asperanode.deployment.master -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "sch.names.fullCompName" (list . $component) | quote }}
  labels:
{{  include "sch.metadata.labels.standard" (list . $component) | indent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
{{  include "sch.metadata.labels.standard" (list . $component) | indent 6 }}
  template:
    metadata:
      annotations:
        checksum/aspera-conf-configmap: {{ include (print $.Template.BasePath "/asperanode/asperanode-configmap.yaml") . |  sha256sum | trunc 63 }}
        checksum/asconfigurator: {{ tpl (toYaml .Values.asperaconfig) . | sha256sum | trunc 63 }}
        checksum/server-secret: {{ tpl (toYaml .Values.asperanode.serverSecret) . | sha256sum | trunc 63 }}
        {{- if .Values.productionDeployment }}
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.meteringProd) | indent 8 }}
        {{- else }}
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.meteringNonProd) | indent 8 }}
        {{- end }}
      labels:
{{  include "sch.metadata.labels.standard" (list . $component) | indent 8 }}
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 8000
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      affinity:
{{- include "sch.affinity.nodeAffinity" (list .) | indent 8 }}
      volumes:
{{ include "hsts.spec.volumes.common" . | indent 6 }}
      initContainers:
{{ include "hsts.spec.init.asperacert" . | indent 6 }}
{{ include "hsts.spec.init.probe.redis" . | indent 6 }}
{{ include "hsts.spec.init.asperaconf" (list . ) | indent 6 }}
      - name: db-update
        image: {{ include "hsts.image.asperanode" . }}
        imagePullPolicy: {{ .Values.asperanode.image.pullPolicy }}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 8000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: aspera-conf
          mountPath: "/opt/aspera/etc/aspera.conf"
          subPath: aspera.conf
        command:
          - /bin/bash
          - "-c"
          - /opt/aspera/bin/asnodeadmin --db-update
{{  include "hsts.resources.static.small" . | indent 8 }}
      - name: set-master
        image: {{ include "hsts.image.probe" . }}
        imagePullPolicy: {{ .Values.asperanode.image.pullPolicy }}
        command: ['/bin/bash', '-c', 'redis-cli -h {{ template "hsts.hosts.redis" . }} -p {{ template "hsts.ports.redis" . }} set skv:clmaster:str $NODE_ID']
        securityContext:
          privileged: false
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 8000
          capabilities:
            drop:
            - ALL
        env:
          - name: NODE_ID
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
{{  include "hsts.resources.static.small" . | indent 8 }}
      - name: add-node-users
        image: {{ include "hsts.image.asperanode" . }}
        imagePullPolicy: {{ .Values.asperanode.image.pullPolicy }}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 8000
          capabilities:
            drop:
            - ALL
        envFrom:
          - secretRef:
              name: {{ include "hsts.secret.nodeAdmin" . }}
        volumeMounts:
        - name: aspera-conf
          mountPath: "/opt/aspera/etc/aspera.conf"
          subPath: aspera.conf
        command:
          - /bin/bash
          - "-c"
          - |
            if /opt/aspera/bin/asnodeadmin -l | tail -n +4 | head -n -1 | awk '{ print $1 }' | grep "^$NODE_USER$" ; then
                echo "User $(NODE_USER) already exists in redis database"
            else
                /opt/aspera/bin/asnodeadmin -au "$(NODE_USER)" -p "$(NODE_PASS)" -x xfer
            fi
{{  include "hsts.resources.static.small" . | indent 8 }}
{{ include "hsts.spec.init.probe.aej" . | indent 6 }}
      containers:
{{ include "hsts.spec.container.nodelog" . | indent 6 }}
{{ include "hsts.spec.container.asperanode" . | indent 6 }}
