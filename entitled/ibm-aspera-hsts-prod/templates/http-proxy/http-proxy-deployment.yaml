{{- include "sch.config.init" (list . "hsts.sch.chart.config.values") -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.httpProxy.compName ) | quote }}
  labels:
{{  include "sch.metadata.labels.standard" (list . .sch.chart.components.httpProxy.compName) | indent 4 }}
spec:
  selector:
    matchLabels:
{{  include "sch.metadata.labels.standard" (list . .sch.chart.components.httpProxy.compName ) | indent 6 }}
  replicas: {{ .Values.httpProxy.replicas }}
  template:
    metadata:
      annotations:
        checksum/http-proxy-configmap: {{ include (print $.Template.BasePath "/http-proxy/http-proxy-configmap.yaml") . |  sha256sum | trunc 63 }}
        {{- if .Values.productionDeployment }}
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.meteringProd) | indent 8 }}
        {{- else }}
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.meteringNonProd) | indent 8 }}
        {{- end }}
      labels:
{{  include "sch.metadata.labels.standard" (list . .sch.chart.components.httpProxy.compName ) | indent 8 }}
        service: {{ include "sch.names.fullCompName" (list . .sch.chart.components.httpProxy.compName ) | quote }}
    spec:
      affinity:
{{- include "sch.affinity.nodeAffinity" (list .) | indent 8 }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: service
                  operator: In
                  values:
                  - {{ include "sch.names.fullCompName" (list . .sch.chart.components.httpProxy.compName ) | quote }}
              topologyKey: "kubernetes.io/hostname"
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 8000
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      initContainers:
{{ include "hsts.spec.init.probe.asperanode" . | indent 6 }}
{{ include "hsts.spec.init.probe.nodedLoadbalancer" . | indent 6 }}
      containers:
      - name: http-proxy
        securityContext:
          privileged: false
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 8000
          capabilities:
            drop:
            - ALL
        image: {{ include "hsts.image.httpProxy" . }}
        imagePullPolicy: {{ .Values.httpProxy.image.pullPolicy }}
        resources:
          requests:
            memory: 50Mi
            cpu: '.005'
          limits:
            memory: 150Mi
            cpu: '.05'
        ports:
        - name: http-proxy-port
          containerPort: 8000
        readinessProbe:
          initialDelaySeconds: 2
          httpGet:
            path: /ping
            port: http-proxy-port
            scheme: HTTPS
        livenessProbe:
          initialDelaySeconds: 20
          httpGet:
            path: /ping
            port: http-proxy-port
            scheme: HTTPS
        envFrom:
        - configMapRef:
            name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.httpProxy.compName ) | quote }}
        volumeMounts:
        - name: cert
          mountPath: "/opt/aspera/etc/aspera_server_key.pem"
          subPath: tls.key
        - name: cert
          mountPath: "/opt/aspera/etc/aspera_server_cert.pem"
          subPath: tls.crt
      volumes:
      - name: cert
        secret:
          secretName: {{ include "hsts.cert" . }}
