###############################################################################
#
# Licensed Materials - Property of IBM
#
# 5737-H33
#
# (C) Copyright IBM Corp. 2018, 2019  All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
###############################################################################
# Defines the index manager deployment
###############################################################################
{{ if eq .Values.license "accept" -}}
{{- if .Values.messageIndexing.messageIndexingEnabled }}
{{- include "sch.config.init" (list . "sch.chart.config.values") -}}
{{ $namePrefix := .sch.chart.components.indexmgr.deployment.name -}}
{{ $name := include "sch.names.fullCompName" (list . $namePrefix ) -}}
{{ $compName := .sch.chart.components.indexmgr.compName -}}
{{ $labels := include "sch.metadata.labels.standard" (list . $compName (dict "serviceSelector" $namePrefix)) -}}
# Service Account
{{ $serviceAccount := .sch.chart.components.indexmgr.serviceAccount.name -}}
{{ $serviceAccountName := include "sch.names.fullCompName" (list . $serviceAccount ) -}}
{{ $serviceNamePrefix := .sch.chart.components.indexmgr.service.name -}}
{{ $serviceName := include "sch.names.fullCompName" (list . $serviceNamePrefix) -}}
{{ $elasticServicePrefix := .sch.chart.components.elasticSearch.service.name -}}
{{ $elasticServiceName := include "sch.names.fullCompName" (list . $elasticServicePrefix) -}}
{{ $elasticStsNamePrefix := .sch.chart.components.elasticSearch.statefulSet.name -}}
{{ $elasticStsName := include "sch.names.statefulSetName" (list . $elasticStsNamePrefix) -}}
# import port definitions
{{- include "sch.config.init" (list . "ports.sch.chart.config.values") | trim -}}
{{ $ports := .sch.config.ports }}
# Default user for security context
{{ $defaultUser := .sch.securityContext.defaultUser -}}
# TLS Proxy config map name
{{ $tlsConfigMap := .sch.chart.components.indexmgr.configMap.name -}}
{{ $tlsConfigMapName := include "sch.names.fullCompName" (list . $tlsConfigMap ) }}
# Secrets with the certificates to use
{{ $proxySecret := .sch.chart.components.proxy.secret.name -}}
{{ $proxySecretName := include "sch.names.fullCompName" (list . $proxySecret ) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ $name }}"
  labels:
{{ $labels | indent 4 }}
    node: "0"
spec:
  replicas: 1
  selector:
    matchLabels:
      release: {{ .Release.Name | quote }}
      serviceSelector: {{ $namePrefix | quote }}
  template:
    metadata:
      namespace: {{ include "restrict.namespace" (list . .Release.Namespace) }}
      labels:
{{ $labels | indent 8 }}
        node: "0"
      annotations:
{{ include "metering" (list . ) | indent 8 }}
    spec:
      serviceAccountName: {{ $serviceAccountName | quote }}
      {{- if .Values.global.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.global.image.pullSecret }}
      {{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ $defaultUser }}
      volumes:
      {{- include "license.accept.ref" . | indent 6 }}
        - name: tlsproxy-config-map
          configMap:
            name: {{ $tlsConfigMapName }}
        - name: proxy-certs-volume
          secret:
            secretName: {{ $proxySecretName }}
            items:
            - key: podtls.cert
              path: ca-certificates.crt
      affinity:
{{ include "customNodeaffinity"  (list .) | indent 8 }}
      containers:
        # tls proxy sidecar - encrypts traffic to elastic search
        - name: tls-proxy
          image: {{ include "eventstreams.image" (list . "eventstreams-proxy" .Values.global.image.imageTags.proxyTag) | quote }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: {{ $defaultUser }}
            capabilities:
              drop:
              - ALL
          resources:
            requests:
{{ toYaml .Values.global.resources.tlsProxy.requests | indent 14 }}
            limits:
{{ toYaml .Values.global.resources.tlsProxy.limits | indent 14 }}
          env:
            {{- include "license.accept.env.ref" . | indent 10 }}
            - name: ES_CONFIG_PATH
              value: {{ .sch.chart.components.indexmgr.tlsConfigPath | quote }}
            - name: HEALTH_PORT
              value: {{ $ports.proxy.altHealth | quote }}
            - name: READY_PORT
              value: {{ $ports.proxy.altHealth | quote }}
            - name: TLS_CERT
              valueFrom:
                secretKeyRef:
                  name: {{ $proxySecretName }}
                  key: "podtls.cert"
            - name: TLS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $proxySecretName }}
                  key: "podtls.key"
          volumeMounts:
            - name: proxy-certs-volume
              mountPath: /etc/ssl/certs
              readOnly: true
            - name: tlsproxy-config-map
              mountPath: {{ .sch.chart.components.indexmgr.tlsConfigPath | quote }}
              readOnly: true
          ports:
            - containerPort: {{ $ports.proxy.altHealth }}
              name: proxy-health
            - containerPort: {{ $ports.indexmgr.api }}
              name: api
            - containerPort: {{ $ports.indexmgr.metrics }}
              name: metrics
          readinessProbe:
            httpGet:
              path: "/ready"
              port: {{ $ports.proxy.altHealth }}
            initialDelaySeconds: 1
            periodSeconds: 5
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: "/live"
              port: {{ $ports.proxy.altHealth }}
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 15
        - name: index-manager
          image: {{ include "eventstreams.image" (list . "eventstreams-index-manager" .Values.global.image.imageTags.indexmgrTag) | quote }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          resources:
            limits:
{{ toYaml .Values.global.resources.indexManager.limits | indent 14 }}
            requests:
{{ toYaml .Values.global.resources.indexManager.requests | indent 14 }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: {{ $defaultUser }}
            capabilities:
              drop:
              - ALL
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - cd
            failureThreshold: 2
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: {{ $ports.indexmgr.api }}
              {{- if eq .Values.global.security.tlsInternal "enabled" }}
              scheme: HTTPS
              {{- else }}
              scheme: HTTP
              {{- end }}
              httpHeaders:
                - name: Accept
                  value: '*/*'
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 15
          env:
            {{- include "license.accept.env.ref" . | indent 10 }}
            - name: ELASTIC_ENDPOINT
              value: "127.0.0.1:10000"
            - name: ELASTIC_HOSTS
              value: "127.0.0.1:10001,127.0.0.1:10002"
            - name: ELASTIC_MEMORY
              value:
                "{{ regexReplaceAll "i" .Values.messageIndexing.resources.limits.memory "b" }}"
            - name: REQUEST_TIMEOUT
              value: "30"
            - name: TRACE_LEVEL
              value: "0"
            - name: API_PORT
              value: "{{ $ports.indexmgr.apiInternal }}"
            - name: METRICS_PORT
              value: "{{ $ports.indexmgr.metricsInternal }}"
            - name: SPLIT_BRAIN_CHECK_INTERVAL
              value: "60"
            - name: UPDATE_POLL_INTERVAL
              value: "1"
            - name: INDEX_CREATION_RETRY_TIME
              value: "1"
            - name: INDEX_CREATION_RETRY_COUNT
              value: "10"
            - name: TOPIC_DELETION_POLL_INTERVAL
              value: "5"
            - name: ROLLOVER_INTERVAL
              value: "30"
{{- end -}}
{{- end -}}
