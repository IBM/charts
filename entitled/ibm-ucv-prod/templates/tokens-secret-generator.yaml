apiVersion: v1
kind: ServiceAccount
metadata:
  name: ucv-tokens-gen
  labels:
    {{- include "ucv.labels" . | nindent 4 }}
imagePullSecrets:
  {{- include "ucv.imagePullSecrets" . | nindent 2 }}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ucv-tokens-gen
  labels:
    {{- include "ucv.labels" . | nindent 4 }}
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["list", "create", "delete"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ucv-tokens-gen
  labels:
    {{- include "ucv.labels" . | nindent 4 }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ucv-tokens-gen
subjects:
- kind: ServiceAccount
  name: ucv-tokens-gen
  namespace: {{ .Release.Namespace }}

---

apiVersion: batch/v1
kind: Job
metadata:
  name: tokens-secret-generator
  labels:
    {{- include "ucv.labels" . | nindent 4 }}
spec:
  template:
    metadata:
      labels:
        {{- $vars := merge (dict) . -}}
        {{- $_ := set $vars "ucvService" "tokens-secret-generator" -}}
        {{- include "ucv.specTemplateLabels" $vars | nindent 8 }}
      annotations:
        {{- include "ucv.productAnnotations" . | nindent 8 }}
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      imagePullSecrets:
        {{- include "ucv.imagePullSecrets" . | nindent 8 }}
      affinity:
        {{- include "ucv.nodeAffinity" . | nindent 8 }}
      restartPolicy: Never
      serviceAccountName: ucv-tokens-gen
      containers:
        - name: tokens-secret-generator
          image: 'ibmcom/opencontent-common-utils:1.1.2'
          imagePullPolicy: IfNotPresent
          command:
          - /bin/bash
          - -c
          - |
              SECRET_NAME="{{.Values.secrets.tokens}}"
              EXISTING_SECRET=$(kubectl get secret ${SECRET_NAME} -o name 2>&1)
              if [[ "$EXISTING_SECRET" == "secret/${SECRET_NAME}" ]]; then
                echo "Secret '${SECRET_NAME}' already exists"
                exit 0
              fi
              echo "Creating secret '${SECRET_NAME}'..."
              set -e
              cat <<EOF | kubectl create -f -
                apiVersion: v1
                kind: Secret
                type: Opaque
                metadata:
                  name: '${SECRET_NAME}'
                  labels:
                    {{- include "ucv.labels" . | nindent 20 }}
                stringData:
                  apiToken: $(openssl rand -hex 44)
                  cipherToken: $(openssl rand -hex 16)
                  hmacKey: $(openssl rand -hex 16)
                
              EOF
          resources:
            {{- include "ucv.resources" . | nindent 12 }}
          securityContext:
            {{- include "ucv.securityContext" . | nindent 12 }}
          livenessProbe:
            {{- $port := dict "ucvLivenessPort" 9090 }}
            {{- include "ucv.livenessProbe" $port | nindent 12 }}
          readinessProbe:
            {{- $port := dict "ucvReadinessPort" 9090 }}
            {{- include "ucv.readinessProbe" $port | nindent 12 }}