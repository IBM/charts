{{- include "sch.config.init" (list . "sch.chart.tts_customization.config.values") -}}
{{- $compName :=  .sch.chart.components.tts_customization.name -}}

apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: {{ include "sch.names.fullCompName" (list . $compName) }}-sql
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 4 }}
data:
  tts-customization.sql: "

    CREATE DATABASE \"tts-customization\"
       WITH
       OWNER = stolon
       ENCODING = 'UTF8'
       LC_COLLATE = 'en_US.UTF-8'
       LC_CTYPE = 'en_US.UTF-8'
       TABLESPACE = pg_default
       CONNECTION LIMIT = -1;

    \\c tts-customization;

    CREATE TABLE IF NOT EXISTS customizations (
	     customization_id uuid NOT NULL,
	     owner uuid NOT NULL,
	     created_on timestamp with time zone NOT NULL,
	     last_modified timestamp with time zone NOT NULL,
	     name text NOT NULL,
	     customization_language character varying(32) NOT NULL,
	     description text,
	     CONSTRAINT customizations_pkey PRIMARY KEY (customization_id)
    );

    CREATE TABLE IF NOT EXISTS words
    (
	     customization_id uuid NOT NULL,
	     word text NOT NULL,
	     part_of_speech text,
	     original_pronunciation text NOT NULL,
	     validated_pronunciation text NOT NULL,
	     gdpr_customer_id text,
	     CONSTRAINT words_pkey PRIMARY KEY (customization_id, word),
	     CONSTRAINT words_customization_id_fkey FOREIGN KEY (customization_id) REFERENCES public.customizations (customization_id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE CASCADE
    );

    CREATE INDEX IF NOT EXISTS customizations_owner_idx ON customizations USING btree (owner ASC NULLS LAST);
    CREATE INDEX IF NOT EXISTS words_customization_id_idx ON words USING btree (customization_id ASC NULLS LAST);
    CREATE INDEX IF NOT EXISTS words_word_idx ON words USING btree (word ASC NULLS LAST);
    CREATE INDEX IF NOT EXISTS words_gdpr_customer_id_idx ON words USING btree (gdpr_customer_id ASC NULLS LAST);
  "
