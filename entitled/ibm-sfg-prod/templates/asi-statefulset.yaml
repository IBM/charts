# (C) Copyright 2019-2020 Syncsort Incorporated. All rights reserved.

{{ include "sch.config.init" (list . "b2bi.sch.chart.config.values") }}
{{- $resourcesPVCName := .Values.appResourcesPVC.name }}
{{- $logsPVCName := .Values.appLogsPVC.name }}
{{- $documentsPVCName := .Values.appDocumentsPVC.name }}
{{- $defaultAsiIngressPort := 80 }}
{{- $defaultApiIngressPort := 80 }}
{{- $asiIngressProtocol := "http" }}
{{- $apiIngressProtocol := "http" }}
{{- $externalAccessPort := .Values.api.externalAccess.port }}
{{- $myFgSystemConfig := "-Dapp.name=API_GATEWAY -Dzuul.sslHostnameValidationEnabled=false -Dlog4j.configuration=/ibm/b2bi/install/properties/cfxgateway_cfxlog_config.xml -Dspring.config.location=/ibm/b2bi/install/properties/gateway_application.yml -Dmyfg.temp.path=/ibm/b2bi/install/documents/" }}
{{- if and (.Values.ingress.enabled) (.Values.asi.ingress.internal.tls.enabled) }}
  {{- $defaultAsiIngressPort = 443 }}
  {{- $asiIngressProtocol = "https" }}
{{- end }}
{{- if and (.Values.ingress.enabled) (.Values.api.ingress.internal.tls.enabled) }}
  {{- $defaultApiIngressPort = 443 }}
  {{- $apiIngressProtocol = "https" }} 
{{- end }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "sch.names.statefulSetName" (list . .sch.chart.components.asiServer.name) | quote }}
  labels:
    tier: {{ .Release.Name }}-backend
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.asiServer.name) | indent 4 }}
{{- if .Values.asi.extraLabels }}
{{ toYaml .Values.asi.extraLabels | indent 4 }}
{{- end }}
spec:
  replicas: {{ .Values.asi.replicaCount }}
  selector:
    matchLabels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.asiServer.name) | indent 6 }}
  serviceName: {{ include "sch.names.fullCompName" (list . .sch.chart.components.headlessService.name) | quote }}
  template:
    metadata:
      labels:
        tier: {{ .Release.Name }}-backend
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.asiServer.name) | indent 8 }}
{{- if .Values.asi.extraLabels }}
{{ toYaml .Values.asi.extraLabels | indent 8 }}
{{- end }}          
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering .sch.chart.metering.productMetric nil "asi") | indent 8 }}
    spec:
{{- if .Values.serviceAccount.create }} 
      serviceAccountName: {{ include "sch.names.fullCompName" (list . .sch.chart.components.podServiceAccount.name) | quote }}
{{- else }}
      serviceAccountName: {{ .Values.serviceAccount.name  | default "default" }}
{{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.podSecurityContext) | indent 8 }}
      volumes:
        {{- if .Values.persistence.enabled }}
        {{- if .Values.appResourcesPVC.enabled }} 
        - name: {{ .Values.appResourcesPVC.name }}
          persistentVolumeClaim:
            claimName: {{ include "sch.names.fullCompName" (list . $resourcesPVCName) | quote }}
        {{- end }} 
        {{- if not .Values.logs.enableAppLogOnConsole }}   
        - name: {{ .Values.appLogsPVC.name }}
          persistentVolumeClaim:
            claimName: {{ include "sch.names.fullCompName" (list . $logsPVCName) | quote }}
        {{- end }} 
        {{- if .Values.appDocumentsPVC.enabled }}
        - name: "{{ .Values.appDocumentsPVC.name }}"
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "sch.names.fullCompName" (list . $documentsPVCName) | quote }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        {{- end }}
        {{- end }}
        - name: configmap-resources-volume
          configMap:
           name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.configmap.name) | quote }}
        - name: configmap-properties-volume
          configMap:
           name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.propertyConfigmap.name) | quote }}
        - name: configmap-dummy-properties-volume
          configMap:
           name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.dummyPropertyConfigmap.name) | quote }}
        # extra configured volumes
        {{- if .Values.persistence.enabled }}
        {{- range $i, $pvc := .Values.asi.extraPVCs }}
        - name: {{ $pvc.name }}
          persistentVolumeClaim:
            claimName: {{ include "sch.names.fullCompName" (list $ $pvc.name) | quote }}
        {{- end }}
        {{- end }}
        
        {{- if and (.Values.setupCfg.usessl) (.Values.setupCfg.dbTruststoreSecret) }}
        - name: secret-{{ .Values.setupCfg.dbTruststoreSecret }}
          secret:
            secretName: {{ .Values.setupCfg.dbTruststoreSecret }}
        {{- end }}
        {{- if and (.Values.setupCfg.usessl) (.Values.setupCfg.dbKeystoreSecret) }}
        - name: secret-{{ .Values.setupCfg.dbKeystoreSecret }}
          secret:
            secretName: {{ .Values.setupCfg.dbKeystoreSecret }}
        {{- end }}
        {{- if and (.Values.setupCfg.jmsEnableSsl) (.Values.setupCfg.jmsTruststoreSecret) }}
        - name: secret-{{ .Values.setupCfg.jmsTruststoreSecret }}
          secret:
            secretName: {{ .Values.setupCfg.jmsTruststoreSecret }}
        {{- end }}
        {{- if and (.Values.setupCfg.jmsEnableSsl) (.Values.setupCfg.jmsKeystoreSecret) }}
        - name: secret-{{ .Values.setupCfg.jmsKeystoreSecret }}
          secret:
            secretName: {{ .Values.setupCfg.jmsKeystoreSecret }}
        {{- end }}
        {{- if .Values.asi.extraConfigMaps }}
        {{- range $i, $cmaps :=  .Values.asi.extraConfigMaps }}
        {{ if $cmaps.mountAsVolume }}
        - name: configmap-{{ $cmaps.configMapName }}
          configMap:
            name: {{ $cmaps.configMapName }}
        {{- end }}             
        {{- end }}
        {{- end }}
        {{- if .Values.asi.extraSecrets }}
        {{- range $i, $secrets :=  .Values.asi.extraSecrets }}
        {{ if $secrets.mountAsVolume }}
        - name: secret-{{ $secrets.secretName }}
          secret:
            secretName: {{ $secrets.secretName }}
        {{- end }}             
        {{- end }}
        {{- end }}
        
      {{- if .Values.global.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.global.image.pullSecret }}
      {{- end }}
      {{- if .Values.asi.extraInitContainers }}
      initContainers:
      {{- range $i, $initContainer := .Values.asi.extraInitContainers }}
      - name: {{ $initContainer.name }}
        image: {{ $initContainer.image }}
        imagePullPolicy: {{ $initContainer.imagePullPolicy }}
        command: {{ $initContainer.command }}
      {{- end }}
      {{- end }}
      containers:
        - name: "asi"
          image: "{{ .Values.global.image.repository }}:{{ .Values.global.image.tag }}"
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          ports:
            - name: {{ .Values.asi.frontendService.ports.http.targetPort }}
              containerPort: {{ .Values.setupCfg.basePort }}
              protocol: TCP
            - name: {{ .Values.asi.frontendService.ports.soa.targetPort }}
              containerPort: {{ add (.Values.setupCfg.basePort|int) 40 }}
              protocol: TCP
            - name: {{ .Values.asi.frontendService.ports.soassl.targetPort }}
              containerPort: {{ add (.Values.setupCfg.basePort|int) 41 }}
              protocol: TCP
            - name: {{ .Values.asi.frontendService.ports.restHttpAdapter.targetPort }}
              containerPort: {{ add (.Values.setupCfg.basePort|int) 60 }}
              protocol: TCP              
            {{- if .Values.asi.internalAccess.enableHttps }}
            - name: {{ .Values.asi.frontendService.ports.https.targetPort }}
            {{- if .Values.asi.internalAccess.httpsPort }}
              containerPort: {{ .Values.asi.internalAccess.httpsPort }}
            {{- else }}
              containerPort: {{ add ($.Values.setupCfg.basePort|int) 1 }}
            {{ end }}
              protocol: TCP
            {{ end }}
            {{- if .Values.asi.frontendService.extraPorts }}
            {{- range $i, $port := .Values.asi.frontendService.extraPorts }}
            - name: {{ $port.name }}
              containerPort: {{ $port.targetPort }}
              protocol: {{ $port.protocol }}
            {{- end }}
            {{- end }}
            {{- if .Values.asi.backendService.ports }}
            {{- range $i, $port := .Values.asi.backendService.ports }}
            - name: {{ $port.name }}
              containerPort: {{ $port.targetPort }}
              protocol: {{ $port.protocol }}
            {{- end }}
            {{- end }}
            {{- if .Values.asi.backendService.portRanges}}
            {{- range $i, $portRange := .Values.asi.backendService.portRanges }}
            {{ $portRangeNumbers := split "-" $portRange.targetPortRange }}
            {{ $count := 0 }}
            {{- range untilStep ($portRangeNumbers._0|int) ((add ($portRangeNumbers._1|int) 1)|int) 1 }}
            {{ $count = add $count 1 }}
            - name: {{ $portRange.name }}-{{ $count }}
              containerPort: {{ . }}
              protocol: {{ $portRange.protocol }}
            {{- end }}
            {{- end }}
            {{- end }}
          env:
            - name: "TZ"
              value: "{{ .Values.env.tz }}"
            - name: "LICENSE"
              value: "{{ .Values.env.license }}"
            - name: "JAVA_TOOL_OPTIONS"
              value: "{{ $myFgSystemConfig }} {{ .Values.asi.env.jvmOptions }}"
            - name: "NODE_NUMBER_IN_HOST"
              value: "true"
            - name: "SANDBOX_CC_INSTALL"
              value: {{ .Values.env.containerInstallation | default "true" | quote }}
            - name: "SANDBOX_CC_NODE_NAME"
              value: "node_b2biNodeNumber_"
            - name: "SERVER_TYPE"
              value: "asi"
            - name: "SANDBOX_CC_SERVICE_TYPE"
              value: "asi"
            - name: "IS_SEAS_ENABLED"
              value: "{{ .Values.integrations.seasIntegration.isEnabled }}"
            - name: "SEAS_VERSION"
              value: "{{ .Values.integrations.seasIntegration.seasVersion }}"
            - name: "SANDBOX_ASI_SERVICE_HOST"
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: "SANDBOX_ASI_SERVICE_PORT"
              value: "{{ .Values.setupCfg.basePort }}"
            {{- if .Values.ingress.enabled }}
            - name: "LIBERTY_EXTERNAL_PROTOCOL"
              value: "{{ $apiIngressProtocol }}"
            - name: "LIBERTY_EXTERNAL_HOST"
              value: "{{ .Values.api.ingress.internal.host }}"
            - name: "LIBERTY_EXTERNAL_PORT"
              value: "{{ .Values.ingress.port | default $defaultApiIngressPort }}"
            {{- else }}
            {{- if  .Values.api.externalAccess.address }}
            - name: "LIBERTY_EXTERNAL_HOST"
              value: "{{ .Values.api.externalAccess.address }}"
            {{- end }}
            #{{ $externalAccessPort := .Values.api.externalAccess.port }}
            {{- if  .Values.api.externalAccess.port }}
              {{- $externalAccessPort = .Values.api.externalAccess.port }}
            {{- else if  eq .Values.api.frontendService.type "NodePort" }}
              {{- if eq .Values.api.externalAccess.protocol "https" }}
              {{- $externalAccessPort = .Values.api.frontendService.ports.https.nodePort }}
              {{- else }}
              {{- $externalAccessPort = .Values.api.frontendService.ports.http.nodePort }}
              {{- end }}
            {{- else if eq .Values.api.frontendService.type "LoadBalancer"}}
              {{- if eq .Values.api.externalAccess.protocol "https" }}
              {{- $externalAccessPort = .Values.api.frontendService.ports.https.port }}
              {{- else }}
              {{- $externalAccessPort = .Values.api.frontendService.ports.http.port }}
              {{- end }}
            {{- end }}
            - name: "LIBERTY_EXTERNAL_PROTOCOL"
              value: "{{ .Values.api.externalAccess.protocol | default "http" }}"
            - name: "LIBERTY_EXTERNAL_PORT"
              value: "{{ $externalAccessPort }}"
            {{- end }}
            {{- if .Values.ingress.enabled }}
            - name: "SANDBOX_EXT_HOST_ADDR"
              value: "{{ .Values.asi.ingress.internal.host }}"
            - name: "SANDBOX_EXT_ACCESS_PORT"
              value: "{{ .Values.ingress.port | default $defaultAsiIngressPort }}"
            - name: "SANDBOX_EXT_ACCESS_PROTOCOL"
              value: {{ $asiIngressProtocol }}
            - name: "SANDBOX_EXT_SOA_PORT"
              value: "{{ .Values.ingress.port | default $defaultAsiIngressPort }}"
            {{- else if .Values.asi.externalAccess.address }}
            - name: "SANDBOX_EXT_HOST_ADDR"
              value: "{{ .Values.asi.externalAccess.address }}"   
            {{ $externalAsiAccessPort := .Values.asi.externalAccess.port }}
            {{ $externalAsiSoaAccessPort := .Values.asi.externalAccess.soaPort }}            
            {{- if  .Values.asi.externalAccess.port }}
            {{ $externalAsiAccessPort = .Values.asi.externalAccess.port  }}   
            {{ $externalAsiSoaAccessPort = .Values.asi.externalAccess.soaPort }} 
            {{- else if  eq .Values.asi.frontendService.type "NodePort" }}
              {{- if eq .Values.asi.externalAccess.protocol "https" }}
            {{ $externalAsiAccessPort = .Values.asi.frontendService.ports.https.nodePort  }} 
            {{ $externalAsiSoaAccessPort = .Values.asi.frontendService.ports.soassl.nodePort }}
              {{- else }}
            {{ $externalAsiAccessPort = .Values.asi.frontendService.ports.http.nodePort  }}
            {{ $externalAsiSoaAccessPort = .Values.asi.frontendService.ports.soa.nodePort }}
              {{- end }}
            {{- else if eq .Values.asi.frontendService.type "LoadBalancer"}}
              {{- if eq .Values.asi.externalAccess.protocol "https" }}
            {{ $externalAsiAccessPort = .Values.asi.frontendService.ports.https.port }}
            {{ $externalAsiSoaAccessPort = .Values.asi.frontendService.ports.soassl.port }}
              {{- else }}
            {{ $externalAsiAccessPort = .Values.asi.frontendService.ports.http.port }}
            {{ $externalAsiSoaAccessPort = .Values.asi.frontendService.ports.soa.port }}
              {{- end }}
            {{- end }}
            - name: "SANDBOX_EXT_ACCESS_PROTOCOL"
              value: "{{ .Values.asi.externalAccess.protocol | default "http" }}"
            - name: "SANDBOX_EXT_ACCESS_PORT"
              value: "{{ $externalAsiAccessPort }}"
            - name: "SANDBOX_EXT_SOA_PORT"
              value: "{{ $externalAsiSoaAccessPort }}"
            {{- end }}
            
            - name: "UPGRADE_COMPATIBILITY_VERIFIED"
              value: "{{ .Values.env.upgradeCompatibilityVerified }}"
            - name: "ENABLE_APP_LOG_ON_CONSOLE"
              value: "{{ .Values.logs.enableAppLogOnConsole }}"
#            - name: "NODE_NUMBER"
#              valueFrom:
#                fieldRef:
#                  fieldPath: metadata.annotations['spec.pod.beta.kubernetes.io/statefulset-index']
            - name: "PROPERTY_ops_heartbeat"
              value: "{{ .Values.setupCfg.PROPERTY_ops_heartbeat | default 180 }}"
            - name: "PROPERTY_ops_nodeStatusCheckInterval"
              value: "{{ .Values.setupCfg.PROPERTY_ops_nodeStatusCheckInterval | default 30 }}"
            - name: "PROPERTY_ops_OpsServerU2022commandTimeout"
              value: "{{ (index .Values "setupCfg" "PROPERTY_ops_OpsServer.commandTimeout" ) | default 180 }}"
            - name: "PROPERTY_ui_alternate_url_prefix"
              value: "&WEBAPP_PROTOCOL;://&HOST_NAME;:&WEBAPP_LIST_PORT;"
            {{- if .Values.asi.internalAccess.enableHttps }}
            - name: "SANDBOX_WEBAPP_PROTOCOL"
              value: "https"
            - name: "SANDBOX_WEBAPP_LIST_PORT"
              {{- if .Values.asi.internalAccess.httpsPort }}
              value: "{{ .Values.asi.internalAccess.httpsPort }}"
              {{- else }}
              value: "{{ add (.Values.setupCfg.basePort|int) 1 }}"
              {{ end }}
            - name: "PROPERTY_noapp_SKIP_BASEPORT_DEPLOYMENT_WARS"
              value: "admin,dashboard,gpm,communitymanagement,myaft,portlets"
            - name: "PROPERTY_noapp_HTTPS_REDIRECT_WARS"
              value: "admin,dashboard,gpm,communitymanagement,myaft,portlets"
            - name: "PROPERTY_noapp_HTTPS_LIST_PORT"
              {{- if .Values.asi.internalAccess.httpsPort }}
              value: "{{ .Values.asi.internalAccess.httpsPort }}"
              {{- else }}
              value: "{{ add (.Values.setupCfg.basePort|int) 1 }}"
              {{ end }}
            {{ end }}
            - name: "SANDBOX_JGROUP_CLUSTER_MCAST1_DNS_QUERY"
              value: "_mcast1._tcp.{{ include "sch.names.fullCompName" (list . .sch.chart.components.headlessService.name) }}.{{ .Release.Namespace }}"
            - name: "SANDBOX_JGROUP_CLUSTER_MCAST2_DNS_QUERY"
              value: "_mcast2._tcp.{{ include "sch.names.fullCompName" (list . .sch.chart.components.headlessService.name) }}.{{ .Release.Namespace }}"
            - name: "SANDBOX_JGROUP_CLUSTER_MCAST3_DNS_QUERY"
              value: "_mcast3._tcp.{{ include "sch.names.fullCompName" (list . .sch.chart.components.headlessService.name) }}.{{ .Release.Namespace }}"
            - name: "SANDBOX_JGROUP_CLUSTER_DNS_RECORD_TYPE"
              value: "SRV"
            - name: "SANDBOX_MYFG_SERVICE_HOST"
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: "SANDBOX_MYFG_SERVICE_PORT"      
            {{- if .Values.asi.myFgAccess.myFgPort }}
              value: "{{ .Values.asi.myFgAccess.myFgPort }}"
            {{- else }}          
            {{- if .Values.asi.internalAccess.enableHttps }}
              value: "{{ add ($.Values.setupCfg.basePort|int) 1 }}"
            {{- else }}
              value: "{{ .Values.setupCfg.basePort }}"
            {{- end }}
            {{- end }}
            - name: "SANDBOX_MYFG_SERVICE_PROTOCOL"
            {{- if .Values.asi.myFgAccess.myFgProtocol }}
              value: "{{ .Values.asi.myFgAccess.myFgProtocol }}"
            {{- else }}  
            {{- if .Values.asi.internalAccess.enableHttps }}
              value: "https"
            {{- else }}
              value: "http"
            {{- end }}
            {{- end }} 
            {{- if .Values.api.internalAccess.enableHttps }}
            - name: "SANDBOX_API_SERVICE_PROTOCOL" 
              value: "https"
            - name: "SANDBOX_API_SERVICE_PORT"
              value: "{{ .Values.api.frontendService.ports.https.port }}"
            {{- else }}
            - name: "SANDBOX_API_SERVICE_PROTOCOL" 
              value: "http"
            - name: "SANDBOX_API_SERVICE_PORT"
              value: "{{ .Values.api.frontendService.ports.http.port }}"
            {{- end }}
            - name: "SANDBOX_API_SERVICE_HOST"
              value: {{ include "sch.names.fullCompName" (list . .sch.chart.components.apiFrontendService.name) | quote }}
          envFrom:
          {{if .Values.setupCfg.systemPassphraseSecret}}
          - secretRef:
                name: "{{ .Values.setupCfg.systemPassphraseSecret }}"
{{ end }}
{{if .Values.setupCfg.dbSecret}}
          - secretRef:
                name: "{{ .Values.setupCfg.dbSecret }}"
{{ end }}
{{if .Values.setupCfg.jmsSecret}}
          - secretRef:
                name: "{{ .Values.setupCfg.jmsSecret }}"
{{ end }}
{{if .Values.setupCfg.libertySecret}}
          - secretRef:
                name: "{{ .Values.setupCfg.libertySecret }}"
{{ end }}
          {{ if .Values.asi.extraSecrets }}
          {{- range $i, $secrets :=  .Values.asi.extraSecrets }}
          {{- if not ($secrets.mountAsVolume) }} 
          - secretRef:
                name: {{ $secrets.secretName }}
          {{- end }}
          {{- end }}
          {{- end }}
          {{ if .Values.asi.extraConfigMaps }}
          {{- range $i, $cmaps :=  .Values.asi.extraConfigMaps }}
          {{- if not ($cmaps.mountAsVolume) }}
          - configMapRef:
                name: {{ $cmaps.configMapName }}
          {{- end }}
          {{- end }}
          {{- end }}
          
          volumeMounts:
            {{- if .Values.persistence.enabled }}
            {{- if .Values.appResourcesPVC.enabled }} 
            - name: {{ .Values.appResourcesPVC.name }}
              mountPath: /ibm/resources
            {{- end }}  
            {{- if not .Values.logs.enableAppLogOnConsole }}  
            - name: {{ .Values.appLogsPVC.name }}
              mountPath: /ibm/trace
            {{- end }}  
            {{- if .Values.appDocumentsPVC.enabled }}  
            - name: {{ .Values.appDocumentsPVC.name }}
              mountPath: {{ .Values.appDocumentsPVC.mountPath | default "/ibm/b2bi/install/documents" }}
            {{- end }}
            {{- range $i, $volumeMount := .Values.asi.extraVolumeMounts }}
            - name: {{ $volumeMount.name }}
              mountPath: {{ $volumeMount.mountPath }}
            {{- end }}
            {{ end }}
            - name: configmap-resources-volume
              mountPath: /ibm/resources/setup.cfg
              subPath: setup.cfg
            - name: configmap-properties-volume
              mountPath: /ibm/b2bi/ext-resources/properties
            - name: configmap-dummy-properties-volume
              mountPath: /ibm/b2bi/ext-resources/dummy-properties
            {{- if and (.Values.setupCfg.usessl) (.Values.setupCfg.dbTruststoreSecret) }}
            - name: secret-{{ .Values.setupCfg.dbTruststoreSecret }}
              mountPath: /ibm/resources/{{ .Values.setupCfg.dbTruststoreSecret }}
            {{- end }}
            {{- if and (.Values.setupCfg.usessl) (.Values.setupCfg.dbKeystoreSecret) }}
            - name: secret-{{ .Values.setupCfg.dbKeystoreSecret }}
              mountPath: /ibm/resources/{{ .Values.setupCfg.dbKeystoreSecret }}
            {{- end }}
            {{- if and (.Values.setupCfg.jmsEnableSsl) (.Values.setupCfg.jmsTruststoreSecret) }}
            - name: secret-{{ .Values.setupCfg.jmsTruststoreSecret }}
              mountPath: /ibm/resources/{{ .Values.setupCfg.jmsTruststoreSecret }}
            {{- end }}
            {{- if and (.Values.setupCfg.jmsEnableSsl) (.Values.setupCfg.jmsKeystoreSecret) }}
            - name: secret-{{ .Values.setupCfg.jmsKeystoreSecret }}
              mountPath: /ibm/resources/{{ .Values.setupCfg.jmsKeystoreSecret }}
            {{- end }}            
            {{- if .Values.asi.extraConfigMaps }}
            {{- range $i, $cmaps :=  .Values.asi.extraConfigMaps }}
            {{- if $cmaps.mountAsVolume }}
            - name: configmap-{{ $cmaps.configMapName }}
              mountPath: /ibm/resources/{{ $cmaps.configMapName }}
            {{- end }}
            {{- end }}
            {{- end }}
            {{- if .Values.asi.extraSecrets }}
            {{- range $i, $secrets :=  .Values.asi.extraSecrets }}
            {{- if $secrets.mountAsVolume }}
            - name: secret-{{ $secrets.secretName }}
              mountPath: /ibm/resources/{{ $secrets.secretName }}
            {{- end }}
            {{- end }}
            {{- end }}
            
          args: ["b2bi_run", "b2bi"]
          resources:
            {{- toYaml .Values.asi.resources | nindent 12 }}
          securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.containerSecurityContext) | indent 12 }}
          livenessProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - /ibm/b2bi/install/bin/b2biLivelinessCheck.sh asi
            initialDelaySeconds: {{ .Values.asi.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.asi.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.asi.livenessProbe.periodSeconds }}
          readinessProbe:
            httpGet:
              path: /dashboard/
              {{- if .Values.asi.internalAccess.enableHttps }}
              {{- if .Values.asi.internalAccess.httpsPort }}
              port: {{ .Values.asi.internalAccess.httpsPort }}
              {{- else }}
              port: {{ add ($.Values.setupCfg.basePort|int) 1 }}
              {{ end }}
              scheme: HTTPS
              {{- else }}
              port: {{ .Values.setupCfg.basePort }}
              scheme: HTTP
              {{- end }}
            initialDelaySeconds: {{ .Values.asi.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.asi.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.asi.readinessProbe.periodSeconds }}
      affinity:
{{- include "b2bi.nodeAffinity" (list . .Values.asi.nodeAffinity) | indent 8 }}
{{- include "b2bi.podAffinity" (list . .Values.asi.podAffinity) | indent 8 }}
{{- include "b2bi.podAntiAffinity" (list . .Values.asi.podAntiAffinity) | indent 8 }}
      tolerations:
{{- if .Values.asi.tolerations}}
{{ toYaml .Values.asi.tolerations| indent 8 }}
{{- end }}
{{- if .Values.asi.topologySpreadConstraints }}
      topologySpreadConstraints:
      {{- range $i, $topologySpreadConstraint := .Values.asi.topologySpreadConstraints }}
      - maxSkew: {{ $topologySpreadConstraint.maxSkew }}
        topologyKey: {{ $topologySpreadConstraint.topologyKey }}
        whenUnsatisfiable: {{ $topologySpreadConstraint.whenUnsatisfiable }}
        labelSelector: 
          matchLabels: 
{{ include "sch.metadata.labels.standard" (list $ $.sch.chart.components.asiServer.name) | indent 12 }}
  {{- end }}
  {{- end }}