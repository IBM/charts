{{- /*
########################################################################
#
# Licensed Materials - Property of IBM
#
# 5725Q09
#
# (C) Copyright IBM Corp.
#
# 2018-2019 All Rights Reserved
#
# US Government Users Restricted Rights - Use, duplication or disclosure
# restricted by GSA ADP Schedule Contract with IBM Corp.
#
########################################################################
*/ -}}
{{- include "sch.config.init" (list . "sch.chart.config.values") -}}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "sch.names.fullName" (list . 63) }}
  labels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 4 }}

spec:
  replicas: {{ include "noi.nciservers.replicas" (list . .Values.replicaCount )}}
  updateStrategy:
    type: RollingUpdate
  serviceName: "{{ .Release.Name }}-{{ .Values.subdomain }}"
  selector:
    matchLabels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 6 }}
  template:
    metadata:
      labels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 8 }}
        name: impact
        appClass: impactcore
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering "" "" nil) | indent 8 }}
    spec:
      affinity:
        nodeAffinity:
{{ include "noi.nodeAffinity.arch" . | indent 10 }}
        {{- if eq .Values.global.antiAffinity.enabled true }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: appClass
                operator: In
                values:
                - impactcore
              - key: app.kubernetes.io/instance
                operator: In
                values:
                - {{ .Release.Name | quote }}
            topologyKey: "kubernetes.io/hostname"
        {{- end }}
      volumes:
        {{- if not .Values.global.persistence.enabled }}
        - name: {{ .Values.pvc.name | quote }}
          emptyDir: {}
        {{- end }}
        - name: {{ .Release.Name }}-share-mount
          emptyDir: {}
        - name: {{ .Release.Name }}-{{ include "sch.names.appName" (list .) }}-log4j-props
          configMap:
            name: {{ .Release.Name }}-{{ include "sch.names.appName" (list .) }}-config
            items:
            - key: impactcore-log4j-props-update
              path: impactserver.log4j.properties-update
        - name: {{ .Release.Name }}-{{ include "sch.names.appName" (list .) }}-server-props
          configMap:
            name: {{ .Release.Name }}-{{ include "sch.names.appName" (list .) }}-config
            items:
            - key: impactcore-server-props-update
              path: NCI_server.props-update
        - name: {{ .Release.Name }}-{{ include "sch.names.appName" (list .) }}-jvm-options
          configMap:
            name: {{ .Release.Name }}-{{ include "sch.names.appName" (list .) }}-config
            items:
            - key: impactcore-jvm-options-replace
              path: jvm.options-replace
        - name: {{ .Release.Name }}-{{ include "sch.names.appName" (list .) }}-derby-extensions-sql
          configMap:
            name: {{ .Release.Name }}-{{ include "sch.names.appName" (list .) }}-config
            items:
            - key: impactcore-derby-sql-extensions
              path: derby-extensions.sql
        {{- if eq .Values.importNCICACerts.enabled true }}
        - name: {{ .Release.Name }}-{{ include "sch.names.appName" (list .) }}-external-trusted-cacerts
          configMap:
            defaultMode: 420
            name: {{ .Release.Name }}-{{ include "sch.names.appName" (list .) }}-external-cacerts
            optional: true
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: {{ include "image.docker.repository" . -}}/{{- include "image.family" . -}}-{{ .Values.image.name }}-{{- include "image.edition" . -}}{{ include "image.suffix" (list . .Values.image) }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
            capabilities:
              drop:
              - ALL
              add: ["DAC_OVERRIDE","NET_BIND_SERVICE","NET_RAW"]

          volumeMounts:
            - name: {{ .Values.pvc.name | quote }}
              mountPath: {{ .Values.impactcore.env.dbPath }}
            - name: {{ .Release.Name }}-share-mount
              mountPath: /share
            - name: {{ .Release.Name }}-{{ include "sch.names.appName" (list .) }}-log4j-props
              mountPath: /space/impactserver.log4j.properties-update
              subPath: impactserver.log4j.properties-update
            - name: {{ .Release.Name }}-{{ include "sch.names.appName" (list .) }}-server-props
              mountPath: /space/NCI_server.props-update
              subPath: NCI_server.props-update
            - name: {{ .Release.Name }}-{{ include "sch.names.appName" (list .) }}-jvm-options
              mountPath: /space/jvm.options-replace
              subPath: jvm.options-replace
            - name: {{ .Release.Name }}-{{ include "sch.names.appName" (list .) }}-derby-extensions-sql
              mountPath: /space/derby-extensions.sql
              subPath: derby-extensions.sql
        {{- if eq .Values.importNCICACerts.enabled true }}
            - name: {{ .Release.Name }}-{{ include "sch.names.appName" (list .) }}-external-trusted-cacerts
              mountPath: {{ .Values.importNCICACerts.cadir }}
              readOnly: true
        {{-  end }}
          ports:
            - containerPort: {{ .Values.impactcore.internal.nameserverPort }}
            - containerPort: {{ .Values.impactcore.internal.derbyPort }}
            - containerPort: {{ .Values.impactcore.internal.nciPort }}
            - containerPort: {{ .Values.impactcore.internal.rmiPort }}
          env:
            - name: NCISERVERS_REPLICA_COUNT
              value: "{{ include "noi.nciservers.replicas" (list . .Values.replicaCount )}}"
            - name: LICENSE
              value: "{{ .Values.global.license }}"
            - name: OBJSERVER_SERVICE_NAME
              value: "{{ .Release.Name }}-{{ .Values.objserv.primary.service.name }}"
            - name: OBJSERVER_BK_SERVICE_NAME
              value: "{{ .Release.Name }}-{{ .Values.objserv.backup.service.name }}"
            - name: OBJSERVER_BK_SERVICE_PORT
              value: "{{ .Values.objserv.backup.service.port }}"
            - name: OMNIBUS_ROOT_PWD
              valueFrom:
                secretKeyRef:
                  name: {{ printf .Values.global.omnisecretname .Release.Name }}
                  key: OMNIBUS_ROOT_PASSWORD
                  optional: false
            - name: DB_SERVICE_NAME
              value: "{{ .Release.Name }}-{{ .Values.database.service.name }}"
            - name: NCI_SET_PRIMARY
              value: "{{ .Values.impactcore.setPrimary }}"
            - name: IMPACT_NAMESERVER_PORT
              value: "{{ .Values.impactcore.internal.nameserverPort }}"
            - name: IMPACTGUI_HTTP_SERVICE
              value: "{{ .Release.Name }}-{{ .Values.impactgui.service.name }}"
            - name: LDAP_SERVICE_NAME
              value: {{ .Release.Name }}-{{ .Values.global.ldapservice.name }}
            - name: LDAP_SERVICE_PORT
              value: "{{ .Values.global.ldapservice.internal.ldapPort }}"
            - name: LDAP_BIND_DN
              value: "{{ .Values.global.ldapservice.internal.bindDN }}"
            - name: LDAP_BASE_DN
              value: "{{ .Values.global.ldapservice.internal.baseDN }}"
            - name: LDAP_USERFILTER
              value: "{{ .Values.global.ldapservice.internal.userFilter }}"
            - name: LDAP_GROUPFILTER
              value: "{{ .Values.global.ldapservice.internal.groupFilter }}"
            - name: LDAP_SERVERTYPE
              value: "{{ .Values.global.ldapservice.internal.serverType }}"
            - name: USERPLUSROLES
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-{{ include "sch.names.appName" (list .) }}-maproles
                  key: allusersandroles
            - name: LDAP_BIND_PWD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-ldap-secret
                  key: LDAP_BIND_PASSWORD
                  optional: false
            - name: IMPACT_ADMIN_PASSWORD 
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-impact-secret
                  key: IMPACT_ADMIN_PASSWORD
                  optional: false
            - name: ICPADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-icpadmin-secret
                  key: ICP_ADMIN_PASSWORD
                  optional: false
            - name: CEM_USERS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-cem-cemusers-cred-secret
                  key: password
                  optional: false
            - name: CEM_USERS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-cem-cemusers-cred-secret
                  key: username
                  optional: false
            - name: SSO_DOMAIN
              value: {{- if eq .Values.global.ingress.prefixWithReleaseName  true }} {{ .Release.Name }}.{{ .Values.global.cluster.fqdn }}  {{- else }} {{ .Values.global.cluster.fqdn }} {{- end }}
            - name: LTPA_KEY_FILE
              value: "{{ .Values.sso.internal.ltpaKeyFile }}"
            - name:  LDAP_VERIFY_PASSWORDS
              value: "{{ .Values.global.ldapservice.verifypasswords }}"
            - name: HELM_RELEASE
              value: {{ .Release.Name }}
            - name: NAMESPACE
              value: {{ .Release.Namespace }}               
            - name: SUBSCRIPTION_ID
              value: {{ .Values.global.common.eventanalytics.tenantId | quote }}
          {{- if eq .Values.importNCICACerts.enabled true }}
            - name: TRUSTED_CA_DIR
              value: {{ .Values.importNCICACerts.cadir | quote }}
          {{- end }}
          {{- if eq .Values.global.resource.requests.enable true }}
          resources:
{{ include "ibmnoiprod.comp.size.data" (list . "nciserver" "resources") | indent 12 }}
          {{- end }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.impactcore.internal.nameserverPort }}
            initialDelaySeconds: {{ .Values.impactcore.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.impactcore.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.impactcore.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.impactcore.liveness.failureThreshold }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.impactcore.internal.nameserverPort }}
            initialDelaySeconds: {{ .Values.impactcore.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.impactcore.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.impactcore.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.impactcore.readiness.failureThreshold }}
        - name: configuration-share
          image: {{ include "image.docker.repository" . -}}/{{- include "image.family" . -}}-configuration-share-{{- include "image.edition" . -}}{{ include "config.share.image.suffix" . }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
            capabilities:
              drop:
              - ALL
              add: ["NET_BIND_SERVICE"]
          volumeMounts:
            - name: {{ .Release.Name }}-share-mount
              mountPath: /share
          ports:
            - containerPort: 8000
          env:
          - name: LICENSE
            value: "{{ .Values.global.license }}"
          resources:
{{ include "ibmnoiprod.comp.size.data" (list . "configurationShare" "resources") | indent 12 }} 
          livenessProbe:
            httpGet:
              path: /
              port: 8000
              scheme: HTTP
            initialDelaySeconds: {{ .Values.impactcore.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.impactcore.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.impactcore.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.impactcore.liveness.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /
              port: 8000
              scheme: HTTP
            initialDelaySeconds: {{ .Values.impactcore.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.impactcore.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.impactcore.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.impactcore.readiness.failureThreshold }}
      {{- if .Values.global.image.secret }}
      imagePullSecrets:
        - name: {{ .Values.global.image.secret }}
      {{- end }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 2001
      hostNetwork: false
      hostPID: false
      hostIPC: false
      serviceAccountName: {{ .Values.global.rbac.serviceAccountName }}
      initContainers:
        - name: wait4db2ese
          image: {{ include "image.docker.repository" . -}}/{{- include "image.family" . -}}-configuration-share-{{- include "image.edition" . -}}{{ include "config.share.image.suffix" . }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
            capabilities:
              drop:
              - ALL
              add: ["NET_BIND_SERVICE"]
          volumeMounts:
            - name: {{ .Release.Name }}-share-mount
              mountPath: /share
          resources:
{{ include "ibmnoiprod.comp.size.data" (list . "preinstall" "resources") | indent 12 }} 
          env:
          - name: ICP_NOI_SHARED_SYNCFROM_SERVERS
            value: '[{"server": "http://{{ .Release.Name }}-webgui:8000/" , "files" : [{ "file": "{{ .Values.ltpakeys.status }}"}]}]'
          - name:  ICP_NOI_SHARED_EXIT_WHEN_FOUND
            value: "True"
  {{ if .Values.global.persistence.enabled -}}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Values.pvc.name | quote }}
      labels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 8 }}
    spec:
      {{- if .Values.global.persistence.useDynamicProvisioning }}
      # if present, use the storageClassName from the values.yaml, else use the
      # default storageClass setup by kubernetes Administrator
      # setting storageClassName to nil means use the default storage class
      storageClassName: {{ default nil .Values.pvc.storageClassName | quote }}
      {{- else }}
      # bind to an existing pv.
      # setting storageClassName to "" disables dynamic provisioning
      storageClassName: {{ default "" .Values.pvc.storageClassName | quote }}
      {{- if .Values.pvc.selector.label }}
      # use selectors in the binding process
      selector:
      #  matchLabels:
      #   {{ .Values.pvc.selector.label }}: "{{ .Values.pvc.selector.value }}"
        matchExpressions:
        - {key: {{ .Values.pvc.selector.label }}, operator: In, values: [{{ .Values.pvc.selector.value }}]}
      {{- end }}
      {{- end }}
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.pvc.size | quote }}
  {{- end }}

