apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: cemformations.cem.ibm.com
spec:
  group: cem.ibm.com
  names:
    kind: CEMFormation
    listKind: CEMFormationList
    plural: cemformations
    singular: cemformation
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: CEMFormation is the Schema for the cemformations API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: CEMFormationSpec defines the desired state of CEMFormation
          properties:
            helmValues:
              additionalProperties: {}
              description: "*  To be used as an attribute of your Go Spec object  Example
                \ type NOISpec struct {    SystemStatus string  `json:\"systemStatus,omitempty\"`
                \   AppVersion   string  `json:\"appVersion,omitempty\"`    HelmValues
                \  hdmtypes.HelmValuesType     `json:\"helmValues,omitempty\"` }  This
                will allow your custom resource to have a  helmValues object that
                mimics your helm values file  Example custom resource apiVersion:
                noi.netcool.ibm.com/v1beta1 kind: NOI metadata:   name: firstinstall
                \n spec:   appVersion: 1.0.0   helmValues:     global:       license:
                \"accept\"       openshift:         enabled true         clusterName:
                \"xyz\"       environmentSize: \"size0\"    webgui       testAttribute:
                \"abc\" will be loaded into go memory as    interface can be any type.
                In our case it will eitehr be string or another map of string to interface
                \n    map(string->interface)        \"global\" ->  map(string->interface)
                \                      \"license\"        -> \"accept\" (string)                       \"openshift\"
                \     -> map(string->interface)                                               \"enabled\"
                -> \"true\" (string)                                               \"clusterName\"->\"xyz\"
                (string)                       \"environmentSize\"-> \"size0\" (string)
                \        \"webgui\" ->  map(string->interface)                         \"testAttribute\"
                \       -> \"abc\" (string)   These values are then available to The
                GO templating   example {{ .Values.global.license }} will be reslved
                to \"accept\""
              type: object
            version:
              description: Version
              type: string
          type: object
        status:
          description: FormationStatus defines the observed state of Formation
          properties:
            chartVersion:
              description: Internal chart version used within the formation
              type: string
            components:
              description: Current phases of formation components
              items:
                description: FormationComponent defines the observed state of deployable
                  components
                properties:
                  kind:
                    type: string
                  status:
                    description: FormationComponentStatus defines the observed Status
                      of deployed component
                    properties:
                      message:
                        type: string
                      names:
                        items:
                          type: string
                        type: array
                      phase:
                        description: FormationComponentPhase defines the observed
                          phase of deployed component
                        type: string
                    required:
                    - phase
                    type: object
                required:
                - kind
                - status
                type: object
              type: array
            phase:
              description: Current phase of the formation
              type: string
          required:
          - phase
          type: object
      type: object
  version: v1beta1
  versions:
  - name: v1beta1
    served: true
    storage: true
