affinity: {}
cronjob:
  analytics-events:
    envVars:
      KAFKA_PRODUCER_TOPIC_TENANT_FETCHER: tenant_fetcher_ae
    name: analytics-events
    schedule: 0 * * * *
  analytics-extract:
    envVars:
      KAFKA_PRODUCER_TOPIC_TENANT_FETCHER: tenant_fetcher_analytics_extract
    name: analytics-extract
    schedule: 0 */2 * * *
  cold-storage:
    envVars:
      KAFKA_PRODUCER_TOPIC_TENANT_FETCHER: cold
    name: cold-storage
    schedule: 0 2 * * *
  email-notification-daily:
    envVars:
      KAFKA_PRODUCER_TOPIC_TENANT_FETCHER: notifications_daily
    name: email-notification-daily
    schedule: 22 1 * * *
  email-notification-pulse:
    envVars:
      KAFKA_PRODUCER_TOPIC_TENANT_FETCHER: notifications_pulse
    name: email-notification-pulse
    schedule: '*/5 * * * *'
  group-builder:
    envVars:
      KAFKA_PRODUCER_TOPIC_TENANT_FETCHER: import_groups
    name: group-builder
    schedule: 5 0 * * *
  guardium-connector-sync:
    envVars:
      KAFKA_PRODUCER_TOPIC_TENANT_FETCHER: guardium_connector_sync
    name: guardium-connector-sync
    schedule: '*/5 * * * *'
  health-collector:
    envVars:
      KAFKA_PRODUCER_TOPIC_TENANT_FETCHER: refresh_health
    name: health-collector
    schedule: '*/3 * * * *'
  scheduler-pulse:
    envVars:
      KAFKA_PRODUCER_TOPIC_TENANT_FETCHER: scheduler_pulse
    name: scheduler-pulse
    schedule: '*/5 * * * *'
fullnameOverride: ''
global:
  image:
    imagePullSecret: ''
    repository: ''
  serviceAccount: insights-sa
image:
  image: tenant-fetcher
  pullPolicy: Always
  repository: image-registry.openshift-image-registry.svc:5000
  tag: release-v2.5.1-2021-02-17-11.16.58-de09a37
  use_repository_namespace: true
insights_env:
  KAFKA_PRODUCER_TOPIC_TENANT_FETCHER: _KAFKA_PRODUCER_TOPIC_TENANT_FETCHER
  KAFKA_SASL_MECHANISM: PLAIN
insights_secrets:
  ENCRYPTION_PASSWORD:
    secretGrouping: insights-api-password
    secretGroupingKey: _ENCRYPTION_PASSWORD
  GCM_AAD:
    secretGrouping: insights-gcm-aad
    secretGroupingKey: _GCM_AAD
  KAFKA_SASL_PASSWORD:
    secretGrouping: insights-kafka
    secretGroupingKey: _KAFKA_SASL_PASSWORD
  KAFKA_SASL_USER:
    secretGrouping: insights-kafka
    secretGroupingKey: _KAFKA_SASL_USER
  TENANT_USER_SECRET:
    secretGrouping: insights-tenant-user-secret
    secretGroupingKey: _TENANT_USER_SECRET
livenessProbe:
  initialDelaySeconds: 60
  periodSeconds: 60
nameOverride: ''
nodeSelector: {}
podContainerSecurityContextParams:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  privileged: false
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1001
podRootSecurityContextParams:
  hostIPC: false
  hostNetwork: false
  hostPID: false
readinessProbe:
  initialDelaySeconds: 60
  periodSeconds: 60
replicaCount: 1
resources:
  limits:
    cpu: 100m
    memory: 50Mi
  requests:
    cpu: 6m
    memory: 6Mi
tolerations: []
volumes: []
volumesMount: []
volumes_certsForMount:
  tenant-fetcher:
    mountPathPrefix: /service/certs/tenantfetcher
  tenant-user:
    mountPathPrefix: /service/certs/tenantuser
volumes_rootCAForMount:
  insights-rootca:
    mountPathPrefix: /etc/pki/tls/certs/
