apiVersion: v1
kind: Service
metadata:
  name: mongodb-admin-shard1-service
  # namespace: {{ .Values.global.nameSpace }}
  labels:
    name: mongodb-admin-shard1
    app: admin-shard1
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: mongodb-admin-shard1-service
spec:
  ports:
  - port: {{ .Values.mongoDBShard.shardPort }}
    targetPort: {{ .Values.mongoDBShard.shardPort }}
  clusterIP: None
  selector:
    role: mongodb-admin-shard1
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb-admin-shard1
  labels:
    app: mongodb-admin-shard1
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: mongodb-shard1
  # namespace: {{ .Values.global.nameSpace }}
spec:
  selector:
    matchLabels:
      role: mongodb-admin-shard1
  serviceName: mongodb-admin-shard1-service
  replicas: {{ .Values.mongoDBShard.replicas }}
  template:
    metadata:
      annotations:
    {{- range $key, $value := .Values.global.annotations }}
        {{ $key }}: {{ $value | quote }}
    {{- end }}
      labels:
        role: mongodb-admin-shard1
        tier: mongodb-admin
        replicaset: rs-admin-shard1
        app: mongodb-shard1
        heritage: {{ .Release.Service | quote }}
        release: {{ .Release.Name | quote }}
        chart: mongodb-shard1
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: replicaset
                  operator: In
                  values:
                  - rs-shard1
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: mongo-admin{{ .Values.global.namespace.name }}
                operator: In
                values:
                - "baca"
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - {{ .Values.global.arch }}
      terminationGracePeriodSeconds: 10
      volumes:
      - name: secrets-volume
        secret:
          secretName: {{ .Values.secretVolume }} 
      - name: sp-log-pvc
        persistentVolumeClaim:
          claimName: {{ .Values.global.logs.claimname  }}
      containers:
      - name: mongod-admin-shard1-container
        image: "{{ .Values.global.mongoadmin.image.repository }}:{{ .Values.global.mongoadmin.image.tag }}"
        imagePullPolicy: {{ .Values.global.mongoadmin.image.pullPolicy }}
        resources: 
{{ toYaml .Values.mongoDBShard.resources | indent 10 }}
        env:
        # - name: ENTRYPASSWORD
        #   value: "$ENTRYPASSWORD"
        # - name: MONGO_USER
        #   value: "$MONGO_USER"
        # - name: MONGO_PASSWORD
        #   value: "$MONGO_PASSWORD"
        # - name: MONGO_INITDB
        #   value: "$MONGOADMINAUTHDB"
        # - name: MONGO_SECONDDB
        #   value: "binaryfiles"
        - name: LOG_PATH
          value: "{{ .Values.logs.path }}{{ .Values.mongoAdmin.name | substr 0 5 }}db"
        - name: LOG_LEVEL
          value: {{ .Values.global.logs.logLevel }}
        - name: CERTIFICATE_DIR
          value: "/etc/certs"
        - name: WIREDTIGERCACHE
          value: {{ .Values.global.mongoadmin.wiredTigerCache | default 0.5 | quote }}
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: MONGO_TYPE
          value: "shard"
        - name: MONGO_TYPE_VALUE
          value: "rs-admin-shard1"
        - name: CONTAINER_PORT
          value: {{ .Values.mongoDBShard.shardPort | quote}}
        - name: KUBE_NAME_SPACE
          value: {{ .Values.global.nameSpace | quote }}
        securityContext:
          runAsUser: 51000
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
        livenessProbe:
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 20
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
              - bash
              - -c
              - source setup_env.sh && echo 'db.runCommand("ping").ok' | mongo 127.0.0.1:27018 --sslAllowInvalidCertificates  --ssl --sslPEMKeyFile $PEMFILE --sslCAFile $CERTIFICATE_PATH
        readinessProbe:
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 20
          successThreshold: 1
          failureThreshold: 5
          exec:
            command:
              - bash
              - -c
              - source setup_env.sh && echo 'db.runCommand("ping").ok' | mongo 127.0.0.1:27018 --sslAllowInvalidCertificates  --ssl --sslPEMKeyFile $PEMFILE --sslCAFile $CERTIFICATE_PATH
        ports:
          - containerPort: {{ .Values.mongoDBShard.shardPort }}
        volumeMounts:
          - name: shard1-admin-storage
            mountPath: /data/db
          - name: sp-log-pvc
#            mountPath: "/var/log/mongodb"
#            subPath: mongo
            mountPath: {{ .Values.global.logs.path }}{{ .Values.mongoAdmin.name | substr 0 5 }}db
            subPath: {{ .Values.mongoAdmin.name | replace "-" "" }}
          - name: secrets-volume # must match the volume name, above
            mountPath: "/etc/certs"
  volumeClaimTemplates:
  - metadata:
      name: shard1-admin-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
    {{- if $.Values.global.storageClass }}
    {{- if (eq "-" $.Values.global.storageClass) }}
      storageClassName: {{ .Values.storageClassName | quote }}
    {{- else }}
      storageClassName: {{ $.Values.global.storageClass | quote }}
    {{- end }}
    {{- end }}
      resources:
        requests:
          storage: {{ .Values.mongoDBShard.storageCapacity }}

