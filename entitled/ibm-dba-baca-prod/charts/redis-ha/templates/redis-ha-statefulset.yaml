apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "redis-ha.fullname" . }}-server
  labels:
{{ include "labels.standard" . | indent 4 }}
spec:
  selector:
    matchLabels:
      release: {{ .Release.Name }}
      app: {{ template "redis-ha.name" . }}
  serviceName: {{ template "redis-ha.fullname" . }}
  replicas: {{ .Values.global.redis.replicas }}
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
    {{- range $key, $value := .Values.global.annotations }}
        {{ $key }}: {{ $value | quote }}
    {{- end }}
      {{- if .Values.exporter.enabled }}
        prometheus.io/port: "{{ .Values.exporter.port }}"
        prometheus.io/scrape: "true"
        prometheus.io/path: {{ .Values.exporter.scrapePath }}
      {{- end }}
      labels:
        release: {{ .Release.Name }}
        app: {{ template "redis-ha.name" . }}
        chart: {{ template "redis.chart" .  }}
        heritage: "{{ .Release.Service }}"
        {{- range $key, $value := .Values.labels }}
        {{ $key }}: {{ $value }}
        {{- end }}
    spec:
      {{- if .Values.global.image.pullSecrets }}
      imagePullSecrets:
      {{- range .Values.global.image.pullSecrets }}
        - name: {{ . }}
      {{- end}}
      {{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsUser: 51000
        runAsNonRoot: true
        fsGroup: 51001
        supplementalGroups:
          - 51001
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: celery{{ .Values.global.namespace.name }}
                operator: In
                values:
                - "baca"
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - {{ .Values.global.arch }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ template "redis-ha.name" . }}
              topologyKey: "kubernetes.io/hostname"
      {{- if .Values.schedulerName }}
      schedulerName: "{{ .Values.schedulerName }}"
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      initContainers:
      {{- if .Values.sysctlImage.enabled }}
      - name: init-sysctl
        image: {{ template "redis.sysctl.image" . }}
        {{- if .Values.sysctlImage.mountHostSys }}
        securityContext:
          runAsUser: 51000
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
        volumeMounts:
        - name: host-sys
          mountPath: /host-sys
        - name: storage # must match the volume name, above
          mountPath: "/etc/certs"
        {{- end }}
        command:
{{ toYaml .Values.sysctlImage.command | indent 10 }}
        resources:
{{ toYaml .Values.global.redis.resources | indent 10 }}
      {{- end }}
{{- if and .Values.hostPath.path .Values.hostPath.chown }}
      - name: hostpath-chown
        image: {{ .Values.global.redis.image.repository }}:{{ .Values.global.redis.image.tag }}
        securityContext:
          runAsUser: 51000
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
        command:
        - chown
        - "{{ .Values.securityContext.runAsUser }}"
        - /data
        volumeMounts:
        - name: data
          mountPath: /data
          subPath: redis
        - name: storage # must match the volume name, above
          mountPath: "/etc/certs"
        resources:
{{ toYaml .Values.global.redis.resources | indent 10 }}
{{- end }}
      - name: config-init
        image: {{ .Values.global.redis.image.repository }}:{{ .Values.global.redis.image.tag }}
        securityContext:
          runAsUser: 51000
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
        imagePullPolicy: {{ .Values.global.redis.image.pullPolicy }}
        resources:
{{ toYaml .Values.global.redis.resources | indent 10 }}
        command:
        - sh
        args:
        - /readonly-config/init.sh
        env:
{{- $replicas := int .Values.global.redis.replicas -}}
{{- range $i := until $replicas }}
        - name: SENTINEL_ID_{{ $i }}
          value: {{ printf "%s\n%s\nindex: %d" (include "redis-ha.name" $) ($.Release.Name) $i | sha1sum }}
{{ end -}}
{{- if .Values.auth }}
        - name: AUTH
          valueFrom:
            secretKeyRef:
              name: "baca-redis"
              key: redis-password
{{- end }}
        - name: CONF_PATH
          value: /data/conf
        volumeMounts:
        - name: config
          mountPath: /readonly-config
          readOnly: true
        - name: data
          mountPath: /data
          subPath: redis
        - name: storage # must match the volume name, above
          mountPath: "/etc/certs"
      containers:
      - name: redis
        image: {{ .Values.global.redis.image.repository }}:{{ .Values.global.redis.image.tag }}
        securityContext:
          runAsUser: 51000
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
        imagePullPolicy: {{ .Values.global.redis.image.pullPolicy }}
{{- if .Values.auth }}
        env:
        - name: AUTH
          valueFrom:
            secretKeyRef:
              name: "baca-redis"
              key: redis-password
        - name: CONF_PATH
          value: /data/conf
        - name: CERTIFICATE_DIR
          value: "/etc/certs"
{{- end }}
        livenessProbe:
          exec:
            command: [ "sh", "/probes/readiness.sh", "{{ .Values.redis.port }}"]
          initialDelaySeconds: 30
          periodSeconds: 5
        readinessProbe:
          exec:
            command: ["sh", "/probes/readiness.sh", "{{ .Values.redis.port }}"]
          initialDelaySeconds: 60
          periodSeconds: 5
        resources:
{{ toYaml .Values.global.redis.resources | indent 10 }}
        ports:
        - name: redis
          containerPort: {{ .Values.redis.port }}
        volumeMounts:
        - mountPath: /data
          name: data
          subPath: redis
        - name: storage # must match the volume name, above
          mountPath: "/etc/certs"
        - mountPath: /probes
          name: probes
      - name: sentinel
        image: {{ .Values.global.redis.image.repository }}:{{ .Values.global.redis.image.tag }}
        imagePullPolicy: {{ .Values.global.redis.image.pullPolicy }}
        command:
          - redis-sentinel
        args:
          - /data/conf/sentinel.conf
{{- if .Values.auth }}
        env:
        - name: AUTH
          valueFrom:
            secretKeyRef:
              name: "baca-redis"
              key: redis-password
{{- end }}
        - name: CONF_PATH
          value: /data/conf
        livenessProbe:
          exec:
            command: [ "sh", "/probes/readiness.sh", "{{ .Values.sentinel.port }}"]
          initialDelaySeconds: 30
          periodSeconds: 5
        readinessProbe:
          exec:
            command: ["sh", "/probes/readiness.sh", "{{ .Values.sentinel.port }}"]
          initialDelaySeconds: 60
          periodSeconds: 5
        resources:
{{ toYaml .Values.global.redis.resources | indent 10 }}
        ports:
          - name: sentinel
            containerPort: {{ .Values.sentinel.port }}
        volumeMounts:
        - mountPath: /data
          name: data
          subPath: redis
        - name: storage # must match the volume name, above
          mountPath: "/etc/certs"
        - mountPath: /probes
          name: probes
{{- if .Values.exporter.enabled }}
      - name: redis-exporter
        image: "{{ .Values.exporter.image }}:{{ .Values.exporter.tag }}"
        securityContext:
          runAsUser: 51000
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
        imagePullPolicy: {{ .Values.exporter.pullPolicy }}
        args:
        {{- range $key, $value := .Values.extraArgs }}
          - --{{ $key }}={{ $value }}
        {{- end }}
        env:
          - name: REDIS_ADDR
            value: redis://localhost:6379
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "baca-redis"
                key: redis-password
          - name: CERTIFICATE_DIR
            value: "/etc/certs"
        livenessProbe:
          httpGet:
            path: {{ .Values.exporter.scrapePath }}
            port: {{ .Values.exporter.port }}
          initialDelaySeconds: 15
          timeoutSeconds: 1
          periodSeconds: 15
        resources:
{{ toYaml .Values.global.redis.resources | indent 10 }}
        ports:
          - name: exporter-port
            containerPort: {{ .Values.exporter.port }}
{{- end }}
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ .Values.global.data.claimname }}
      - name: storage
        secret:
          secretName: baca-secrets{{ .Values.global.namespace.name }}
          items:
            - key: redis.crt
              path: redis.crt
            - key: redis.key
              path: redis.key
            - key: redis.pem
              path: redis.pem
      - name: config
        configMap:
          name: {{ template "redis-ha.fullname" . }}-configmap
      - name: probes
        configMap:
          name: {{ template "redis-ha.fullname" . }}-probes
      {{- if .Values.sysctlImage.mountHostSys }}
      - name: host-sys
        hostPath:
          path: /sys
      {{- end }}
#{{- if .Values.persistentVolume.enabled }}
#  volumeClaimTemplates:
#  - metadata:
#      name: data
#      annotations:
#      {{- range $key, $value := .Values.persistentVolume.annotations }}
#        {{ $key }}: {{ $value }}
#      {{- end }}
#    spec:
#      accessModes:
#      {{- range .Values.persistentVolume.accessModes }}
#        - {{ . | quote }}
#      {{- end }}
#      resources:
#        requests:
#          storage: {{ .Values.persistentVolume.size | quote }}
#    {{- if .Values.persistentVolume.storageClass }}
#    {{- if (eq "-" .Values.persistentVolume.storageClass) }}
#      storageClassName: ""
#    {{- else }}
#      storageClassName: "{{ .Values.persistentVolume.storageClass }}"
#    {{- end }}
#    {{- end }}
#{{- else if .Values.hostPath.path }}
#      - name: data
#        hostPath:
#          path: {{ tpl .Values.hostPath.path .}}
#{{- else }}
#      - name: data
#        emptyDir: {}
#{{- end }}
