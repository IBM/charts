{{- $licenseEnabled := include "{{ .Chart.Name }}.licenseValidate" .  | required "License must be accepted by setting Values.license.accept to true." -}}
{{- if $licenseEnabled }}
{{- include "sch.config.init" (list . "ibm-ucdr-prod.sch.chart.config.values") -}}
{{- $imageSpec := include "{{ .Chart.Name }}.imageSpec" . | trim -}}
{{- $fullName := include "sch.names.fullName" (list .) -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $fullName }}
  labels:
{{ include "sch.metadata.labels.standard" (list . "rly") | indent 4 }}
spec:
  serviceName: {{ $fullName }}-hl
  replicas: 1
  selector:
    matchLabels:
{{ include "sch.metadata.labels.standard" (list . "rly") | indent 6 }}
  template:
    metadata:
      labels:
{{ include "sch.metadata.labels.standard" (list . "rly") | indent 8 }}
        ucdcomp: {{ .Release.Name }}-relay
      annotations:
        productName: "UrbanCode Deploy Server Agent"
        productID: "f6a78b2d36ca400389f3a60332112399"
        productVersion: "7.1.1"
        productMetric: "MANAGED_VIRTUAL_SERVER"
        productChargedContainers: "All"
    spec:
      serviceAccount: {{ $fullName }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
{{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
        runAsUser: 1001
        fsGroup: {{ .Values.persistence.fsGroup }}
{{- end }}
      affinity:
      {{- include "sch.affinity.nodeAffinity" (list .) | indent 8 }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: ucdcomp
                  operator: In
                  values:
                  - {{ .Release.Name }}-relay
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: {{ .Chart.Name }}
        image: {{ $imageSpec | quote }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
{{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
          runAsUser: 1001
{{- end}}
          capabilities:
            drop:
            - ALL
        ports:
        - containerPort: 20080
        - containerPort: 20081
        readinessProbe:
          tcpSocket:
            port: 20080
          initialDelaySeconds: 20
          periodSeconds: 20
        livenessProbe:
          tcpSocket:
            port: 20080
          initialDelaySeconds: 30
          periodSeconds: 30
        env:
          - name: WEB_PROXY_SERVER
            value: "{{ .Values.serverHostPort }}"
          - name: CODESTATION_ENABLE_REPLICATION
            value: "{{ .Values.codeStationReplication.enabled }}"
          - name: CODESTATION_PERSIST_CACHE
            value: "{{ .Values.codeStationReplication.persisted }}"
          - name: CODESTATION_MAX_CACHE_SIZE
            value: "{{ .Values.codeStationReplication.maxCacheSize }}"
          - name: CODESTATION_SERVER_URL
            value: "{{ .Values.codeStationReplication.serverUrl }}"
          - name: CODESTATION_SERVER_PASSWORD
            valueFrom:
              secretKeyRef:
                {{- if .Values.secret.name }}
                name: {{ .Values.secret.name }}
                {{- else }}
                name: {{ .Release.Name }}-secrets
                {{- end }}
                key: cspassword
          - name: CODESTATION_GEOTAGS
            value: "{{ .Values.codeStationReplication.geotags }}"
          - name: UCD_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                {{- if .Values.secret.name }}
                name: {{ .Values.secret.name }}
                {{- else }}
                name: {{ .Release.Name }}-secrets
                {{- end }}
                key: keystorepassword
        volumeMounts:
          - name: "{{ $fullName }}-{{ .Values.confVolume.name }}"
            mountPath: "/opt/ibm-ucd/agentrelay/configs"
        resources:
          {{- if .Values.resources.constraints.enabled}}
          limits:
{{ toYaml .Values.resources.limits | indent 12 }}
          requests:
{{ toYaml .Values.resources.requests | indent 12 }}
          {{- end }}
      {{- if .Values.image.secret }}
      imagePullSecrets:
      - name: {{ .Values.image.secret }}
      {{- end }}
      volumes:
      - name: "{{ $fullName }}-{{ .Values.confVolume.name }}"
      {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
        {{- if .Values.confVolume.existingClaimName }}
          claimName: {{ .Values.confVolume.existingClaimName }}
        {{- else }}
          claimName: {{ $fullName }}-{{ .Values.confVolume.name }}
        {{- end }}
      {{- else }}
        emptyDir: {}
      {{- end }}
{{- end }}
