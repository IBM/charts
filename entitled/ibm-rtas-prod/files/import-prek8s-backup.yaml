---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-{{ .Release.Name }}-execution-postgresql-0
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-{{ .Release.Name }}-gateway-postgresql-0
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-{{ .Release.Name }}-results-0
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 8Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-{{ .Release.Name }}-results-postgresql-0
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-{{ .Release.Name }}-rm-postgresql-0
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-{{ .Release.Name }}-tam-postgresql-0
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 8Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-{{ .Release.Name }}-keycloak-postgresql-0
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Pod
metadata:
  name: import-prek8s-backup
spec:
  securityContext:
    runAsUser: 1001
  containers:
  - name: main
    image: "adoptopenjdk/openjdk8-openj9:jdk8u272-b10_openj9-0.23.0-ubi"
    command:
    - /bin/run.sh
    env:
    - name: MY_POD_NAMESPACE
      valueFrom:
        fieldRef:
          fieldPath: metadata.namespace
    volumeMounts:
    - name: script
      mountPath: /bin/run.sh
      subPath: run.sh
    - name: data
      mountPath: /data
    - name: data-{{ .Release.Name }}-execution-postgresql-0
      mountPath: /postgresql/execution_pg
    - name: data-{{ .Release.Name }}-gateway-postgresql-0
      mountPath: /postgresql/gateway_pg
    - name: data-{{ .Release.Name }}-keycloak-postgresql-0
      mountPath: /postgresql/keycloak_pg
    - name: data-{{ .Release.Name }}-results-0
      mountPath: /data/results_data
    - name: data-{{ .Release.Name }}-results-postgresql-0
      mountPath: /postgresql/results_pg
    - name: data-{{ .Release.Name }}-rm-postgresql-0
      mountPath: /postgresql/rm_pg
    - name: data-{{ .Release.Name }}-tam-postgresql-0
      mountPath: /postgresql/testassets_pg
  volumes:
  - name: script
    configMap:
      name: import-prek8s-backup
      defaultMode: 0555
  - name: data
    emptyDir: {}
  - name: data-{{ .Release.Name }}-execution-postgresql-0
    persistentVolumeClaim:
      claimName: data-{{ .Release.Name }}-execution-postgresql-0
  - name: data-{{ .Release.Name }}-gateway-postgresql-0
    persistentVolumeClaim:
      claimName: data-{{ .Release.Name }}-gateway-postgresql-0
  - name: data-{{ .Release.Name }}-keycloak-postgresql-0
    persistentVolumeClaim:
      claimName: data-{{ .Release.Name }}-keycloak-postgresql-0
  - name: data-{{ .Release.Name }}-results-0
    persistentVolumeClaim:
      claimName: data-{{ .Release.Name }}-results-0
  - name: data-{{ .Release.Name }}-results-postgresql-0
    persistentVolumeClaim:
      claimName: data-{{ .Release.Name }}-results-postgresql-0
  - name: data-{{ .Release.Name }}-rm-postgresql-0
    persistentVolumeClaim:
      claimName: data-{{ .Release.Name }}-rm-postgresql-0
  - name: data-{{ .Release.Name }}-tam-postgresql-0
    persistentVolumeClaim:
      claimName: data-{{ .Release.Name }}-tam-postgresql-0
  restartPolicy: Never
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: import-prek8s-backup
data:
  run.sh: |
   #!/bin/bash -e
   echo "Waiting for backup to be copied into pod:"
   echo "  kubectl cp ibm-rtas_snapshot_20200220_2020.tar.gz $(cat /etc/hostname):/data/backup-file -n $MY_POD_NAMESPACE"
   while [ ! -f /data/backup-file ]; do
     sleep 15
   done
   echo "Backup found, waiting for copy to complete..."
   LAST_SIZE=-1
   while true; do
     NEW_SIZE=$(ls -l /data/backup-file | cut -d ' ' -f5)
     echo "Copied $NEW_SIZE bytes"
     if [ "$LAST_SIZE" = "$NEW_SIZE" ]; then
       break
     fi
     LAST_SIZE="$NEW_SIZE"
     sleep 5
   done
   echo "Extracting backup..."
   echo "NOTE: for a large backup, this may take some time.  Please wait for the pod to"
   echo "complete.  This log will display further instructions when that has happened."
   tar xf /data/backup-file -C /data env/.env $(findmnt -lo target | sed -n -r 's#^/data/(.*)#\1/*#p')

   for p in $(findmnt -lo target | sed -n -r 's#^/postgresql/(.*)#\1#p')
   do
     tar xf /data/backup-file -C /postgresql/$p $p
     mv /postgresql/$p/$p /postgresql/$p/data
   done

   rm /data/backup-file
   echo "Restored data."
   du -sh $(findmnt -lo target | grep '^/\(data\|postgresql\)/' | sort)
   echo "Additional helm arguments required during install to use existing data:"
   echo "  --set keycloak.keycloak.username=admin \\"
   echo "  --set execution.existingPostgresqlPassword=$(grep -Po '(?<=^DB_EX_SECRET=).*$' /data/env/.env 2>/dev/null) \\"
   echo "  --set existingKeycloakPassword=$(grep -Po '(?<=^KEYCLOAK_ADMIN_SECRET=).*$' /data/env/.env 2>/dev/null) \\"
   echo "  --set existingKeycloakPostgresqlPassword=$(grep -Po '(?<=^KEYCLOAK_PG_SECRET=).*$' /data/env/.env 2>/dev/null) \\"
   echo "  --set existingOauthClientSecret=$(grep -Po '(?<=^GATEWAY_OAUTH2_SECRET=).*$' /data/env/.env 2>/dev/null) \\"
   echo "  --set existingPostgresqlPassword=$(grep -Po '(?<=^DB_JPA_SECRET=).*$' /data/env/.env 2>/dev/null) \\"
   echo "  --set existingSecretsStorageKey=$(grep -Po '(?<=^SECRETS_MASTER_PASSWORD=).*$' /data/env/.env 2>/dev/null) \\"
   echo "  --set results.existingPostgresqlPassword=$(grep -Po '(?<=^DB_RS_SECRET=).*$' /data/env/.env 2>/dev/null) \\"
   echo "  --set rm.existingPostgresqlPassword=$(grep -Po '(?<=^DB_RM_SECRET=).*$' /data/env/.env 2>/dev/null) \\"
   echo "  --set tam.existingPostgresqlPassword=$(grep -Po '(?<=^DB_TA_SECRET=).*$' /data/env/.env 2>/dev/null) \\"
   echo ""
   echo "You can tidy up this pod with:"
   echo "  kubectl delete pod $(cat /etc/hostname) -n $MY_POD_NAMESPACE"
   echo "Finished."
---
