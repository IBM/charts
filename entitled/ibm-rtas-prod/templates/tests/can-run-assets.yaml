{{- if .Values.test.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-test-can-run-assets"
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  backoffLimit: 0
  ttlSecondsAfterFinished: 3600
  template:
    metadata:
      labels: {{ include "gateway.labels" . | nindent 10 }}
      annotations:
        productName: "IBM Rational Test Automation Server"
        productID: "5874d2c1cb5640d091d91b819bf76a45"
        productVersion: "10.1.2"
        productMetric: RESOURCE_UNIT
    spec:
      hostIPC: false
      hostNetwork: false
      hostPID: false
      serviceAccountName: {{ .Release.Name }}-engine
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.securityContext.runAsUser }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
{{ if .Values.global.ibmRtasRegistryPullSecret }}
      imagePullSecrets:
        - name: {{ .Values.global.ibmRtasRegistryPullSecret }}
{{ end }}
      volumes:
        - name: token
          emptyDir: {}
        - name: license
          emptyDir: {}
        - name: workspace
          emptyDir: {}
        - name: ingress
          secret:
            secretName: {{ tpl .Values.global.ibmRtasCertSecretName $ }}
            optional: {{ .Values.global.ibmRtasCertSecretOptional }}
      initContainers:
        - name: refresh-token
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: {{ .Values.securityContext.runAsUser }}
          resources:
            limits:
              memory: 64Mi
            requests:
              cpu: 50m
              memory: 64Mi
          image: "{{ .Values.global.ibmRtasRegistry }}/{{ .Values.global.ibmRtasInitImage }}"
          env:
            {{ if not .Values.global.ibmRtasIngressDomain }}
            - name: SOLUTION_DOMAIN
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-domain
                  key: HOST
            {{ end }}
            - name: INGRESS_DOMAIN
              value: {{ default ( print .Values.global.ibmRtasIngressServiceName ".$(SOLUTION_DOMAIN)" ) .Values.global.ibmRtasIngressDomain }}
            - name: ADMIN_NAME
              value: {{ .Values.keycloak.keycloak.username | quote }}
            - name: ADMIN_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-keycloak-postgresql
                  key: password
            - name: SECURITY_OAUTH2_CLIENT_CLIENT_ID
              value: testserver
            - name: SECURITY_OAUTH2_CLIENT_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "gateway.fullname" . }}
                  key: oauth-client-secret
          command:
            - 'bash'
            - '-c'
            - |
              if [ -s /usr/share/pki/ingress/ca.crt ]; then
                CAFILE="--cacert /usr/share/pki/ingress/ca.crt"
              else
                echo no ca found.
              fi

              echo "check that we can talk to ingress. expect 200"
              curl -sw'%{http_code}' $CAFILE -o/dev/null "https://$INGRESS_DOMAIN"

              echo
              echo "get keycloak access-token for $ADMIN_NAME"
              curl -si $CAFILE -X POST "https://$INGRESS_DOMAIN/auth/realms/master/protocol/openid-connect/token" \
                -H 'Content-Type: application/x-www-form-urlencoded' \
                -d "username=$ADMIN_NAME" \
                --data-urlencode "password=$ADMIN_PASS" \
                -d grant_type=password \
                -d client_id=admin-cli >/token/admin-token.txt

              ADMIN_TOKEN=$(sed -r -n 's/.*"access_token":"([^"]*)".*/\1/p' /token/admin-token.txt)
              if [[ -z "$ADMIN_TOKEN" ]]; then
                cat /token/admin-token.txt
                echo ERROR: no access-token found
                exit 1
              fi

              echo
              echo create build.verification password
              USER_PASS=$(cat /dev/urandom | head -c64 | sha256sum | cut -d " " -f1 | tr -d '\n')

              echo
              echo query old build.verification user
              curl -si $CAFILE -X GET "https://$INGRESS_DOMAIN/auth/admin/realms/testserver/users?username=build.verification" \
                -H "Authorization: Bearer $ADMIN_TOKEN" >/token/old-user.txt

              OLD_USER_ID=$(sed -r -n 's/.*"id":"([^"]*)".*/\1/p' /token/old-user.txt)
              if [[ -z "$OLD_USER_ID" ]]; then
                cat /token/old-user.txt
                echo no old build.verification user exists
              else
                echo
                echo delete old build.verification user $OLD_USER_ID
                curl -si $CAFILE -X DELETE "https://$INGRESS_DOMAIN/auth/admin/realms/testserver/users/$OLD_USER_ID" \
                  -H "Authorization: Bearer $ADMIN_TOKEN"
              fi

              echo
              echo create build.verification user
              curl -si $CAFILE -X POST "https://$INGRESS_DOMAIN/auth/admin/realms/testserver/users" \
                -H 'Content-Type: application/json' \
                -H 'Accept: application/json' \
                -H "Authorization: Bearer $ADMIN_TOKEN" \
                -d '{"username":"build.verification",
                     "firstName":"build",
                     "lastName":"verification",
                     "email":"build.verification@email.test",
                     "emailVerified": false,
                     "enabled":"true",
                     "credentials":[{"type":"password",
                                     "value":"'$USER_PASS'",
                                     "temporary":false}]}'

              echo
              echo get build.verification refresh-token
              curl -si $CAFILE -X POST "https://$INGRESS_DOMAIN/auth/realms/testserver/protocol/openid-connect/token" \
                -H 'Content-Type: application/x-www-form-urlencoded' \
                -d username=build.verification \
                --data-urlencode "password=$USER_PASS" \
                -d grant_type=password \
                -d client_id=$SECURITY_OAUTH2_CLIENT_CLIENT_ID \
                --data-urlencode "client_secret=$SECURITY_OAUTH2_CLIENT_CLIENT_SECRET" >/token/user-token.txt

              sed -r -n 's/.*"refresh_token":"([^"]*)".*/\1/p' /token/user-token.txt >/token/refresh-token.txt
              if [ ! -s /token/refresh-token.txt ]; then
                cat /token/user-token.txt
                echo ERROR: no refresh-token found
                exit 1
              else
                cat /token/refresh-token.txt | cut -d. -f 2 | base64 -d 2>/dev/null || true
              fi
          volumeMounts:
            - mountPath: /token
              name: token
            - mountPath: /usr/share/pki/ingress
              name: ingress
              readOnly: true
        - name: license
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: {{ .Values.securityContext.runAsUser }}
          resources:
            limits:
              memory: 64Mi
            requests:
              cpu: 50m
              memory: 64Mi
          image: "{{ .Values.global.ibmRtasRegistry }}/{{ .Values.global.ibmRtasInitImage }}"
          env:
            {{ if not .Values.global.ibmRtasIngressDomain }}
            - name: SOLUTION_DOMAIN
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-domain
                  key: HOST
            {{ end }}
            - name: INGRESS_DOMAIN
              value: {{ default ( print .Values.global.ibmRtasIngressServiceName ".$(SOLUTION_DOMAIN)" ) .Values.global.ibmRtasIngressDomain }}
            - name: ADMIN_NAME
              value: {{ .Values.keycloak.keycloak.username | quote }}
            - name: ADMIN_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-keycloak-postgresql
                  key: password
            - name: SECURITY_OAUTH2_CLIENT_CLIENT_ID
              value: testserver
            - name: SECURITY_OAUTH2_CLIENT_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "gateway.fullname" . }}
                  key: oauth-client-secret
          command:
            - 'bash'
            - '-c'
            - |
              if [ -s /usr/share/pki/ingress/ca.crt ]; then
                CAFILE="--cacert /usr/share/pki/ingress/ca.crt"
              else
                echo no ca found.
              fi

              echo "check that we can talk to ingress. expect 200"
              curl -sw'%{http_code}' $CAFILE -o/dev/null "https://$INGRESS_DOMAIN"

              echo
              echo "get keycloak access-token for $ADMIN_NAME"
              curl -si $CAFILE -X POST "https://$INGRESS_DOMAIN/auth/realms/master/protocol/openid-connect/token" \
                -H 'Content-Type: application/x-www-form-urlencoded' \
                -d "username=$ADMIN_NAME" \
                --data-urlencode "password=$ADMIN_PASS" \
                -d grant_type=password \
                -d client_id=admin-cli >/token/admin-token.txt

              ADMIN_TOKEN=$(sed -r -n 's/.*"access_token":"([^"]*)".*/\1/p' /token/admin-token.txt)
              if [[ -z "$ADMIN_TOKEN" ]]; then
                cat /token/admin-token.txt
                echo ERROR: no access-token found
                exit 1
              fi

              USER_PASS=$(cat /dev/urandom | head -c64 | sha256sum | cut -d " " -f1 | tr -d '\n')

              echo create build.admin.verification user
              curl -si $CAFILE -X POST "https://$INGRESS_DOMAIN/auth/admin/realms/testserver/users" \
                -H 'Content-Type: application/json' \
                -H 'Accept: application/json' \
                -H "Authorization: Bearer $ADMIN_TOKEN" \
                -d '{"username":"build.admin.verification",
                     "firstName":"build.admin.verification",
                     "lastName":"build.admin.verification",
                     "email":"build.admin.verification@email.test",
                     "emailVerified": false,
                     "enabled":"true",
                     "groups":["Admins"],
                     "credentials":[{"type":"password",
                                     "value":"'$USER_PASS'",
                                     "temporary":false}]}'

              echo get build.admin.verification access-admin-token
              curl -si $CAFILE -X POST "https://$INGRESS_DOMAIN/auth/realms/testserver/protocol/openid-connect/token" \
                -H 'Content-Type: application/x-www-form-urlencoded' \
                -d username=build.admin.verification \
                --data-urlencode "password=$USER_PASS" \
                -d grant_type=password \
                -d client_id=$SECURITY_OAUTH2_CLIENT_CLIENT_ID \
                --data-urlencode "client_secret=$SECURITY_OAUTH2_CLIENT_CLIENT_SECRET" >/token/access-admin-token.txt

              ACCESS_TOKEN=$(sed -r -n 's/.*"access_token":"([^"]*)".*/\1/p' /token/access-admin-token.txt)
              if [[ -z "$ACCESS_TOKEN" ]]; then
               cat /token/access-admin-token.txt
                echo ERROR: no access-admin-token found
                exit 1
              fi

              echo enable BVT mode
              curl -si $CAFILE -X PUT "https://$INGRESS_DOMAIN/rest/licensing/configuration/" \
                -H 'Content-Type: application/json' \
                -H 'Accept: application/json' \
                -H "Authorization: Bearer $ACCESS_TOKEN" \
                -d '{ "bvtMode": "true" }'

              echo query build.admin.verification userId
              curl -si $CAFILE -X GET "https://$INGRESS_DOMAIN/auth/admin/realms/testserver/users?username=build.admin.verification" \
                -H "Authorization: Bearer $ADMIN_TOKEN" >/token/old-admin-user.txt

              OLD_ADMIN_USER_ID=$(sed -r -n 's/.*"id":"([^"]*)".*/\1/p' /token/old-admin-user.txt)
              if [[ -z "$OLD_ADMIN_USER_ID" ]]; then
                cat /token/old-admin-user.txt
                echo no build.admin.verification user exists
              else
                echo delete build.admin.verification user $OLD_USER_ID
                curl -si $CAFILE -X DELETE "https://$INGRESS_DOMAIN/auth/admin/realms/testserver/users/$OLD_ADMIN_USER_ID" \
                  -H "Authorization: Bearer $ADMIN_TOKEN"
              fi
          volumeMounts:
            - mountPath: /token
              name: license
            - mountPath: /usr/share/pki/ingress
              name: ingress
              readOnly: true
        - name: fetch-project
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: {{ .Values.securityContext.runAsUser }}
          resources:
            limits:
              memory: 64Mi
            requests:
              cpu: 50m
              memory: 64Mi
          image: "{{ .Values.global.ibmRtasRegistry }}/{{ .Values.global.ibmRtasInitImage }}"
          command:
            - 'bash'
            - '-c'
            - 'jar -xf <(curl -L https://github.com/ibm-rtvs/build-verify-boot/archive/v10.1.2.zip)'
          volumeMounts:
            - mountPath: /build-verify-boot-10.1.2
              name: workspace
      containers:
        - name: main
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: {{ .Values.securityContext.runAsUser }}
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: 500m
              memory: 256Mi
          image: {{ .Values.global.ibmRtasRegistry }}/{{ .Values.execution.apiImage }}
          imagePullPolicy: {{ .Values.execution.enginePullPolicy }}
          env:
            {{ if not .Values.global.ibmRtasIngressDomain }}
            - name: SOLUTION_DOMAIN
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-domain
                  key: HOST
            {{ end }}
            - name: INGRESS_DOMAIN
              value: {{ default ( print .Values.global.ibmRtasIngressServiceName ".$(SOLUTION_DOMAIN)" ) .Values.global.ibmRtasIngressDomain }}
            - name: ingress_host
              value: $(INGRESS_DOMAIN)
            - name: GATEWAY_URL
              value: https://$(INGRESS_DOMAIN)
          command:
            - 'bash'
            - '-c'
            - |
              export refresh_token=$(cat /token/refresh-token.txt)
              export repo_branch=789c61e0b472493271557756778f14033dece7c9
              echo token used:
              echo "$refresh_token" | cut -d. -f 2 | base64 -d 2>/dev/null || true
              export RTCP_OFFLINE_TOKEN=$refresh_token

              exec $INTEGRATION_TESTER_AGENT_HOME/RunTests -noHTTP -environmentTags env -project /workspace/API/API.ghp -environment dynamic -run EndToEnd/Execution
          volumeMounts:
            - mountPath: /token
              name: token
            - mountPath: /workspace
              name: workspace
      restartPolicy: Never
{{- end }}
