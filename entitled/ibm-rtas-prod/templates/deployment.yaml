apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "gateway.fullname" . }}
  labels:
{{ include "gateway.labels" . | indent 4 }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "gateway.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels: {{ include "gateway.labels" . | nindent 10 }}
      annotations:
        productName: "IBM Rational Test Automation Server"
        productID: "5874d2c1cb5640d091d91b819bf76a45"
        productVersion: "10.1.2"
        productMetric: RESOURCE_UNIT
    spec:
      hostIPC: false
      hostNetwork: false
      hostPID: false
      serviceAccountName: {{ include "gateway.fullname" . }}
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.securityContext.runAsUser }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
{{ if .Values.global.ibmRtasRegistryPullSecret }}
      imagePullSecrets:
        - name: {{ .Values.global.ibmRtasRegistryPullSecret }}
{{ end }}
      volumes:
        - name: trust-store
          emptyDir: {}
        - name: usercerts
          secret:
            secretName: {{ tpl .Values.global.ibmRtasUserCertsSecretName $ }}
            optional: true
        - name: ingress
          secret:
            secretName: {{ tpl .Values.global.ibmRtasCertSecretName $ }}
            optional: {{ .Values.global.ibmRtasCertSecretOptional }}
      initContainers:
        - name: trust-store
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: {{ .Values.securityContext.runAsUser }}
          resources:
            limits:
              memory: 64Mi
            requests:
              cpu: 50m
              memory: 64Mi
          image: "{{ .Values.global.ibmRtasRegistry }}/{{ .Values.global.ibmRtasInitImage }}"
          command:
            - sh
            - -c
            - |
              cp /opt/java/openjdk/jre/lib/security/cacerts /etc/pki/java/cacerts
              if [ -s /usr/share/pki/ingress/ca.crt ]; then
                keytool -import -noprompt -alias ingress-ca -file /usr/share/pki/ingress/ca.crt -keystore /etc/pki/java/cacerts -storepass changeit
              fi
              find /usr/share/pki/usercerts -maxdepth 1 -name *.crt -exec keytool -import -noprompt -alias {} -file {} -keystore /etc/pki/java/cacerts -storepass changeit \;
              keytool -list -keystore /opt/java/openjdk/jre/lib/security/cacerts -storepass changeit | grep entries
              keytool -list -keystore /etc/pki/java/cacerts -storepass changeit
          volumeMounts:
            - mountPath: /etc/pki/java
              name: trust-store
            - mountPath: /usr/share/pki/usercerts
              name: usercerts
              readOnly: true
            - mountPath: /usr/share/pki/ingress
              name: ingress
              readOnly: true
        - name: keycloak-isready
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: {{ .Values.securityContext.runAsUser }}
          resources:
            limits:
              memory: 64Mi
            requests:
              cpu: 50m
              memory: 64Mi
          image: "{{ .Values.global.ibmRtasRegistry }}/{{ .Values.global.ibmRtasInitImage }}"
          command:
            - 'sh'
            - '-c'
            - |
              while true; do
                code=$(curl -sw '%{http_code}' "http://{{ printf "%s-%s" .Release.Name "ssocloak" | trunc 20 | trimSuffix "-" }}-http/auth/realms/testserver/" -o /dev/null)
                echo response $code
                if [ "$code" = "200" ]; then
                  exit
                fi
                sleep 15
              done
        - name: pg-isready
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: {{ .Values.securityContext.runAsUser }}
          resources:
            limits:
              memory: 64Mi
            requests:
              cpu: 50m
              memory: 64Mi
          image: "{{ .Values.global.ibmRtasRegistry }}/ibm-rtas-postgresql:11.7.0-debian-10-r90"
          command:
            - sh
            - -c
            - 'until pg_isready -U {{ .Values.postgresql.postgresqlUsername }} -h {{ .Release.Name }}-{{ .Values.postgresql.nameOverride }} -p 5432; do sleep 15; done;'
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: {{ .Values.securityContext.runAsUser }}
          image: {{ .Values.global.ibmRtasRegistry }}/{{ regexReplaceAll .Values.global.ibmRtasImageRegex .Values.image .Values.global.ibmRtasImageRepl }}
          imagePullPolicy: {{ .Values.pullPolicy }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 180
            httpGet:
              path: /management/health
              port: http
          readinessProbe:
            httpGet:
              path: /management/health
              port: http
          env:
          {{- range $key, $value := .Values.extraEnv }}
            - name: {{ $key }}
              value: {{ tpl $value $ | quote }}
          {{- end }}
            {{ if not .Values.global.ibmRtasIngressDomain }}
            - name: SOLUTION_DOMAIN
              valueFrom:
                configMapKeyRef:
                  name: {{ .Release.Name }}-domain
                  key: HOST
            {{ end }}
            - name: INGRESS_DOMAIN
              value: {{ default ( print .Values.global.ibmRtasIngressServiceName ".$(SOLUTION_DOMAIN)" ) .Values.global.ibmRtasIngressDomain }}
            - name: CHART_APPVERSION
              value: {{ .Chart.AppVersion }}
            - name: CHART_VERSION
              value: {{ .Chart.Version }}
            - name: KEYCLOAK_AUTH_SERVER_URL
              value: http://{{ printf "%s-%s" .Release.Name "ssocloak" | trunc 20 | trimSuffix "-" }}-http/auth
            - name: KEYCLOAK_URLSCONFIG_ENABLED
              value: "true"
            - name: KEYCLOAK_URLSCONFIG_PUBLICURL
              value: https://$(INGRESS_DOMAIN)
            - name: KEYCLOAK_CREDENTIAL_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "gateway.fullname" . }}
                  key: oauth-client-secret
            - name: SECRETS_STORAGE_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "gateway.fullname" . }}
                  key: secrets-storage-key
            - name: gateway.addon.addonCredentials
              valueFrom:
                secretKeyRef:
                  name: {{ include "gateway.fullname" . }}
                  key: addon-registration-secret
            - name: SECURITY_OAUTH2_CLIENT_ACCESS_TOKEN_URI
              value: http://{{ printf "%s-%s" .Release.Name "ssocloak" | trunc 20 | trimSuffix "-" }}-http/auth/realms/testserver/protocol/openid-connect/token
            - name: SECURITY_OAUTH2_CLIENT_CLIENT_ID
              value: testserver
            - name: SECURITY_OAUTH2_CLIENT_CLIENT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "gateway.fullname" . }}
                  key: oauth-client-secret
            - name: SECURITY_OAUTH2_CLIENT_USER_AUTHORIZATION_URI
              value: https://$(INGRESS_DOMAIN)/auth/realms/testserver/protocol/openid-connect/auth
            - name: SECURITY_OAUTH2_RESOURCE_USER_INFO_URI
              value: http://{{ printf "%s-%s" .Release.Name "ssocloak" | trunc 20 | trimSuffix "-" }}-http/auth/realms/testserver/protocol/openid-connect/userinfo
            - name: SERVER_USE_FORWARD_HEADERS_STRATEGY
              value: "framework"
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "gateway.fullname" . }}
                  key: postgresql-password
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://{{ .Release.Name }}-{{ .Values.postgresql.nameOverride }}:5432/{{ .Values.postgresql.postgresqlDatabase }}"
            - name: SPRING_DATASOURCE_USERNAME
              value: {{ .Values.postgresql.postgresqlUsername }}
            - name: SPRING_PROFILES_ACTIVE
              value: prod,automation,swagger
            - name: SPRING_RABBITMQ_HOST
              value: '{{ .Release.Name }}-rabbitmq'
            - name: SPRING_RABBITMQ_PORT
              value: '5672'
            - name: SPRING_RABBITMQ_USERNAME
              value: user
            - name: SPRING_RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: '{{ .Release.Name }}-rabbitmq-custom'
                  key: rabbitmq-password
            - name: RATIONAL_LICENSE_FILE
              value: "{{ .Values.global.rationalLicenseKeyServer }}"
          volumeMounts:
            - mountPath: /opt/java/openjdk/jre/lib/security/cacerts
              subPath: cacerts
              name: trust-store
              readOnly: true
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
