global:
  cmdKubectl: kubectl
  ibmRtasCertSecretName: ingress
  ibmRtasCertSecretOptional: false
  ibmRtasRegistryPullSecret: ''
  ibmRtasImageRegex: ''
  ibmRtasImageRepl: ''
  ibmRtasInitImage: ibm-rtas-base-jdk8:10.1.2
  ibmRtasRegistry: cp.icr.io/cp
  ibmRtasUserCertsSecretName: usercerts
  jaegerAgent:
    enabled: false
    internalHostName: ''
  jaegerDashboard:
    enabled: false
    externalURL: ''
  persistence:
    rwxStorageClass: ''
  prometheusDashboard:
    enabled: true
    internalURL: http://{{ .Release.Name }}-prometheus-server
  rationalLicenseKeyServer: ''

license: false

ingress:
  enabled: false
  type: generic
  #type: istio
  annotations: {}
  gatewayName: ''
  tls:
    privateKey: /etc/istio/ingressgateway-certs/tls.key
    serverCertificate: /etc/istio/ingressgateway-certs/tls.crt
    #privateKey: sds
    #serverCertificate: sds
    #secretName: istio-ingressgateway-certs
  trailer: .*

networkPolicy:
  enabled: false
  ingress:
    enabled: false
    namespaceLabel: ''
    namespaceValue: ''
    podLabel: ''
    podValue: ''
  prometheus:
    enabled: false
    namespaceLabel: ''
    namespaceValue: ''

route:
  enabled: false

test:
  enabled: true


#gateway
resources:
  limits:
    memory: 1Gi
  requests:
    cpu: 150m
    memory: 400Mi
securityContext:
  runAsUser: 1001
  fsGroup: 1001


datasets:
  extraEnv:
    SECURITY_OAUTH2_RESOURCE_USER_INFO_URI: http://{{ printf "%s-%s" .Release.Name "ssocloak" | trunc 20 | trimSuffix "-" }}-http/auth/realms/testserver/protocol/openid-connect/userinfo
  postgresql:
    persistence:
      size: 2Gi
  resources:
    limits:
      memory: 1Gi
    requests:
      cpu: 150m
      memory: 400Mi
  securityContext:
    runAsUser: 1001
    fsGroup: 1001

execution:
  agentImage: ibm-rpta:10.1.2
  apiImage: ibm-rtvs:10.1.2
  workbenchImage: ibm-rtw:10.1.2
  enginePullPolicy: IfNotPresent
  extraEnv:
    SECURITY_OAUTH2_RESOURCE_USER_INFO_URI: http://{{ printf "%s-%s" .Release.Name "ssocloak" | trunc 20 | trimSuffix "-" }}-http/auth/realms/testserver/protocol/openid-connect/userinfo
  postgresql:
    persistence:
      size: 2Gi
  resources:
    limits:
      memory: 1Gi
    requests:
      cpu: 150m
      memory: 400Mi
  role:
    create: true
  roleBinding:
    create: true
  securityContext:
    runAsUser: 1001
    fsGroup: 1001

  istio:
    enabled: false
    namespaces:
    clusterRole:
      create: true
    clusterRoleBinding:
      create: false

  intercepts:
    clusterRole:
      create: true
    clusterRoleBinding:
      create: true

  ingress:
    type: none
    hostPattern: ''
    gatewayName: ''
    tls:
      enabled: false
      secretName: ''

frontend:
  extraInitContainers: |
    - name: gateway-isready
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: {{ .Values.securityContext.runAsUser }}
      resources:
        limits:
          memory: 64Mi
        requests:
          cpu: 50m
          memory: 64Mi
      image: "{{ .Values.global.ibmRtasRegistry }}/{{ .Values.global.ibmRtasInitImage }}"
      command:
        - 'sh'
        - '-c'
        - >-
          until [[ '{"status":"UP"' == $(curl $GATEWAY_ENDPOINT/management/health | tr -d "[:space:]" | head -c 14) ]]
            do sleep 15
          done
      env:
        - name: GATEWAY_ENDPOINT
          value: http://gateway:8080
  resources:
    limits:
      memory: 256Mi
    requests:
      cpu: 50m
      memory: 100Mi
  securityContext:
    runAsUser: 1001
    fsGroup: 1001

rabbitmq:
  auth:
    existingPasswordSecret: '{{ .Release.Name }}-rabbitmq-custom'
    existingErlangSecret: '{{ .Release.Name }}-rabbitmq-custom'
  podSecurityContext:
    runAsNonRoot: true
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop: ["ALL"]
    privileged: false
    runAsNonRoot: true
  resources:
    limits:
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 128Mi
  volumePermissions:
    enabled: false

keycloak:
  nameOverride: ssocloak
  keycloak:
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      privileged: false
      readOnlyRootFilesystem: false
      runAsNonRoot: true
      runAsUser: 1001
    existingSecret: "{{ .Release.Name }}-keycloak-postgresql"
    extraArgs: '-Dkeycloak.profile=preview -Dkeycloak.profile.feature.upload_scripts=enabled -Dkeycloak.import=/realm/realm.json'
    extraEnv: |
      {{ if not .Values.global.ibmRtasIngressDomain }}
      - name: SOLUTION_DOMAIN
        valueFrom:
          configMapKeyRef:
            name: {{ .Release.Name }}-domain
            key: HOST
      {{ end }}
      - name: INGRESS_DOMAIN
        value: {{ default ( print .Values.global.ibmRtasIngressServiceName ".$(SOLUTION_DOMAIN)" ) .Values.global.ibmRtasIngressDomain }}
      - name: KEYCLOAK_FRONTEND_URL
        value: https://$(INGRESS_DOMAIN)/auth
    extraInitContainers: |
      - name: realm-subst
        securityContext:
          {{- toYaml .Values.keycloak.containerSecurityContext | nindent 12 }}
        image: "{{ .Values.global.ibmRtasRegistry }}/{{ .Values.global.ibmRtasInitImage }}"
        command:
          - 'sh'
          - '-c'
          - >
            sed "s|localhost|$INGRESS_DOMAIN|g; s|mySecret|$SECURITY_OAUTH2_CLIENT_CLIENT_SECRET|g" /tmp/realm/realm.json > /realm/realm.json;
            diff /tmp/realm/realm.json /realm/realm.json | sed "s|$SECURITY_OAUTH2_CLIENT_CLIENT_SECRET|********|g"
        env:
          - name: SECURITY_OAUTH2_CLIENT_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-gateway
                key: oauth-client-secret
          {{ if not .Values.global.ibmRtasIngressDomain }}
          - name: SOLUTION_DOMAIN
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-domain
                key: HOST
          {{ end }}
          - name: INGRESS_DOMAIN
            value: {{ default ( print .Values.global.ibmRtasIngressServiceName ".$(SOLUTION_DOMAIN)" ) .Values.global.ibmRtasIngressDomain }}
        volumeMounts:
          - mountPath: /tmp/realm/
            name: realm-template
          - mountPath: /realm/
            name: realm
      - name: theme-provider
        securityContext:
          {{- toYaml .Values.keycloak.containerSecurityContext | nindent 12 }}
        image: {{ .Values.global.ibmRtasRegistry }}/{{ regexReplaceAll .Values.global.ibmRtasImageRegex .Values.theme.image .Values.global.ibmRtasImageRepl }}
        imagePullPolicy: {{ .Values.theme.pullPolicy }}
        command:
          - 'sh'
        args:
          - '-c'
          - |
            echo "Copying theme..."
            cp -R /mytheme/* /theme
        volumeMounts:
          - mountPath: /theme
            name: theme
    extraVolumeMounts: |
      - name: realm
        mountPath: /realm/
        readOnly: true
      - name: theme
        mountPath: /opt/jboss/keycloak/themes/isv
        readOnly: true
    extraVolumes: |
      - name: realm
        emptyDir: {}
      - name: realm-template
        configMap:
          name: {{ .Release.Name }}-gateway-keycloak-realm
      - name: theme
        emptyDir: {}
    persistence:
      dbVendor: postgres
      deployPostgres: true
    resources:
      limits:
        memory: 512Mi
      requests:
        cpu: 150m
        memory: 400Mi
    securityContext:
      fsGroup: 1001
    service:
      port: 80
    serviceAccount:
      create: true
    username: keycloak
  postgresql:
    existingSecret: "{{ .Release.Name }}-keycloak-postgresql"
    nameOverride: keycloak-postgresql
    persistence:
      enabled: true
      size: 2Gi
    serviceAccount:
      enabled: true
    volumePermissions:
      enabled: false
  test:
    enabled: false
  theme:
    image: ibm-rtas-keycloak-theme:07aed00@sha256:945bdaeceb9f98ae7c14709dd270454a7106521f9c8342cc4868593055d447cf
    pullPolicy: IfNotPresent

results:
  extraEnv:
    SECURITY_OAUTH2_RESOURCE_USER_INFO_URI: http://{{ printf "%s-%s" .Release.Name "ssocloak" | trunc 20 | trimSuffix "-" }}-http/auth/realms/testserver/protocol/openid-connect/userinfo
  persistence:
    size: 8Gi
  postgresql:
    persistence:
      size: 2Gi
  resources:
    limits:
      memory: 1Gi
    requests:
      cpu: 150m
      memory: 400Mi
  securityContext:
    runAsUser: 1001
    fsGroup: 1001

rm:
  enabled: true
  extraEnv:
    SECURITY_OAUTH2_RESOURCE_USER_INFO_URI: http://{{ printf "%s-%s" .Release.Name "ssocloak" | trunc 20 | trimSuffix "-" }}-http/auth/realms/testserver/protocol/openid-connect/userinfo
  postgresql:
    persistence:
      size: 2Gi
  resources:
    limits:
      memory: 1Gi
    requests:
      cpu: 150m
      memory: 400Mi
  securityContext:
    runAsUser: 1001
    fsGroup: 1001

tam:
  extraEnv:
    SECURITY_OAUTH2_RESOURCE_USER_INFO_URI: http://{{ printf "%s-%s" .Release.Name "ssocloak" | trunc 20 | trimSuffix "-" }}-http/auth/realms/testserver/protocol/openid-connect/userinfo
  persistence:
    size: 32Gi
  postgresql:
    persistence:
      size: 8Gi
  resources:
    limits:
      memory: 1Gi
    requests:
      cpu: 150m
      memory: 400Mi
  securityContext:
    runAsUser: 1001
    fsGroup: 1001

userlibs:
  persistence:
    size: 1Gi
  resources:
    limits:
      memory: 64Mi
    requests:
      cpu: 0m
      memory: 32Mi
  securityContext:
    runAsUser: 1001
    fsGroup: 1001

affinity:
  nodeAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: kubernetes.io/arch
              operator: In
              values:
                - amd64
image: ibm-rtas-gateway:07aed00@sha256:aaa92a0574d1bf5dc9bdddc507f3733c19873749e9e55040b78bc6dbb169a51b
fullnameOverride: ''
nameOverride: gateway
nodeSelector: {}
postgresql:
  existingSecret: '{{ .Release.Name }}-gateway'
  nameOverride: gateway-postgresql
  persistence:
    size: 2Gi
  postgresqlDatabase: gateway
  postgresqlUsername: gateway
  serviceAccount:
    enabled: true
  volumePermissions:
    enabled: false
pullPolicy: IfNotPresent
tolerations: []
