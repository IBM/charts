apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "rabbitmq.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
spec:
  serviceName: {{ template "rabbitmq.fullname" . }}-headless
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  replicas: {{ .Values.replicaCount }}
  updateStrategy:
    type: {{ .Values.updateStrategyType }}
    {{- if (eq "OnDelete" .Values.updateStrategyType) }}
    rollingUpdate: null
    {{- end }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" . | nindent 6 }}
  template:
    metadata:
      labels: {{- include "common.labels.standard" . | nindent 8 }}
        {{- if .Values.podLabels }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podLabels "context" $) | nindent 8 }}
        {{- end }}
      annotations:
        {{- if or (not .Values.auth.existingErlangSecret) (not .Values.auth.existingPasswordSecret) }}
        checksum/secret: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- end }}
        {{- if and .Values.auth.tls.enabled (not .Values.auth.tls.existingSecret) }}
        checksum/secret-cert: {{ include (print $.Template.BasePath "/certs.yaml") . | sha256sum }}
        {{- end }}
        {{- if or .Values.podAnnotations .Values.metrics.enabled }}
        {{- include "rabbitmq.podAnnotations" . | nindent 8 }}
        {{- end }}
    spec:
      hostIPC: false
      hostNetwork: false
      hostPID: false
{{ if .Values.global.ibmRtasRegistryPullSecret }}
      imagePullSecrets:
        - name: {{ .Values.global.ibmRtasRegistryPullSecret }}
{{ end }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName | quote }}
      {{- end }}
      serviceAccountName: {{ template "rabbitmq.serviceAccountName" . }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- if .Values.podSecurityContext }}
      securityContext: {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- end }}
      terminationGracePeriodSeconds: 10
      {{- if or (.Values.initContainers) (and .Values.volumePermissions.enabled .Values.persistence.enabled .Values.podSecurityContext) }}
      initContainers:
        {{- if and .Values.volumePermissions.enabled .Values.persistence.enabled .Values.podSecurityContext }}
        - name: volume-permissions
          image: {{ include "rabbitmq.volumePermissions.image" . }}
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy | quote }}
          command:
            - /bin/bash
          args:
            - -ec
            - |
              mkdir -p "/bitnami/rabbitmq/mnesia"
              chown -R "{{ .Values.podSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }}" "/bitnami/rabbitmq/mnesia"
          securityContext:
            runAsUser: 0
          {{- if .Values.volumePermissions.resources }}
          resources: {{- toYaml .Values.volumePermissions.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
        {{- end }}
        {{- if .Values.initContainers }}
        {{- include "common.tplvalues.render" (dict "value" .Values.initContainers "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: rabbitmq
          image: "{{ .Values.global.ibmRtasRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.containerSecurityContext }}
          securityContext: {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          {{- end }}
          {{- if .Values.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: BITNAMI_DEBUG
              value: {{ ternary "true" "false" .Values.image.debug | quote }}
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: "{{ template "rabbitmq.fullname" . }}-headless"
            - name: K8S_ADDRESS_TYPE
              value: {{ .Values.clustering.addressType }}
            - name: RABBITMQ_FORCE_BOOT
              value: {{ ternary "yes" "no" .Values.clustering.forceBoot | quote }}
            {{- if (eq "hostname" .Values.clustering.addressType) }}
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME).$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.{{ .Values.clusterDomain }}"
            - name: K8S_HOSTNAME_SUFFIX
              value: ".$(K8S_SERVICE_NAME).$(MY_POD_NAMESPACE).svc.{{ .Values.clusterDomain }}"
            {{- else }}
            - name: RABBITMQ_NODE_NAME
              value: "rabbit@$(MY_POD_NAME)"
            {{- end }}
            - name: RABBITMQ_MNESIA_DIR
              value: "/bitnami/rabbitmq/mnesia/$(RABBITMQ_NODE_NAME)"
            - name: RABBITMQ_LDAP_ENABLE
              value: {{ ternary "yes" "no" .Values.ldap.enabled | quote }}
            {{- if .Values.ldap.enabled }}
            - name: RABBITMQ_LDAP_TLS
              value: {{ ternary "yes" "no" .Values.ldap.tls.enabled | quote }}
            - name: RABBITMQ_LDAP_SERVERS
              value: {{ .Values.ldap.servers | join "," | quote }}
            - name: RABBITMQ_LDAP_SERVERS_PORT
              value: {{ .Values.ldap.port | quote }}
            - name: RABBITMQ_LDAP_USER_DN_PATTERN
              value: {{ .Values.ldap.user_dn_pattern }}
            {{- end }}
            - name: RABBITMQ_LOGS
              value: {{ .Values.logs | quote }}
            - name: RABBITMQ_ULIMIT_NOFILES
              value: {{ .Values.ulimitNofiles | quote }}
            {{- if and .Values.maxAvailableSchedulers }}
            - name: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
              value: {{ printf "+S %s:%s" (toString .Values.maxAvailableSchedulers) (toString .Values.onlineSchedulers) -}}
            {{- end }}
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  name: {{ template "rabbitmq.secretErlangName" . }}
                  key: rabbitmq-erlang-cookie
            - name: RABBITMQ_USERNAME
              value: {{ .Values.auth.username | quote }}
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "rabbitmq.secretPasswordName" . }}
                  key: rabbitmq-password
            - name: RABBITMQ_PLUGINS
              value: {{ include "rabbitmq.plugins" . | quote }}
            {{- if .Values.communityPlugins }}
            - name: RABBITMQ_COMMUNITY_PLUGINS
              value: {{ .Values.communityPlugins | quote }}
            {{- end }}
            {{- if .Values.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          {{- if or .Values.extraEnvVarsCM .Values.extraEnvVarsSecret }}
          envFrom:
            {{- if .Values.extraEnvVarsCM }}
            - configMapRef:
                name: {{ tpl .Values.extraEnvVarsCM . | quote }}
            {{- end }}
            {{- if .Values.extraEnvVarsSecret }}
            - secretRef:
                name: {{ tpl .Values.extraEnvVarsSecret . | quote }}
            {{- end }}
          {{- end }}
          ports:
            - name: amqp
              containerPort: 5672
            {{- if .Values.auth.tls.enabled }}
            - name: amqp-ssl
              containerPort: 5671
            {{- end }}
            - name: dist
              containerPort: 25672
            - name: stats
              containerPort: 15672
            - name: epmd
              containerPort: 4369
            {{- if .Values.metrics.enabled }}
            - name: metrics
              containerPort: 9419
            {{- end }}
            {{- if .Values.extraContainerPorts }}
            {{- toYaml .Values.extraContainerPorts | nindent 12 }}
            {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          {{- else if .Values.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customLivenessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -ec
                - rabbitmq-diagnostics -q check_running
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          {{- else if .Values.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.customReadinessProbe "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.resources }}
          resources: {{- toYaml .Values.resources | nindent 12 }}
          {{- end }}
          lifecycle:
          {{- if and .Values.clustering.rebalance (gt (.Values.replicaCount | int) 1) }}
            postStart:
              exec:
                command:
                  - /bin/bash
                  - -ec
                  - |
                    until rabbitmqctl cluster_status >/dev/null; do
                        echo "Waiting for cluster readiness..."
                        sleep 5
                    done
                    rabbitmq-queues rebalance "all"
          {{- end }}
            preStop:
              exec:
                command:
                  - bash
                  - -ec
                  - rabbitmqctl stop_app
          volumeMounts:
            - name: configuration
              mountPath: /bitnami/rabbitmq/conf
            - name: data
              mountPath: /bitnami/rabbitmq/mnesia
            {{- if .Values.auth.tls.enabled }}
            - name: certs
              mountPath: /opt/bitnami/rabbitmq/certs
            {{- end }}
            {{- if .Values.loadDefinition.enabled }}
            - name: load-definition-volume
              mountPath: /app
              readOnly: true
            {{- end }}
            {{- if .Values.extraVolumeMounts }}
            {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
            {{- end }}
        {{- if .Values.sidecars }}
        {{- include "common.tplvalues.render" (dict "value" .Values.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        {{- if .Values.auth.tls.enabled }}
        - name: certs
          secret:
            secretName: {{ template "rabbitmq.secretTLSName" . }}
            items:
              - key: ca.crt
                path: ca_certificate.pem
              - key: tls.crt
                path: server_certificate.pem
              - key: tls.key
                path: server_key.pem
        {{- end }}
        - name: configuration
          configMap:
            name: {{ template "rabbitmq.fullname" . }}-config
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
              {{- if .Values.advancedConfiguration}}
              - key: advanced.config
                path: advanced.config
              {{- end }}
        {{- if .Values.loadDefinition.enabled }}
        - name: load-definition-volume
          secret:
            secretName: {{ tpl .Values.loadDefinition.existingSecret . | quote }}
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- toYaml .Values.extraVolumes | nindent 8 }}
        {{- end }}
  {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
  {{- else if .Values.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
            {{- with .Values.persistence.existingClaim }}
            claimName: {{ tpl . $ }}
            {{- end }}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels: {{- include "common.labels.matchLabels" . | nindent 10 }}
      spec:
        accessModes:
          - {{ .Values.persistence.accessMode | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{ include "common.storage.class" (dict "persistence" .Values.persistence "global" .Values.global) }}
        {{- if .Values.persistence.selector }}
        selector: {{- include "common.tplvalues.render" (dict "value" .Values.persistence.selector "context" $) | nindent 10 }}
        {{- end -}}
  {{- end }}
