
{{- define "assistant.environment.etcd.secret" -}}apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: "{{ .Release.Name }}-global-etcd"
  labels:
    service:   "conversation"
    component: "etcd"
    slot:      "global"
    app:       "ibm-watson-assistant-prod-1.3.0"
    chart:     "ibm-watson-assistant"
    heritage:  "{{ .Release.Service }}"
    release:   "{{ .Release.Name }}"
data:
  etcd_connection:  $( echo '{}' | jq -c '{
      "compose_deployment": env.ETCD_DEPLOYMENT,
      "endpoints":          env.ETCD_ENDPOINTS,
      "userid":             env.ETCD_USERNAME,
      "password":           env.ETCD_PASSWORD,
      "root_prefix":        env.ROOT_PREFIX,
      "certificate_file":  "etcd_certificate"
    }' | base64 | tr -d '\n' )
  etcd_certificate: "$( (cat /etc/secrets/etcd_certificate/tls.cacrt || echo -n "" ) | base64 | tr -d '\n')"
{{- end -}} 
{{- include "sch.config.init" (list . .Values.global.schConfigTemplate) -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-global-etcd-gen-job"
  labels:  &labels
    <<: &primary_labels # Don't touch or extend these labels!
      service:   "conversation"
      component: "environment-etcd-gen-job"
      slot:      "{{ .Release.Name }}"
{{ include "sch.metadata.labels.standard" (list . "") | indent 4 }}
spec:
  backoffLimit: 10
  template:
    metadata:
      name: cred-gen
      labels: 
        <<: *labels
    spec:
      serviceAccountName: {{ (printf "%s-credentials" .Release.Name) | quote }}
      #imagePullSecrets:
      affinity:
{{- include "sch.affinity.nodeAffinity" (list .) | indent 8 }}
      hostIPC: false
      hostNetwork: false
      hostPID: false

      containers:
      - name: cred-gen
        image: "{{ if tpl ( .Values.creds.image.repository | toString ) . }}{{ trimSuffix "/" (tpl (.Values.creds.image.repository | toString ) . ) }}{{ end }}/{{ .Values.creds.image.name }}:{{ .Values.creds.image.tag }}"
        imagePullPolicy: {{ .Values.creds.image.pullPolicy | quote }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 2000

        command:
        - "/bin/sh"
        - -c
        - |
          set -e
          cat <<EOF | kubectl apply -n {{ .Release.Namespace }} -f -
{{ include "assistant.environment.etcd.secret" . | indent 10 }}
          ---
        env:
          - name: "ETCD_DEPLOYMENT"
{{- if .Values.global.etcd.create }}
            value: "{{ .Release.Name }}-etcd3"
{{- else }}
            value: "user-provided"
{{- end }}
          - name: "ETCD_ENDPOINTS"
            value: {{ include "assistant.etcd.endpoints" . | quote }}
          - name: "ETCD_USERNAME"
            valueFrom:
              secretKeyRef:
                name: {{ include "assistant.etcd.secretName" . | quote }} # Secret generated for etcd datachart.
                key: username
          - name: "ETCD_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: {{ include "assistant.etcd.secretName" . | quote }} # Secret generated for etcd datachart.
                key: password
          - name: "ROOT_PREFIX"
            value: "/bluegoat"
        volumeMounts:
        - name: etcd-certificate
          mountPath: "/etc/secrets/etcd_certificate"
      volumes:
        - name: etcd-certificate
          secret:
            secretName: {{ include "assistant.etcd.secretName" . | quote }} # Secret generated for etcd datachart.
      restartPolicy: Never

