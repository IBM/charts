
{{- define "clu.config.secret" -}}
apiVersion: v1
kind: Secret
metadata:
  name: "{{ .Release.Name }}-clu-config-secret"
  labels:
    service:   "conversation"
    component: "clu"
    slot:      "global"
    app: "ibm-watson-assistant-prod-1.3.0"
    chart: "ibm-watson-assistant"
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
type: Opaque
data:
{{- if .Values.global.mongodb.create }}
  mongodb_connection_string: $( echo "mongodb://${MONGODB_ADMIN_USER}:${MONGODB_ADMIN_PASSWORD}@{{ include "assistant.mongodb.svc.connectionString" . }}" | tr -d '\n' | base64 | tr -d '\n' )
{{- else }}
  mongodb_connection_string: $( echo "mongodb://${MONGODB_ADMIN_USER}:${MONGODB_ADMIN_PASSWORD}@{{ .Values.global.mongodb.hostname }}:{{ .Values.global.mongodb.port }}/admin?ssl=true" | tr -d '\n' | base64 | tr -d '\n' )
{{- end }}
  mongodb_certificate: "$( echo "${MONGODB_TLS_CERT}"  | base64 | tr -d '\n' )"
  primary_objectstore_string: $( echo "s3,endpoint={{ include "assistant.cos.schema" . }}://{{ include "assistant.cos.hostname" . }}:{{ include "assistant.cos.port" . }},accesskey=${MINIO_ACCESS_KEY},secretkey=${MINIO_SECRET_KEY},bucketsuffix={{ .Values.global.cos.bucket }}" | base64 | tr -d '\n' )
  entitiesdistro_certificate:          "$(cat entitiesdistro.crt | base64 | tr -d '\n')"
  entitiesdistro_privatekey:           "$(cat entitiesdistro.key | base64 | tr -d '\n')"
  spellcheck_certificate:              "$(cat spellcheck.crt | base64 | tr -d '\n')"
  spellcheck_privatekey:               "$(cat spellcheck.key | base64 | tr -d '\n')"
  system_entities_certificate:         "$(cat system_entities.crt | base64 | tr -d '\n')"
  system_entities_privatekey:          "$(cat system_entities.key | base64 | tr -d '\n')"
  tf_mm_certificate:                   "$(cat tf_mm.crt | base64 | tr -d '\n')"
  tf_mm_privatekey:                    "$(cat tf_mm.key | base64 | tr -d '\n')"
  autolearn_disambiguator_certificate: ""
  autolearn_disambiguator_privatekey:  ""
{{- end -}}
{{- define "assistant.environment.openssl.config" -}}[ req ]
default_bits       = 2048
distinguished_name = req_distinguished_name
x509_extensions    = v3_req

[ req_distinguished_name ]

[ v3_req ]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer

# Extensions to add to a certificate request
basicConstraints = CA:FALSE
keyUsage         = critical,nonRepudiation, digitalSignature, keyEncipherment
#extendedKeyUsage = critical,serverAuth

#subjectAltName = @alt_names

[ v3_ca ]
# Extensions for a typical CA
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
basicConstraints = CA:true
{{- end -}}

{{- include "sch.config.init" (list . .Values.global.schConfigTemplate) -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-clu-config-secret-gen-secret"
  labels:  &labels
    <<: &primary_labels # Don't touch or extend these labels!
      service:   "conversation"
      component: "clu-secret-gen-job"
      slot:      "{{ .Release.Name }}"
{{ include "sch.metadata.labels.standard" (list . "") | indent 4 }}
spec:
  backoffLimit: 10
  template:
    metadata:
      name: cred-gen
      labels: 
        <<: *labels
    spec:
      serviceAccountName: {{ (printf "%s-credentials" .Release.Name) | quote }}
      #imagePullSecrets:
      affinity:
{{- include "sch.affinity.nodeAffinity" (list .) | indent 8 }}
      hostIPC: false
      hostNetwork: false
      hostPID: false

      containers:
      - name: cred-gen
        image: "{{ if tpl ( .Values.creds.image.repository | toString ) . }}{{ trimSuffix "/" (tpl (.Values.creds.image.repository | toString ) . ) }}{{ end }}/{{ .Values.creds.image.name }}:{{ .Values.creds.image.tag }}"
        imagePullPolicy: {{ .Values.creds.image.pullPolicy | quote }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 2000

        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ include "assistant.cos.auth.secretName" . }}"
              key: accesskey
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ include "assistant.cos.auth.secretName" . }}"
              key: secretkey
        - name: MONGODB_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: "{{ template "assistant.mongodb.admin.secretName" . }}"
              key: user 
        - name: MONGODB_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ template "assistant.mongodb.admin.secretName" . }}"
              key: password 
        - name: MONGODB_TLS_CERT
          valueFrom:
            secretKeyRef:
              name: "{{ template "assistant.mongodb.cert.secretName" . }}"
              key: tls.crt
        command:
        - "/bin/sh"
        - -c
        - |
          set -e
          {{- $altName1 := printf "%s.%s.svc.%s" (include "ed.service_name" . ) .Release.Namespace (tpl .Values.clusterDomain . ) }}
          {{- $altName2 := printf "%s.%s"        (include "ed.service_name" . ) .Release.Namespace                                }}
          {{- $altName3 := printf "%s"           (include "ed.service_name" . )                                                   }}
          cat <<EOF >/tmp/openssl.cnf
{{ include "assistant.environment.openssl.config" . | indent 10 }}
          EOF
          # echo $'\n[SAN]\nsubjectAltName=DNS:{{ $altName1 }},DNS: {{ $altName2 }},DNS:{{ $altName3 }}' >>/tmp/openssl.cnf
          openssl req -x509 -newkey rsa:2048 -nodes -subj "/CN=EntitiesDistro" -days 3650 -config /tmp/openssl.cnf  -extensions v3_ca -out entitiesdistro.crt -keyout entitiesdistro.key
          
          echo "Dumping generated certificate for entities distro:"
          cat entitiesdistro.crt | openssl x509 -text -noout
          
          {{- $altName1 := printf "%s.%s.svc.%s" (include "spellcheck.service_name" . ) .Release.Namespace (tpl .Values.clusterDomain . ) }}
          {{- $altName2 := printf "%s.%s"        (include "spellcheck.service_name" . ) .Release.Namespace                                }}
          {{- $altName3 := printf "%s"           (include "spellcheck.service_name" . )                                                   }}
          cp /etc/ssl/openssl.cnf /tmp/openssl.cnf
          echo $'\n[SAN]\nsubjectAltName=DNS:{{ $altName1 }},DNS: {{ $altName2 }},DNS:{{ $altName3 }}' >>/tmp/openssl.cnf
          openssl req -x509 -newkey rsa:2048 -nodes -subj "/CN={{ .Release.Name }}" -days 3650 -config /tmp/openssl.cnf -out spellcheck.crt -keyout spellcheck.key
          
          {{- $altName1 := printf "%s.%s.svc.%s" (include "system_entities.service_name" . ) .Release.Namespace (tpl .Values.clusterDomain . ) }}
          {{- $altName2 := printf "%s.%s"        (include "system_entities.service_name" . ) .Release.Namespace                                }}
          {{- $altName3 := printf "%s"           (include "system_entities.service_name" . )                                                   }}
          cp /etc/ssl/openssl.cnf /tmp/openssl.cnf
          echo $'\n[SAN]\nsubjectAltName=DNS:{{ $altName1 }},DNS: {{ $altName2 }},DNS:{{ $altName3 }}' >>/tmp/openssl.cnf
          openssl req -x509 -newkey rsa:2048 -nodes -subj "/CN={{ .Release.Name }}" -days 3650 -config /tmp/openssl.cnf -out system_entities.crt -keyout system_entities.key
          
          {{- $altName1 := printf "%s.%s.svc.%s" (include "tf_mm.service_name" . ) .Release.Namespace (tpl .Values.clusterDomain . ) }}
          {{- $altName2 := printf "%s.%s"        (include "tf_mm.service_name" . ) .Release.Namespace                                }}
          {{- $altName3 := printf "%s"           (include "tf_mm.service_name" . )                                                   }}
          cp /etc/ssl/openssl.cnf /tmp/openssl.cnf
          echo $'\n[SAN]\nsubjectAltName=DNS:{{ $altName1 }},DNS: {{ $altName2 }},DNS:{{ $altName3 }}' >>/tmp/openssl.cnf
          openssl req -x509 -newkey rsa:2048 -nodes -subj "/CN=MMTF" -days 3650 -config /tmp/openssl.cnf -extensions v3_ca -out tf_mm.crt -keyout tf_mm.key
          
          cat <<EOF | kubectl apply -n {{ .Release.Namespace }} -f -
          ---
{{ include "clu.config.secret" . | indent 10 }}
      restartPolicy: Never
