
{{- define "store.vcap.secret" -}}apiVersion: v1
kind: Secret
metadata:
  name: "{{ .Release.Name }}-store-vcap"
  labels:
    service:   "conversation"
    component: "store"
    slot:      "{{ .Release.Name }}"
    app:       "ibm-watson-assistant-prod-1.3.0"
    chart:     "ibm-watson-assistant"
    heritage : "{{ .Release.Service }}"
    release:   "{{ .Release.Name }}"
type: Opaque
data: 
  vcap_services: "$(echo '{}' | jq -c '
      .["user-provided"][0] |= {
          "name":  "pgservice",
          "label": "user-provided",
          "credentials": {
              "host":      env.PGHOST,
              "port":     (env.PGPORT | tonumber),
              "database":  env.PGDATABASE,
              "username":  env.PGUSER,
              "password":  env.PGPASSWORD
          }
      }' | tr -d '\n' | base64 | tr -d '\n' )"
  ssl_mode:      "$( echo "${PGSSLMODE}"     | tr -d '\n' | base64 | tr -d '\n' )"
  password:      "$( echo "${PGPASSWORD}"    | tr -d '\n' | base64 | tr -d '\n' )"
  tls.crt:       "$( cat  "${PGSSLROOTCERT}"              | base64 | tr -d '\n' )"
{{- end -}} 
{{- include "sch.config.init" (list . .Values.global.schConfigTemplate) -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-store-vcap-gen-job"
  labels:  &labels
    <<: &primary_labels # Don't touch or extend these labels!
      service:   "conversation"
      component: "store-vcap-gen-job"
      slot:      "{{ .Release.Name }}"
{{ include "sch.metadata.labels.standard" (list . "") | indent 4 }}
spec:
  backoffLimit: 10
  template:
    metadata:
      name: cred-gen
      labels: 
        <<: *labels
    spec:
      serviceAccountName: {{ (printf "%s-credentials" .Release.Name) | quote }}
      #imagePullSecrets:
      affinity:
{{- include "sch.affinity.nodeAffinity" (list .) | indent 8 }}
      hostIPC: false
      hostNetwork: false
      hostPID: false

      containers:
      - name: cred-gen
        image: "{{ if tpl ( .Values.creds.image.repository | toString ) . }}{{ trimSuffix "/" (tpl (.Values.creds.image.repository | toString ) . ) }}{{ end }}/{{ .Values.creds.image.name }}:{{ .Values.creds.image.tag }}"
        imagePullPolicy: {{ .Values.creds.image.pullPolicy | quote }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 2000

        env:
        - name: "PGHOST"
          value: "{{ include "assistant.postgres.hostname"       . }}"
        - name: "PGPORT"
          value: "{{ include "assistant.postgres.port"           . }}"
        - name: "PGDATABASE"
          value: "{{ include "assistant.postgres.store.database" . }}"
        - name: "PGUSER"
          value: "{{ include "assistant.postgres.store.user"     . }}"
        - name: "PGPASSWORD"
          valueFrom:
            secretKeyRef:
              name: "{{ include "assistant.postgres_store.secretName" . }}"
              key:  "password"
        - name: "PGSSLMODE"
          value: "{{ .Values.global.postgres.sslMode               }}"
        - name: "PGSSLROOTCERT"
          value: "/etc/secrets/postgres/tls.crt"
        volumeMounts:
          - name: postgres
            mountPath: "/etc/secrets/postgres/"
        command:
        - "/bin/sh"
        - -c
        - |
          set -e
          echo ""
          cat <<EOF | kubectl apply -n {{ .Release.Namespace }} -f -
          ---
{{ include "store.vcap.secret" . | indent 10 }}
          EOF
      volumes:
        - name: postgres
          secret:
            secretName: "{{ include "assistant.postgres.secret_name" . }}"
      restartPolicy: Never