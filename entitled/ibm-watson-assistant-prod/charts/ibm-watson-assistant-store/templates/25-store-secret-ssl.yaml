
{{- define "store.ssl.secret" -}}apiVersion: v1
kind: Secret
metadata:
  name: "{{ .Release.Name }}-store-ssl"
  labels:
    service:   "conversation"
    component: "store"
    slot:      "{{ .Release.Name }}"
    app: "ibm-watson-assistant-prod-1.3.0"
    chart: "ibm-watson-assistant"
    heritage: "{{ .Release.Service }}"
    release: "{{ .Release.Name }}"
type: Opaque
data:
  ssl_key:  "$(cat ca.key | base64 | tr -d '\n')"
  ssl_cert: "$(cat ca.crt | base64 | tr -d '\n')"
{{- end -}} 
{{- if not .Values.ssl.secretName -}}
{{- include "sch.config.init" (list . .Values.global.schConfigTemplate) -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-store-ssl-gen-job"
  labels:  &labels
    <<: &primary_labels # Don't touch or extend these labels!
      service:   "conversation"
      component: "store-ssl-gen-job"
      slot:      "{{ .Release.Name }}"
{{ include "sch.metadata.labels.standard" (list . "") | indent 4 }}
spec:
  backoffLimit: 10
  template:
    metadata:
      name: ssl-gen
      labels: 
        <<: *labels
    spec:
      serviceAccountName: {{ (printf "%s-credentials" .Release.Name) | quote }}
      #imagePullSecrets:
      affinity:
{{- include "sch.affinity.nodeAffinity" (list .) | indent 8 }}
      hostIPC: false
      hostNetwork: false
      hostPID: false

      containers:
      - name: ssl-gen
        image: "{{ if tpl ( .Values.ssl.image.repository | toString ) . }}{{ trimSuffix "/" (tpl (.Values.ssl.image.repository | toString ) . ) }}{{ end }}/{{ .Values.ssl.image.name }}:{{ .Values.ssl.image.tag }}"
        imagePullPolicy: {{ .Values.ssl.image.pullPolicy | quote }}
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 2000

        command:
        - "/bin/sh"
        - -c
        - |
          set -ex
          openssl genrsa -out ca.key 2048
          {{- $altName1 := printf "%s.%s.svc.%s" (include "store.service_name" . ) .Release.Namespace ( tpl .Values.clusterDomain . ) }}
          {{- $altName2 := printf "%s.%s"        (include "store.service_name" . ) .Release.Namespace                                 }}
          {{- $altName3 := printf "%s"           (include "store.service_name" . )                                                    }}
          cp /etc/ssl/openssl.cnf /tmp/openssl.cnf
          echo $'\n[SAN]\nsubjectAltName=DNS:{{ $altName1 }},DNS: {{ $altName2 }},DNS:{{ $altName3 }}' >>/tmp/openssl.cnf
          openssl req -x509 -new -nodes -key ca.key -subj "/CN={{ .Release.Name }}" -days 3650 -reqexts v3_req -extensions SAN -config /tmp/openssl.cnf -out ca.crt
          
          cat <<EOF | kubectl apply -n {{ .Release.Namespace }} -f -
          ---
{{ include "store.ssl.secret" . | indent 10 }}
          EOF
        volumeMounts:
        - name: "work-dir"
          mountPath: /tmp
      volumes:
        - name: "work-dir"
          emptyDir: {}
      restartPolicy: Never
{{- end }}
