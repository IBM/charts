global:
  __metadata:
    label: "Global Configuration"
    description: "Shared configuration influencing multiple Watson Assistant components"
  schConfigTemplate:
    __metadata:
      label: "Config Template"
      description: "Config Template."
      immutable: true
      hidden: true
  image:
    pullSecret:
      __metadata:
        label: "Image pull secret name"
        description: "Specify name of a manually created image pull secret otherwise the default value sa-{{ .Release.Name }} will be used."
        type: "string"
        required: false
    repository:
      __metadata:
        label: "Repository where the Assistant chart pulls images."
        description: "Docker Repository and namespace Assistant chart pulls images."
        hidden: true

  icp:
    masterHostname:
      __metadata:
        label: "Hostname of the ICP cluster Master node"
        description: "Name where you login to the cluster https://masterHostname:8443, and where docker repository is running. Often mycluster.icp."
        type: "string"
        required: true

    masterIP:
      __metadata:
        label: "IP (v4) address of the master node"
        description: "Specify if masterHostname cannot be resolved from inside pods (not a DNS resolvable name); e.g., if masterHostname is mycluster.icp"
        type: "string"
        required: false

    proxyHostname:
      __metadata:
        label: "Hostname of the ICP cluster proxy node"
        description: "Name or IP address of youir proxy node. I.e., where ingress points."
        type: "string"
        required: false

  deploymentType:
    __metadata:
      name: "deploymentType"
      label: "Deployment Type"
      description: "Choose Production for an increased number of replicas"
      type: "string"
      options:
      - label: "Development"
        value: "Development"
      - label: "Production"
        value: "Production"

  podAntiAffinity:
    __metadata:
      name: "podAntiAffinity"
      label: "Pod AntiAffinity"
      description: "By default, Production deployments use Pod AntiAffinity to force a datastores pods to run on seperate nodes, Development deployments don't."
      type: "string"
      options:
      - label: "Use Default Setting"
        value: "Default"
      - label: "Enable Pod AntiAffinity"
        value: "Enable"
      - label: "Disable Pod AntiAffinity"
        value: "Disable"
      required: false
  keepDatastores:
    __metadata:
      name: "keepDatastores"
      label: "Keep Datastores"
      description: "If true, the datastore objects won't be deleted when running helm delete."
      type: "boolean"
      required: false

  autoscaling:
    enabled:
      __metadata:
        label: "Enable Horizontal Pod Autoscaling. Specifies whether HPA should be enabled for the deployments or not."
        description: "By default, HPA resources are created for most of the Watson Assistant deployments.  False will not create them and therefore disable HPA."
        type: "boolean"
        required: true

  clusterDomain:
    __metadata:
      name: "clusterDomain"
      label: "KubeDNS names cluster domain"
      description: "Specify only if your kubernetes DNS names does not end with cluster.local."
      type: "string"
      required: false
      hidden: true

  ## Installed languages
  languages:
    english:
      __metadata:
        label: "English"
        description: "If checked the assistant will support for the english language. The helm tests will fail if disabled."
        type: "boolean"
        required: false
        #default: true
        immutable: true
        #hidden: false
    german:
      __metadata:
        label: "Deutch"
        description: "If checked the assistant will support the deutch."
        type: "boolean"
        required: false
        #default: false
        #immutable: false
        #hidden: false
    arabic:
      __metadata:
        label: "Arabic"
        description: "If checked the assistant will support the arabic."
        type: "boolean"
        required: false
        #default: false
        #immutable: false
        #hidden: false
    spanish:
      __metadata:
        label: "Spanish"
        description: "If checked the assistant will support the spanish."
        type: "boolean"
        required: false
        #default: false
        #immutable: false
        #hidden: false
    french:
      __metadata:
        label: "French"
        description: "If checked the assistant will support the french."
        type: "boolean"
        required: false
        #default: false
        #immutable: false
        #hidden: false
    italian:
      __metadata:
        label: "Italian"
        description: "If checked the assistant will support the italian."
        type: "boolean"
        required: false
        #default: false
        #immutable: false
        #hidden: false
    japanese:
      __metadata:
        label: "Japanese"
        description: "If checked the assistant will support the japanese."
        type: "boolean"
        required: false
        #default: false
        #immutable: false
        #hidden: false
    korean:
      __metadata:
        label: "Korean"
        description: "If checked the assistant will support the korean."
        type: "boolean"
        required: false
        #default: false
        #immutable: false
        #hidden: false
    portuguese:
      __metadata:
        label: "Portuguese (Brazilian)"
        description: "If checked the assistant will support the (brazilian) portuguese."
        type: "boolean"
        required: false
        #default: false
        #immutable: false
        #hidden: false
    czech:
      __metadata:
        label: "Czech"
        description: "If checked the assistant will support the czech. No additional costs if selected."
        type: "boolean"
        required: false
        #default: true
        #immutable: false
        #hidden: false
    dutch:
      __metadata:
        label: "Dutch"
        description: "If checked the assistant will support the dutch"
        type: "boolean"
        required: false
        #default: false
        #immutable: false
        #hidden: false
    chineseTraditional:
      __metadata:
        label: "Chinese traditional (zh-tw)"
        description: "If checked the assistant will support the traditional chinese"
        type: "boolean"
        required: false
        #default: false
        #immutable: false
        #hidden: false
    chineseSimplified:
      __metadata:
        label: "Chinese simplified (zh-cn)"
        description: "If checked the assistant will support the simplified chinese"
        type: "boolean"
        required: false
        #default: false
        #immutable: false
        #hidden: false

  cos:
    create:
      __metadata:
        name: "create"
        label: "Create COS"
        description: "If set to false COS will not be created and you will have to provide your own cos instance"
        type: "boolean"
    bucket:
      __metadata:
        name: "bucket"
        label: "Bucket Prefix"
        description: "Prefix of the bucket names to be used"
        type: "string"
        required: true
    schema:
      __metadata:
        name: "schema"
        label: "COS Access Protocol"
        description: "Only required if global.cos.create is false"
        options:
        - label: ""
          value: ""
        - label: "https"
          value: "https"
        - label: "http"
          value: "http"
        required: false
    hostname:
      __metadata:
        name: "hostname"
        label: "COS Hostname"
        description: "Only required if global.cos.create is false."
        type: "string"
        required: false
    port:
      __metadata:
        name: "port"
        label: "COS Port"
        description: "Only required if global.cos.create is false."
        type: "number"
        required: false
    auth:
      # Name of the (manually created secret) that holds the keys for COS datachart. If empty the secret is autogenerated with randomly generated keys.
      secretName:
        __metadata:
          name: "secretName"
          label: "Manually created secret with COS keys"
          description: "Leave empty to autogenerate the secret with random keys"
          type: "string"
          required: false
    tls:
      # Name of the (manually created secret) that holds the keys for COS datachart. If empty the secret is autogenerated with randomly generated keys.
      secretName:
        __metadata:
          name: "secretName"
          label: "Manually created secret with private key and certificate used by COS"
          description: "Leave empty to autogenerate the secret with self-signed certificate for COS"
          type: "string"
          required: false
    sse:
      # Name of the (manually created secret) that holds the sse key for COS datachart. If empty the secret is autogenerated with randomly generated keys.
      secretName:
        __metadata:
          name: "secretName"
          label: "Manually created secret with sse master key"
          description: "Leave empty to autogenerate the secret with random key"
          type: "string"
          required: false

  redis:
    create:
      __metadata:
        name: "create"
        label: "Create Redis"
        description: "If set to false, a redis instance will not be created and you will have to provide your own redis instance."
        type: "boolean"
    hostname:
      __metadata:
        name: "hostname"
        label: "Redis Hostname"
        description: "Only required if global.redis.create is false."
        type: "string"
        required: false
    port:
      __metadata:
        name: "port"
        label: "Redis Port"
        description: "Only required if global.redis.create is false."
        type: "number"
        required: false
    auth:
      # Name of the (manually created secret) that holds the password for redis datachart. If empty the secrets is autogenerated with randomly generated password.
      authSecretName:
        __metadata:
          name: "redisSecretName"
          label: "Manually created secret with redis password"
          description: "Leave empty to autogenerate the secret with a random password"
          type: "string"
          required: false

  postgres:
    create:
      __metadata:
        name: "create"
        label: "Create Postgres"
        description: "If set to true the Postgres instance is created. Otherwise you have to provide your own Postgres instance and credentials."
        type: "boolean"
    hostname:
      __metadata:
        name: "hostname"
        label: "Postgres Hostname"
        description: "Only required if global.postgres.create is false."
        type: "string"
        required: false
    port:
      __metadata:
        name: "port"
        label: "Postgres Port"
        description: "Only required if global.postgres.create is false."
        type: "number"
        required: false
    auth:
      user:
        __metadata:
          name: "user"
          label: "Postgres Superuser Name"
          description: "Username of superuser in postgres database (needs to be able to create new databases and users)"
          type: "string"
          required: true
      authSecretName:
        __metadata:
          name: "authSecretName"
          label: "Secret name with superuser password"
          description: "Name of the secret with password of the postgres superuser. If empty the random password is generated."
          type: "string"
          required: false

    adminDatabase:
      __metadata:
        name: "adminDatabase"
        label: "Postgres Admin Database"
        description: "Database to connect to if logging as adminName. Not changed or used in any other way."
        type: "string"
        required: true
    sslMode:
      __metadata:
        name: "sslMode"
        label: "SSL Mode"
        description: "The SSL mode used to connect into postgres."
        options:
        - label: "allow"
          value: "allow"
        - label: "disable"
          value: "disable"
        - label: "prefer"
          value: "prefer"
        - label: "require"
          value: "require"
        - label: "verify-ca"
          value: "verify-ca"
        - label: "verify-full"
          value: "verify-full"

    sslSecretName:
      __metadata:
        name: "sslSecretName"
        label: "Secret name with postgres certificate."
        description: "Name of the secret with certificate to be used to connect to postgres. If empty the random key/certificate is generated."
        type: "string"
        required: false

    database:
      create:
        __metadata:
          name: "create"
          label: "Create Database"
          description: "If set to true then the specified database and database user will be automatically created. If set to false you will have to create them manually."
          type: "boolean"
      createSchema:
        __metadata:
          name: "createSchema"
          label: "Create Schema"
          description: "If set to true then the required tables, functions etc. will be created."
          type: "boolean"

    store:
      database:
        __metadata:
          name: "database"
          label: "Store Database Name"
          description: "The database name that the store microservice is using. If empty the default value conversation_icp_{{ .Release.Name }} is used."
          type: "string"
          required: false
      auth:
        user:
          __metadata:
            name: "user"
            label: "Postgres (Store) User Name"
            description: "The user name that the store miroservice is using to connect to postgres. If empty the default value store_icp_{{ .Release.Name }} is used."
            type: "string"
            required: false
        # Name of the (manua;ly created secret) that holds the password for postgres user used by store microsercice.If empty the secrets is autogenerated with randomly generated password.
        authSecretName:
          __metadata:
            name: "postgresStoreUserPassword"
            label: "Manually created secret with password for the Postgres (Store) User Name"
            description: "Leave empty to autogenerate the secret with a random password that uses store for database connections."
            type: "string"
            required: false

  etcd:
    create:
      __metadata:
        name: "create"
        label: "Create Etcd Cluster"
        description: "If set to true then the Etcd Cluster is created. Otherwise you have to provide your own Etcd instance and the credentials."
        type: "boolean"

    auth:
      user:
        __metadata:
          name: "user"
          label: "Etcd User"
          description: "User for access to Etcd"
          type: "string"
          required: false
      authSecretName:
        __metadata:
          name: "etcdSecretName"
          label: "Manually created secret with etcd password"
          description: "Leave empty to autogenerate the secret with a random password"
          type: "string"
          required: false
    tls:
      enabled:
        __metadata:
          name: "etcdTLS"
          label: "Encrypted connection to Etcd"
          description: "If set to true then the connection to ETCD will be encrypted. For plain-text communication set to false."
          type: "boolean"
      tlsSecretName:
        __metadata:
          name: "etcdTlsSecretName"
          label: "Secret name with etcd certificate"
          description: "Name of the secret with certificate to be used to connect to etcd. If empty the random key/certificate is generated."
          type: "string"
          required: false

    connection:
      __metadata:
        name: "connection"
        label: "Connection details for etcd"
        description: "Connection details for etcd. Used only if global.etcd.create is false."
  mongodb:
    create:
      __metadata:
        name: "create"
        label: "Create MongoDB"
        description: "If set to true then the MongoDB instance is created. If set to false then you will need to provide your own."
        type: "boolean"
    hostname:
      __metadata:
        name: "hostname"
        label: "MongoDB Hostname"
        description: "Hostname of the MongoDB. Used only if global.mongodb.create is false."
        type: "string"
        required: false
    port:
      __metadata:
        name: "port"
        label: "MongoDB Port"
        description: "Hostname of the MongoDB. Used only if global.mongodb.create is false."
        type: "number"
        required: false

    auth:
      enabled:
        __metadata:
          name: "enabled"
          label: "Enable Authentication"
          description: "If true then authentication is enabled for MongoDB."
          type: "boolean"
      existingAdminSecret:
        __metadata:
          name: "existingAdminSecret"
          label: "Manually created secret with mongodb admin user and password"
          description: "Leave empty to autogenerate the secret with a random password and the admin user will be taken from global.mongodb.auth.adminUser"
          type: "string"
          required: false

    tls:
      enabled:
        __metadata:
          name: "enabled"
          label: "Enable TLS"
          description: "If true then TLS is enabled. If setting to true, Please generate your own TLS CA."
          type: "boolean"
      existingCaSecret:
        __metadata:
          name: "existingCaSecret"
          label: "Manually created secret with TLS cert used by MongoDB"
          description: "Leave empty to autogenerate the secret with a new self signed cert"
          type: "string"
          required: false

  recommends:
    enabled:
      __metadata:
        name: "enabled"
        label: "Install recommends"
        description: "Recommends help with workspace authoring. New feature for UI/Tooling."
        type: "boolean"
        hidden: true

  apiV2:
    enabled:
      __metadata:
        name: "enabled"
        label: "Enable API V2"
        description: "Enables API V2 in the store and installs required microservices."
        type: "boolean"

  skillSearch:
    encryptionKey:
      # global.skillSearch.encryptionKey - The name of the secret that hold 128bit AES encryption key (under `authorization_encryption_key`) used to encrypt/decrypt credentials for Discovery service. If empty secret with random password is generated.
      existingSecretName:
        __metadata:
          name: "existingSecretName"
          label: "Secret for encrytion of discovery credentials"
          description: "Manually created secret that holds encryption/decription key for discovery credential stored in workspace"
          type: "string"

########## End of global

cos:
  __metadata:
    label: "COS Configuration"
    description: "configuration for cloud object storage"
  minio:
    mode:
      __metadata:
        name: "mode"
        label: "COS Minio server mode"
        description: "Sets Minio server mode. Default is distributed, use standallon for development deployments to reduce costs."
        type: "string"
        immutable: false
        required: false
        hidden: true
        options:
        - label: "standalone"
          value: "standalone"
        - label: "distributed"
          value: "distributed"
    replicas:
      __metadata:
        name: "replicas"
        label: "Number of replicas"
        description: "Number of nodes (applicable only for COS is in Minio distributed mode). Should be 4 <= x <= 32."
        type: "number"
        immutable: false
        required: false
        hidden: true

    persistence:
      size:
        __metadata:
          name: "size"
          label: "PVC Size"
          description: "Size of the PVC to be used/created."
          type: "string"
          required: false
      storageClass:
        __metadata:
          name: "storageClass"
          label: "Storage Class"
          description: "Storage class for the created persistent volume claim. Leave null value for default storage class."
          type: "string"
          #options:
          #- label: "null"
          #  value: "null"
          #- label: "local-storage"
          #  value: "local-storage"
          #- label: "glusterfs"
          #  value: "glusterfs"
          #- label: "nfs"
          #  value: "nfs"
      useDynamicProvisioning:
        __metadata:
          label: "Enable Dynamic bind of Persistent Volumes"
          description: "Enables dynamic bind of Persistent Volumes to created Persisten Volume claims. Defaults to true"
          type: "boolean"
          required: false
      selector:
        # label - label that the PV should have to be boundable to created PVCs
        label:
          __metadata:
            label: "Label of Persistent Volume"
            description: "If useDynamicProvisioning is disabled, this specifies labels that needs to have the Persistent Volumes to be used. Defaults to null"
            type: "string"
            required: false
            # value - value of the label that the PV should have to be boundable to created PVCs
        value:
          __metadata:
            label: "Value of Persistent Volume label"
            description: "Specifies value assigned to the label that needs to have the Persistent Volumes to be used. Defaults to null"
            type: "string"
            required: false

etcd:
  __metadata:
    label: "etcd configuration"
    description: "configuration for etcd"
  config:
    persistence:
      useDynamicProvisioning:
        __metadata:
          label: "Enable Dynamic bind of Persistent Volumes"
          description: "Enables dynamic bind of Persistent Volumes to created Persisten Volume claims. Defaults to true"
          type: "boolean"
          required: true
    dataPVC:
      size:
        __metadata:
          name: "size"
          label: "PVC Size"
          description: "Size of the PVC to be used/created."
          type: "string"
      storageClassName:
        __metadata:
          name: "storageClassName"
          label: "Storage Class"
          description: "Specify the storageClassName you want to use, if you don't specify a storageClassName it will use the default."
          required: false
          type: "string"
          #options:
          #- label: "null"
          #  value: "null"
          #- label: "local-storage"
          #  value: "local-storage"
          #- label: "glusterfs"
          #  value: "glusterfs"
          #- label: "nfs"
          #  value: "nfs"
      selector:
        # label - label that the PV should have to be boundable to created PVCs
        label:
          __metadata:
            label: "Label of Persistent Volume"
            description: "If useDynamicProvisioning is disabled, this specifies labels that needs to have the Persistent Volumes to be used. Defaults to null"
            type: "string"
            required: false
            # value - value of the label that the PV should have to be boundable to created PVCs
        value:
          __metadata:
            label: "Value of Persistent Volume label"
            description: "Specifies value assigned to the label that needs to have the Persistent Volumes to be used. Defaults to null"
            type: "string"
            required: false

postgres:
  __metadata:
    label: "PostgreSQL"
    description: "PostgreSQL Datastore"
  config:
    persistence:
      useDynamicProvisioning:
        __metadata:
          label: "Enable Dynamic bind of Persistent Volumes"
          description: "Enables dynamic bind of Persistent Volumes to created Persisten Volume claims. Defaults to true"
          type: "boolean"
          required: true
      storageClassName:
        __metadata:
          name: "storageClassName"
          label: "Storage Class"
          description: "Specify the storageClassName you want to use, if you don't specify a storageClassName it will use the default."
          required: false
          type: "string"
          #options:
          #- label: "null"
          #  value: "null"
          #- label: "local-storage"
          #  value: "local-storage"
          #- label: "glusterfs"
          #  value: "glusterfs"
          #- label: "nfs"
          #  value: "nfs"
      size:
        __metadata:
          name: "size"
          label: "PV Storage Size"
          description: "Storage Size for persistent volume to be created"
          type: "string"
          immutable: false
          required: true
    dataPVC:
      selector:
        # label - label that the PV should have to be boundable to created PVCs
        label:
          __metadata:
            label: "Label of Persistent Volume"
            description: "If useDynamicProvisioning is disabled, this specifies labels that needs to have the Persistent Volumes to be used. Defaults to null"
            type: "string"
            required: false
            # value - value of the label that the PV should have to be boundable to created PVCs
        value:
          __metadata:
            label: "Value of Persistent Volume label"
            description: "Specifies value assigned to the label that needs to have the Persistent Volumes to be used. Defaults to null"
            type: "string"
            required: false

bdd:
  __metadata:
    label: "BDD"
    description: "BDD Configuration"
    hidden: true
  image:
    repository:
      __metadata:
        label: "Repository"
        description: "Docker Repository"
        hidden: true
    name:
      __metadata:
        label: "Image name"
        description: "Name of the image in the docker repository"
        hidden: true
    tag:
      __metadata:
        label: "Tag"
        description: "Docker Tag"
        hidden: true
    pullPolicy:
      __metadata:
        label: "Pull policy"
        description: "Pull policy for the docker image"
        hidden: true

mongodb:
  __metadata:
    label: "MongoDB"
    description: "MongoDB Datastore"
    hidden: true
  config:
    persistentVolume:
      useDynamicProvisioning:
        __metadata:
          label: "Enable dynamically create Persistence volumes"
          description: "Use StorageClasses to dynamically create Persistence volumes. Defaults to true."
          type: "boolean"
          required: true
      storageClass:
        __metadata:
          name: "storageClass"
          label: "Storage Class"
          description: "Specify the storageClass you want to use."
          query:
            provider: kubernetes
            resource: storageclasses
            filter: ".metadata.uid"
      selector:
        label:
          __metadata:
            label: "Label to be used during PVC bind"
            description: "Label for persistent volume claim selectors to control how pvc's bind/reserve storage. Defaults application specific"
            type: "string"
            required: false
        value:
          __metadata:
            label: "Value for the selector.label"
            description: "Value for persistent volume claim selectors to control how pvc's bind/reserve storage. Defaults application specific"
            type: "string"
            required: false
    auth:
      keySecretName:
        __metadata:
          label: "Manually created secret with MongoDB Keyfile"
          description: "Will be generated if not provided. Name of your existing Keyfile Secret. The secret must contain 'key.txt'."
          type: "string"
          required: false

recommendsMongodbLoadEmbeddings:
  __metadata:
    label: "MongoDB Load Embeddings for Recommends"
    description: "MongoDB Load Embeddings Configuration for Recommends microservice"
    hidden: true
  persistence:
#    __metadata:
#      label: "Persistent Volume configuration"
#      description: "Configures persistence of the data and configuration of Persistent Volume and PV Claim"
    enabled:
      __metadata:
        name: "enabled"
        label: "Enable Persistent Volume"
        description: "Enable Persistent Volume, true or false"
        type: "boolean"
        immutable: false
        required: true
    useDynamicProvisioning:
      __metadata:
        label: "Enable Dynamic bind of Persistent Volumes"
        description: "Enables dynamic bind of Persistent Volumes to created Persisten Volume claims. Defaults to true"
        type: "boolean"
        required: true
  dataPVC:
#    __metadata:
#      label: "Persistent Volume Claim Configuration"
#      description: "Configures created Persistent Volume Claims and how they bind to Persistent Volumes"

    storageClassName:
      __metadata:
        name: "storageClassName"
        label: "Storage Class Name"
        description: "The name of StorageClass to be used to create persistent volume claim"
        type: "string"
        immutable: false

    existingClaimName:
      __metadata:
        name: "Use precreated PVC"
        label: "Existing PVC to use"
        description: "Provide name of existing persistent volume claim to be used instead of creating new one"
        type: "string"
        immutable: false

    size:
      __metadata:
        name: "size"
        label: "PV Storage Size"
        description: "Storage Size for persistent volume to be created"
        type: "string"
        immutable: false
        required: true

    selector:
      # label - label that the PV should have to be boundable to created PVCs
      label:
        __metadata:
          label: "Label of Persistent Volume"
          description: "If useDynamicProvisioning is disabled, this specifies labels that needs to have the Persistent Volumes to be used. Defaults to null"
          type: "string"
          required: false
      # value - value of the label that the PV should have to be boundable to created PVCs
      value:
        __metadata:
          label: "Value of Persistent Volume label"
          description: "Specifies value assigned to the label that needs to have the Persistent Volumes to be used. Defaults to null"
          type: "string"
          required: false

master:
  __metadata:
    label: "Master"
    description: "Master Service"
    hidden: true
  slad:
    # slad.dockerRegistry - The docker registry where the training images are located.
    #            Master observes content of the registry for available training (slad) images. And use it as a registry for training pods when they created them (the temporary vn-* pods)
    #     should default to the {{ global.icp.masterHostname }}:8500 if left empty. The default is extracted from image.repository values
    dockerRegistry:
      __metadata:
        label: "Training - docker registry"
        description: "Docker registry with training images. Leave empty unless support/documentation instruct to set a value."
        hidden: true

    # slad.dockerRegistry - The docker registry namespace under which the slad/training images are uploaded.
    #     Should default to the { .Release.Namespace }. The default is extracted from image.repository values.
    dockerRegistryNamespace:
      __metadata:
        label: "Training images namespace"
        description: "Docker repository namespace with training images. Leave empty unless support/documentation instruct to set a value."
        hidden: true


    # slad.dockerRegistryPullSecret - The pull secret that is used by master to connect into docker images. It is NOT used for created training pods.
    #     Defaults to the sa-{{ .Release.Namespace }} if left empty. This secret should be automatically created
    #       once the PPA achvive is uploaded to your ICP cluster using
    #  bx pr load-ppa-archive --archive ...  --clustername {{ global.icp.masterHostname }} --namespace {{ .Release.Namespace }}
    dockerRegistryPullSecret:
      __metadata:
        label: "Training docker pull secret"
        description: "Pull secret for training. Leave empty unless documentation instruct to crease this secret and set the value."
        hidden: true

creds:
  __metadata:
    label: "Credentials creator job"
    description: "Image details for credential creating job"
    hidden: true
  image:
    repository:
      __metadata:
        label: "Repository"
        description: "Credentials Docker Repository"
        hidden: true
    name:
      __metadata:
        label: "Name of the image"
        description: "Name of the Creds image in docker Repository"
        hidden: true
    tag:
      __metadata:
        label: "Tag"
        description: "Credentials Docker Tag"
        hidden: true
    pullPolicy:
      __metadata:
        name: "pullPolicy"
        label: "Docker image pull policy"
        description: "Always, Never, or IfNotPresent. Defaults to IfNotPresent."
        hidden: true
        type: "string"
        immutable: false
        required: true
        options:
        - label: "IfNotPresent"
          value: "IfNotPresent"
        - label: "Always"
          value: "Always"
        - label: "Never"
          value: "Never"

## License configuration metadata
license:
  __metadata:
    label: "License"
    description: "License parameter for user to set accept on CLI install"
    type: "string"
    required: true
    options:
    - label: "Accepted"
      value: "accept"
    - label: "Not accepted"
      value: "not accepted"
