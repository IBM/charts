apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-secret-gen
  labels:
    app: {{ .Release.Name }}-secret-gen
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
    "helm.sh/hook": pre-upgrade,pre-install
    "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation"
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 180
  template:
    metadata:
      name: {{ .Release.Name }}-secret-gen
      labels:
        app: {{ .Release.Name }}-secret-gen
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      {{- if .Values.global.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.global.image.pullSecret }}
      {{- end }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "beta.kubernetes.io/arch"
                operator: In
                values:
                - {{ .Values.arch }}
      containers:
      - name: secret-gen
        image: {{ if .Values.global.image.repository }}{{ trimSuffix "/" .Values.global.image.repository }}{{ end }}/{{ .Values.kubectl.image }}:{{ .Values.kubectl.tag }}
        imagePullPolicy: {{ .Values.global.image.pullPolicy }}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
              - ALL
        command:
        - "/bin/bash"
        - -c
        - |
          CLUSTER_NAME=$(kubectl get configmap --namespace kube-public ibmcloud-cluster-info -o jsonpath="{.data.cluster_name}")
          GET_SECRET="kubectl --namespace kube-system get secret"
          GET_DB_SECRET="$GET_SECRET edge-computing-remote-dbs"
          {{- if .Values.localDBs.enabled }}
          export EDGE_AGBOT_DB_HOST={{ .Release.Name }}-agbotdb \
          EDGE_AGBOT_DB_PORT=5432 \
          EDGE_AGBOT_DB_USER={{.Values.agbotdb.database.user}} \
          EDGE_AGBOT_DB_NAME=edge \
          EDGE_AGBOT_DB_PASS=$(openssl rand -base64 40 | tr -d "=+/" | cut -c1-30) \
          EDGE_AGBOT_DB_SSL=disable \
          EDGE_CSS_DB_HOST={{ .Release.Name }}-cssdb:27017 \
          EDGE_CSS_DB_AUTH={{ .Values.cssdb.database.user }} \
          EDGE_CSS_DB_USER={{ .Values.cssdb.database.user }} \
          EDGE_CSS_DB_NAME=edge \
          EDGE_CSS_DB_PASS=$(openssl rand -base64 40 | tr -d "=+/" | cut -c1-30) \
          EDGE_CSS_DB_SSL=false \
          EDGE_EXCHANGE_DB_HOST={{ .Release.Name }}-exchangedb \
          EDGE_EXCHANGE_DB_PORT=5432 \
          EDGE_EXCHANGE_DB_USER={{ .Values.agbotdb.database.user }} \
          EDGE_EXCHANGE_DB_NAME=edge \
          EDGE_EXCHANGE_DB_PASS=$(openssl rand -base64 40 | tr -d "=+/" | cut -c1-30) \
          EDGE_EXCHANGE_DB_SSL=disable
          {{ else }}
          if $GET_SECRET edge-computing-remote-dbs > /dev/null 2>&1; then
            # Setting all the connection parameters for each DB, pulling from edge-computing-remote-dbs
            for CONNECTION_PARAM in HOST USER NAME PASS SSL; do
              export EDGE_AGBOT_DB_${CONNECTION_PARAM}=$($GET_DB_SECRET -o jsonpath="{.data.agbot-db-$(echo $CONNECTION_PARAM | tr '[:upper:]' '[:lower:]')}" | base64 --decode) \
              EDGE_CSS_DB_${CONNECTION_PARAM}=$($GET_DB_SECRET -o jsonpath="{.data.css-db-$(echo $CONNECTION_PARAM | tr '[:upper:]' '[:lower:]')}" | base64 --decode) \
              EDGE_EXCHANGE_DB_${CONNECTION_PARAM}=$($GET_DB_SECRET -o jsonpath="{.data.exchange-db-$(echo $CONNECTION_PARAM | tr '[:upper:]' '[:lower:]')}" | base64 --decode)
            done
            # We separate out the port for postgresql
            export EDGE_AGBOT_DB_PORT=$($GET_DB_SECRET -o jsonpath="{.data.agbot-db-port}" | base64 --decode) \
            EDGE_EXCHANGE_DB_PORT=$($GET_DB_SECRET -o jsonpath="{.data.exchange-db-port}" | base64 --decode)
            # Mongodb also has an auth DB
            export EDGE_CSS_DB_AUTH=$($GET_DB_SECRET -o jsonpath="{.data.css-db-auth}" | base64 --decode)
          else
            echo "Value 'localDBs.enabled' is false, but secret edge-computing-remote-dbs is not defined, exiting"
            exit 1
          fi
          {{ end }}
          kubectl get secret {{ .Release.Name }} -o yaml | sed "s/name: {{ .Release.Name }}/name: {{ .Release.Name }}-backup/" | sed '/creationTimestamp:/d' | sed '/uid/d' | sed '/resourceVersion:/d' | kubectl apply -n kube-system -f-
          kubectl annotate secret {{ .Release.Name }}-backup kubectl.kubernetes.io/last-applied-configuration-
          AGBOT_MSG_KEY=$(openssl genrsa 2048 2>/dev/null) 
          export EDGE_AGBOT_MSG_KEY=$(echo "$AGBOT_MSG_KEY" | base64 -w 0) \
          EDGE_AGBOT_MSG_PUB=$(echo "$AGBOT_MSG_KEY" | openssl rsa -pubout | base64 -w 0) \
          EDGE_AGBOT_TOKEN=$(openssl rand -base64 40 | tr -d "=+/" | cut -c1-30) \
          EDGE_EXCHANGE_ROOT_PASS=$(openssl rand -base64 40 | tr -d "=+/" | cut -c1-30) \ 
          if $GET_SECRET {{ .Release.Name }} > /dev/null 2>&1; then
            export EDGE_CSS_DB_PASS=$($GET_SECRET {{ .Release.Name }} -o jsonpath="{.data.css-db-pass}" | base64 --decode) \
            EDGE_AGBOT_DB_PASS=$($GET_SECRET {{ .Release.Name }} -o jsonpath="{.data.agbot-db-pass}" | base64 --decode) \
            EDGE_AGBOT_TOKEN=$($GET_SECRET {{ .Release.Name }} -o jsonpath="{.data.agbot-token}" | base64 --decode ) \
            EDGE_EXCHANGE_DB_PASS=$($GET_SECRET {{ .Release.Name }} -o jsonpath="{.data.exchange-db-pass}" | base64 --decode) \
            EDGE_EXCHANGE_ROOT_PASS=$($GET_SECRET {{ .Release.Name }} -o jsonpath="{.data.exchange-root-pass}" | base64 --decode) \
            EDGE_AGBOT_MSG_KEY=$($GET_SECRET {{ .Release.Name }} -o jsonpath="{.data.agbot-messagekey-private}") \
            EDGE_AGBOT_MSG_PUB=$($GET_SECRET {{ .Release.Name }} -o jsonpath="{.data.agbot-messagekey-public}")
          fi
          cat <<EOF | kubectl apply -n {{ .Release.Namespace }} -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: {{ .Release.Name }}
            labels:
              release: {{ .Release.Name }}
          type: Opaque
          data:
            agbot-messagekey-private: $EDGE_AGBOT_MSG_KEY
            agbot-messagekey-public: $EDGE_AGBOT_MSG_PUB
          stringData:
            agbot-db-pass: $EDGE_AGBOT_DB_PASS
            agbot-token: $EDGE_AGBOT_TOKEN
            agbot-config: |-
              {
                "Edge":{
                },
                "AgreementBot": {
                    "DBPath": "",
                    "Postgresql": {
                        "Host": "$EDGE_AGBOT_DB_HOST",
                        "Port": "$EDGE_AGBOT_DB_PORT",
                        "User": "$EDGE_AGBOT_DB_USER",
                        "Password": "$EDGE_AGBOT_DB_PASS",
                        "DBName": "$EDGE_AGBOT_DB_NAME",
                        "SSLMode": "$EDGE_AGBOT_DB_SSL"
                    },
                    "Partitions": "part0",
                    "TxLostDelayTolerationSeconds": 120,
                    "AgreementWorkers": 15,
                    "ProtocolTimeoutS": 120,
                    "AgreementTimeoutS": 600,
                    "NoDataIntervalS": 300,
                    "ActiveAgreementsURL": "",
                    "ActiveAgreementsUser": "",
                    "ActiveAgreementsPW": "",
                    "PolicyPath": "/home/agbotuser/policy.d",
                    "NewContractIntervalS": 10,
                    "ProcessGovernanceIntervalS": 10,
                    "IgnoreContractWithAttribs": "ethereum_account",
                    "ExchangeURL": "http://{{ .Release.Name }}-exchange/v1/",
                    "ExchangeId": "IBM/${CLUSTER_NAME}-agbot",
                    "ExchangeToken": "$EDGE_AGBOT_TOKEN",
                    "ExchangeVersionCheckIntervalM": 1,
                    "ExchangeHeartbeat": 60,
                    "ExchangeMessageTTL": 86400,
                    "ActiveDeviceTimeoutS": 180,
                    "DefaultWorkloadPW": "",
                    "MessageKeyPath": "msgKey",
                    "APIListen": "127.0.0.1:8080",
                    "PurgeArchivedAgreementHours": 1,
                    "CheckUpdatedPolicyS": 15,
                    "CSSURL": "http://{{ .Release.Name }}-css"
                }
              }
            css-db-pass: $EDGE_CSS_DB_PASS
            css-config: |-
              NodeType CSS
              ListeningType unsecure
              UnsecureListeningPort 8080
              CommunicationProtocol http
              LogLevel INFO
              LogTraceDestination stdout
              TraceLevel INFO
              MongoAddressCsv $EDGE_CSS_DB_HOST
              MongoAuthDbName $EDGE_CSS_DB_AUTH
              MongoUsername $EDGE_CSS_DB_USER
              MongoPassword $EDGE_CSS_DB_PASS
              MongoUseSSL $EDGE_CSS_DB_SSL
            exchange-db-pass: $EDGE_EXCHANGE_DB_PASS
            exchange-root-pass: $EDGE_EXCHANGE_ROOT_PASS
            exchange-config: |-
              {
                "api": {
                  "db": { "jdbcUrl": "jdbc:postgresql://$EDGE_EXCHANGE_DB_HOST:$EDGE_EXCHANGE_DB_PORT/$EDGE_EXCHANGE_DB_NAME",
                    "user": "$EDGE_EXCHANGE_DB_USER",
                    "password": "$EDGE_EXCHANGE_DB_PASS",
                    "maxPoolSize": "{{.Values.exchange.dbPool}}"
                  },
                  "logging": {
                    "level": "{{ .Values.exchange.loglevel }}"
                  },
                  "cache": {
                    "idsMaxSize": {{ .Values.exchange.cache.idsMaxSize }},
                    "resourcesMaxSize": {{ .Values.exchange.cache.resourcesMaxSize }}
                  },
                  "root": { 
                    "password": "$EDGE_EXCHANGE_ROOT_PASS"
                  }
                }
              }
          EOF
          kubectl annotate secret {{ .Release.Name }} kubectl.kubernetes.io/last-applied-configuration-
        resources:
          requests:
            memory: 100Mi
            cpu: 100m
          limits:
            memory: 200Mi
            cpu: 200m
      restartPolicy: Never
