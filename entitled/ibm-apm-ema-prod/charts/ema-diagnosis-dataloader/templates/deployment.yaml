{{- include "sch.config.init" (list . "emaRef.sch.chart.config.values") -}}
{{- $compName :=  .sch.chart.components.diagnosisDataloader.name -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "sch.names.fullCompName" (list . $compName) | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 4 }}
spec:
  selector:
    matchLabels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 8 }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 8 }}
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 8 }}
    spec:
    {{- include "ema.securitycontext.pod" . | indent 6 }}
      affinity:
{{- include "sch.affinity.nodeAffinity" (list .) | indent 8 }}
      containers:
      - name: {{ .Values.name }}
        image: "{{ .Values.global.icpDockerRepo }}{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 1
            memory: 1024Mi
        # add liveness and readiness later
        livenessProbe:
          httpGet:
            path: /dataloader/healthcheck
            port: 3000
            scheme: HTTPS
          initialDelaySeconds: 60 ## equals to the maximum startup time of the application + couple of seconds
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: {{ .Values.failureThreshold }}
        readinessProbe:
          httpGet:
            path: /dataloader/healthcheck
            port: 3000
            scheme: HTTPS
          initialDelaySeconds: 5 ## equals to minimum startup time of the application
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: {{ .Values.failureThreshold }}
        {{- include "ema.securitycontext.container" . | indent 8 }}
        env:
        - name: MULTI_TENANT_SERVICE
          value: "https://ema-multi-tenant-service"

        - name: MULTI_TENANT_SERVICE_API_KEY
          valueFrom:
            secretKeyRef:
              name: ema-secret
              key: MULTI_TENANT_SERVICE_API_KEY

        - name: LOG_LEVEL
          value: {{ .Values.env.logLevel }}

        - name: WDS_QPS_LIMITATION
          valueFrom:
            configMapKeyRef:
              name: ema-config
              key: WDS_QPS_LIMITATION

        - name: CLOUDANT_WPS_LIMITATION
          valueFrom:
            configMapKeyRef:
              name: ema-config
              key: CLOUDANT_WPS_LIMITATION

        # UNIT ms
        - name: BACKENDSERVERTIMEOUT
          valueFrom:
            configMapKeyRef:
              name: ema-config
              key: BACKENDSERVERTIMEOUT
              optional: true

        # tls
        - name: TLS_KEY
          valueFrom:
            secretKeyRef:
              name: ema-tls
              key: tls.key

        - name: TLS_CERT
          valueFrom:
            secretKeyRef:
              name: ema-tls
              key: tls.crt

        # trust kubernetes root ca
        - name: NODE_EXTRA_CA_CERTS
          value: /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt
