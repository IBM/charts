{{- include "sch.config.init" (list . "sch.chart.config.values") }}
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ template "cloudant.releasename" $ }}-glum-config
  labels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 4 }}
data:
  haproxy.cfg.tpl: |
    # Template global.cfg.erb
    global
      group glum
      log 127.0.0.1 local0
      # log-send-hostname <%= node.name %>
      lua-load /glum/bin/too_many_requests.lua
      maxconn 100000
      nbproc {{ .Values.glum.proc.nbproc }}
      server-state-base /var/opt/glum/states
      spread-checks 5
      {{- range .Values.glum.proc.frontend_process }}
      stats socket /var/opt/glum/admin-{{ . }}.sock level admin process {{ . }} user glum group glum mode 0660 {{ $.Values.glum.stats_socket_options }}
      {{- end }}
      tune.ssl.default-dh-param 2048
      unix-bind user glum group glum mode 0660
      user glum
      master-worker

    # Template defaults.cfg.erb
    defaults
      balance roundrobin
      bind-process all
      {{- if .Values.glum.compression }}
      compression algo {{ .Values.glum.compression.algo }}
      compression type {{ .Values.glum.compression.type }}
      {{- end }}
      errorfile 200 /haproxy/static/200.http
      errorfile 400 /haproxy/static/400.http
      errorfile 403 /haproxy/static/403.http
      errorfile 405 /haproxy/static/405.http
      errorfile 408 /haproxy/static/408.http
      errorfile 500 /haproxy/static/500.http
      errorfile 502 /haproxy/static/502.http
      errorfile 503 /haproxy/static/503.http
      errorfile 504 /haproxy/static/504.http
      load-server-state-from-file local
      maxconn 100000
      mode http
      monitor-uri /_haproxy_health_check
      no log
      option http-server-close
      option log-health-checks
      option log-separate-errors
      option redispatch
      retries 4
      timeout client 150000
      timeout connect 5000
      timeout queue 5000
      timeout server 3600000

    # Template resolvers.cfg.erb
    resolvers dns
      nameserver dns1       127.0.0.1:53
      resolve_retries       3
      timeout resolve       1s
      timeout retry         1s
      hold other           30s
      hold refused         30s
      hold nx              30s
      hold timeout         30s
      hold valid           10s
      hold obsolete        30s

    # Template listen.cfg.erb
    listen http_proxy
      bind-process 1-{{ last .Values.glum.proc.frontend_process }}
      {{- if .Values.serveHttps }}
      bind :443 ssl {{ .Values.glum.ssl.options }} crt /glum/certs/main/ {{ .Values.glum.ssl.ciphers }}
      {{- end }}
      {{- if .Values.serveHttp }}
      bind :80
       {{- end }}
      # Add X-Forwarded-For
      option forwardfor

      # Upstream health check
      acl no_db_backends nbsrv({{ template "cloudant.releasename" $ }}) lt 1
      monitor-uri   /_haproxy_health
      monitor fail  if no_db_backends

      # Remove headers that must not be set externally
      http-request del-header X-Cloudant-Backend
      http-request del-header X-SSL
      http-request del-header X-SSL-Protocol
      http-request del-header X-SSL-Cipher
      http-request del-header X-SSL-C-Used
      http-request del-header X-SSL-Client-Verify
      http-request del-header X-SSL-Client-SHA1
      http-request del-header X-Cloudant-Backend-Tmp
      http-request del-header X-ALPN
      http-request del-header Proxy

      # Clean up response
      http-response del-header X-Cloudant-Body-Time
      http-response del-header X-CouchDB-Body-Time

      # Couchbackup can't handle gzip responses (2.2 will have a fix)
      http-request del-header Accept-Encoding if { hdr(user-agent) -m beg couchbackup-cloudant/2.0 couchbackup-cloudant/2.1 }

      # Add security-related headers
      http-response set-header Strict-Transport-Security max-age=31536000 if { ssl_fc }
      http-response replace-header Set-Cookie (.+) "\1; Secure" if { ssl_fc }

      # Pass knowledge of SSL/TLS protocol used to internal proxy
      http-request set-header X-SSL-Protocol %[ssl_fc_protocol] if { ssl_fc }
      http-request set-header X-SSL-Cipher %[ssl_fc_cipher] if { ssl_fc }

      # Pass knowledge of SSL/TLS usage to backend
      http-request set-header X-Forwarded-Ssl on if { ssl_fc }

      # Fauxton must be accessed over TLS
      # http-request redirect scheme https if { path_beg /dashboard. } !{ ssl_fc }

      # # IAM authenticated requests must be over TLS
      # http-request redirect scheme https code 301 if { req.hdr(Authorization) -m beg -i Bearer } !{ ssl_fc }

      log global
      log-format "%ci:%cp [%t] %ft %b/%s %Tq/%Tw/%Tc/%Tr/%Tt %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %hr %hs %{+Q}r acct:%{+Q}[var(txn.account)]"

      # Add security-related response headers
      http-response set-header X-Content-Type-Options nosniff

      #
      # Set x-cloudant-user value
      #
      # a) if it already exists, don't override it
      acl x-cloudant-user-exists req.hdr_cnt(x-cloudant-user) gt 0

      # b) set x-cloudant-user to cloudant (i.e. fixed account)
      http-request set-header X-Cloudant-User cloudant if !x-cloudant-user-exists

      # Copy final account name to var for logging
      http-request set-var(txn.account) req.hdr(x-cloudant-user)

      #
      # Decide whether this request requires a client cert and reject request
      # if the request does, and the client hasn't provided one we can verify.
      #

      #
      # Now we start deciding on the backend to use for this request. These fall
      # into a few buckets:
      #
      #  1. Global services, like the fauxton resources and wilson.
      #  2. Global redirects, like _replicator clusters
      #  3. Account redirects, like in-progress-moves for specific account,db
      #     pairs.
      #  4. Then to the cluster for a given account.
      #

      # Whether we've already set the X-Cloudant-Backend header
      acl backend_is_set hdr_len(x-cloudant-backend) gt 0

      # Set backend if Fauxton
      acl dashboard_path path_beg /dashboard.
      http-request set-header X-Cloudant-Backend fauxton_assets_host if dashboard_path

      # default to local cluster
      http-request set-header X-Cloudant-Backend {{ template "cloudant.releasename" $ }} unless backend_is_set

      # Copy the chosen backend to a response header so customers / operators
      # can validate the choice.
      http-request set-var(txn.backend) req.hdr(x-cloudant-backend)
      http-response set-header X-Cloudant-Backend %[var(txn.backend)]

      # Add Via info, mostly useful for our debugging
      http-request set-var(txn.req_ver) req.ver
      http-response set-header Via "%[var(txn.req_ver)] lb.{{ template "cloudant.releasename" $ }} (Glum/{{ .Values.glum.version }})"

      # Things we like to capture (they're output into logs)
      declare capture request len 64
      http-request capture req.hdr(User-Agent) id 0
      declare capture request len 64
      http-request capture req.hdr(X-Cloudant-User) id 1
      declare capture request len 64
      http-request capture req.hdr(X-Forwarded-For) id 2
      declare capture request len 10
      http-request capture req.hdr(X-SSL-Protocol) id 3
      declare capture request len 2
      http-request capture req.hdr(X-ALPN) id 4
      declare capture response len 10
      http-response capture res.hdr(X-Couch-Request-Id) id 0
      declare capture response len 8
      http-response capture res.hdr(X-Cloudant-Body-Time) id 1
      declare capture response len 8
      http-response capture res.hdr(X-CouchDB-Body-Time) id 2
      declare capture response len 10

      use_backend %[hdr(x-cloudant-backend)]


    # Template backend_fauxton.cfg.erb
{{ if .Values.global.enableDashboard }}
    backend fauxton_assets_host
      option httpchk GET /dashboard.html
      server-template dashboard- {{ template "dashboard.replicas" $ }}  _dashboard._tcp.{{ template "cloudant.releasename" $ }}-dashboard.{{ .Release.Namespace }}.svc.{{ .Values.global.dns.clusterDomainSuffix }} check resolvers dns
{{ end }}

    # Template backend_monitored_clusters.cfg.erb
    # Allows for seeing all the monitored clusters' nodes' states.
    backend lb.{{ template "cloudant.releasename" $ }}
      stats enable
      stats auth {{"{{"}} STATS_USER {{"}}"}}:{{"{{"}} STATS_PASSWORD {{"}}"}}
      stats uri /
      stats scope {{ template "cloudant.releasename" $ }}

    backend {{ template "cloudant.releasename" $ }}
      load-server-state-from-file local
      http-check disable-on-404
      option httpchk GET /_up
      stats auth {{"{{"}} STATS_USER {{"}}"}}:{{"{{"}} STATS_PASSWORD {{"}}"}}
      stats enable
      stats scope {{ template "cloudant.releasename" $ }}
      stats uri /_haproxy
      server-template db- {{ template "db.dbcore.replicas" $ }}  _db._tcp.{{ template "cloudant.releasename" $ }}-db.{{ .Release.Namespace }}.svc.{{ .Values.global.dns.clusterDomainSuffix }} check resolvers dns
