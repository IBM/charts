{{- include "sch.config.init" (list . "sch.chart.config.values") }}
apiVersion: "apps/v1"
kind: Deployment
metadata:
  name: {{ template "cloudant.releasename" $ }}-haproxy
  labels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 4 }}
spec:
  replicas: {{ template "haproxy.replicas" $ }}
  selector:
    matchLabels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 6 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering "" "" nil) | indent 8 }}
      labels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 8 }}
    spec:
      affinity:
      {{- include "sch.affinity.nodeAffinity" (list .) | indent 8 }}
        podAntiAffinity:
{{- if .Values.global.antiAffinity.required }}
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 16 }}
            topologyKey: {{ required ".Values.global.antiAffinity.topologyKey is required" .Values.global.antiAffinity.topologyKey | quote }}
{{- else }}
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 18 }}
              topologyKey: {{ required ".Values.global.antiAffinity.topologyKey is required" .Values.global.antiAffinity.topologyKey | quote }}
{{- end }}
      containers:
        - name: haproxy
          imagePullPolicy: {{ .Values.global.images.pullPolicy }}
          securityContext:
            runAsUser: 0
          image: {{ trimSuffix "/" .Values.global.images.registry }}/{{ .Values.global.images.cloudant.glum }}
          ports:
          {{- if .Values.serveHttps }}
            - containerPort: 443
              name: https-port
          {{- end }}
          {{- if .Values.serveHttp }}
            - containerPort: 80
              name: http-port
          {{- end }}
          {{- if .Values.enableLivenessProbe }}
          livenessProbe:
            httpGet:
              path: /_haproxy_health
              scheme: {{- if .Values.serveHttps }} {{ "HTTPS" }} {{- else }} {{ "HTTP" }} {{- end }}
              port: {{- if .Values.serveHttps }} {{ 443 }} {{- else }} {{ 80 }} {{- end }}
            initialDelaySeconds: 5
            timeoutSeconds: 5
          {{- end }}
          {{- if .Values.enableReadinessProbe }}
          readinessProbe:
            httpGet:
              path: /_haproxy_health
              scheme: {{- if .Values.serveHttps }} "HTTPS" {{- else }} "HTTP" {{- end }}
              port: {{- if .Values.serveHttps }} 443 {{- else }} 80 {{- end }}
            initialDelaySeconds: 20
            timeoutSeconds: 5
          {{- end }}
          volumeMounts:
            - name: {{ template "cloudant.releasename" $ }}-glum-haproxy-cfg
              mountPath: /haproxy/etc/haproxy.cfg.tpl
              subPath: haproxy.cfg.tpl
            {{- if .Values.serveHttps }}
            - name: {{ template "cloudant.releasename" $ }}-cert-volume
              mountPath: /glum/certs/main
              readOnly: true
            {{ end }}
          resources:
            limits:
              cpu: {{ .Values.glum.resources.limits.cpu }}
              memory: {{ .Values.glum.resources.limits.memory }}
            requests:
              cpu: {{ .Values.glum.resources.requests.cpu }}
              memory: {{ .Values.glum.resources.requests.memory }}
          env:
          - name: STATS_USER
            valueFrom:
              secretKeyRef:
                name: {{ include "sch.names.fullCompName" (list . "stats-creds") }}
                key: username
          - name: STATS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ include "sch.names.fullCompName" (list . "stats-creds") }}
                key: password
        - name: dnsmasq
          imagePullPolicy: {{ .Values.global.images.pullPolicy }}
          securityContext:
            runAsUser: 0
          image: {{ trimSuffix "/" .Values.global.images.registry }}/{{ .Values.global.images.cloudant.dnsmasq }}
          resources:
            limits:
              cpu: {{ .Values.glum.resources.limits.cpu }}
              memory: {{ .Values.glum.resources.limits.memory }}
            requests:
              cpu: {{ .Values.glum.resources.requests.cpu }}
              memory: {{ .Values.glum.resources.requests.memory }}
      terminationGracePeriodSeconds: 0
{{- if .Values.global.images.pullSecret }}
      imagePullSecrets:
         - name: {{ .Values.global.images.pullSecret }}
{{- end }}
      volumes:
        - name: {{ template "cloudant.releasename" $ }}-glum-haproxy-cfg
          configMap:
            name: {{ template "cloudant.releasename" $ }}-glum-config
        {{- if .Values.serveHttps }}
        - name: {{ template "cloudant.releasename" $ }}-cert-volume
          secret:
            secretName: {{ include "sch.names.fullCompName" (list . "cloudant-haproxy-cert") }}
        {{ end }}
