{{- include "sch.config.init" (list . "sch.chart.config.values") }}
kind: ConfigMap
apiVersion: v1
metadata:
  name: "{{ template "cloudant.releasename" $ }}-job-config"
  labels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 4 }} 
data:
  create_dbs.sh: |
    #!/usr/bin/env bash

    BASEURL=http://{{ template "cloudant.releasename" $ }}-db.{{ .Release.Namespace }}.svc.{{ .Values.global.dns.clusterDomainSuffix }}:{{ .Values.global.ports.in }}
    CLUSTER_HEADER="X-Cloudant-User:{{ template "cloudant.releasename" $ }}"
    AUTH_CRED="-u $ADMIN_USERNAME:$ADMIN_PASSWORD"

    rc=0

{{- if .Values.global.persistence.useDynamicProvisioning }}
    sleep 180
{{- end }}

    # Create DBs
    for i in {{ range $item := .Values.systemdatabases }}{{ $item }} {{ end }}; do
        echo "INFO: creating DB {{ template "cloudant.releasename" $ }}/$i"
        code=$(curl -s $BASEURL/$i -H $CLUSTER_HEADER $AUTH_CRED -XPUT -w %{http_code} -o /dev/null)
        ret=$?
        [ "$code" -eq "201" ] && { echo "INFO: {{ template "cloudant.releasename" $ }}/$i created"; continue; }
        [ "$code" -eq "412" ] && { echo "WARNING: {{ template "cloudant.releasename" $ }}/$i already exists"; continue; }
        # it is an unexpected code so save it
        echo "ERROR: Failed to create system db {{ template "cloudant.releasename" $ }}/$i with HTTP $code"
        # set rc to be the last non-zero return code of above call
        rc=$ret
        # append a new line in case `curl -v` outputs last line with no CR/LF
        echo ""
    done

    echo "INFO: Exiting with code $rc"
    exit $rc
