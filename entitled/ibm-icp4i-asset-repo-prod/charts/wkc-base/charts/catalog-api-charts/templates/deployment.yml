{{- include "sch.config.init" (list . "sch.chart.config.values") }}
apiVersion: {{ .Chart.ApiVersion }}
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ .Values.microservice.appname }}
  labels:
    app: {{ .Release.Name }}-{{ .Values.microservice.appname }}
    chart: {{ .Chart.Name }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-{{ .Values.microservice.appname }}
  template:
    metadata:
      annotations:
        {{- if .Values.global.productionDeployment }}
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.meteringProd) | indent 8 }}
        {{- else }}
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.meteringNonProd) | indent 8 }}
        {{- end }}
      labels:
        app: {{ .Release.Name }}-{{ .Values.microservice.appname }}
        chart: {{ .Chart.Name }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
    spec:
      affinity:
      {{- include "sch.affinity.nodeAffinity" (list .) | indent 8 }}
      initContainers:
      - name: init
        image: {{ trimSuffix "/" .Values.global.images.registry }}/{{ .Values.global.images.configurator }}
        imagePullPolicy: {{ .Values.global.images.pullPolicy }}
        resources:
          limits:
            cpu: {{ .Values.limits.cpu }}
            memory: {{ .Values.limits.memory }}
          requests:
            cpu: {{ .Values.requests.cpu }}
            memory: {{ .Values.requests.memory }}
        env:
          - name: URL
            value: {{ .Release.Name }}-clt
        command: ["/bin/sh", "-ec", "while [ $(curl -sw '%{http_code}' $URL -o /dev/null) != 200 ]; do echo waiting for $URL; sleep 2; done;"]
      containers:
        - name: {{ .Release.Name }}-{{ .Values.microservice.appname }}
          image: {{ trimSuffix "/" .Values.global.images.registry }}/{{ .Values.global.images.catalogApi }}
          resources:
            limits:
              cpu: {{ .Values.limits.cpu }}
              memory: {{ .Values.limits.memory }}
            requests:
              cpu: {{ .Values.requests.cpu }}
              memory: {{ .Values.requests.memory }}
          volumeMounts:
            - name: resources
              mountPath: "/opt/ibm/wlp/usr/servers/defaultServer/resources"
            - name: asset-types
              mountPath: "/opt/ibm/wlp/usr/servers/defaultServer/asset-types"
{{- if .Values.volumes.security }}
            - name: security
              mountPath: "/opt/ibm/wlp/usr/servers/defaultServer/resources/security"
{{- end }}
          ports:
            - containerPort: {{ .Values.ports.containerPort }}
              protocol: {{ .Values.ports.protocol }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probes.livenessProbe.path }}
              port: {{ .Values.probes.livenessProbe.port }}
              scheme: {{ .Values.probes.livenessProbe.scheme }}
            initialDelaySeconds: {{ .Values.probes.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.probes.livenessProbe.periodSeconds }}
            successThreshold: {{ .Values.probes.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.probes.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probes.readinessProbe.path }}
              port: {{ .Values.probes.readinessProbe.port }}
              scheme: {{ .Values.probes.readinessProbe.scheme }}
            initialDelaySeconds: {{ .Values.probes.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probes.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.probes.readinessProbe.periodSeconds }}
            successThreshold: {{ .Values.probes.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.probes.readinessProbe.failureThreshold }}
          
          env:
             - name: DATALAKE_DBCONF_DIR
               value: "/opt/ibm/wlp/usr/servers/defaultServer/resources/"
             - name: environment
               value: "prod"
             - name: environment_type
               value: "wkc"
             - name: baseUrl
               valueFrom:
                  configMapKeyRef:
                    name: {{ include "sch.names.fullCompName" (list . "wdp-config") }}
                    key: host-url
             - name: file_service_url
               value: "https://{{ .Release.Name }}-asset-files-api:443/v2/asset_files"
             - name: project_api_url
               value: "$(baseUrl)/v2/projects"
             - name: connection_api_url
               value: "$(baseUrl)/v2"
             - name: entitlement_api_url
               value: "$(baseUrl)/v2/entitlements"
             - name: dps_url
               value: "$(baseUrl)/v2"
             - name: url_override
               value: "$(baseUrl)/v2"
             - name: lineage_url
               value: "$(baseUrl)/v2/lineage_events"
             - name: WDP_SERVICE_ID
               valueFrom:
                  secretKeyRef:
                    name: {{ .Release.Name }}-service-id
                    key: {{ .Release.Namespace }}-id
             - name: accredited_service_metering_01
               valueFrom:
                  secretKeyRef:
                    name: {{ .Release.Name }}-service-id
                    key: {{ .Release.Namespace }}-id
             - name: accredited_service_editors_01
               valueFrom:
                  secretKeyRef:
                    name: {{ .Release.Name }}-service-id
                    key: {{ .Release.Namespace }}-id
             - name: skip_new_owner_check
               valueFrom:
                  secretKeyRef:
                    name: {{ .Release.Name }}-service-id
                    key: {{ .Release.Namespace }}-id
             - name: accredited_service_viewers_01
               valueFrom:
                  secretKeyRef:
                    name: {{ .Release.Name }}-service-id
                    key: {{ .Release.Namespace }}-id
             - name: global_type_creator_service_id_01
               valueFrom:
                  secretKeyRef:
                    name: {{ .Release.Name }}-service-id
                    key: {{ .Release.Namespace }}-id
             - name: global_asset_type_server_creator_id
               valueFrom:
                  secretKeyRef:
                    name: {{ .Release.Name }}-service-id
                    key: {{ .Release.Namespace }}-id
             - name: cams_administration_editors_01
               valueFrom:
                  secretKeyRef:
                    name: {{ .Release.Name }}-service-id
                    key: {{ .Release.Namespace }}-id
             - name: cams_administration_viewers_01
               valueFrom:
                  secretKeyRef:
                    name: {{ .Release.Name }}-service-id
                    key: {{ .Release.Namespace }}-id
             - name: cams_operators_01
               valueFrom:
                  secretKeyRef:
                    name: {{ .Release.Name }}-service-id
                    key: {{ .Release.Namespace }}-id
             - name: wkc_account_managers_01
               valueFrom:
                  secretKeyRef:
                    name: {{ .Release.Name }}-service-id
                    key: {{ .Release.Namespace }}-id
             - name: dps_skipped_services
               valueFrom:
                  secretKeyRef:
                    name: {{ .Release.Name }}-service-id
                    key: {{ .Release.Namespace }}-id
             - name: cams_omrs_asset_administrator
               valueFrom:
                  secretKeyRef:
                    name: {{ .Release.Name }}-service-id
                    key: {{ .Release.Namespace }}-id
             - name: icp_iam_service_id_credential
               valueFrom:
                  secretKeyRef:
                    name: {{ .Release.Name }}-service-id
                    key: api-key
             - name: icp_client_secret
               valueFrom:
                  secretKeyRef:
                    name: {{ include "sch.names.fullCompName" (list . "oidc-secret") }}
                    key: CLIENT_SECRET
             - name: icp_client_id
               valueFrom:
                  secretKeyRef:
                    name: {{ include "sch.names.fullCompName" (list . "oidc-secret") }}
                    key: CLIENT_ID
             - name: iam_base_url
               valueFrom:
                  configMapKeyRef:
                    name: {{ include "sch.names.fullCompName" (list . "configmap") }}
                    key: iamUrl
             - name: icp_iam_crn
               valueFrom:
                  configMapKeyRef:
                    name: {{ include "sch.names.fullCompName" (list . "configmap") }}
                    key: crn
             - name: CLOUDANT_USER
               valueFrom:
                  secretKeyRef:
                    name: {{ include "sch.names.fullCompName" (list . "cloudant-creds") }}
                    key: username
             - name: CLOUDANT_PASSWORD
               valueFrom:
                  secretKeyRef:
                    name: {{ include "sch.names.fullCompName" (list . "cloudant-creds") }}
                    key: password
             - name: redis_password
               valueFrom:
                  secretKeyRef:
                    name: {{ include "sch.names.fullCompName" (list . "redis-ha-secret") }}
                    key: auth
             - name: redis_url
               value: "redis://{{ .Release.Name }}-redis-ha-master-svc.{{ .Release.Namespace }}.svc:6379"
      volumes:
        - name: resources
          configMap:
              name: {{ include "sch.names.fullCompName" (list . "catalog-api-config") }}
        - name: asset-types
          configMap:
              name: {{ include "sch.names.fullCompName" (list . "asset-types-config") }}
{{- if .Values.volumes.security }}
        - name: security
          secret:
              secretName: {{ .Values.volumes.security.secretName }}
{{- end }}
{{- if .Values.global.images.pullSecret }}
      imagePullSecrets:
         - name: {{ .Values.global.images.pullSecret }}
{{- end }}
      securityContext:
        runAsUser: 0
