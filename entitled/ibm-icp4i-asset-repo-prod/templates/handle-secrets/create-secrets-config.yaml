###############################################################################
#  Licensed Materials - Property of IBM
#
# 5737-I89
# Â© Copyright IBM Corp. 2019 All Rights Reserved
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
###############################################################################
#  Script run by create secrets job
#
###############################################################################

{{- include "sch.config.init" (list . "sch.chart.config.values") }}
{{- $cfgMapName := include "sch.names.fullCompName" (list . "create-secrets-config") }}
{{- $labels := include "sch.metadata.labels.standard" (list . "") }}

kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ $cfgMapName }}
  labels:
{{ $labels | indent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation
data:
  create_secrets.sh: |
    #!/usr/bin/env bash
    set -ex

    echo "Creating a new SSH keypair"
    ssh-keygen -m PEM -t rsa -f /tmp/id_rsa -N ''

    echo "Creating a self-signed CA"
    openssl req -new -newkey rsa:4096 -days 825 -nodes -x509 -subj "/C=GB/ST=London/L=London/O=Global Security/OU=IT Department/CN=*.svc" -keyout "/tmp/ca.key" -out "/tmp/ca.crt"
    cat /tmp/ca.crt /tmp/ca.key > /tmp/ca.crt.pem

    echo "creating a private key"
    openssl genrsa 4096 > /tmp/tls.key

    echo "creating a openssl.cnf file"
    cat > "/tmp/openssl.cnf" << EOF
    [req]
    default_bits = 2048
    encrypt_key  = no # Change to encrypt the private key using des3 or similar
    default_md   = sha256
    prompt       = no
    utf8         = yes
    # Speify the DN here so we aren't prompted (along with prompt = no above).
    distinguished_name = req_distinguished_name
    [req_distinguished_name]
    C  = GB
    ST = London
    L  = London
    O  = Global
    CN = My Certificate
    OU = IT
    CN=*.svc

    EOF

    echo "creating a csr using openssl.conf"

    openssl req -new -key "/tmp/tls.key" -out "/tmp/tls.csr" -config "/tmp/openssl.cnf"

    echo "Creating key and cert files for internal TLS"
    openssl x509 -req -days 825 -in "/tmp/tls.csr" -CA "/tmp/ca.crt" -CAkey "/tmp/ca.key" -CAcreateserial -extfile "/tmp/openssl.cnf" -out "/tmp/tls.crt"

    cat /tmp/tls.crt /tmp/tls.key > /tmp/certificate.pem

    function randAlphaNum() {

    echo $(openssl rand -base64 500 | tr -dc 'a-zA-Z0-9' | fold -w $1 | head -n 1)

    }


    echo "Creating secrets"
    kubectl create secret generic {{ include "sch.names.fullCompName" (list . "redis-ha-secret") }} --from-literal=auth=$(randAlphaNum 10)
    kubectl label secret {{ include "sch.names.fullCompName" (list . "redis-ha-secret") }} release={{ .Release.Name }} --overwrite
    #kubectl create secret generic wdp-crypto-secret --from-literal=wdp-temp-sec-key=$(randAlphaNum 16)
    kubectl create secret generic {{ include "sch.names.fullCompName" (list . "stats-creds") }} --from-literal=username=$(randAlphaNum 8) --from-literal=password=$(randAlphaNum 10)
    kubectl label secret {{ include "sch.names.fullCompName" (list . "stats-creds") }} release={{ .Release.Name }} --overwrite
    kubectl create secret generic {{ include "sch.names.fullCompName" (list . "cloudant-haproxy-cert") }} --from-file /tmp/certificate.pem --from-file /tmp/ca.crt.pem
    kubectl label secret {{ include "sch.names.fullCompName" (list . "cloudant-haproxy-cert") }} release={{ .Release.Name }} --overwrite

    kubectl create secret generic {{ include "sch.names.fullCompName" (list . "ssh-keypair") }} --from-file /tmp/id_rsa --from-file /tmp/id_rsa.pub
    kubectl label secret {{ include "sch.names.fullCompName" (list . "ssh-keypair") }} release={{ .Release.Name }} --overwrite

    kubectl create secret generic {{ include "sch.names.fullCompName" (list . "cloudant-creds") }} --from-literal=username=$(randAlphaNum 10) --from-literal=password=$(randAlphaNum 10)
    kubectl label secret {{ include "sch.names.fullCompName" (list . "cloudant-creds") }} release={{ .Release.Name }} --overwrite
    kubectl label secret {{ include "sch.names.fullCompName" (list . "cloudant-creds") }} namespace={{ .Release.Namespace }} --overwrite=true
    kubectl label secret {{ include "sch.names.fullCompName" (list . "cloudant-creds") }} chart=db-0.3.0 --overwrite=true
    kubectl label secret {{ include "sch.names.fullCompName" (list . "cloudant-creds") }} revision=1 --overwrite=true
    kubectl label secret {{ include "sch.names.fullCompName" (list . "cloudant-creds") }} app.kubernetes.io/instance={{ .Release.Name }} --overwrite=true
    kubectl label secret {{ include "sch.names.fullCompName" (list . "cloudant-creds") }} app.kubernetes.io/version=0.3.0 --overwrite=true
    kubectl label secret {{ include "sch.names.fullCompName" (list . "cloudant-creds") }} app.kubernetes.io/part-of=cloudant --overwrite=true
    kubectl label secret {{ include "sch.names.fullCompName" (list . "cloudant-creds") }} app.kubernetes.io/name=dbcore --overwrite=true
    kubectl label secret {{ include "sch.names.fullCompName" (list . "cloudant-creds") }} app.kubernetes.io/component=database --overwrite=true


    echo "Done"
