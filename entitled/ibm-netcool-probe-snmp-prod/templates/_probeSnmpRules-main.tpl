{{/* SNMP Probe Default Rules file */}}
{{- define "probeSnmpRules-main" }}
########################################################################
#
#       Licensed Materials - Property of IBM
#       
#       
#       
#       (C) Copyright IBM Corp. 2002,2019. All Rights Reserved
#       
#       US Government Users Restricted Rights - Use, duplication
#       or disclosure restricted by GSA ADP Schedule Contract
#       with IBM Corp.
#       
#       ========================================================
#       Module Information:
#       
#       DESCRIPTION:
#       mttrapd.rules
#
#
#
#######################################################################
#
# The following are the elements generated by this Mttrapd Probe.
#
# $community  		: V1 and V2c The SNMP community string.
#
# $contextEngineID 	: V3 Identifies the engine associated with the data.
#
# $enterprise 		: V1 The SNMP enterprise string.
#
# $EventCount 		: V1, V2c, and V3 The number of traps processed during the current execution of the probe.
#
# $generic-trap 	: V1 The SNMP generic trap integer value.
#
# $IPaddress 		: V1, V2c, and V3 The IP address (origin of the SNMP trap).
#
# $Node 		: V1, V2c, and V3 The node name (origin of the SNMP trap). IP address (if node name cannot be resolved).
#
# $notify 		:  V2c and V3 Notify V2c specific field.
#
# $PeerAddress 		: V1, V2c, and V3 The host name or IP address where the SNMP trap was received from.
#
# $PeerIPaddress 	: V1, V2c, and V3 The IP address where the SNMP trap was received from.
#
# $Protocol 		: V1, V2c, and V3 The protocol of the trap received. This can be either UDP or TCP.
#
# $ReceivedPort 	: V1, V2c, and V3 The port number where the SNMP trap was received from. This is determined by the Port property.
#
# $ReceivedTime 	: V1, V2c, and V3 The time that the SNMP packet was received from the network interface.
#
# $ReqId 		: V1 The SNMP request ID.
#
# $securityEngineID 	: V3 Engine ID of the authoritative SNMP entity. For informs, this is the engine ID of the probe. 
#		      	  For traps, this is the engine ID of the source of the trap.
#
# $securityLevel    	: V3 Security level of the trap or inform: 
#                   	  noAuth - trap or inform had no authentication and no privacy 
#                         authNoPriv - trap or inform had authentication, but no privacy 
#                         authPriv - trap or inform had authentication and privacy
#
# $securityName 	: V3 Security name used for trap authentication.
#
# $SNMP_Version 	: V1, V2c, and V3 Has the value 1 for SNMP V1 traps and the value 2 for SNMP V2c traps.
#
# $specific-trap 	: V1 The SNMP specific trap integer value.
#
# $Uptime 		: V1 and V2c The SNMP uptime for traps expressed in the format 0:00:00.
#
# $UpTime 		: V1 and V2c The SNMP uptime for traps expressed as an integer.
#
# $n_raw		: raw string representation of the varbind variables (containing all control characters) 
#
# $n_text 		: printable text representation of the varbind variables (with non-printable characters replaced with periods) 
#
# $n_hex 		: hexadecimal representation of the varbind variables
#
#######################################################################

######################################################################
## DefaultOS definition copied from mttrapd_flood_control.rules     ##
## Note:                                                            ##
##   (1) Calls to registertarget() must be placed at the start of   ##
##       rules.                                                     ##
##   (2) If details($*) is used in the rules, add "alerts.details"  ##
##       in registertarget() after "alerts.status".                 ##
######################################################################
DefaultOS = registertarget(%Server, "", "alerts.status")

######################################################################
## Array definitions copied from mttrapd_flood_control.rules        ##
######################################################################

#######################################################################
# Keep track of which hosts we've marked as flooded or not
# If the entry for an IP address is set to 0 then host is not being ignored
# If the entry for an IP address is set to >0 then the host is being ignored
#	(and the value is the UTC time at which we started ignoring it)
#
#######################################################################
array OplTrapFloodHosts

#######################################################################
# A _tmp array which we use to keep the above array clear of re-enabled 
# entries (see below)
#######################################################################
array OplTrapFloodHosts_tmp

#######################################################################
# Arrays to keep track of the number of dropped traps when the connection 
# was disabled
#######################################################################
array OplTrapFloodHostsNosDroppedTraps
array OplTrapFloodHostsNosDroppedTrapsTimestamp

#######################################################################
# Array for tokens in IP_BLOCKADE_STATUS probewatch
#######################################################################
array ip_blockade_status_token
log( DEBUG, "---- Enterring mttrapd.rules ----" )
if( match( @Manager, "ProbeWatch" ) )
{
        switch(@Summary)
        {
        case "Running ...":
                @Severity = 1
                @AlertGroup = "probestat"
                @Type = 2
                @AlertKey = @Agent
        case "Going Down ...":
                @Severity = 5
                @AlertGroup = "probestat"
                @Type = 1
                @AlertKey = @Agent
        default:
                if (nmatch(@Summary, "IP_BLOCKADE_STATUS"))
                {
                    ######################################################
                    # Possible values in @Summary:
                    #    IP_BLOCKADE_STATUS#BLOCKED#<ip_addr>
                    #    IP_BLOCKADE_STATUS#UNBLOCKED#<ip_addr>
                    ######################################################
                    
                    $num_elements=split(@Summary,ip_blockade_status_token,"#")
                    
                    if ( int($num_elements) >= 3)
                    {
                        switch(ip_blockade_status_token[2])
                        {
                            case "BLOCKED":
                                @Severity = 5
                                @Type = 1
                                @Summary = ip_blockade_status_token[3] + " is blocked" 
                            case "UNBLOCKED":
                                @Severity = 1
                                @Type = 2
                                @Summary = ip_blockade_status_token[3] + " is unblocked" 
                            default:
                                log( ERROR, "Unknown IP_BLOCKADE_STATUS state [" + ip_blockade_status_token[2] + "]" )
                        }
                        @AlertKey = ip_blockade_status_token[3]
                        @AlertGroup = "Trap IP Status"
                        @Identifier = @NodeAlias + " " + @AlertKey + " " + @AlertGroup + " " + @Type + " " + @Agent + " " + @Manager
                    }
                }
                else
                {
                    @Severity = 1
                    @AlertKey = @Agent
                }
        }
        @Summary = @Agent + " probe on " + @Node + ": " + @Summary
}
else
{
    @Manager = %Manager 
    @Agent = "mttrapd"
    @Class = "300"
    
    
    ###########################################################################
    # End of default Manager, Agent, and Class
    ###########################################################################
    
    ##########
    # Check if an SNMPv2 trap and convert to SNMPv1 style tokens
    ##########
    
    if(exists($notify)) ### if $notify exists then this is an SNMPv2 trap
    {
        @Node = $PeerAddress
        @NodeAlias = $PeerIPaddress
                
        ##########
        # We'll only remove the first .iso., everything else should be just plain numbers.
        # With the mttrapd probe, this has to be done by specifying the
        # following property in the probe's properties file:
        #   MIBFile : /dev/null
        #
        ##########
    
        if(regmatch($notify, "^enterprises\..*"))
        {
            $MIBFileNotNull = 1
            $notify = ".1.3.6.1.4.1." + extract($notify, "^enterprises\.(.*)")
        }
        else if(regmatch($notify, "\.iso\." ))
        {
            $notify = ".1." + extract($notify, "\.iso\.(.*)")
        }
    
        if (nmatch($notify, ".1.3.6.1.6.3.1.1.5")) ### Trap is an SNMPv2 Generic Trap
        {
            $enterprise = extract($notify, "(.*)\.[0-9]+$")
            $specific-trap = "0"
            $generic-trap = int(extract($notify, ".*\.([0-9]+)$"))-1
        }
        else ### Trap is Enterprise Specific
        {
            if(match(extract($notify, "\.([0-9]+)\.[0-9]+$"), "0"))
            {
                $enterprise = extract($notify, "(.*)\.[0-9]+\.[0-9]+$")
            }
            else
            {
                $enterprise = extract($notify, "(.*)\.[0-9]+$")
            }
            $specific-trap = extract($notify, ".*\.([0-9]+)$")
            $generic-trap = "6"
        }
    }
    else ### This is an SNMPv1 Trap
    {
        @Node = $Node
        if(exists($IPAddress)) ### Trap is from NNM or NV Probe
        {
            $IPaddress = $IPAddress
        }
        @NodeAlias = $IPaddress
        if(regmatch($enterprise, "^iso\..*"))
        {
            $NoQuietOutput = 1
            $enterprise = ".1." + extract($enterprise, "iso\.(.*)")
        }
    }

   

    @Identifier = "" + @NodeAlias + "" + @Agent + "" + $generic-trap + "" + $specific-trap + ""
    @Manager    = %Manager
    @Severity   = "1"


    if (match($generic-trap, "6"))
    {
	   @Summary    = "Enterprise:" + $enterprise + "  Generic Trap:" + $generic-trap + "  Specific Trap:" + $specific-trap + ""
    }
    #
    # if it is not an Enterprise Specific snmp trap deal with
    # the Generic Trap it must be
    #
    else if (match($generic-trap, "0"))
    {
        @Summary = "Cold Start"
        @AlertGroup = "Generic"
        @Severity = "4"
    }
    else if (match($generic-trap, "1")) 
    {
        @Summary = "Warm Start"
        @AlertGroup = "Generic"
        @Severity = "4"
    }
    else if (match($generic-trap, "2"))
    {
        # the $1 varbind will be ifIndex
        @Summary = "Link Down"
        @AlertGroup = "Generic"
        @Severity = "5"
        @Identifier = "" + @NodeAlias + "" + @Agent + "" + $generic-trap + "" + $specific-trap + "" + $1 + ""
        @AlertKey   = "" + $1 + ""
    }
    else if (match($generic-trap, "3"))
    {
        # the $1 varbind will be ifIndex
        @Summary = "Link Up"
        @AlertGroup = "Generic"
        @Severity = "2"
        @Identifier = "" + @NodeAlias + "" + @Agent + "" + $generic-trap + "" + $specific-trap + "" + $1 + ""
        @AlertKey   = "" + $1 + ""
    }
    else if (match($generic-trap, "4"))
    {
         @Summary = "Authentication"
         @AlertGroup = "Generic"
         @Severity = "3"
    }
    else if (match($generic-trap, "5"))
    {
         @Summary = "Egp Neighbour Loss"
         @AlertGroup = "Generic"
         @Severity = "3"
    }
    else
    {
         @Summary = "Trap type not matched"
    }
    
    ###############################################################################################
    # To effectively use mttrapd_flood_control.rules, TrapStat property must be enabled (set to 1). 
    #
    ###############################################################################################
    if ( int(%TrapStat) == 1) 
    {
        include "mttrapd_flood_control.rules"
    }
    
    ###############################################################################################
    # @Node, corresponding to an IP without a hostname or that failed DNS query, will be assigned 
    # with the given numeric IP address.
    #
    # When NoNameResolution is 0, @Node is subject to mandatory update in order to receive a hostname 
    # string different to the value previously set, because the attempt to resolve hostname at DNS server 
    # could succeed anytime.
    ###############################################################################################
    if ( int(%NoNameResolution) == 0 ) 
    {   
        update(@Node)
    }

    @ExtendedAttr = nvp_add($*)
    # Add custom rules below
}
log( DEBUG, "---- Exitting mttrapd.rules ----" )
{{- end }}