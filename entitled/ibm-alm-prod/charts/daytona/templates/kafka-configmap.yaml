{{- include "sch.config.init" (list . "alm.sch.chart.config.values") -}}

{{- define "alm.getKafkaPartitions" -}}
{{- if gt .Values.global.kafka.clusterSize 1.0 }}
{{- printf "%d" (int .Values.global.kafka.alm.partitions) -}}
{{- else -}}
{{- printf "%d" 1 -}}
{{- end -}}
{{- end -}}


{{- define "alm.getKafkaReplicationFactor" -}}
{{- if gt .Values.global.kafka.clusterSize 3.0 }}
{{- printf "%d" 3 -}}
{{- else -}}
{{- printf "%d" (int .Values.global.kafka.clusterSize) -}}
{{- end -}}
{{- end -}}

apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Release.Name }}-kafka-config"
  labels:
    app: {{ include "sch.names.appName" (list .) }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  topics.yaml: |-
    alm__health:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
      config: "cleanup.policy=compact"
    alm__metric:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
      config: "cleanup.policy=compact"
    alm__metric-integrity:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
      config: "cleanup.policy=compact"
    alm__policy:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
      config: "cleanup.policy=compact"
    alm__policyAction:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    alm__policyStatusHeal:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    alm__policyStatusScale:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    alm__clock:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    alm__descriptorChange:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
      config: "cleanup.policy=compact"
    alm__processStateChange:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    alm__processTasksStateChange:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    alm__stateChange:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    alm__taskUpdate:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    alm__load:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    alm__integrity:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    alm__integrityMissing:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    info:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    alm__clockticks5:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    alm__clockticks10:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    alm__clockticks15:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    alm__clockticks30:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    alm__clockticks60:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    alm__clockticksother:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    alm__tick:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    alm__clocktickTypes:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
      config: "cleanup.policy=compact"
    alm__processRestart:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    alm__serviceStateTransition:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
    alm__stateChange__ldu:
      replication_factor: {{ include "alm.getKafkaReplicationFactor" . }}
      partitions: {{ include "alm.getKafkaPartitions" . }}
      # 1 year
      config: "retention.ms=31536000000"

  create-kafka-topics.py: |-
    import yaml
    import requests
    from time import sleep

    kafkaRestApi = 'http://{{ .Release.Name }}-kafka:8080/1.0/kafkarest/'

    # wait for rest api to be ready
    print('INFO: Waiting for KafkaREST to become ready...')
    readiness = requests.get(kafkaRestApi + 'readiness')
    while readiness.status_code != 200:
        print('INFO: Waiting for KafkaREST to become ready...')
        sleep(2)
        readiness = requests.get(kafkaRestApi + 'readiness')
    print('INFO: Waiting for KafkaREST to become ready... OK')

    # loop over the topics
    with open('/opt/ibm/alm/bin/topics.yaml') as f:
        topics = yaml.load(f)
        for topic in topics:
            print("INFO: Checking if topic '" + topic + "' exists...")
            exists_check = requests.get(kafkaRestApi + 'topics/' + topic)
            if exists_check.status_code == 200:
                print("INFO: Checking if topic '" + topic + "' exists... OK")
            else:
                print("INFO: Creating topic '" + topic + "'...")
                replication_factor = "?replication_factor=" + str(topics[topic]['replication_factor'])
                partitions = "&partitions=" + str(topics[topic]['partitions'])
                config = ""
                if "config" in topics[topic]:
                    config = "&config=" + topics[topic]["config"]
                create_topic = requests.post(kafkaRestApi + 'topics/' + topic + replication_factor + partitions + config)
                if create_topic.status_code == 201:
                    print("INFO: Creating topic '" + topic + "'... OK")
                else:
                    print("ERROR: Creating topic '" + topic + "'... " + str(create_topic))
