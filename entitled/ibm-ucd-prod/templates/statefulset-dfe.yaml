{{- include "sch.config.init" (list . "ibm-ucd-prod.sch.chart.config.values") -}}
{{- $imageSpec := include "{{ .Chart.Name }}.imageSpec" . | trim -}}
{{- $fullName := include "sch.names.fullName" (list .) -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $fullName }}-dfe
  labels:
{{ include "sch.metadata.labels.standard" (list . "dfe") | indent 4 }}
spec:
  serviceName: {{ $fullName }}-dfe
  replicas: 0
  selector:
    matchLabels:
{{ include "sch.metadata.labels.standard" (list . "dfe") | indent 6 }}
  template:
    metadata:
      labels:
{{ include "sch.metadata.labels.standard" (list . "dfe") | indent 8 }}
        ucdcomp: {{ .Release.Name }}-server-dfe
      annotations:
        productName: "IBM UrbanCode Deploy Server Agent"
        productID: "f6a78b2d36ca400389f3a60332112399"
        productVersion: "7.1.1"
        productMetric: "MANAGED_VIRTUAL_SERVER"
        productChargedContainers: "All"
    spec:
      serviceAccountName: {{ $fullName }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
{{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
        runAsUser: 1001
        fsGroup: {{ .Values.persistence.fsGroup }}
{{- end }}
      affinity:
      {{- include "sch.affinity.nodeAffinity" (list .) | indent 8 }}
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: ucdcomp
                operator: In
                values:
                - {{ .Release.Name }}-server
            topologyKey: "kubernetes.io/hostname"
      initContainers:
      - name: init
        image: {{ $imageSpec | quote }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
{{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
          runAsUser: 1001
{{- end }}
          capabilities:
            drop:
            - ALL
        command: ["/usr/local/bin/init.sh"]
        env:
          - name: DB_NAME
            value: {{ .Values.database.name }}
          - name: DB_USER
            value: {{ .Values.database.username }}
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                {{- if .Values.secret.name }}
                name: {{ .Values.secret.name }}
                {{- else }}
                name: {{ .Release.Name }}-secrets
                {{- end }}
                key: dbpassword
          - name: DB_TCP_PORT
            value: {{ .Values.database.port | quote }}
          - name: DB_TCP_URL
            value: {{ .Values.database.hostname}}
          - name: DB_TYPE
            value: {{ .Values.database.type}}
          - name: DB_JDBC_CONN_URL
            value: {{ .Values.database.jdbcConnUrl}}
          - name: UCD_INIT_PASSWD
            valueFrom:
              secretKeyRef:
                {{- if .Values.secret.name }}
                name: {{ .Values.secret.name }}
                {{- else }}
                name: {{ .Release.Name }}-secrets
                {{- end }}
                key: initpassword
          - name: UCD_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                {{- if .Values.secret.name }}
                name: {{ .Values.secret.name }}
                {{- else }}
                name: {{ .Release.Name }}-secrets
                {{- end }}
                key: keystorepassword
          - name: UCD_STS
            value: {{ .Release.Name }}
          - name: LICENSE_SERVER_URL
            value: {{ .Values.license.serverUrl }}
          - name: DFE_SERVER
            value: "true"
        volumeMounts:
          {{- if ne .Values.database.type "derby"}}
          - name: "{{ $fullName }}-{{ .Values.extLibVolume.name }}"
            mountPath: "/opt/ibm-ucd/server/ext_lib"
          {{- end}}
          - name: "{{ $fullName }}-{{ .Values.appDataVolume.name }}"
            mountPath: "/opt/ibm-ucd/server/appdata"
          {{- if .Values.extLibVolume.configMapName }}
          - name: user-script
            mountPath: "/tmp/user-script"
          {{- end }}
        resources:
          {{- if .Values.resources.constraints.enabled}}
          limits:
{{ toYaml .Values.resources.limits | indent 12 }}
          requests:
{{ toYaml .Values.resources.requests | indent 12 }}
          {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ $imageSpec | quote }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
{{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
          runAsUser: 1001
{{- end }}
          capabilities:
            drop:
            - ALL
        ports:
        {{- if .Values.secureConnections.required }}
        - containerPort: 8443
        {{- else }}
        - containerPort: 8080
        {{- end }}
        readinessProbe:
          httpGet:
            path: /connTest.txt
            {{- if .Values.secureConnections.required }}
            port: 8443
            scheme: HTTPS
            {{- else }}
            port: 8080
            scheme: HTTP
            {{- end }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        livenessProbe:
          httpGet:
            path: /connTest.txt
            {{- if .Values.secureConnections.required }}
            port: 8443
            scheme: HTTPS
            {{- else }}
            port: 8080
            scheme: HTTP
            {{- end }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        env:
          - name: DB_NAME
            value: {{ .Values.database.name }}
          - name: DB_USER
            value: {{ .Values.database.username }}
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                {{- if .Values.secret.name }}
                name: {{ .Values.secret.name }}
                {{- else }}
                name: {{ .Release.Name }}-secrets
                {{- end }}
                key: dbpassword
          - name: DB_TCP_PORT
            value: {{ .Values.database.port | quote }}
          - name: DB_TCP_URL
            value: {{ .Values.database.hostname}}
          - name: DB_TYPE
            value: {{ .Values.database.type}}
          - name: DB_JDBC_CONN_URL
            value: {{ .Values.database.jdbcConnUrl}}
          - name: SECURE
            {{- if .Values.secureConnections.required }}
            value: "Y"
            {{- else }}
            value: "N"
            {{- end }}
          - name: UCD_KEYSTORE_PASSWORD
            valueFrom:
              secretKeyRef:
                {{- if .Values.secret.name }}
                name: {{ .Values.secret.name }}
                {{- else }}
                name: {{ .Release.Name }}-secrets
                {{- end }}
                key: keystorepassword
          - name: UCD_STS
            value: {{ .Release.Name }}
          - name: DFE_SERVER
            value: "true"
        volumeMounts:
          {{- if ne .Values.database.type "derby"}}
          - name: "{{ $fullName }}-{{ .Values.extLibVolume.name }}"
            mountPath: "/opt/ibm-ucd/server/ext_lib"
          {{- end}}
          - name: "{{ $fullName }}-{{ .Values.appDataVolume.name }}"
            mountPath: "/opt/ibm-ucd/server/appdata"
          {{- if .Values.extLibVolume.configMapName }}
          - name: user-script
            mountPath: "/tmp/user-script"
          {{- end }}
        resources:
          {{- if .Values.resources.constraints.enabled}}
          limits:
{{ toYaml .Values.resources.limits | indent 12 }}
          requests:
{{ toYaml .Values.resources.requests | indent 12 }}
          {{- end }}
      {{- if .Values.image.secret }}
      imagePullSecrets:
      - name: {{ .Values.image.secret }}
      {{- end }}
      volumes:
      {{- if ne .Values.database.type "derby"}}
      - name: "{{ $fullName }}-{{ .Values.extLibVolume.name }}"
        {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          {{- if .Values.extLibVolume.existingClaimName }}
          claimName: {{ .Values.extLibVolume.existingClaimName }}
          {{- else }}
          claimName: {{ $fullName }}-{{ .Values.extLibVolume.name }}
          {{- end }}
        {{- else }}
        emptyDir: {}
        {{- end }}
      {{- end }}
      - name: "{{ $fullName }}-{{ .Values.appDataVolume.name }}"
      {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
        {{- if .Values.appDataVolume.existingClaimName }}
          claimName: {{ .Values.appDataVolume.existingClaimName }}
        {{- else }}
          claimName: {{ $fullName }}-{{ .Values.appDataVolume.name }}
        {{- end }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      {{- if .Values.extLibVolume.configMapName }}
      - name: user-script
        configMap:
          name: {{ .Values.extLibVolume.configMapName }}
          defaultMode: 0744
{{- end }}

