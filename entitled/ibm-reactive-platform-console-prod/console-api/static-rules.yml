- record: kube_node_pressure
  expr: avg by (es_workload, condition, node_ip, node_name) (kube_node_status_condition{condition!="Ready", status="true"})

# kube_pod_ready: exclude pods where 100% of containers have terminated (eg. Jobs)
- record: kube_pod_ready
  expr: kube_pod_status_ready{condition="true"} unless on (pod) avg by (pod) (kube_pod_container_status_terminated) == 1

- record: kube_pod_container_restarts_rate
  expr: rate(kube_pod_container_status_restarts_total[1m])>=0 unless on (pod) avg by (pod) (kube_pod_container_status_terminated) == 1

- record: container_starts_total
  expr: sum by (es_workload, namespace, es_monitor_type) (1 + kube_pod_container_status_restarts_total)

- record: kube_pod_failed
  expr: kube_pod_status_phase{phase="Failed"}

- record: kube_pod_not_running
  expr: 1 - kube_pod_status_phase{phase="Running"} and ignoring(phase) kube_pod_status_phase{phase="Failed"}==0 and ignoring(phase) kube_pod_status_phase{phase="Succeeded"}==0

- record: kube_workload_generation_lag
  expr: avg by (es_workload, namespace, es_monitor_type) (kube_deployment_metadata_generation - kube_deployment_status_observed_generation)

- record: kube_workload_generation_lag
  expr: avg by (es_workload, namespace, es_monitor_type) (kube_daemonset_status_desired_number_scheduled - kube_daemonset_status_number_ready)

- record: prometheus_notification_queue_percent
  expr: 100 * prometheus_notifications_queue_length / prometheus_notifications_queue_capacity

- record: prometheus_target_sync_percent
  expr: 100 * prometheus_target_sync_length_seconds{quantile="0.99"} / on (job,instance) group_left(interval) prometheus_target_interval_length_seconds{quantile="0.01"}

- record: prometheus_notifications_dropped_rate
  expr: irate(prometheus_notifications_dropped_total[5m])

- record: prometheus_rule_evaluation_failures_rate
  expr: irate(prometheus_rule_evaluation_failures_total[5m])

- record: prometheus_target_scrapes_exceeded_sample_limit_rate
  expr: irate(prometheus_target_scrapes_exceeded_sample_limit_total[5m])

- record: prometheus_tsdb_reloads_failures_rate
  expr: irate(prometheus_tsdb_reloads_failures_total[5m])

- record: akka_processing_time_seconds
  expr: akka_actor_processing_time_ns{quantile="0.5"} / 1000000000

- record: zk_open_file_ratio
  expr: (zk_open_file_descriptor_count/zk_max_file_descriptor_count) * 100

- record: redis_keyspace_miss_ratio
  expr: (redis_keyspace_misses_total/redis_keyspace_hits_total) * 100

- record: kafka_incoming_messages_rate
  expr: sum without (instance) (irate(kafka_server_brokertopicmetrics_messagesin_total[5m]))

- record: kafka_active_controllers
  expr: sum by (namespace, es_workload, es_monitor_type) (kafka_controller_kafkacontroller_activecontrollercount)

- record: memcached_miss_ratio
  expr: (sum without(command, status) (memcached_commands_total{status="miss"})/sum without(command, status) (memcached_commands_total)) * 100

- record: memcached_evictions_rate
  expr: irate(memcached_items_evicted_total[5m])

- record: akka_http_http_server_responses_5xx_rate
  expr: irate(akka_http_http_server_responses_5xx[5m]) and akka_http_http_server_responses_5xx offset 1m

- record: kafka_consumer_topic_consumed_rate
  expr: sum by (app_kubernetes_io_component, app_kubernetes_io_managed_by, app_kubernetes_io_name, app_kubernetes_io_part_of, es_monitor_type, es_workload, namespace, topic) (kafka_consumer_consumer_fetch_manager_metrics_records_consumed_rate)

- record: kafka_producer_topic_send_rate
  expr: sum by (app_kubernetes_io_component, app_kubernetes_io_managed_by, app_kubernetes_io_name, app_kubernetes_io_part_of, es_monitor_type, es_workload, namespace, topic) (kafka_producer_producer_metrics_record_send_rate)

- record: kafka_consumer_topic_lag_max
  expr: max by (app_kubernetes_io_component, app_kubernetes_io_managed_by, app_kubernetes_io_name, app_kubernetes_io_part_of, es_monitor_type, es_workload, namespace, topic, instance) (clamp_min(kafka_consumer_consumer_fetch_manager_metrics_records_lag_max,0))
