server {
  listen 8080;
  server_name localhost;
  set $base /usr/share/nginx/html;

  # common security headers

  more_clear_headers "Server";
  more_set_headers
    "X-Frame-Options: DENY"
    "X-XSS-Protection: 1";
  set $app_csp "img-src 'self' data:; default-src 'self' 'unsafe-eval' 'unsafe-inline';";

  # use external resolver to lookup backends, cache for 30 seconds

  resolver 127.0.0.1:5353 ipv6=off valid=30s;

  set $prometheus "prometheus-server";
  set $monitorapi "console-api";
  set $grafana "grafana-server";
  set $alertmanager {{ splitList "," .Values.alertManagers | first | quote }};

  # nginx config primer:
  # location ~ (regex.*)(matchers.*) { regex matchers become $1 and $2 in the block }
  #   nginx uses longest path match to decide which location handler to use
  #   the result of a location handler can then match and enter another location handler
  # proxy_pass http://$variable triggers re-resolve mode, otherwise would have fixed IP
  # proxy_redirect 'match' 'replace' fixups for Location header, if any
  #   magic 'replace' value ' $1/' with a space prefix tells nginx to not add server and port
  # sub_filter 'match' 'replace'
  #   rewrites backend content, which we use for inserting the base path
  # proxy_cookie_path 'match' 'replace'
  #   fixes session cookie Path attribute, for Grafana
  # xss guard for injected uris, preserving slash delimiters
  #   array_split '/' $1 to=$encoded_base;
  #   array_map_op set_escape_uri $encoded_base;
  #   array_join '/' $encoded_base;

  # proxy_pass backends with dynamic base url

  # Location matching strategy:
  # - Explicit location matchers for each route.
  # - Anything not matched by the explicit location matchers is treated as a path prefix (base href), added by
  #   e.g. ingress or apiserver proxy.
  # - Catch all location matcher is last, which captures the path prefix up to the penultimate slash.

  sub_filter_once off;

  set $nocache 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';

  # prometheus UI and api endpoints
  location ~ ^(.*/service/prometheus)(/.*)$ {
    # encode base path
    array_split '/' $1 to=$encoded_base;
    array_map_op set_escape_uri $encoded_base;
    array_join '/' $encoded_base;
    # proxy to prometheus
    proxy_pass http://$prometheus$2$is_args$args;
    # rewrite base path in response content, and redirect headers
    sub_filter '="/' '="$encoded_base/';
    sub_filter 'PATH_PREFIX = ""' 'PATH_PREFIX = window.location.pathname.substr(0, window.location.pathname.lastIndexOf("/graph"))';
    proxy_redirect '/' ' $1/';
  }

  # console-api
  # es-monitor-api is preserved for backwards compatibility with es-console-spa
  location ~ ^(.*/service/console-api|.*/service/es-monitor-api)(/.*)$ {
    proxy_pass http://$monitorapi$2$is_args$args;
    proxy_redirect '/' ' $1/';
  }

  # grafana plugin
  location ~ ^(.*/service/grafana)(/dashboard/script/exporter-async.js)$ {
    # encode base path
    array_split '/' $1 to=$encoded_base;
    array_map_op set_escape_uri $encoded_base;
    array_join '/' $encoded_base;
    # proxy to grafana
    proxy_pass http://$grafana:3000$2$is_args$args;
    # rewrite base path in response content, cookies, and redirect headers
    sub_filter_types *;
    sub_filter '/service/grafana' '$encoded_base';
    proxy_cookie_path '/service/grafana' '$1';
    proxy_redirect '/' ' $1/';
    # no-cache
    add_header Last-Modified $date_gmt;
    add_header Cache-Control $nocache;
    if_modified_since off;
    expires off;
    etag off;
  }

  # grafana ui
  location ~ ^(.*/service/grafana)(/.*)$ {
    # encode base path
    array_split '/' $1 to=$encoded_base;
    array_map_op set_escape_uri $encoded_base;
    array_join '/' $encoded_base;
    # proxy to grafana
    proxy_pass http://$grafana:3000$2$is_args$args;
    # rewrite base path in response content, cookies, and redirect headers
    sub_filter_types *;
    sub_filter '/service/grafana' '$encoded_base';
    proxy_cookie_path '/service/grafana' '$1';
    proxy_redirect '/' ' $1/';
  }

  # alertmanager ui
  location ~ ^(.*/service/alertmanager)(/.*)$ {
    proxy_pass http://$alertmanager$2$is_args$args;
    proxy_redirect '/' ' $1/';
  }

  # redirect /service/prometheus -> /service/prometheus/
  # redirect /service/grafana -> /service/grafana/
  # redirect /service/alertmanager -> /service/alertmanager/

  location ~ ^(.*/service/(prometheus|grafana|alertmanager))$ {
    return 301 ' $1/';
  }

  # version

  location ~ ^(.*)/version$ {
    return 200 '{
      "description": {{ .Chart.Description | quote }},
      "version": {{ .Chart.Version | quote }},
      {{- range $k, $v := .Values }}
        {{- if eq $k "imageCredentials" }}
          {{- range $k2, $v2 := . }}
            {{- if and (eq $k2 "registry") ($v2) }}
      "imageCredentials": { {{ $k2 |quote }}: {{ $v2 | quote}} },
            {{- end}}
          {{- end}}
        {{- else if ($v) }}
      {{ $k | quote }}: {{ $v | quote }},
        {{- end}}
      {{- end}}
      "name": {{ .Chart.Name | quote }}
    }';
    default_type application/json;
  }

  # console entry point

  location ~ ^(.*/)index.html$ {
    # Console CSP
    add_header Content-Security-Policy $app_csp;
    # encode base path
    array_split '/' $1 to=$encoded_base;
    array_map_op set_escape_uri $encoded_base;
    array_join '/' $encoded_base;
    # serve the app
    alias $base/index.html;
    # replace base href
    sub_filter 'base href="/"' 'base href="$encoded_base"';
    # no-cache
    add_header Last-Modified $date_gmt;
    add_header Cache-Control $nocache;
    if_modified_since off;
    expires off;
    etag off;
  }

  # bookmarks and reloads in the /workloads/ path
  # (for our single page app, these should reload index.html but keep the path)

  location ~ ^(.*/)(namespaces/[^/]+/workloads/.*)$ {
    # Console CSP
    add_header Content-Security-Policy $app_csp;
    # encode base path
    array_split '/' $1 to=$encoded_base;
    array_map_op set_escape_uri $encoded_base;
    array_join '/' $encoded_base;
    # serve the app
    alias $base/index.html;
    default_type text/html;
    # replace base href
    sub_filter 'base href="/"' 'base href="$encoded_base"';
    # no-cache
    add_header Last-Modified $date_gmt;
    add_header Cache-Control $nocache;
    if_modified_since off;
    expires off;
    etag off;
  }

  # pipelines ui

  location ~ ^(.*/)(pipelines/.*)$ {
    # Console CSP
    add_header Content-Security-Policy $app_csp;
    # encode base path
    array_split '/' $1 to=$encoded_base;
    array_map_op set_escape_uri $encoded_base;
    array_join '/' $encoded_base;
    # serve the app
    alias $base/index.html;
    default_type text/html;
    # replace base href
    sub_filter 'base href="/"' 'base href="$encoded_base"';
    # no-cache
    add_header Last-Modified $date_gmt;
    add_header Cache-Control $nocache;
    if_modified_since off;
    expires off;
    etag off;
  }

  # Specific handler for /assets/js/config.js
  location ~ ^.*/(assets/js/config.js)$ {
    alias /helm-data/$1;
  }

  # Specific handler for assets.
  location ~ ^(.*)(/assets/.*)$ {
    alias $base$2;
  }

  # Handler for application routes and assets not inside of /assets.
  location ~ ^(.*)(/(cluster|.*\.js|.*\.css|.*\.woff|.*\.woff2|.*\.ttf|favicon\.ico))$ {
    root $base;
    try_files $2 $1/index.html;
  }

  # If there is a path with no trailing slash that hasn't matched any location yet, rewrite to trailing slash.
  # E.g. "http://consoleurl/monitoring" -> "http://consoleurl/monitoring/".
  location ~ ^/.+[^/]$ {
    rewrite ^(/.+[^/])$ $1/ last;
  }

  # Catch all handler that catches "http://consoleurl/prefix1/prefix2/", and redirects to
  # "http://consoleurl/prefix1/prefix2/index.html". It handles arbitrary number of prefix subpaths.
  # It does not work with application routes - those need specific location handlers which are listed above.
  location ~ ^(.*)(/.*)$ {
    root $base;
    try_files $2 $1/index.html;
  }
}
