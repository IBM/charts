{{- include "sch.config.init" (list . "poRef.sch.chart.config.values") -}}
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "janusgraph.fullname" . }}
  labels:
    app: {{ template "janusgraph.name" . }}
    chart: {{ template "janusgraph.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "janusgraph.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "janusgraph.name" . }}
        chart: {{ template "janusgraph.chart" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      annotations:
        productName: IBM Maximo Production Optimization On-Premises
        productID: 5737J42
        productVersion: v1.0
    spec:
      {{- include "po.securitycontext.pod" . | indent 6 }}
      {{- include "po.image.pull.secret" . | indent 6 }}
      affinity:
{{- include "sch.affinity.nodeAffinity" (list .) | indent 8 }}
      initContainers:
      - name: {{ .Chart.Name }}-prep-cldntcert-janus
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["sh", "-c", "cp -f /etc/ssl/certs/java/* /work-certs; keytool -importcert -trustcacerts -alias truststore4CouchdbCert -storepass changeit -keystore /work-certs/cacerts  -file /po-cert/tls.crt -storetype jks -noprompt -v;"]
        volumeMounts:
          - mountPath: /po-cert
            name: cert-volume
            readOnly: true
          - name: java-certs
            mountPath: /work-certs
        resources:
        {{- if .Values.resources }}
{{ toYaml .Values.resources | indent 12 }}
        {{- else }}
          requests:
            cpu: 100m
            memory: 500Mi
          limits:
            cpu: 500m
            memory: 1024Mi
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
{{ include "po.image.pull.secret" . | indent 10 }}
          ports:
            - containerPort: {{ include "janusgraph.port" . }}
              protocol: TCP
          volumeMounts:
            - name: janusgraph-config
              mountPath: /janusgraph-config
            - name: janusgraph-config
              mountPath: /janusgraph-0.2.0-hadoop2/lib/compose-jg.jar
              subPath: compose-jg.jar
            - name: local-db
              mountPath: {{ .Values.persistence.path }}
            - name: po-pvc
              mountPath: /tmp
            - name: java-certs
              mountPath: /etc/ssl/certs/java
          readinessProbe:
            tcpSocket:
              port: {{ include "janusgraph.port" . }}
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 10
          livenessProbe:
            tcpSocket:
              port: {{ include "janusgraph.port" . }}
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 10
          resources:
          {{- if .Values.resources }}
{{ toYaml .Values.resources | indent 12 }}
          {{- else }}
            requests:
              cpu: 100m
              memory: 500Mi
            limits:
              cpu: 500m
              memory: 1024Mi
          {{- end }}
          {{- include "po.securitycontext.container" . | indent 10 }}
      volumes:
        - name: cert-volume
          secret:
            secretName: {{ template "janusgraphpo.cert.name" . }}
        - name: java-certs
          emptyDir: {}
        - name: janusgraph-config
          configMap:
            name: {{ .Release.Name }}-janusgraph-config
        - name: po-pvc
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-popvc
        - name: local-db
        {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (include "janusgraph.fullname" .) }}
        {{- else }}
          emptyDir: {}
        {{- end -}}
            