{{- include "sch.config.init" (list . "sch.chart.config.values") }}
{{- $scriptsName := include "sch.names.fullCompName" (list . "ext-tls-scripts") }}
{{- $labels := include "sch.metadata.labels.standard" (list . "") }}
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ $scriptsName }}
  labels:
{{ $labels | indent 4 }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation
data:
  generate-external-tls.sh: |
    #!/bin/sh

    set -x

    echo "============================================"
    echo "Creating key and cert files for external TLS";
    echo "============================================"

    openssl genrsa 4096 > /tmp/tls.key
    openssl req -new -x509 -nodes -sha256 -days 3650 -key /tmp/tls.key -config req.conf > /tmp/tls.crt

    if [[ $? == 1 ]]; then
      echo "External certificate generation failed"
      exit 1
    fi

    echo "Deleting existing secret"
    /usr/local/bin/kubectl delete secret {{ .Values.tls.secret }}

    # Fail if we can't create objects
    set -e

    echo "Creating secret"
    /usr/local/bin/kubectl create secret tls {{ .Values.tls.secret }} --key /tmp/tls.key --cert /tmp/tls.crt
    echo "Setting labels"
    /usr/local/bin/kubectl label secret {{ .Values.tls.secret }} release={{ .Release.Name }}
  req.conf: |
    [req]
    distinguished_name = distinguished_name
    req_extensions = ext
    x509_extensions = ext
    prompt = no
    [distinguished_name]
    C = UK
    ST = Hampshire
    L = Hursley
    O = IBM
    OU = Integration
    CN = ICP4I
    [ext]
    keyUsage = keyEncipherment, dataEncipherment, keyCertSign, cRLSign
    basicConstraints=CA:TRUE
    extendedKeyUsage = serverAuth
    subjectAltName = @alt_names
    [alt_names]
    DNS.1 = {{ .Values.tls.hostname }}