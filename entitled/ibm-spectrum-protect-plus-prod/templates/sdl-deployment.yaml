apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "baas.fullname" . }}-scheduler
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ include "baas.name" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/version: {{ include "baas.appversion" . }}
    app.kubernetes.io/component: scheduler
    app.kubernetes.io/managed-by: {{ .Values.managedBy }}
    helm.sh/chart: {{ .Chart.Name }}
spec:
  replicas: {{ .Values.sdl.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "baas.name" . }}
      app.kubernetes.io/component: scheduler
      app.kubernetes.io/managed-by: {{ .Values.managedBy }}
  template:
    metadata:
      annotations:
        productID: {{ include "baas.productID" . }}
        productName: {{ include "baas.productName" . }}
        productVersion: {{ include "baas.productVersion" . }}
      labels:
        app.kubernetes.io/name: {{ include "baas.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/version: {{ include "baas.appversion" . }}
        app.kubernetes.io/component: scheduler
        app.kubernetes.io/managed-by: {{ .Values.managedBy }}
        helm.sh/chart: {{ .Chart.Name }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - {{ .Values.arch }}
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        runAsNonRoot: true
        fsGroup: 1000
      hostNetwork: false
      hostPID: false
      hostIPC: false
      containers:
      - name: {{ include "baas.fullname" . }}-scheduler
        {{- if .Values.imageRegistryNamespace }}
        image: {{ .Values.imageRegistry }}/{{ .Values.imageRegistryNamespace }}/{{ .Values.sdl.image.name }}:{{ .Values.sdl.image.tag }}
        {{- else }}        
        image: {{ .Values.imageRegistry }}/{{ .Release.Namespace }}/{{ .Values.sdl.image.name }}:{{ .Values.sdl.image.tag }}
        {{- end }}
        imagePullPolicy: {{ .Values.sdl.image.pullPolicy }} 
        resources:
          limits:
            cpu: "750m"
            memory: "500Mi" 
          requests:
            cpu: "100m"
            memory: "150Mi"
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        ports:
        - name: scheduler
          containerPort: {{ .Values.sdl.service.targetPort }}
          protocol: TCP
        {{- if .Values.sdl.readinessProbe.enabled}}
        readinessProbe:
          exec:
            command:
              - /bin/bash
              - -c
              - /usr/bin/testcsa
          initialDelaySeconds: {{ .Values.sdl.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.sdl.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.sdl.readinessProbe.timeoutSeconds }}
        {{- end }}
        {{- if .Values.sdl.livenessProbe.enabled}}
        livenessProbe:
          exec:
            command:
              - /bin/bash
              - -c
              - /usr/bin/testcsa
          initialDelaySeconds: {{ .Values.sdl.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.sdl.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.sdl.livenessProbe.timeoutSeconds }}
        {{- end }}
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
              apiVersion: v1
        - name: SDL_SERVICE_NAME
          value: {{ include "baas.fullname" . }}-scheduler
        - name: SDL_SERVICE_PORT
          value: "{{ .Values.sdl.service.port }}"
        volumeMounts:
        - name: credentials
          mountPath: /etc/credentials
          readOnly: true
        - name: config-volume
          mountPath: /etc/baas-config
          readOnly: true
        - name: tls-key-crt
          mountPath: /etc/tls-key-crt
          readOnly: true
      volumes:
      - name: credentials
        secret:
          secretName: {{ include "baas.fullname" . }}-secret
          defaultMode: 292
      - name: config-volume
        configMap:
          name: {{ include "baas.fullname" . }}-configmap
          defaultMode: 292
      - name: tls-key-crt
        secret:
          secretName: {{ include "baas.fullname" . }}-key-crt
          defaultMode: 256
      serviceAccountName: {{ include "baas.fullname" . }}-scheduler
