apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "cache-db.fullname" . }}
  annotations:
    build: .{{ .Values.global.buildVersion | quote }}
  labels:
    app: {{ template "cache-db.name" . }}
    chart: {{ template "cache-db.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  revisionHistoryLimit: 2
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0
  template:
    metadata:
      annotations:
        build: {{ .Values.global.buildVersion | quote }}
      labels:
        app: {{ template "cache-db.name" . }}
        release: {{ .Release.Name }}
    spec:
      # Prefer to run on a node that already has a warmup pod running on it
      # as it will start faster when the image is already pulled.
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: beta.kubernetes.io/arch
                    operator: In
                    values:
                      - "amd64"
                      - "ppc64le"
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                - key: release
                  operator: In
                  values:
                  - {{ .Release.Name }}
                - key: app
                  operator: In
                  values:
                  - {{ template "cache-db-warmup.name" . }}
      serviceAccount: {{ $.Values.global.viewer.sa }}
      serviceAccountName: {{ $.Values.global.viewer.sa }}
      containers:
      - name: postgres
        image: {{ template "full-image-url" . }}
        imagePullPolicy: IfNotPresent
        securityContext:
          runAsUser: {{ $.Values.global.runAsUser }}
          fsGroup: 2000
          capabilities:
            drop:
            - ALL
          allowPrivilegeEscalation: false
          privileged: false
          runAsNonRoot: true
        env:
        - name: POSTGRESQL_USER
          value: {{ .Values.postgres.user | quote }}
          # Required for pg_isready in the health probes.
        #- name: PGUSER
          #value: {{ .Values.postgres.user | quote }}
        - name: POSTGRESQL_DATABASE
          value: {{ .Values.postgres.database | quote }}
        - name: POSTGRESQL_MAX_CONNECTIONS
          value: {{ .Values.resources.maxConnections | quote  }}
        - name: POSTGRESQL_SHARED_BUFFERS
          value: {{ .Values.resources.sharedBuffers | quote  }}
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "cache-db.password-secret" . }}
              key: POSTGRES_PASSWORD
        - name: POD_IP
          valueFrom: { fieldRef: { fieldPath: status.podIP } }
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready --host $POD_IP
          initialDelaySeconds: 15
          timeoutSeconds: 13
          periodSeconds: 15
          failureThreshold: 12
        resources:
          limits:
            cpu: {{ .Values.resources.cpuLimits }}
            memory: {{ .Values.resources.memory }}
          requests:
            cpu: {{ .Values.resources.cpuRequests }}
            memory: {{ .Values.resources.memory }}
        volumeMounts:
        - name: data
          mountPath: /var/lib/pgsql
          subPath: "pgdata"
      {{ if .Values.global.docker.useImagePullSecret }}
      imagePullSecrets:
      - name: {{ .Values.global.imagePullSecretName }}
      {{ end }}
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: {{ template "cache-db.fullname" . }}
