# Â© Copyright IBM Corporation 2019
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

###############################################################################
# Runs a container that generates certificates and keys for communication
# between internal components.
###############################################################################
{{- include "sch.config.init" (list . "ibm-ac.sch.chart.config.values") }}
{{- $jobName := include "sch.names.fullCompName" (list . "couch-finish-setup") }}
{{- $fullName := include "sch.names.fullName" (list .) }}
{{- $labels := include "sch.metadata.labels.standard" (list . "" (dict "serviceSelector" "couch-finish-setup")) }}
{{- $saName := include "sch.names.fullCompName" (list . "designer-serviceaccount") }}
{{- $secretName := include "sch.names.fullCompName" (list . "is") }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $jobName }}
  namespace: {{ .Release.Namespace }}
  labels:
{{ $labels | indent 4 }}
spec:
  activeDeadlineSeconds: 600
  template:
    metadata:
      labels:
{{ $labels | indent 8 }}
        type: fireflyMicroservice
    spec:
      serviceAccountName: {{ $saName }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - {{ .Values.arch }}
      restartPolicy: Never
      initContainers:
      - name: {{ include "sch.names.fullCompName" (list . "couchdb-init") }}
        image: "{{ regexReplaceAll "(^cp\\.(stg\\.)?icr\\.io/)" .Values.image.configurator "${1}cp/icp4i/ace/" }}-{{ .Values.arch }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        command: ["sh"]
        args: ["-c", 'until [ $(/usr/local/bin/kubectl get statefulset {{ .Release.Name }}-couchdb -o=jsonpath="{.status.readyReplicas}") = {{ .Values.couchdb.clusterSize }} ]; do sleep 1; done && echo "CouchDB Started"']
        resources:
          requests:
            cpu: "250m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "1028Mi"
      containers:
        - name: "couch-finish-setup"
          image: "{{ regexReplaceAll "(^cp\\.(stg\\.)?icr\\.io/)" .Values.image.configurator "${1}cp/icp4i/ace/" }}-{{ .Values.arch }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
            capabilities:
              drop:
              - ALL
          env:
          - name: "RELEASE_NAME"
            value: {{ .Release.Name | quote }}
          - name: "TARGET_NAME"
            value: {{ $fullName }}
          - name: "COUCHDB_USER"
            valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-couchdb
                  key: adminUsername
          - name: "COUCHDB_PASSWORD"
            valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-couchdb
                  key: adminPassword
          command:
            - sh
            - -c
            - "echo \"Finalising couchdb setup\" && set -x && curl --cert /opt/couchdb/ssl/certs/server.crt --key /opt/couchdb/ssl/certs/server.key --cacert /opt/couchdb/ssl/certs/cacert.crt -vs \"https://$COUCHDB_USER:$COUCHDB_PASSWORD@${RELEASE_NAME}-svc-couchdb/_cluster_setup\" -X POST -H \"Content-Type: application/json\"  -d '{\"action\": \"finish_cluster\"}' && echo \"Duplicating couchdb service with fullname prefix\" && kubectl get service ${RELEASE_NAME}-svc-couchdb  -o yaml  | sed -e \"s|${RELEASE_NAME}-svc-couchdb|{{ include "sch.names.fullCompName" (list . "svc-couchdb") }}|g\" | sed -e '/clusterIP: /d' | sed -e '/uid: /d' > /tmp/service.yaml && cat /tmp/service.yaml &&  kubectl apply -f /tmp/service.yaml "
          resources:
            requests:
              cpu: "250m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "1028Mi"
          volumeMounts:
          - name: certificates-keys
            mountPath: /opt/couchdb/ssl/certs/
      volumes:
        - name: certificates-keys
          secret:
            secretName: {{ $secretName }}
            items:
            - key: tls.key
              path: server.key
              mode: 384
            - key: tls.crt
              path: server.crt
              mode: 384
            - key: ca.crt
              path: cacert.crt
              mode: 384