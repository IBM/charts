apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: redis
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    run: redis-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      run: redis-deployment-pod
  template:
    metadata:
      labels:
        app: redis
        chart: "{{ .Chart.Name }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
        component: redis
        run: redis-deployment-pod
      annotations:
        productName: IBM Data Science Experience Local
        productID: IBMDataScienceExperienceLocal_120_perpetual_00000
        productVersion: 1.2.0.3
    spec:
      terminationGracePeriodSeconds: 0
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                  - amd64
      {{- if .Values.global.baseInstaller }}
      nodeSelector:
        is_storage: "true"
      {{- end }}
      containers:
      - name: redis-container
        image: {{ .Values.redisRepo.image.repository }}:{{ .Values.redisRepo.image.tag }}
        imagePullPolicy: {{ default "IfNotPresent" .Values.image.pullPolicy | quote }}
        command: ["docker-entrypoint.sh"]
        args: ["/etc/redis/redis.conf"]
        {{- if not .Values.global.baseInstaller }}
        resources:
{{ toYaml .Values.redisRepo.resources | indent 12 }}
        {{- end }}
        ports:
        - containerPort: 6379
          protocol: TCP
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "/usr/local/bin/redis-cli -h $(hostname) ping"
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "/usr/local/bin/redis-cli -h $(hostname) ping"
          initialDelaySeconds: 30
          timeoutSeconds: 5
        volumeMounts:
          - mountPath: /redis-storage
            name: redis-mount
      volumes:
        - name: redis-mount
          persistentVolumeClaim:
            {{- if .Values.redisPVC.persistence.existingClaimName }}
              claimName: {{ .Values.redisPVC.persistence.existingClaimName }}
            {{- else }}
              claimName: {{ template "fullname" . }}-{{ .Values.redisPVC.name }}
            {{- end }}
