# (C) Copyright 2019-2020 Syncsort Incorporated. All rights reserved.

{{- include "sch.config.init" (list . "b2bi.sch.chart.config.values") }}
{{- include "validateInput" . -}}
{{- if .Values.dataSetup.enabled }}

{{- $resourcesPVCName := .Values.appResourcesPVC.name }}
apiVersion: batch/v1
kind: Job
metadata:
    name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.dbSetup.name) | quote }}
    annotations:
        # This is what defines this resource as a hook. Without this line, the
        # job is considered part of the release.
        "helm.sh/hook": "pre-install, pre-upgrade"
        "helm.sh/hook-weight": "2"
        "helm.sh/hook-delete-policy": "hook-succeeded,before-hook-creation"
    labels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.dbSetup.name) | indent 8 }}
spec:
    backoffLimit: 1
    template:
        metadata:
            name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.dbSetup.name) | quote }}
            labels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.dbSetup.name) | indent 14 }}
            annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering .sch.chart.nonMetering.nonChargeableProductMetric nil "db-setup") | indent 14 }}
        spec:
            serviceAccountName: {{ .Values.serviceAccount.name  | default "default" }}  
            hostNetwork: false
            hostPID: false
            hostIPC: false
            securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.podSecurityContext) | indent 14 }}
            volumes:
                {{- if .Values.appResourcesPVC.enabled }} 
                - name: "{{ .Values.appResourcesPVC.name }}"
                {{- if .Values.persistence.enabled }}
                  persistentVolumeClaim:
                    claimName: {{ include "sch.names.fullCompName" (list . $resourcesPVCName) | quote }}
                {{- else }}
                  emptyDir: {}
                {{- end }}
                {{- end }}
                - name: configmap-resources-volume
                  configMap:
                    name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.configmap.name) | quote }}
                {{- if and (.Values.setupCfg.usessl) (.Values.setupCfg.dbTruststoreSecret) }}
                - name: secret-{{ .Values.setupCfg.dbTruststoreSecret }}
                  secret:
                    secretName: {{ .Values.setupCfg.dbTruststoreSecret }}
                {{- end }}
                {{- if and (.Values.setupCfg.usessl) (.Values.setupCfg.dbKeystoreSecret) }}
                - name: secret-{{ .Values.setupCfg.dbKeystoreSecret }}
                  secret:
                    secretName: {{ .Values.setupCfg.dbKeystoreSecret }}
                {{- end }}
                {{- if and (.Values.setupCfg.jmsEnableSsl) (.Values.setupCfg.jmsTruststoreSecret) }}
                - name: secret-{{ .Values.setupCfg.jmsTruststoreSecret }}
                  secret:
                    secretName: {{ .Values.setupCfg.jmsTruststoreSecret }}
                {{- end }}
                {{- if and (.Values.setupCfg.jmsEnableSsl) (.Values.setupCfg.jmsKeystoreSecret) }}
                - name: secret-{{ .Values.setupCfg.jmsKeystoreSecret }}
                  secret:
                    secretName: {{ .Values.setupCfg.jmsKeystoreSecret }}
                {{- end }}
            {{- if .Values.global.image.pullSecret }}
            imagePullSecrets:
              - name: {{ .Values.global.image.pullSecret }}
            {{- end }}
            containers:
                - name: "db-setup"
                  resources:
                {{- toYaml .Values.asi.resources | nindent 20 }}
                  image: "{{ .Values.global.image.repository }}:{{ .Values.global.image.tag }}"
                  imagePullPolicy: {{ .Values.global.image.pullPolicy }}
                  env:
                    - name: "TZ"
                      value: "{{ .Values.env.tz }}"
                    - name: "LICENSE"
                      value: "{{ .Values.env.license }}"
                    - name: "UPGRADE_COMPATIBILITY_VERIFIED"
                      value: "{{ .Values.env.upgradeCompatibilityVerified }}"
                    - name: "SANDBOX_CC_INSTALL"
                      value: "true"
                    - name: "SANDBOX_CC_SERVICE_TYPE"
                      value: "dbjob"
                  envFrom:
{{if .Values.setupCfg.systemPassphraseSecret}}
                  - secretRef:
                        name: "{{ .Values.setupCfg.systemPassphraseSecret }}"
{{ end }}
{{if .Values.setupCfg.dbSecret}}
                  - secretRef:
                        name: "{{ .Values.setupCfg.dbSecret }}"
{{ end }}
{{if .Values.setupCfg.jmsSecret}}
                  - secretRef:
                        name: "{{ .Values.setupCfg.jmsSecret }}"
{{ end }}
{{if .Values.setupCfg.libertySecret}}
                  - secretRef:
                        name: "{{ .Values.setupCfg.libertySecret }}"
{{ end }}
                  securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.containerSecurityContext) | indent 20 }}
                  volumeMounts:
                    {{- if .Values.appResourcesPVC.enabled }} 
                    - name: {{ .Values.appResourcesPVC.name }}
                      mountPath: /ibm/resources
                    {{- end }}
                    - name: configmap-resources-volume
                      mountPath: /ibm/resources/setup.cfg
                      subPath: setup.cfg
                    {{- if and (.Values.setupCfg.usessl) (.Values.setupCfg.dbTruststoreSecret) }}
                    - name: secret-{{ .Values.setupCfg.dbTruststoreSecret }}
                      mountPath: /ibm/resources/{{ .Values.setupCfg.dbTruststoreSecret }}
                    {{- end }}
                    {{- if and (.Values.setupCfg.usessl) (.Values.setupCfg.dbKeystoreSecret) }}
                    - name: secret-{{ .Values.setupCfg.dbKeystoreSecret }}
                      mountPath: /ibm/resources/{{ .Values.setupCfg.dbKeystoreSecret }}
                    {{- end }}
                    {{- if and (.Values.setupCfg.jmsEnableSsl) (.Values.setupCfg.jmsTruststoreSecret) }}
                    - name: secret-{{ .Values.setupCfg.jmsTruststoreSecret }}
                      mountPath: /ibm/resources/{{ .Values.setupCfg.jmsTruststoreSecret }}
                    {{- end }}
                    {{- if and (.Values.setupCfg.jmsEnableSsl) (.Values.setupCfg.jmsKeystoreSecret) }}
                    - name: secret-{{ .Values.setupCfg.jmsKeystoreSecret }}
                      mountPath: /ibm/resources/{{ .Values.setupCfg.jmsKeystoreSecret }}
                    {{- end }}
                  args: ["b2bi_setup", "deploy_db"]
            restartPolicy: Never
            affinity:
{{- include "b2bi.architectureAffinity" . | indent 14 }}
{{- end }}
