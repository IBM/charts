# (C) Copyright 2019-2020 Syncsort Incorporated. All rights reserved.

# Extra pvcs configured in values yaml
{{ if and (.Values.persistence.enabled) }}
{{- include "sch.config.init" (list . "b2bi.sch.chart.config.values") -}}

{{ range $i, $pvc := .Values.asi.extraPVCs -}}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "sch.names.fullCompName" (list $ $pvc.name) | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list $ $pvc.name) | indent 4 }}
spec:
  {{- if $.Values.persistence.useDynamicProvisioning }}
  # if present, use the storageClassName from the values.yaml, else use the
  # default storageClass setup by kube Administrator
  # setting storageClassName to nil means use the default storage class
  storageClassName: {{ default nil $pvc.storageClassName | quote }}
  {{- else }}
  # bind to an existing pv.
  # setting storageClassName to "" disables dynamic provisioning 
  storageClassName: {{ default "" $pvc.storageClassName | quote }}
  {{- if $pvc.selector.label }}
  # use selectors in the binding process
  selector:
    matchExpressions:
      - {key: {{ $pvc.selector.label }}, operator: In, values: [{{ $pvc.selector.value }}]}
  {{- end }}      
  {{- end }}
  accessModes: [ {{ $pvc.accessMode | quote }} ]
  resources:
    requests:
      storage: {{ $pvc.size | quote }}
---
{{- end }} 

{{ range $i, $pvc := .Values.ac.extraPVCs -}}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "sch.names.fullCompName" (list $ $pvc.name) | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list $ $pvc.name) | indent 4 }}
spec:
  {{- if $.Values.persistence.useDynamicProvisioning }}
  # if present, use the storageClassName from the values.yaml, else use the
  # default storageClass setup by kube Administrator
  # setting storageClassName to nil means use the default storage class
  storageClassName: {{ default nil $pvc.storageClassName | quote }}
  {{- else }}
  # bind to an existing pv.
  # setting storageClassName to "" disables dynamic provisioning 
  storageClassName: {{ default "" $pvc.storageClassName | quote }}
  {{- if $pvc.selector.label }}
  # use selectors in the binding process
  selector:
    matchExpressions:
      - {key: {{ $pvc.selector.label }}, operator: In, values: [{{ $pvc.selector.value }}]}
  {{- end }}      
  {{- end }}
  accessModes: [ {{ $pvc.accessMode | quote }} ]
  resources:
    requests:
      storage: {{ $pvc.size | quote }}
---
{{- end }}

{{ range $i, $pvc := .Values.api.extraPVCs -}}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "sch.names.fullCompName" (list $ $pvc.name) | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list $ $pvc.name) | indent 4 }}
spec:
  {{- if $.Values.persistence.useDynamicProvisioning }}
  # if present, use the storageClassName from the values.yaml, else use the
  # default storageClass setup by kube Administrator
  # setting storageClassName to nil means use the default storage class
  storageClassName: {{ default nil $pvc.storageClassName | quote }}
  {{- else }}
  # bind to an existing pv.
  # setting storageClassName to "" disables dynamic provisioning 
  storageClassName: {{ default "" $pvc.storageClassName | quote }}
  {{- if $pvc.selector.label }}
  # use selectors in the binding process
  selector:
    matchExpressions:
      - {key: {{ $pvc.selector.label }}, operator: In, values: [{{ $pvc.selector.value }}]}
  {{- end }}      
  {{- end }}
  accessModes: [ {{ $pvc.accessMode | quote }} ]
  resources:
    requests:
      storage: {{ $pvc.size | quote }}
---
{{- end }}
{{- end }} 