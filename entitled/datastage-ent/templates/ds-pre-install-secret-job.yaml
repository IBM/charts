{{ include "sch.config.init" (list . "sch.chart.config.values" ) }}
{{ $name := "ds-preinstall-secret-job" }}
{{ $compName := "ds-preinstall" -}}
{{ $labels := include "sch.metadata.labels.standard" (list . $compName) -}}
{{ $serviceAccountName := "cpd-editor-sa" -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $name | quote }}
  labels:
{{ $labels | indent 4 }}
{{ include "ds.additional.labels" (list .) | indent 4 }}
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-delete-policy":  hook-succeeded, before-hook-creation
    "helm.sh/hook-weight": "0"
spec:
  activeDeadlineSeconds: 300
  template:
    metadata:
      name: {{ $name | quote }}
      labels:
{{ $labels | indent 8 }}
{{ include "ds.additional.labels" (list .) | indent 8 }}
{{- include "ds.pod.labels" . | indent 8 }}
      annotations:
      {{- include "ds-product-metering" . | indent 8 }}
    spec:
      serviceAccountName: {{ $serviceAccountName | quote }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.release.image.ds.proxy.runAsUser | int64 }}
      affinity:
      {{- include "nodeaffinity" . | indent 6 }}
      {{- include "image-secret" . | indent 6 }}
      restartPolicy: Never
      containers:
        - name: "ds-preinstall-secrets"
          image: {{ if .Values.global.dockerRegistryPrefix }}{{ trimSuffix "/" .Values.global.dockerRegistryPrefix }}/{{ end }}{{ .Values.preInstall.image.repository }}:{{ .Values.preInstall.image.tag }}
          resources:
{{ toYaml .Values.preInstall.resources | indent 12 }}
          imagePullPolicy: {{ default "IfNotPresent" .Values.release.image.pullPolicy | quote }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: {{ .Values.release.image.ds.proxy.runAsUser | int64 }}
            capabilities:
              drop:
              - ALL
          command: 
            - "/bin/sh"
            - "-ec"
            - |
              set +e
              tlsSecretName="{{ .Values.proxy.tlsSecretName }}"
              kubectl -n {{ .Release.Namespace }} get secret $tlsSecretName
              if [ $? -ne 0 ]; then
                 #generate certs for proxy service
                 set -e
                 echo "Generating tls secret"
                 cn="ds-proxy-svc"
                 openssl req -new -newkey rsa:4096 -days 3650 -nodes -x509 -subj "/C=US/ST=California/L=Silicon Valley Lab/O=IBM/OU=Data Platform/CN=${cn}" -keyout /tmp/nginx.key -out /tmp/nginx.crt
                 nginxKey=`cat /tmp/nginx.key | base64 | tr -d '\n'`
                 nginxCrt=`cat /tmp/nginx.crt | base64 | tr -d '\n'`
                 cat <<EOF | kubectl -n {{ .Release.Namespace }} create -f - 
              apiVersion: v1
              kind: Secret
              metadata:
                name: "{{ .Values.proxy.tlsSecretName }}"
                labels:
                  app: {{ template "fullname" . }}
                  chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
                  release: "{{ .Release.Name }}"
                  heritage: "{{ .Release.Service }}"
              type: Opaque
              data: 
                nginx.key: ${nginxKey}
                nginx.crt: ${nginxCrt}
              EOF
              fi