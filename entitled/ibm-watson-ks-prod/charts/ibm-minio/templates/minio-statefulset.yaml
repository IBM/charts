---
{{/*
###############################################################################
# Licensed Materials - Property of IBM.
# Copyright IBM Corporation 2018. All Rights Reserved.
# U.S. Government Users Restricted Rights - Use, duplication or disclosure
# restricted by GSA ADP Schedule Contract with IBM Corp.
#
# Contributors:
#  IBM Corporation - initial API and implementation
###############################################################################
*/}}
{{- include "sch.config.init" (list . "ibmMinio.sch.config.values") -}}
{{ $nodeCount := include "minio.configReplicas" . | int }}
{{- $context := . }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "sch.names.statefulSetName" (list .) | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.minioServer) | indent 4 }}
spec:
  updateStrategy:
    type: {{ .Values.StatefulSetUpdate.updateStrategy }}
  podManagementPolicy: "Parallel"
  serviceName: {{ include "sch.names.fullCompName" (list . .sch.chart.components.headless) | quote }}
  replicas: {{ template "minio.configReplicas" . }}
  selector:
    matchLabels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.minioServer) | indent 6 }}
  template:
    metadata:
      name: {{ include "sch.names.statefulSetName" (list .) | quote }}
      labels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.minioServer) | indent 8 }}
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 8 }}
      {{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
      {{- end }}
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      {{- if .Values.priorityClassName }}
      priorityClassName: "{{ .Values.priorityClassName }}"
      {{- end }}
      serviceAccountName: {{ include "sch.names.statefulSetName" (list .) | quote }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
      affinity:
{{- include "sch.affinity.nodeAffinity" (list . .sch.chart.nodeAffinity) | indent 8 }}
{{- with .Values.affinity }}
{{ toYaml . | indent 8 }}
    {{- end }}
      securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.minioPodSecurityContext) | indent 8 }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: {{ if .Values.global.image.repository }}{{ trimSuffix "/" .Values.global.image.repository }}{{ end }}/{{ .Values.minio.image.name }}:{{ .Values.minio.image.tag }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          securityContext: 
          {{ include "sch.security.securityContext" (list . .sch.chart.minioContainerSecurityContext) | indent 12 }}
{{- if include "ibm-minio.boolConvertor" (list .Values.tls.enabled . ) }}
          command: ["/bin/sh"]
          args: [ "-ce", '/workdir/bin/docker-entrypoint.sh minio -C  {{ .Values.configPath }} server {{- range $i := until $nodeCount }} https://{{ include "sch.names.statefulSetName" (list $context $i) }}.{{ include "sch.names.fullCompName" (list $context $context.sch.chart.components.headless) }}.{{ $context.Release.Namespace }}.svc.{{ $context.Values.clusterDomain }}{{ $context.Values.mountPath }} {{- end }} ']
       {{ else }}
          command: ["/bin/sh"]
          args: [ "-ce", '/workdir/bin/docker-entrypoint.sh minio -C  {{ .Values.configPath }} server {{- range $i := until $nodeCount }} http://{{ include "sch.names.statefulSetName" (list $context $i) }}.{{ include "sch.names.fullCompName" (list $context $context.sch.chart.components.headless) }}.{{ $context.Release.Namespace }}.svc.{{ $context.Values.clusterDomain }}{{ $context.Values.mountPath }} {{- end }} ']
       {{- end }}
          volumeMounts:
            {{- if .Values.persistence.enabled }}
            - name: export
              mountPath: {{ .Values.mountPath }}
              {{- if and .Values.persistence.enabled .Values.persistence.subPath }}
              subPath: "{{ .Values.persistence.subPath }}"
              {{- end }}
            {{ end }}
            - name: minio-config-dir
              mountPath: {{ .Values.configPath }}
{{- if include "ibm-minio.boolConvertor" (list .Values.tls.enabled . ) }}
            - name: cert-secret-volume
              mountPath: {{ .Values.configPath }}certs
            {{ end }}
          ports:
            - name: service
              containerPort: 9000
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ if (tpl .Values.existingSecret . ) }}{{ tpl .Values.existingSecret . }}{{ else }}{{ include "sch.names.fullCompName" (list . .sch.chart.components.authSecret) | quote }}
{{ end }}
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ if (tpl .Values.existingSecret . ) }}{{ tpl .Values.existingSecret . }}{{ else }}{{ include "sch.names.fullCompName" (list . .sch.chart.components.authSecret) | quote }}
{{ end }}
                  key: secretkey
            {{- if .Values.sse.enabled }}
            - name: MINIO_SSE_MASTER_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ tpl .Values.sse.masterKeySecret . }}
                  key: {{ .Values.sse.masterKeyName }}
            {{- end }}
            {{- range $key, $val := .Values.environment }}
            - name: {{ $key }}
              value: {{ $val | quote }}
            {{- end}}
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: service
{{- if include "ibm-minio.boolConvertor" (list .Values.tls.enabled . ) }}
              scheme: HTTPS
              {{ else }}
              scheme: HTTP
              {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          readinessProbe:
            httpGet:
{{- if include "ibm-minio.boolConvertor" (list .Values.tls.enabled . ) }}
              scheme: HTTPS
              {{- end }}
              path: /minio/health/ready
              port: service
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}

          resources:
{{ toYaml .Values.resources | indent 12 }}
      volumes:
        - name: minio-config-dir
          emptyDir: {}
{{- if include "ibm-minio.boolConvertor" (list .Values.tls.enabled . ) }}
        - name: cert-secret-volume
          secret:
          {{-  if (tpl .Values.tls.certSecret .) }}
            secretName: {{ tpl .Values.tls.certSecret . }}
          {{-  else }}
            secretName: {{ include "sch.names.fullCompName" (list . .sch.chart.components.tlsSecret) | quote }}
          {{-  end }}
            items:
            - key: tls.crt
              path: public.crt
            - key: tls.key
              path: private.key
            - key: tls.cacrt
              path: CAs/public.crt
        {{ end }}

{{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: export
      spec:
        accessModes: [ {{ .Values.persistence.accessMode | quote }} ]
        storageClassName: {{ .Values.persistence.storageClass | quote }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
{{ end }}
