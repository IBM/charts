apiVersion: v1
kind: Service
metadata:
  name: "{{ template "fullname" . }}-db2u-internal"
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}"
    component: "{{ .Values.global.dbType }}"
    type: "engine"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  ports:
  - port: 50000
    name: main
    targetPort: 50000
    protocol: TCP
  - port: 9443
    name: wvha-rest
    targetPort: 9443
    protocol: TCP
  clusterIP: None
  selector:
    app: {{ template "fullname" . }}
    component: "{{ .Values.global.dbType }}"
    type: "engine"
---

{{- if semverCompare ">=1.11.1" .Capabilities.KubeVersion.GitVersion }}
apiVersion: apps/v1
{{- else if .Capabilities.APIVersions.Has "apps/v1beta2" }}
apiVersion: apps/v1beta2
{{- else }}
apiVersion: apps/v1beta1
{{- end }}
kind: StatefulSet
metadata:
  name: {{ template "fullname" . }}-db2u
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    component: "{{ .Values.global.dbType }}"
    type: "engine"
spec:
  serviceName: "{{ template "fullname" . }}-db2u-internal"
  podManagementPolicy: "Parallel"
  replicas: {{ .Values.images.db2u.replicas }}
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
      chart: "{{ .Chart.Name }}"
      release: "{{ .Release.Name }}"
      heritage: "{{ .Release.Service }}"
      component: "{{ .Values.global.dbType }}"
      type: "engine"
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
        component: "{{ .Values.global.dbType }}"
        type: "engine"
        api-progress: "{{ .Values.servicename }}db2oltp-api"
      annotations:
        {{- include "db2oltp.annotations" . | indent 8 }}
    spec:
      {{- include "nodeaffinity" . | indent 6 }}
      {{- if eq (int .Values.images.db2u.replicas) 1 }}
      {{- include "podAffinityDedicated" . | indent 8 }}
      {{- else }}
        {{- if and ( eq .Values.runtime "ICP4Data" ) ( .Values.dedicated ) }}
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: {{ template "fullname" . }}
              topologyKey: "kubernetes.io/hostname"
        {{- end }}
      {{- end }}
      {{- include "podAntiAffinityDb2" . | indent 8 }}
      {{- include "tolerations" . | indent 6 }}
      {{- include "root.securityContext" . | indent 6}}
      serviceAccount: {{ default "default" .Values.global.serviceAccount }}
      hostIPC: true
      terminationGracePeriodSeconds: 30
      initContainers:
      {{- if .Values.setKernelParams }}
      # echo engine pod name and set kernel params
      - name: init-db2
        {{- if .Values.images.tools.image.tag }}
        image: "{{ .Values.images.tools.image.repository }}:{{ .Values.images.tools.image.tag }}{{ template "platform" . }}"
        {{- else }}
        image: "{{ .Values.images.tools.image.repository }}:{{ .Values.images.universalTag }}{{ template "platform" . }}"
        {{- end }}
        imagePullPolicy: {{ .Values.images.pullPolicy }}
        {{- include "init-db2.containers.securityContext" . | indent 8}}
        resources:
          requests:
            cpu: "100m"
            memory: "50Mi"
          limits:
            cpu: "500m"
            memory: "256Mi"
        command: ['/bin/sh']
        args: ["-cx", '/tools/pre-install/set_kernel_params.sh']
        volumeMounts:
        - mountPath: /host/proc
          name: proc
          readOnly: false
        - mountPath: /host/proc/sys
          name: sys
          readOnly: false
      {{- end }}
      - name: init-db2-node-cfg
        {{- include "root.containers.securityContext" . | indent 8}}
        {{- if .Values.images.tools.image.tag }}
        image: "{{ .Values.images.tools.image.repository }}:{{ .Values.images.tools.image.tag }}{{ template "platform" . }}"
        {{- else }}
        image: "{{ .Values.images.tools.image.repository }}:{{ .Values.images.universalTag }}{{ template "platform" . }}"
        {{- end }}
        imagePullPolicy: {{ .Values.images.pullPolicy }}
        resources:
          requests:
            cpu: "100m"
            memory: "50Mi"
          limits:
            cpu: "200m"
            memory: "200Mi"
        command:
          - "/bin/sh"
          - "-ec"
          - |
            /tools/pre-install/update_nodeslist.sh
            lineNum="$(grep -n $POD_NAME /mnt/blumeta0/nodeslist | head -n 1 | cut -d: -f1)"
            if [ $lineNum -eq 1 ]; then
                kubectl label pod $POD_NAME name=dashmpp-head-0 -n $POD_NAMESPACE --overwrite
            else
                lineNum=$[$lineNum-1]
                kubectl label pod $POD_NAME name=dashmpp-data${lineNum}-0 -n $POD_NAMESPACE --overwrite
            fi
            kubectl wait --for=condition=complete job/{{ template "fullname" . }}-db2u-nodes-cfg-job -n {{ .Release.Namespace }}
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace 
        volumeMounts:
        - mountPath: /mnt/blumeta0
          {{- if .Values.storage.storageLocation.metaStorage.enabled }}
          name: {{ .Values.storage.storageLocation.metaStorage.volumeName }}
          {{- else }}
          name: {{ template "fullname" . }}-db2u-sqllib-shared
          {{- end }}
      containers:
      - name: {{ template "fullname" . }}-db2u
        image: '{{ .Values.images.db2u.image.repository }}:{{ .Values.images.db2u.image.tag }}{{ template "platform" . }}'
        imagePullPolicy: {{ .Values.images.pullPolicy }}
        {{- include "db2u.containers.securityContext" . | indent 8}}
        command: ["/sbin/init"]
        resources:
          limits:
            memory: {{ .Values.limit.memory }}
            cpu: {{ .Values.limit.cpu }}
          requests:
            memory: {{ .Values.limit.memory }}
            cpu: {{ .Values.limit.cpu }}
        tty: true
        command: ["/sbin/init"]
        resources:
          limits:
            memory: {{ .Values.limit.memory }}
            cpu: {{ .Values.limit.cpu }}
          requests:
            memory: {{ .Values.limit.memory }}
            cpu: {{ .Values.limit.cpu }}
        env:
        - name: etcdoperator
          value: "true"
        - name: POD
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['name']
        - name: ETCD_ENDPOINTS
          value: "http://{{ template "fullname" . }}-etcd-0.{{ template "fullname" . }}-etcd:2379,http://{{ template "fullname" . }}-etcd-1.{{ template "fullname" . }}-etcd:2379,http://{{ template "fullname" . }}-etcd-2.{{ template "fullname" . }}-etcd:2379"
        - name: WV_RECOVERY
          value: {{ .Values.haRecovery }}
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - mountPath: /dev/shm
          name: dshm
        - mountPath: /sys/fs/cgroup
          name: cgvol
          readOnly: true
        - mountPath: /mnt/blumeta0
          {{- if .Values.storage.storageLocation.metaStorage.enabled }}
          name: {{ .Values.storage.storageLocation.metaStorage.volumeName }}
          {{- else }}
          name: {{ template "fullname" . }}-db2u-sqllib-shared
          {{- end }}
        - mountPath: /mnt/bludata0
          {{- if .Values.storage.storageLocation.dataStorage.enabled }}
          name: {{ .Values.storage.storageLocation.dataStorage.volumeName }}
          {{- else }}
          name: {{ template "fullname" . }}-db2u-sqllib-shared
          {{- end }}
          {{- if .Values.storage.storageLocation.backupStorage.enabled }}
        - mountPath: /mnt/backup
          name: {{ .Values.storage.storageLocation.backupStorage.volumeName }}
          {{- end }}
          {{- if .Values.storage.storageLocation.growthStorage.enabled }}
        - mountPath: /mnt/storage
          name: {{ .Values.storage.storageLocation.growthStorage.volumeName }}
          {{- end }}
          {{- if .Values.storage.storageLocation.tieredStorage.enabled }}
            {{- range $tier := .Values.storage.storageLocation.tieredStorage.tiers }}
              {{ $tierSettings := (index $.Values.storage.storageLocation.tieredStorage $tier) }}
              {{- if $tierSettings.enabled }}
        - mountPath: /mnt/tiered/{{ $tier }}
          name: {{ $tierSettings.volumeName }}
              {{- end }}
            {{- end }}
          {{- end }}
        - mountPath: /mnt/blumeta0/configmap
          name: {{ template "fullname" . }}-db2u-config-volume
        - mountPath: /mnt/blumeta0/wv-config
          name: {{ template "fullname" . }}-config-wv-volume
        - mountPath: /run
          name: runvol
        - name: db2instance-secret
          mountPath: "/secrets/db2instancepwd"
          readOnly: true
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - ls -1 /db2u/.db2u_initialized &> /dev/null
          initialDelaySeconds: 45
          periodSeconds: 5
          failureThreshold: 50
          successThreshold: 3
        lifecycle:
          preStop:
            exec:
              command:
              - bash
              - -c
              - ipcrm -a
        ports:
          - containerPort: 50000
            protocol: TCP
            name: db2-server
          - containerPort: 50001
            protocol: TCP
            name: db2-ssl-server
          # SSH port, Wolverine ports and Db2 FCM ports are only applicable to MPP deployments
          {{- if eq (lower .Values.subType) "mpp" }}
          - containerPort: 50022
            hostPort: 50022
            protocol: TCP
            name: ssh-port
          - containerPort: 5000
            protocol: TCP
            name: wvha-mgmt-port
          - containerPort: 9443
            protocol: TCP
            name: wvha-rest-port
            {{- $fcmStartPort := 60000 }}
            {{- $fcmEndPort := (int (add $fcmStartPort .Values.mln.total 1)) }}
            {{- range $i, $p := untilStep $fcmStartPort $fcmEndPort 1 }}
          - containerPort: {{ $p }}
            protocol: TCP
            name: db2-fcm-p{{ $p -}}
            {{ end }}
          {{- end }}
    {{- if and (eq (lower .Values.subType) "mpp") (.Values.fcm.hostnetwork.enabled) }}
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
    {{- end }}
      volumes:
      - emptyDir:
          medium: Memory
        name: dshm
      - name: cgvol
        hostPath:
          path: /sys/fs/cgroup
      - name: sys
        hostPath:
          path: /proc/sys
      - name: proc
        hostPath:
          path: /proc
      - name: runvol
        emptyDir:
          medium: Memory
      {{- if .Values.storage.storageLocation.dataStorage.enabled }}
      - name: {{ .Values.storage.storageLocation.dataStorage.volumeName }}
        {{- if eq .Values.storage.storageLocation.dataStorage.volumeType "hostPath" }}
        hostPath:
          path: {{ .Values.storage.storageLocation.dataStorage.hostPath.path }}
          type: {{ .Values.storage.storageLocation.dataStorage.hostPath.type }}
        {{- else }}
        persistentVolumeClaim:
          {{- if .Values.storage.storageLocation.dataStorage.pvc.existingClaim.name }}
          claimName: {{ .Values.storage.storageLocation.dataStorage.pvc.existingClaim.name }}
          {{- else }}
          claimName: {{ template "fullname" . }}-db2u-data-storage
          {{- end }}
        {{- end }}
      {{- else }}
      - name: {{ template "fullname" . }}-db2u-sqllib-shared
        persistentVolumeClaim:
          {{- if .Values.storage.existingClaimName }}
          claimName: {{ .Values.storage.existingClaimName }}
          {{- else }}
          claimName: {{ template "fullname" . }}-db2u-sqllib-shared
          {{- end }}
      {{- end }}
      {{- if .Values.storage.storageLocation.metaStorage.enabled }}
      - name: {{ .Values.storage.storageLocation.metaStorage.volumeName }}
        {{- if eq .Values.storage.storageLocation.metaStorage.volumeType "hostPath" }}
        hostPath:
          path: {{ .Values.storage.storageLocation.metaStorage.hostPath.path }}
          type: {{ .Values.storage.storageLocation.metaStorage.hostPath.type }}
        {{- else }}
        persistentVolumeClaim:
          {{- if .Values.storage.storageLocation.metaStorage.pvc.existingClaim.name }}
          claimName: {{ .Values.storage.storageLocation.metaStorage.pvc.existingClaim.name }}
          {{- else }}
          claimName: {{ template "fullname" . }}-db2u-meta-storage
          {{- end }}
        {{- end }}
      {{- end }}
      {{- if .Values.storage.storageLocation.backupStorage.enabled }}
      - name: {{ .Values.storage.storageLocation.backupStorage.volumeName }}
        {{- if eq .Values.storage.storageLocation.backupStorage.volumeType "hostPath" }}
        hostPath:
          path: {{ .Values.storage.storageLocation.backupStorage.hostPath.path }}
          type: {{ .Values.storage.storageLocation.backupStorage.hostPath.type }}
        {{- else }}
        persistentVolumeClaim:
          {{- if .Values.storage.storageLocation.backupStorage.pvc.existingClaim.name }}
          claimName: {{ .Values.storage.storageLocation.backupStorage.pvc.existingClaim.name }}
          {{- else }}
          claimName: {{ .Values.storage.storageLocation.backupStorage.pvc.claim.name }}
          {{- end }}
        {{- end }}
      {{- end }}
      {{- if .Values.storage.storageLocation.growthStorage.enabled }}
      - name: {{ .Values.storage.storageLocation.growthStorage.volumeName }}
        {{- if eq .Values.storage.storageLocation.growthStorage.volumeType "hostPath" }}
        hostPath:
          path: {{ .Values.storage.storageLocation.growthStorage.hostPath.path }}
          type: {{ .Values.storage.storageLocation.growthStorage.hostPath.type }}
        {{- else }}
        persistentVolumeClaim:
          {{- if .Values.storage.storageLocation.growthStorage.pvc.existingClaim.name }}
          claimName: {{ .Values.storage.storageLocation.growthStorage.pvc.existingClaim.name }}
          {{- else }}
          claimName: {{ .Values.storage.storageLocation.growthStorage.pvc.claim.name }}
          {{- end }}
        {{- end }}
      {{- end }}
      {{- if .Values.storage.storageLocation.tieredStorage.enabled }}
        {{- range $tier := .Values.storage.storageLocation.tieredStorage.tiers }}
          {{ $tierSettings := (index $.Values.storage.storageLocation.tieredStorage $tier) }}
          {{- if $tierSettings.enabled }}
      - name: {{ $tierSettings.volumeName }}
            {{- if eq $tierSettings.volumeType "hostPath" }}
        hostPath:
          path: {{ $tierSettings.hostPath.path }}
          type: {{ $tierSettings.hostPath.type }}
            {{- else }}
        persistentVolumeClaim:
              {{- if $tierSettings.pvc.existingClaim.name }}
          claimName: {{ $tierSettings.pvc.existingClaim.name }}
              {{- else }}
          claimName: {{ template "fullname" . }}-db2u-tiered-{{ $tier }}-storage
              {{- end }}
            {{- end }}
          {{- end }}
        {{- end }}
      {{- end }}
      - name: {{ template "fullname" . }}-db2u-config-volume
        configMap:
          name: {{ template "fullname" . }}-db2u-config-files
          items:
          - key: db2u-db2cfg-var
            path: db2u-config-var
      - name: {{ template "fullname" . }}-config-wv-volume
        configMap:
          name: {{ template "fullname" . }}-db2u-wv-config
          items:
          - key: wolverine-conf
            path: wv-config-var
      - name: db2instance-secret
        secret:
          secretName: {{ template "fullname" . }}-db2u-instance
          defaultMode: 256
