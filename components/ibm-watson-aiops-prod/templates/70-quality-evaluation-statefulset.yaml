{{- include "sch.config.init" (list . "sch.chart.zeno.config.values") -}}
{{- $name :=  .sch.chart.components.qualityEvaluation -}}
{{- $minioTlsVolumeName := "minio-tls-secret" -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "sch.names.statefulSetName" (list . $name) | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $name) | indent 4 }}
{{ include "zeno.meteringLabels" (dict "root" . "name" $name) | indent 4 }}
spec:
  replicas: {{ .Values.qualityEvaluationService.replicas }}
  revisionHistoryLimit: 25
  serviceName: {{ include "sch.names.fullCompName" (list . $name) | quote }}
  selector:
    matchLabels:
{{ include "sch.metadata.labels.standard" (list . $name) | indent 6 }}
  template:
    metadata:
      labels:
{{ include "sch.metadata.labels.standard" (list . $name) | indent 8 }}
{{ include "zeno.meteringLabels" (dict "root" . "name" $name) | indent 8 }}
      annotations:
{{ include "sch.metadata.annotations.metering" (list . .sch.chart.metering .sch.chart.metering.productMetric .sch.chart.metering.productCloudpakRatio nil) | trim | indent 8 }}
    spec:
{{ include "sch.security.securityContext" (list . .sch.chart.specSecurityContext) | trim |  indent 6 }}
      affinity:
{{ include "zeno.nodeAffinity" . | trim | indent 8 }}
{{ include "zeno.imagePullSecretTemplate" . | trim | indent 6 }}
      containers:
      - name: {{ $name | quote }}
        image: {{ include "zeno.imageName" (dict "root" . "service" .Values.qualityEvaluationService) }}
{{ include "sch.security.securityContext" (list . .sch.chart.podSecurityContext) | trim | indent 8 }}
        resources:
{{ toYaml .Values.qualityEvaluationService.resources | indent 10 }}
        envFrom:
        - configMapRef:
            name: {{ include "sch.names.fullCompName" (list . .sch.chart.config.tls) }}
        - configMapRef:
            name: {{ include "sch.names.fullCompName" (list . .sch.chart.config.kafka) }}
        - configMapRef:
            name: {{ include "sch.names.fullCompName" (list . .sch.chart.config.elasticsearch) }}
        - configMapRef:
            name: {{ include "sch.names.fullCompName" (list . .sch.chart.config.componentUrls) }}
        - configMapRef:
            name: {{ include "sch.names.fullCompName" (list . .sch.chart.config.modelTrainConsole) }}
        env:
{{ include "zeno.kafkaEnvSecrets" . | indent 8 }}
{{ include "zeno.elasticsearchEnvSecrets" . | indent 8 }}
        - name: ENVIRONMENT
          value: "PRODUCTION"
        - name: KAFKA_GROUP_ID
          value: "quality_evaluation_aiokafka_group"
        - name: KAFKA_CONSUMER_CLIENT_ID
          value: "quality_evaluation_aiokafka_consumer"
        - name: KAFKA_PRODUCER_CLIENT_ID
          value: "quality_evaluation_aiokafka_producer"
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ include .Values.global.minio.accessSecret.nameTpl . | quote }}
              key: accesskey
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include .Values.global.minio.accessSecret.nameTpl . | quote }}
              key: secretkey
        - name: AWS_CA_BUNDLE
          value: /.minio/tls.cacrt
        - name: ES_CACERT_RAW
          valueFrom:
            secretKeyRef:
              name: {{ include "zeno.elasticsearchTlsSecretNameTemplate" . }}
              key: ca.pem
        ports:
        - containerPort: 8443
          name: http
{{ include "zeno.livenessProbeTemplate" (dict "livePeriod" 30 ) | indent 8 }}
        volumeMounts:
{{ include "zeno.tlsVolumeMounts" . | indent 8 }}
{{ include "zeno.kafkaConfigVolumeMount" . | indent 8 }}
        - name: {{ $minioTlsVolumeName }}
          mountPath: /.minio
        - name: data
          mountPath: /mnt/pvc
          {{- if and ( include "zeno.boolConvertor" (list .Values.qualityEvaluationService.persistence.enabled . ) ) ( tpl (.Values.qualityEvaluationService.persistence.subPath | toString ) . ) }}
          subPath: {{ tpl (.Values.qualityEvaluationService.persistence.subPath | toString ) . | quote }}
          {{- end }}
      volumes:
{{ include "zeno.tlsVolume" . | indent 6 }}
{{ include "zeno.kafkaConfigVolume" . | indent 6 }}
      - name: {{ $minioTlsVolumeName }}
        secret:
          secretName: {{ include .Values.global.minio.tlsSecret.nameTpl . | quote  }}
          items:
          - key: tls.cacrt
            path: tls.cacrt
{{- if eq (include "zeno.boolConvertor" (list .Values.qualityEvaluationService.persistence.enabled . )) "" }}
      - name: data
        emptyDir: {}
{{- else }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ {{ .Values.qualityEvaluationService.persistence.accessMode | quote }} ]
      resources:
        requests:
          storage: {{ tpl (.Values.qualityEvaluationService.persistence.size | toString ) . | quote }}
    {{- if include "zeno.boolConvertor" (list .Values.qualityEvaluationService.persistence.useDynamicProvisioning . ) }}
      {{- if tpl (.Values.global.storageClassName | toString ) . }}
        {{- if eq "-" ( tpl (.Values.global.storageClassName | toString ) . ) }}
      storageClassName: ""
        {{- else }}
      storageClassName: {{ tpl (.Values.global.storageClassName | toString ) . | quote }}
        {{- end }}
      {{- end }}
    {{- else }}
      storageClassName: {{ default "" ( tpl (.Values.global.storageClassName | toString ) . ) | quote }}
      {{- if tpl (.Values.qualityEvaluationService.persistence.selector.label | toString ) . }}
      selector:
        matchExpressions:
        - {key: {{ tpl (.Values.qualityEvaluationService.persistence.selector.label | toString ) . }}, operator: In, values: [{{ tpl (.Values.qualityEvaluationService.persistence.selector.value | toString ) . }}]}
      {{- end }}
    {{- end }}
{{- end }}
