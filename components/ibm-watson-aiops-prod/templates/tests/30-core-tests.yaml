{{- include "sch.config.init" (list . "sch.chart.zeno.config.values") -}}
{{- $name :=  .sch.chart.tests.coreTests -}}
apiVersion: v1
kind: Pod
metadata:
  name: {{ include "sch.names.fullCompName" (list . $name) }}
  annotations:
{{ include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | trim | indent 4 }}
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook": test-success
  labels:
{{ include "sch.metadata.labels.standard" (list . $name) | trim | indent 4 }}
spec:
{{ include "zeno.imagePullSecretTemplate" . | trim | indent 2 }}
{{ include "sch.security.securityContext" (list . .sch.chart.specSecurityContext) | trim | indent 2 }}
  affinity:
{{ include "sch.affinity.nodeAffinity" (list . .sch.chart.nodeAffinity) | trim | indent 4 }}
  restartPolicy: Never
  # In rough order of when they come up
  initContainers:
{{ include "zeno.initContainerReadiness.chatopsSlackIntegrator" . | indent 2 }}
{{ include "zeno.initContainerReadiness.persistence" . | indent 2 }}
{{ include "zeno.initContainerReadiness.similarIncidents" . | indent 2 }}
{{ include "zeno.initContainerReadiness.topology" . | indent 2 }}
{{ include "zeno.initContainerReadiness.chatopsOrchestrator" . | indent 2 }}
{{ include "zeno.initContainerReadiness.alertLocalization" . | indent 2 }}
{{ include "zeno.initContainerReadiness.eventGrouping" . | indent 2 }}
  containers:
  - name: {{ $name | quote }}
    image: {{ include "zeno.imageName" (dict "root" . "service" .Values.coreTests) }}
{{ include "sch.security.securityContext" (list . .sch.chart.podSecurityContext) | trim | indent 4 }}
    resources:
{{ toYaml .Values.coreTests.resources | trim | indent 6 }}
    envFrom:
    - configMapRef:
        name: {{ include "sch.names.fullCompName" (list . .sch.chart.config.componentUrls) }}
    - configMapRef:
        name: {{ include "sch.names.fullCompName" (list . .sch.chart.config.kafka) }}
    - configMapRef:
        name: {{ include "sch.names.fullCompName" (list . .sch.chart.config.tls) }}
    - secretRef:
        name: {{ include .Values.mockServer.authSecret.nameTpl . }}
    - configMapRef:
        name: {{ include "sch.names.fullCompName" (list . .sch.chart.config.modelTrainConsole) }}
    - configMapRef:
        name: {{ include "sch.names.fullCompName" (list . .sch.chart.config.elasticsearch) }}
    env:
{{ include "zeno.kafkaEnvSecrets" . | indent 4 }}
    - name: cluster
      value: {{ .Values.global.clusterDomain }}
    - name: cluster_name
      value: {{ .Values.global.clusterDomain }}
    - name: keywords
      value: "DVT"
    - name: except
      value: "examples"
    - name: ENVIRONMENT
      value: "PRODUCTION"
    - name: TENANT_ID
      value: "tenant_id"
    - name: APPLICATION_ID
      value: "topology_id"
    - name: KAFKA_BROKER_URLS
      value: {{ include "zeno.strimziBrokers" . | quote}}
    - name: MOCK_SERVER_USERNAME
      value: {{ .Values.mockServer.mockASMUsername }}
{{ include "zeno.elasticsearchEnvSecrets" . | indent 4 }}
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          key: accesskey
          name: {{ include "zeno.minioAccessSecretNameTemplate" . }}
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          key: secretkey
          name: {{ include "zeno.minioAccessSecretNameTemplate" . }}
    - name: AWS_CA_BUNDLE
      value: /.minio/tls.cacrt
    - name: ES_CACERT_RAW
      valueFrom:
        secretKeyRef:
          key: ca.pem
          name: {{ include "zeno.elasticsearchTlsSecretNameTemplate" . }}
    - name: CP4D_URL
      value: {{ include "zeno.cpdNginxEndpointTemplate" . }}
    - name: CP4D_ADMIN_USER
      value: {{ .Values.cpd.auth.user }}
    - name: CP4D_ADMIN_PASS
      value: {{ .Values.cpd.auth.accessKey }}
    - name: CP4D_NAMESPACE
      value: {{ .Values.global.tetheredNamespace }}
    volumeMounts:
{{ include "zeno.tlsVolumeMounts" . | indent 4 }}
{{ include "zeno.kafkaConfigVolumeMount" . | indent 4 }}
    - name: output-dir
      mountPath: /output_dir
    - mountPath: /.minio
      name: minio-tls-secret
  volumes:
  - name: minio-tls-secret
    secret:
      defaultMode: 420
      items:
      - key: tls.cacrt
        path: tls.cacrt
      secretName: {{ include "zeno.tlsSecretNameTemplate" . }}
{{ include "zeno.tlsVolume" . | indent 2 }}
{{ include "zeno.kafkaConfigVolume" . | indent 2 }}
  - name: output-dir
{{- if or (and .Values.global.persistence.enabled .Values.global.persistence.useDynamicProvisioning) (and .Values.coreTests.persistence.enabled .Values.coreTests.persistence.useDynamicProvisioning) }}
    persistentVolumeClaim:
      claimName: {{ include "sch.names.fullCompName" (list . $name) }}-pvc
{{- else }}
    emptyDir: {}
  {{- end }}
