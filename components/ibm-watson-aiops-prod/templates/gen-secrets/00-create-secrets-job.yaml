{{- include "sch.config.init" (list . "sch.chart.zeno.config.values") -}}
{{- $compName := "create-secrets" -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "sch.names.fullCompName" (list . $compName ) | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName ) | trim | indent 4 }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": {{ add 2 .Values.preInstallHookWeightAnchor | quote }}
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 300
  template:
    metadata:
      annotations:
{{ include "sch.metadata.annotations.metering" (list . .sch.chart.metering .sch.chart.metering.productMetric .sch.chart.metering.productCloudpakRatio nil) | trim | indent 8 }}
      labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | trim | indent 8 }}
      name: cred-gen
    spec:
      serviceAccountName: {{ template "zeno.serviceAccountName" . }}
{{ include "sch.security.securityContext" (list . .sch.chart.specSecurityContext) | trim | indent 6 }}
      containers:
      - name: cred-gen
        image: {{ include "zeno.imageName" (dict "root" . "service" .Values.creds) }}
        resources:
{{ toYaml .Values.creds.resources | trim | indent 10 }}
{{ include "sch.security.securityContext" (list . .sch.chart.podSecurityContext) | trim | indent 8 }}
        command:
        - "/bin/bash"
        - -c
        - |
          set -eu
          # ssl configuration
          export CN="*.{{ .Release.Namespace }}"
          export CLUSTER_DOMAIN="{{ .Values.global.clusterDomain }}"
          export SUBJ="/C=US/ST=New York/L=New York/O=IBM Watson/CN=$CN"
          export PKCS12_PASSWORD="$(cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)"
          cat << EOF > openssl.cnf
          [req]
          default_bits = 2048
          default_keyfile = public.crt
          distinguished_name  = req_distinguished_name
          req_extensions     = req_ext
          x509_extensions = x509_ext
          string_mask = utf8only

          [req_distinguished_name]
          commonName_max        = 64

          [x509_ext]
          subjectKeyIdentifier = hash
          authorityKeyIdentifier = keyid,issuer
          basicConstraints = CA:FALSE
          subjectAltName = @alt_names

          [req_ext]
          subjectAltName = @alt_names

          [alt_names]
          DNS.1 = ${CN}
          DNS.2 = ${CN}.${CLUSTER_DOMAIN}
          DNS.3 = localhost
          DNS.5 = aiops
          DNS.6 = "*.{{ .Release.Name }}-ibm-minio-headless-svc.{{ .Release.Namespace }}.${CLUSTER_DOMAIN}"
          DNS.7 = "{{ .Release.Name }}-ibm-minio-svc.{{ .Release.Namespace }}.${CLUSTER_DOMAIN}"
          DNS.8 = "*.{{ .Release.Namespace }}.svc"
          IP.1 = "127.0.0.1"
          EOF

          # create the root ca signer certificate
          cat openssl.cnf
          openssl genrsa -out private.key 2048

          # create private certificate request+signing
          openssl req -new -x509 -days 3650 -key private.key -out public.crt -config openssl.cnf -subj "/C=US/ST=NY/L=NY/O=IBM/CN=$CN"
          cat private.key public.crt >keycert
          
          # create a pkcs12 format copy required by Java services
          openssl pkcs12 -export -in keycert -out tls.p12 -noiter -nomaciter -password "pass:$PKCS12_PASSWORD"
          echo "${PKCS12_PASSWORD}" | tr -d '\n' > tls.p12.password
          cp public.crt ca.crt

          # create TLS secret, if it does not already exist
          retval=0 && kubectl get secret {{ include .Values.global.tls.secret.nameTpl . }} || retval=$?
          if [[ $retval != 0 ]]; then
            cat <<EOF | kubectl create -n {{ .Release.Namespace }} -f -
            apiVersion: v1
            kind: Secret
            type: Opaque
            metadata:
              name: {{ include .Values.global.tls.secret.nameTpl . | quote }}
              labels:
{{ include "sch.metadata.labels.standard" (list . "tls" ) | trim | indent 16 }}
            data:
              tls.crt: $(cat public.crt | base64 | tr -d '\n')
              tls.key: $(cat private.key | base64 | tr -d '\n')
              tls.cacrt: $(cat ca.crt | base64 | tr -d '\n')
              tls.p12: $(cat tls.p12 | base64 | tr -d '\n')
              tls.p12.password: $(cat tls.p12.password | base64 | tr -d '\n')
          EOF
          fi

          # Create MinIO access secret, if it does not already exist
          retval=0 && kubectl get secret {{ include .Values.global.minio.accessSecret.nameTpl . }} || retval=$?
          if [[ $retval != 0 ]]; then
            cat <<EOF | kubectl create -n {{ .Release.Namespace }} -f -
            apiVersion: v1
            kind: Secret
            type: Opaque
            metadata:
              name: {{ include .Values.global.minio.accessSecret.nameTpl . | quote }}
              labels:
{{ include "sch.metadata.labels.standard" (list . "minio-access" ) | trim | indent 16 }}
            data:
              accesskey: $(echo -n "minio" | base64)
              secretkey: $(openssl rand -base64 20 | tr -d '\n' | base64 | tr -d '\n')
          EOF
          fi

          # Create mock server auth secret, if it does not already exist
          retval=0 && kubectl get secret {{ include .Values.mockServer.authSecret.nameTpl . }} || retval=$?
          if [[ $retval != 0 ]]; then
            MOCK_ASM_PASSWORD=$(openssl rand -base64 20 | tr -d '\n' | base64 | tr -d '\n')
            cat <<EOF | kubectl create -n {{ .Release.Namespace }} -f -
            apiVersion: v1
            kind: Secret
            type: Opaque
            metadata:
              name: {{ include .Values.mockServer.authSecret.nameTpl . | quote }}
              labels:
{{ include "sch.metadata.labels.standard" (list . "mock-server-auth" ) | trim | indent 16 }}
            data:
              MOCK_ASM_PASSWORD: $(echo -n $MOCK_ASM_PASSWORD)
              MOCK_SERVER_PASSWORD: $(echo -n $MOCK_ASM_PASSWORD)
          EOF
          fi
          ## MockServer SECRETS ##################################################

          ## POSTGRES SECRETS ##################################################
          # Create Postgres TLS secret if it doesn't already exist
          openssl genrsa -out ca.key 2048
          openssl req -x509 -new -nodes -key ca.key -subj "/CN={{ include .Values.global.postgres.tls.hostnameTpl . }}" -days 3650 -reqexts v3_req -extensions v3_ca -out ca.crt
          echo "Dumping CA certificate"
          openssl x509 -in ca.crt -text -noout

          retval=0 && kubectl get secret {{ include .Values.global.postgres.tls.secret.nameTpl . }} || retval=$?
          if [[ $retval != 0 ]]; then
            cat <<EOF | kubectl create -n {{ .Release.Namespace }} -f -
            apiVersion: v1
            kind: Secret
            type: kubernetes.io/tls
            metadata:
              name: {{ include .Values.global.postgres.tls.secret.nameTpl . | quote }}
              labels:
{{ include "sch.metadata.labels.standard" (list . "postgres-tls") | indent 16 }}
            data:
              tls.crt: $(cat ca.crt | base64 | tr -d '\n')
              tls.key: $(cat ca.key | base64 | tr -d '\n')
          EOF
          fi

          # Create Postgres auth secret, if it does not already exist
          retval=0 && kubectl get secret {{ include .Values.global.postgres.authSecret.nameTpl . }} || retval=$?
          if [[ $retval != 0 ]]; then
            cat <<EOF | kubectl create -n {{ .Release.Namespace }} -f -
            apiVersion: v1
            kind: Secret
            type: Opaque
            metadata:
              name: {{ include .Values.global.postgres.authSecret.nameTpl . | quote }}
              labels:
{{ include "sch.metadata.labels.standard" (list . "postgres-auth" ) | trim | indent 16 }}
            data:
              # Postgres chart expects these exact field names; do not change  unless Postgres chart changes them
              pg_su_password: $(openssl rand -base64 20 | tr -d '\n' | base64 | tr -d '\n')
              pg_repl_password: $(openssl rand -base64 20 | tr -d '\n' | base64 | tr -d '\n')
          EOF
          fi
          ## POSTGRES SECRETS ##################################################

      restartPolicy: Never
      affinity:
{{ include "zeno.nodeAffinity" . | trim | indent 8 }}
