{{- include "sch.config.init" (list . "sch.chart.zeno.config.values") -}}
{{- $compName := "create-truststore-secrets" -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "sch.names.fullCompName" (list . $compName ) | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName ) | trim | indent 4 }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": {{ add 5 .Values.preInstallHookWeightAnchor | quote }}
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 300
  template:
    metadata:
      annotations:
{{ include "sch.metadata.annotations.metering" (list . .sch.chart.metering .sch.chart.metering.productMetric .sch.chart.metering.productCloudpakRatio nil) | trim | indent 8 }}
      labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | trim | indent 8 }}
      name: truststore-cred-gen
    spec:
      serviceAccountName: {{ template "zeno.serviceAccountName" . }}
{{ include "sch.security.securityContext" (list . .sch.chart.specSecurityContext) | trim | indent 6 }}
      containers:
      - name: cred-gen
        image: {{ include "zeno.imageName" (dict "root" . "service" .Values.controller) }}
        resources:
{{ toYaml .Values.creds.resources | trim | indent 10 }}
{{ include "sch.security.securityContext" (list . .sch.chart.podSecurityContext) | trim | indent 8 }}
        command:
        - "/bin/bash"
        - -c
        - |
          set -eu
          cd /home/default

          ## UTILITY FUNCTIONS #######################################################
          genPassword() {
            cat /dev/urandom | LC_CTYPE=C tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1
          }
          ## UTILITY FUNCTIONS #######################################################

          ## KAFKA TRUSTSTORE SECRETS ################################################
          kubectl delete secret {{ .Values.global.controller.kafkaTruststoreSecret }} -n {{ .Release.Namespace }} --ignore-not-found=true

          # Generate Password for Keystore
          ES_TRUSTSTORE_PASS=`genPassword`
          echo "${ES_TRUSTSTORE_PASS}" | tr -d '\n' > es-truststore.password

          # Get Kafka CA to store in keystore
          {{- if .Values.global.kafka.strimzi.enabled }}
          until kubectl get secret {{ .Values.global.kafka.strimzi.clusterName }}-cluster-ca-cert 2>&1 > /dev/null; do
            echo "Waiting for Strimzi Secrets to exist"
            sleep 60
          done
          kubectl get secret {{ .Values.global.kafka.strimzi.clusterName }}-cluster-ca-cert -o jsonpath='{.data.ca\.crt}' | base64 --decode > ./es-cert.pem
          {{- else }}
          kubectl get secret {{ .Values.global.kafka.sasl.ca.certSecretName }} -o jsonpath='{.data.tls\.crt}' | base64 --decode > ./es-cert.pem
          {{- end }}
          # Create the Keystore
          keytool -import -noprompt -v \
            -keystore ./es-truststore.jks \
            -file ./es-cert.pem \
            -storepass $ES_TRUSTSTORE_PASS \
            -alias eventstreams-ca

          # Create the Secret
          cat << EOF | kubectl create -n {{ .Release.Namespace }} -f -
            apiVersion: v1
            kind: Secret
            type: Opaque
            metadata:
              name: {{ .Values.global.controller.kafkaTruststoreSecret | quote }}
              labels:
{{ include "sch.metadata.labels.standard" (list . "kafka-truststores" ) | trim | indent 16 }}
            data:
              es-truststore.jks: $(cat ./es-truststore.jks | base64 | tr -d '\n')
              es-truststore.password: $(cat ./es-truststore.password | base64 | tr -d '\n')
          EOF
          ## KAFKA TRUSTSTORE SECRETS ################################################

          ## TLS TRUSTSTORE SECRETS ##################################################
          kubectl delete secret {{ include .Values.global.tls.truststoreSecret.nameTpl . }} -n {{ .Release.Namespace }} --ignore-not-found=true

          # Get Private Key and Rot CA to store in keystore
          kubectl get secret {{ include .Values.global.tls.secret.nameTpl . }} -o jsonpath='{.data.tls\.p12}' | base64 --decode > ./tls.p12
          kubectl get secret {{ include .Values.global.tls.secret.nameTpl . }} -o jsonpath='{.data.tls\.p12\.password}' | base64 --decode > ./tls.p12.password
          kubectl get secret {{ include .Values.global.tls.secret.nameTpl . }} -o jsonpath='{.data.tls\.cacrt}' | base64 --decode > ./tls.cacrt
          mv ./tls.cacrt ./tls_ca.pem

          # Get p12 Keystore Password and reuse it for our truststores
          TLS_TRUSTSTORE_PASS=`cat ./tls.p12.password`
          echo "${TLS_TRUSTSTORE_PASS}" | tr -d '\n' > ./flink-tls-keystore.password
          echo "${TLS_TRUSTSTORE_PASS}" | tr -d '\n' > ./flink-tls-ca-truststore.password

          # Create the Public CA Keystore
          keytool -import -noprompt -v \
            -keystore ./flink-tls-ca-truststore.jks \
            -file ./tls_ca.pem \
            -storepass $TLS_TRUSTSTORE_PASS \
            -alias flink-tls-ca

          # Create the Private TLS Keystore
          keytool -importkeystore -noprompt -v \
            -srckeystore ./tls.p12 \
            -srcstoretype PKCS12 \
            -srcstorepass $TLS_TRUSTSTORE_PASS \
            -destkeystore ./flink-tls-keystore.key \
            -deststoretype JKS \
            -deststorepass $TLS_TRUSTSTORE_PASS

          # Create the Secret
          cat << EOF | kubectl create -n {{ .Release.Namespace }} -f -
            apiVersion: v1
            kind: Secret
            type: Opaque
            metadata:
              name: {{ include .Values.global.tls.truststoreSecret.nameTpl . | quote }}
              labels:
{{ include "sch.metadata.labels.standard" (list . "truststores" ) | trim | indent 16 }}
            data:
              flink-tls-keystore.key: $(cat ./flink-tls-keystore.key | base64 | tr -d '\n')
              flink-tls-keystore.password: $(cat ./flink-tls-keystore.password | base64 | tr -d '\n')
              flink-tls-ca-truststore.jks: $(cat ./flink-tls-ca-truststore.jks | base64 | tr -d '\n')
              flink-tls-ca-truststore.password: $(cat ./flink-tls-ca-truststore.password | base64 | tr -d '\n')
          EOF
          ## TLS TRUSTSTORE SECRETS ##################################################

      restartPolicy: Never
      affinity:
{{ include "zeno.nodeAffinity" . | trim | indent 8 }}
