{{- include "sch.config.init" (list . "sch.chart.zeno.config.values") -}}
{{- $compName := "create-s3fs" -}}
{{- if .Values.s3fs.enabled }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "sch.names.fullCompName" (list . $compName ) | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName ) | trim | indent 4 }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": {{ add 10 .Values.preInstallHookWeightAnchor | quote }}
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 300
  template:
    metadata:
      annotations:
{{ include "sch.metadata.annotations.metering" (list . .sch.chart.metering .sch.chart.metering.productMetric .sch.chart.metering.productCloudpakRatio nil) | trim | indent 8 }}
      labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | trim | indent 8 }}
      name: secret-gen
    spec:
      serviceAccountName: {{ .Values.global.existingServiceAccount }}
{{ include "sch.security.securityContext" (list . .sch.chart.specSecurityContext) | trim | indent 6 }}
      restartPolicy: Never
      affinity:
{{ include "zeno.nodeAffinity" . | trim | indent 8 }}
      containers:
      - name: cred-gen
        image: {{ include "zeno.imageName" (dict "root" . "service" .Values.creds) }}
        resources:
{{ toYaml .Values.creds.resources | trim | indent 10 }}
{{ include "sch.security.securityContext" (list . .sch.chart.podSecurityContext) | trim | indent 8 }}
        command:
        - "/bin/bash"
        - -c
        - |
          set -e
          kubectl get secrets {{ include .Values.global.tls.secret.nameTpl . }} -o jsonpath='{.data.tls\.crt}'  | base64 --decode > ./minio-tls.crt
          kubectl get secrets {{ include .Values.global.tls.secret.nameTpl . }} -o jsonpath='{.data.tls\.cacrt}'| base64 --decode > ./minio-ca.crt
          cat ./minio-tls.crt ./minio-ca.crt > minio-ca-bundle

          AccessKey=$(kubectl get secret {{ include .Values.global.minio.accessSecret.nameTpl . }} -o jsonpath='{.data.accesskey}')
          SecretKey=$(kubectl get secret {{ include .Values.global.minio.accessSecret.nameTpl . }} -o jsonpath='{.data.secretkey}')
          CABundle=$(cat ./minio-ca-bundle | base64 -w 0)

          kubectl delete secret {{ include .Values.s3fs.secret.nameTpl . }} --ignore-not-found=true
          cat <<EOF | kubectl create -n {{ .Release.Namespace }} -f -
            apiVersion: v1
            kind: Secret
            type: ibm/ibmc-s3fs
            metadata:
              name: {{ include .Values.s3fs.secret.nameTpl . }}
              labels:
{{ include "sch.metadata.labels.standard" (list . "s3fs-auth" ) | trim | indent 16 }}
            data:
              access-key: $AccessKey
              secret-key: $SecretKey
              ca-bundle-crt: $CABundle
          EOF
{{- end }}
