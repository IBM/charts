{{- if eq .Values.global.deploymentTarget "icp4data" }}
kind: ConfigMap
apiVersion: v1
metadata:
  name: base-secret-generation-config
  labels:
    app: {{ .Chart.Name }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    app.kubernetes.io/name: {{ .Chart.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-101"
    "helm.sh/hook-delete-policy": before-hook-creation
data:
  init.sh: |        
    function generateRandomString() {
      length=${1}
      < /dev/urandom tr -dc A-Za-z0-9 | head -c${1:-${length}};echo;
    }
      
    # check for wdp-crypto-secret and then create it if its there
    wdp_crypto_exists=$(kubectl get secret wdp-crypto-secret);
    rc=$?
    if [[ rc -eq 1 ]]
    then
            # Generate the secret
            wdp_temp_key=$(generateRandomString 32);
            wdp_spark_pw=$(generateRandomString 32);
            
            echo "wdp-crypto-secret secret does not exist, creating...";
            kubectl create secret generic wdp-crypto-secret --from-literal=wdp-temp-sec-key="$wdp_temp_key" --from-literal=wdp-spark-access-password="$wdp_spark_pw";
            kubectl label secret wdp-crypto-secret -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ .Chart.Name }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
    else
            echo "wdp-crypto-secret secret already exists";
    fi
    
    # portal-catalog-secret
    portal_catalog_secret_exists=$(kubectl get secret portal-catalog-secret -n $ICPD_CONTROLPLANE_NAMESPACE);
    rc=$?
    if [[ rc -eq 1 ]]
    then
            # Generate the secret
            echo "portal-catalog-secret secret does not exist, creating...";
            # CA root
            openssl genrsa -out /certs/portalCatCA.key 2048;
            openssl req -x509 -new -nodes -key /certs/portalCatCA.key -sha256 -days 3650 -out /certs/portalCatCA.crt -subj "/C=US/ST=CA/O=IBM, Inc./CN=portal-catalog";    
            
            openssl genrsa -out /certs/portalCat.key 2048;                
            openssl req -new -sha256 -key /certs/portalCat.key -subj "/C=US/ST=CA/O=IBM, Inc./CN=portal-catalog" -reqexts SAN -config <(cat /etc/pki/tls/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:portal-catalog")) -out /certs/portalCat.csr;      
            openssl x509 -req -in /certs/portalCat.csr -CA /certs/portalCatCA.crt -CAkey /certs/portalCatCA.key -CAcreateserial -out /certs/portalCat.crt -days 3650 -sha256;
            
            redis_cryptoPassword=$(generateRandomString 10);
            session_secret=$(generateRandomString 10);
            watson_studio_session_key="watson-studio";
            auth_crypto_password=$(generateRandomString 10);
            
            kubectl create secret generic portal-catalog-secret -n $ICPD_CONTROLPLANE_NAMESPACE --from-file=PROD_SELF_SIGNED_PRIVATEKEY=/certs/portalCat.crt --from-file=PROD_SELF_SIGNED_CERTIFICATE=/certs/portalCat.key --from-literal=config__composeRedis__cryptoPassword="$redis_cryptoPassword" --from-literal=config__session__secret="$session_secret" --from-literal=config__watson__studio__session__key="$watson_studio_session_key" --from-literal=auth__crypto__password="$auth_crypto_password";
            kubectl label secret portal-catalog-secret -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ .Chart.Name }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
    else
            echo "portal-catalog-secret secret already exists";
    fi
{{- end }}
