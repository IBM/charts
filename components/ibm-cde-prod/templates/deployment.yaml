{{/*
#+------------------------------------------------------------------------+
#| Licensed Materials - Property of IBM
#| IBM Cognos Products: Cognos Dashboard Embedded
#| (C) Copyright IBM Corp. 2019
#|
#| US Government Users Restricted Rights - Use, duplication or disclosure
#| restricted by GSA ADP Schedule Contract with IBM Corp.
#+------------------------------------------------------------------------+
*/}}
{{- include "sch.config.init" (list . "dde.sch.chart.config.values") -}}
{{/*- include "ibmCde.licenseValidate" . | required "License must be accepted by setting license key to true" */}}
#apiVersion: extensions/v1beta1
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "ibmCde.fullname" . }}-proxy
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "ibmCde.release_labels" . | indent 4 }}
spec:
  replicas: 2
  selector:
    matchLabels:
{{- include "ibmCde.release_labels" . | indent 6 }}
      app: {{ template "ibmCde.name" . }}-proxy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      annotations:
        hook.activate.cpd.ibm.com/command: '[]'
        hook.deactivate.cpd.ibm.com/command: '[]'
        checksum/config_proxy: {{ include (print $.Template.BasePath "/confmap-proxy.yaml") . | sha256sum }}
        checksum/config_server: {{ include (print $.Template.BasePath "/confmap-server.yaml") . | sha256sum }}
        {{- include "ibmCde.metering.annotations" . | indent 8 }}
        {{- include "ibmCde.serviceability.annotations" . | indent 8 }}
      labels:
        {{- include "ibmCde.release_labels" . | indent 8 }}
        app: {{ template "ibmCde.name" . }}-proxy
        icpdata_addon_version: {{ .Chart.AppVersion | quote }}
        icpdsupport/addOnId: cde
        icpdsupport/app: ui
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ .Values.runAsUser }}
{{- if .Values.cde.securityContext.fsGroup  }}
        fsGroup: {{ .Values.cde.securityContext.fsGroup  }}
{{- end }}
      affinity:
      {{/* nodeaffinity for PPA charts, remove this comment and use the following nodeAffinity for PPA charts, can be removed if github.ibm charts */}}
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          #If you specify multiple nodeSelectorTerms associated with nodeAffinity types,
          #then the pod can be scheduled onto a node if one of the nodeSelectorTerms is satisfied.
          #
          #If you specify multiple matchExpressions associated with nodeSelectorTerms,
          #then the pod can be scheduled onto a node only if all matchExpressions can be satisfied.
          #
          #valid operators: In, NotIn, Exists, DoesNotExist, Gt, Lt
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                {{- if .Values.arch }}
                  - {{ .Values.arch }}
                {{- else }}
                  - {{ template "ibmCde.arch" . }}
                {{- end }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchExpressions:
                - key: affinity
                  operator: In
                  values:
                  - cde-affinity
      restartPolicy: Always
      initContainers:
      - name: check-redis-ready
        image: "{{ if .Values.global.dockerRegistryPrefix }}{{ trimSuffix "/" .Values.global.dockerRegistryPrefix }}/{{ end }}{{ .Values.image.redisInit.image }}:{{ .Values.image.redisInit.tag | default "latest" }}-{{ .Values.arch }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ['sh', '-c',
              'while true; do echo "Waiting for redis service to come up...";
               redis-cli -h {{ template "ibmCde.redis.fullname" . }} -p {{ .Values.image.redisInit.port }} ping >/dev/null 2>/dev/null && break;
               sleep 1; done; echo "Service is up! Starting main container."']
        resources:
          limits:
            cpu: "1"
            memory: 256Mi
          requests:
            cpu: "125m"
            memory: 128Mi
        securityContext:
{{- if (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
          runAsUser: {{ .Values.runAsUser }}
{{- end }}
{{- if .Values.cde.securityContext.fsGroup  }}
          fsGroup: {{ .Values.cde.securityContext.fsGroup  }}
{{- end }}
          runAsNonRoot: true
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      containers:
      - name: daas-sb-proxy
{{- if eq .Values.arch "ppc64le" }}
        image: "{{ if .Values.global.dockerRegistryPrefix }}{{ trimSuffix "/" .Values.global.dockerRegistryPrefix }}/{{ end }}{{ .Values.image.proxy.image }}:{{ .Values.image.proxy.tagPPC | default "latest" }}-{{ .Values.arch }}"
{{- else }}
        image: "{{ if .Values.global.dockerRegistryPrefix }}{{ trimSuffix "/" .Values.global.dockerRegistryPrefix }}/{{ end }}{{ .Values.image.proxy.image }}:{{ .Values.image.proxy.tag | default "latest" }}-{{ .Values.arch }}"
{{- end }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
{{- if (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
          runAsUser: {{ .Values.runAsUser }}
{{- end }}
{{- if .Values.cde.securityContext.fsGroup  }}
          fsGroup: {{ .Values.cde.securityContext.fsGroup  }}
{{- end }}
          runAsNonRoot: true
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        ports:
          - containerPort: 3001
        livenessProbe:
          httpGet:
            path: /healthcheck/liveness
            port: 3001
            scheme: "HTTPS"
          initialDelaySeconds: 240
          periodSeconds: 120
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /healthcheck/readiness?includeDaas=true
            port: 3001
            scheme: "HTTPS"
          initialDelaySeconds: 120
          periodSeconds: 60
          timeoutSeconds: 30
        resources:
          limits:
            cpu: "1"
            memory: 256Mi
          requests:
            cpu: "125m"
            memory: 128Mi
        envFrom:
        - configMapRef:
            name: {{ template "ibmCde.fullname" . }}-proxy-config
{{- if .Values.image.proxy.tlsSecret }}
        - secretRef:
            name: {{ .Values.image.proxy.tlsSecret }}
{{- end }}
      - name: daas-server
{{- if eq .Values.arch "ppc64le" }}
        image: "{{ if .Values.global.dockerRegistryPrefix }}{{ trimSuffix "/" .Values.global.dockerRegistryPrefix }}/{{ end }}{{ .Values.image.server.image }}:{{ .Values.image.server.tagPPC | default "latest" }}-{{ .Values.arch }}"
{{- else }}
        image: "{{ if .Values.global.dockerRegistryPrefix }}{{ trimSuffix "/" .Values.global.dockerRegistryPrefix }}/{{ end }}{{ .Values.image.server.image }}:{{ .Values.image.server.tag | default "latest" }}-{{ .Values.arch }}"
{{- end }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
{{- if (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
          runAsUser: {{ .Values.runAsUser }}
{{- end }}
{{- if .Values.cde.securityContext.fsGroup  }}
          fsGroup: {{ .Values.cde.securityContext.fsGroup  }}
{{- end }}
          runAsNonRoot: true
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        ports:
          - containerPort: 9080
        livenessProbe:
          httpGet:
            path: /daas/v1/health
            port: 9080
          initialDelaySeconds: 120
          periodSeconds: 120
          timeoutSeconds: 15
        readinessProbe:
          httpGet:
            path: /daas/v1/health
            port: 9080
          initialDelaySeconds: 120
          periodSeconds: 60
          timeoutSeconds: 15
        resources:
          limits:
            cpu: "2"
            memory: "6Gi"
          requests:
            cpu: "1.25"
            memory: "3Gi"
        envFrom:
        - configMapRef:
            name: {{ template "ibmCde.fullname" . }}-server-config
        volumeMounts:
          - name: "shared-data"
            mountPath: "/shared-data"
          - name: "certificate"
            mountPath: "/etc/certificate"
      dnsPolicy: ClusterFirst
      terminationGracePeriodSeconds: 30
      volumes:
      - name: certificate
        secret:
          secretName: internal-nginx-svc-tls
      - name: "shared-data"
        {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          {{- if .Values.persistence.existingClaim }}
          claimName: {{ .Values.persistence.existingClaim | quote }}
          {{- else }}
          claimName: "{{ template "ibmCde.fullname" . }}-pvc"
          {{- end }}
        {{- else }}
        emptyDir: {}
        {{- end }}
