{{- include "sch.config.init" (list . "sch.chart.stt.config.values") -}}
{{- $comp := "creds-gen" -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-ibm-datastore-creds-gen"
  labels:
{{ include "sch.metadata.labels.standard" (list . $comp) | indent 4 }}
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 300
  template:
    metadata:
      labels:
{{ include "sch.metadata.labels.standard" (list . $comp) | indent 8 }}
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 8 }}
        productMetric: "VIRTUAL_PROCESSOR_CORE"
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      serviceAccountName: "{{ .Release.Name }}-speech-runtime-privileged"
      securityContext:
        runAsNonRoot: true
        {{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
        runAsUser: 1001
        {{- if semverCompare ">=1.14" .Capabilities.KubeVersion.GitVersion }}
        runAsGroup: 10000
        {{- end }}
        {{- end }}
      containers:
      - name: cred-gen
        image: {{ include "ibm-watson-speech.repo" . }}{{ .Values.global.datastores.minio.images.certgen.name }}:{{ .Values.global.datastores.minio.images.certgen.tag }}
{{ include "java-services.containerSecurityContext" . | indent 8 }}
        resources:
          requests:
            memory: 128Mi
            cpu: 100m
          limits:
            memory: 128Mi
            cpu: 100m
        command:
        - "/bin/bash"
        - -c
        - |
          rabbitmq_password_raw=$(openssl rand -hex 10)
          management_password_raw=$(openssl rand -hex 10)
          definition=$(echo '{"users":[{"name":"management","password":"'$management_password_raw'","tags":"management"},{"name":"admin","password":"'$rabbitmq_password_raw'","tags":"administrator"}],"vhosts":[{"name":"/"}],"permissions":[{"user":"admin","vhost":"/","configure":".*","read":".*","write":".*"}],"parameters":[],"policies":[{"name":"ha-all","pattern":".*","vhost":"/","definition":{"ha-mode":"all","ha-sync-mode":"automatic","ha-sync-batch-size":1}}],"queues":[],"exchanges":[],"bindings":[]}')


          openssl genrsa -out ca.key 2048
          openssl req -x509 -new -nodes -key ca.key -subj "/CN=mnlp" -days 3650 -reqexts v3_req -extensions v3_ca -out ca.crt
          cat >openssl.cnf <<EOL
          [req]
          req_extensions = v3_req
          distinguished_name = req_distinguished_name
          [req_distinguished_name]
          [ v3_req ]
          basicConstraints = CA:FALSE
          keyUsage = nonRepudiation, digitalSignature, keyEncipherment
          subjectAltName = @alt_names
          [alt_names]
          DNS.1 = {{ .Release.Name }}-ibm-minio
          DNS.2 = *.{{ .Release.Name }}-ibm-minio-headless-svc.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}
          DNS.3 = {{ .Release.Name }}-ibm-minio-svc.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}
          DNS.4 = localhost
          DNS.5 = 127.0.0.1
          DNS.6 = {{ .Release.Name }}-ibm-postgresql-proxy-service.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}
          DNS.7 = {{ .Release.Name }}-ibm-postgresql.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}
          EOL
          openssl genrsa -out minio.key 2048
          openssl req -new -key minio.key -out minio.csr -subj "/CN={{ .Release.Name }}-ibm-minio" -config openssl.cnf
          openssl x509 -req -in minio.csr \
            -CA ca.crt -CAkey ca.key -CAcreateserial \
            -out minio.crt -days 3650 -extensions v3_req -extfile openssl.cnf
          cat <<EOF | kubectl create -n {{ .Release.Namespace }} -f -
          apiVersion: v1
          kind: Secret
          type: kubernetes.io/tls
          metadata:
            name: "{{ .Release.Name }}-ibm-datastore-tls"
            labels:
{{ include "sch.metadata.labels.standard" (list .) | indent 14 }}
          data:
            tls.cacrt: $(cat ca.crt | base64 | tr -d '\n')
            tls.crt: $(cat minio.crt | base64 | tr -d '\n')
            tls.key: $(cat minio.key | base64 | tr -d '\n')
            tls.cacrt.str: $(sed '1d;$d' ca.crt | tr -d '\n' | base64 | tr -d '\n')

          ---
          apiVersion: v1
          kind: Secret
          type: Opaque
          metadata:
            labels:
{{ include "sch.metadata.labels.standard" (list .) | indent 14 }}
            name: "{{ .Release.Name }}-ibm-rabbitmq-auth-secret"
          data:
            rabbitmq-erlang-cookie: $(openssl rand -base64 32 | tr -d '\n' | base64 | tr -d '\n')
            rabbitmq-management-password: $( echo -n $management_password_raw | tr -d '\n' | base64 | tr -d '\n')
            rabbitmq-password: $( echo -n $rabbitmq_password_raw | tr -d '\n' | base64 | tr -d '\n')
            definitions.json: $(echo $definition | tr -d '\n' | base64 | tr -d '\n')
          EOF
      restartPolicy: Never
      affinity:
{{ include "ibm-watson-speech-prod.affinity" $ | trim | indent 8 }}
