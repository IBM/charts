{{- include "sch.config.init" (list . "sch.chart.stt.config.values") -}}
{{- $compName :=  .sch.chart.components.rabbitmq.name -}}

apiVersion: helm.operator-sdk/v1alpha1
kind: IbmRabbitmq
metadata:
  name: {{ include "sch.names.fullCompName" (list $ $compName) | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 4 }}
  annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 4 }}

spec:
  # Default values copied from <project_dir>/helm-charts/ibm-rabbitmq/values.yaml

  amqpsNodePort: {{ .Values.global.datastores.rabbitMQ.nodePort | quote }}
  arch:
    amd64: 3 - Most preferred
  auth:
    authSecretName: {{ tpl .Values.global.datastores.rabbitMQ.authSecretName . | quote }}
    managementUsername: management
    rabbitmqUsername: admin
  {{ $clusterDomain := .Values.global.clusterDomain -}}
  clusterDomain: {{ ( $clusterDomain | replace "svc." "" ) }}
  config:
    image:
      image: {{ .Values.global.datastores.rabbitMQ.images.config.name }}:{{ .Values.global.datastores.rabbitMQ.images.config.tag }}
  dataPVC:
    selector:
      label: ""
      value: ""
  definitions:
    bindings: ""
    exchanges: ""
    parameters: ""
    permissions: ""
    policies: |-
      {
        "name": "ha-all",
        "pattern": ".*",
        "vhost": "/",
        "definition": {
          "ha-mode": "all",
          "ha-sync-mode": "automatic",
          "ha-sync-batch-size": 1
        }
      }
    queues: ""
    users: ""
    vhosts: ""
  extraConfig: ""
  global:
    #RabbitMQ images currently aren't pushed to a staging registry, so use ours for now. Only replace prod reg
    dockerRegistryPrefix: {{ .Values.global.dockerRegistryPrefix | replace "cp.icr.io/cp/watson-speech" "cp.icr.io/cp" | quote }}
    image:
      pullPolicy: IfNotPresent
      pullSecret: "{{ .Values.global.image.pullSecret }}"
    license: true
    metering:
      productName: "ibm-rabbitmq"
      productID: "8923873727389827e489427777777777"
      productVersion: "1.0.0"
      productMetric: "VIRTUAL_PROCESSOR_CORE"
      productChargedContainers: "All"
      productCloudpakRatio: "1:1"
      cloudpakName: "IBM Cloud Pak for Data"
      cloudpakId: "eb9998dcc5d24e3eb5b6fb488f750fe2"
      cloudpakInstanceId: "8d68a333-1cff-4b43-8061-4b6e489aeca2"
      addOnId: ""
    sch:
      enabled: true
    storageClassName: {{ .Values.global.datastores.rabbitMQ.storageClassName | quote }}
  initContainer:
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
  livenessProbe:
    failureThreshold: 6
    initialDelaySeconds: 120
    periodSeconds: 10
    timeoutSeconds: 5
  persistentVolume:
    accessModes: ReadWriteOnce
    enabled: {{ .Values.global.datastores.rabbitMQ.pvEnabled }}
    size: {{ .Values.global.datastores.rabbitMQ.pvSize }}
    useDynamicProvisioning: {{ .Values.global.datastores.rabbitMQ.useDynamicProvisioning }}
  rabbitmq:
    image:
      image: {{ .Values.global.datastores.rabbitMQ.images.rabbitmq.name }}:{{ .Values.global.datastores.rabbitMQ.images.rabbitmq.tag }}
  rabbitmqHipeCompile: false
  rabbitmqManagerPort: {{ .Values.global.datastores.rabbitMQ.managerPort | quote }}
  rabbitmqNodePort: {{ .Values.global.datastores.rabbitMQ.nodePort | quote }}
  rabbitmqVhost: /
  readinessProbe:
    failureThreshold: 6
    initialDelaySeconds: 60
    periodSeconds: 5
    timeoutSeconds: 3
  replicas: {{ .Values.global.datastores.rabbitMQ.replicas }}
  resources:
    limits:
      cpu: {{ .Values.global.datastores.rabbitMQ.cpuLimit }}
      memory: {{ .Values.global.datastores.rabbitMQ.memoryLimit }}
    requests:
      cpu: {{ .Values.global.datastores.rabbitMQ.cpuRequest }}
      memory: {{ .Values.global.datastores.rabbitMQ.memoryRequest }}
  securityContext:
    rabbitmq:
      runAsUser: 999
  tls:
    enabled: {{ .Values.global.datastores.rabbitMQ.tlsEnabled }}
    tlsSecretName: {{ tpl .Values.global.datastores.rabbitMQ.tlsSecretName . | quote }}
