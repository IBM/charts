{{- include "sch.config.init" (list . "sch.chart.stt_async.config.values") -}}
{{- $compName :=  .sch.chart.components.stt_async.name -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "sch.names.fullCompName" (list . $compName) }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 4 }}
    appName: stt-async
    wdc.ibm.com/network-access: public-egress
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 5
      maxUnavailable: 0
  selector:
    matchLabels:
      appName: stt-async
  template:
    metadata:
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 8 }}
      labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 8 }}
        appName: stt-async
        wdc.ibm.com/network-access: public-egress
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        {{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
        runAsUser: 1001
        {{- end }}
      terminationGracePeriodSeconds: 36000
      initContainers:
         - name: wait4db
           image: "{{ .Values.global.dockerRegistryPrefix }}/{{ .Values.global.images.utils.image }}:{{ .Values.global.images.utils.tag }}"
{{ include "java-services.containerSecurityContext" . | indent 11 }}
{{ include "ibm-watson-speech-prod.initContainerResources" . | indent 11}}
           env:
           - name: PGPASSWORD
             valueFrom:
               secretKeyRef:
                 name: "{{ .Values.global.datastores.postgressql.auth.authSecretName }}"
                 key: pg_su_password
           - name: PGCONNECT_TIMEOUT
             value: "3"
           command: ['sh', '-c']
           args:
             #- until pg_isready -h {{ .Release.Name }}-ibm-postgresql-proxy-svc.{{- .Release.Namespace }} -p 5432 -d postgres;
             - until psql -h {{ .Release.Name }}-ibm-postgresql-proxy-svc.{{- .Release.Namespace }} -p 5432 -d postgres -U stolon;
               do echo waiting for database;
               sleep 2;
               done;
         - name: wait4rabbit
           image: "{{ .Values.global.dockerRegistryPrefix }}/{{ .Values.global.images.utils.image }}:{{ .Values.global.images.utils.tag }}"
{{ include "ibm-watson-speech-prod.initContainerResources" . | indent 11}}
{{ include "java-services.containerSecurityContext" . | indent 11 }}
           command: ['sh', '-c']
           args:
             - echo trying to access rabbitmq at https://{{ .Release.Name }}-ibm-rabbitmq-svc:15671;
               until curl https://{{ .Release.Name }}-ibm-rabbitmq-svc:15671 -k --connect-timeout 2;
               do echo waiting for rabbitmq;
               date;
               sleep 2;
               done;
         - name: wait4stt
           image: "{{ .Values.global.dockerRegistryPrefix }}/{{ .Values.global.images.utils.image }}:{{ .Values.global.images.utils.tag }}"
{{ include "ibm-watson-speech-prod.initContainerResources" . | indent 11}}
{{ include "java-services.containerSecurityContext" . | indent 11 }}
           command: ['sh', '-c']
           args:
             - echo trying to access runtime at https://{{ .Release.Name }}-speech-to-text-stt-runtime:1443/speech-to-text/api/v1/models;
               until curl https://{{ .Release.Name }}-speech-to-text-stt-runtime:1443/speech-to-text/api/v1/models -k --connect-timeout 2;
               do echo waiting for stt runtime;
               date;
               sleep 2;
               done;
      containers:
        - name: stt-async
          image: "{{ .Values.global.dockerRegistryPrefix }}/{{ .Values.images.sttAsync.image }}:{{ .Values.images.sttAsync.tag }}"
{{ include "java-services.containerSecurityContext" . | indent 10 }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          resources:
            requests:
              memory: "2048Mi"
              cpu: "500m"
            limits:
              memory: "2048Mi"
              cpu: "1000m"
          env:
          - name: MEM_JAVA_HEAP_PERCENT
            value: "80"
          - name: MEM_TOTAL_BYTES
            valueFrom:
              resourceFieldRef:
                resource: requests.memory
          - name: CLOUD_ENVIRONMENT
            value: icp
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: EUREKA_FETCH_REGISTRY
            value: "false"
          - name: EUREKA_DISABLE
            value: "true"
          - name: MINIO_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: minio
                key: accesskey
          - name: MINIO_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: minio
                key: secretkey
          - name: RABBITMQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-ibm-rabbitmq-auth-secret
                key: rabbitmq-password
          - name: POSTGRESSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.datastores.postgressql.auth.authSecretName }}
                key: pg_su_password
          ports:
          - containerPort: 9080
          - containerPort: 9443
          volumeMounts:
          - mountPath: /etc/stt-async/secrets/minio
            name: minio-information
            readOnly: true
          - name: datastores-information
            mountPath: /etc/stt-async/secrets/compose
            readOnly: true
          - name: stt-async-config
            mountPath: /etc/stt-async/config
            readOnly: true
          - name: at-config
            mountPath: /etc/stt-async/config-shared
            readOnly: true
          - name: rabbitmq-certificates
            mountPath: /etc/stt-async/certificates
            readOnly: false
          lifecycle:
            preStop:
              exec:
                # SIGTERM triggers a quick exit; gracefully terminate instead
                command: ["/opt/ibm/docker/stop-server-smooth"]
          livenessProbe:
            httpGet:
              path: "/speech-to-text/api/health/check"
              port: 9080
            initialDelaySeconds: 300
            timeoutSeconds: 20
          readinessProbe:
            httpGet:
              path: "/speech-to-text/api/health/check/readiness"
              port: 9080
            initialDelaySeconds: 20
            timeoutSeconds: 10
      affinity:
{{- include "ibm-watson-speech-prod.affinity" . | indent 8 }}
      volumes:
        - name: stt-async-config
          configMap:
            name: {{ include "sch.names.fullCompName" (list . $compName) }}-configmap
        - name: at-config
          configMap:
            name: {{ .Release.Name }}-activity-tracker-configmap
        - name: minio-information
          configMap:
            name: {{ .Release.Name }}-minio-info
        - name: datastores-information
          configMap:
            name: {{ .Release.Name }}-datastores-info
        - name: rabbitmq-certificates
          secret:
            secretName: {{ .Release.Name }}-ibm-rabbitmq-tls-secret
            #secretName: {{ .Release.Name }}-rabbitmq
