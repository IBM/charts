apiVersion: batch/v1
kind: Job
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ .Values.mdc.name }}-prepare-sample
  labels:
    app.kubernetes.io/name: {{ .Values.global.productLabelName }}
    helm.sh/chart: {{ .Chart.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    icpdsupport/app : {{ .Values.global.productLabelName }}
    icpdsupport/serviceInstanceId: "{{ .Values.zenServiceInstanceId | int64 }}"
    app.kubernetes.io/component: {{ .Values.mdc.name }}-prepare-sample
    app.kubernetes.io/part-of: {{ .Values.mdc.name }}
spec:
  template:
    metadata:
      annotations:
        productName: IBM Master Data Management
        productID: MDM1000200300
        productVersion: 1.0.0
        productMetric: VIRTUAL_PROCESSOR_CORE
        productChargedContainers: All
        cloudpakName: "IBM Cloud Pak for Data"
        cloudpakId: "eb9998dcc5d24e3eb5b6fb488f750fe2"
        cloudpakVersion: 3.0.1
      labels:
        app: {{ .Values.global.productLabelName }}
        app.kubernetes.io/name: {{ .Values.global.productLabelName }}
        helm.sh/chart: {{ .Chart.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        release: {{ .Release.Name }}
        icpdsupport/app : {{ .Values.global.productLabelName }}
        icpdsupport/serviceInstanceId: "{{ .Values.zenServiceInstanceId | int64 }}"
        icpdsupport/addOnName: "{{ .Values.zenServiceInstanceType }}"
        app.kubernetes.io/component: {{ .Values.mdc.name }}-prepare-sample
        app.kubernetes.io/part-of: {{ .Values.mdc.name }}
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      serviceAccount: {{ .Values.sa.viewer }}
      serviceAccountName: {{ .Values.sa.viewer }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: beta.kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
      {{ if eq .Values.global.remoteDockerRepo true }}
      imagePullSecrets:
      - name: {{ .Values.global.imagePullSecretName }}
      {{ end }}
      containers:
      - name: {{ .Values.mdc.name }}-prepare-sample
        image: {{ if .Values.global.docker_registry_prefix }}{{ trimSuffix "/" .Values.global.docker_registry_prefix }}/{{ end }}{{ .Values.mdc.image }}:{{ .Values.mdc.tag }}
        imagePullPolicy: {{ .Values.mdc.imagePullPolicy }}
        securityContext:
          runAsUser: 1000325000
          privileged: false
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
        command: ["sh", "-c", "mkdir /shared-volume/sample; cp -R /usr/operational-cache/etc/analytics-sample/data/* /shared-volume/sample; chmod 770 -R /shared-volume/sample"]
        volumeMounts:
        - name: spark-data
          mountPath: /shared-volume
        resources:
          requests:
            cpu: {{ .Values.mdc.prepareSampleJob.requests.cpu }}
            memory: {{ .Values.mdc.prepareSampleJob.requests.memory }}
          limits:
            cpu: {{ .Values.mdc.prepareSampleJob.limits.cpu }}
            memory: {{ .Values.mdc.prepareSampleJob.limits.memory }}
      volumes:
      - name: spark-data
        persistentVolumeClaim:
          claimName: {{ .Values.global.sharedStoragePVC.name }}
      restartPolicy: Never
  backoffLimit: {{ .Values.mdc.prepareSampleJob.backoffLimit }}
