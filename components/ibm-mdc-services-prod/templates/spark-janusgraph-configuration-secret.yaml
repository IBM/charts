apiVersion: v1
kind: Secret
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ .Values.spark.name }}-janusgraph-configuration-secret
  labels:
    app.kubernetes.io/name: {{ .Values.global.productLabelName }}
    helm.sh/chart: {{ .Chart.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    icpdsupport/app : {{ .Values.global.productLabelName }}
    icpdsupport/serviceInstanceId: "{{ .Values.zenServiceInstanceId | int64 }}"
    app.kubernetes.io/component: {{ .Values.spark.name }}
    app.kubernetes.io/part-of: {{ .Values.spark.name }}
stringData:
  janusgraph-static.properties: |
    # General static settings
    gremlin.graph=org.janusgraph.core.JanusGraphFactory
    cache.db-cache = true
    cache.db-cache-clean-wait = 20
    cache.db-cache-time = 180000
    schema.default=none
    cache.db-cache-size = 0.5
    graph.replace-instance-if-exists = true

    # Indexing static settings
    index.search.backend=elasticsearch
    index.search.map-name=true
    query.force-index=true
    index.search.elasticsearch.create.use-external-mappings=true

    # Storage static settings
    storage.backend=cql
    storage.lock.retries=5
    storage.lock.wait-time=250

    # Storage Replication
    storage.cql.replication-factor={{ .Values.cassandra.replicas }}
    storage.cql.replication-strategy-class=NetworkTopologyStrategy
    storage.cql.replication-strategy-options={{ .Values.cassandra.cluster.dataCenter }},{{ .Values.cassandra.replicas }}

    # Index Replication
    index.search.elasticsearch.create.ext.number_of_shards=1
    index.search.elasticsearch.create.ext.number_of_replicas={{ sub .Values.elasticsearch.data.replicas 1 }}
    
    # Batch loading
    storage.batch-loading=true
