apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: paw
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    name: redis-data2
    release: {{ .Release.Name }}
    paw_instance_name: {{ .Values.paw_instance_name }}
    
  name: redis-data2
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      name: redis-data2
  template:
    metadata:
      annotations:
        productName: IBM Planning Analytics Workspace
        productID: com.ibm.ba.paw.{{ .Release.Name }}
        productVersion: {{ .Release.Name }}
        productMetric: "VIRTUAL_PROCESSOR_CORE"
        productChargedContainers: "All"
        cloudpakName: {{ .Values.cloudpakAnnotations.cloudpakName }}
        cloudpakId: {{ .Values.cloudpakAnnotations.cloudpakId }}
        cloudpakVersion: "{{ .Values.cloudpakAnnotations.cloudpakVersion }}"
        
      labels:
        app.kubernetes.io/name: paw
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        name: redis-data2
        release: {{ .Release.Name }}
        version: "1.0.122-ubi7"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - {{ .Values.arch }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: name
                  operator: In
                  values:
                  - redis-data1
                  - redis-data3
              topologyKey: kubernetes.io/hostname
      volumes:
        - name: pa-cacerts
          secret:
            secretName: pa-cacerts          
        - name: pa-internal-tls-cert
          secret:
            secretName: pa-internal-tls-cert
        - name: redis-data2-storage
          persistentVolumeClaim:
            claimName: shared-storage
      initContainers:
        - name: redis2-reset
          image: {{ .Values.docker_registry_prefix }}/pa-k8s-config:1.0.40-ubi7
          command: ["/bin/bash"]
          args: ["-c", "/opt/harmony/start.sh redis"]
          env:
            - name: SERVICE
              value: redis2
          resources:
            limits:
              cpu: "100m"
              memory: "100M"
            requests:
              cpu: "100m"
              memory: "50M"
          securityContext:
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: redis-data2-storage
              mountPath: /data
              subPath: redis-data2              
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      containers:
        - name: redis2
          image: {{ .Values.docker_registry_prefix }}/pa-redis:1.0.122-ubi7
          ports:
            - containerPort: 6379
              protocol: TCP
          resources:
            limits:
              cpu: "{{ .Values.redis.cpuLimit }}"
              memory: "{{ .Values.redis.memoryLimit }}"
            requests:
              cpu: "{{ .Values.redis.cpuRequestLimit }}"
              memory: "{{ .Values.redis.memoryRequestLimit }}"
          env:
            - name: REDIS_TYPE
              value: "slave"
            - name: ANNOUNCE_IP
              value: "redis2"
            - name: ENABLE_SSL
              value: "false"
            - name: SSL_CERTIFICATE_KEY_FILE
              value: "/run/secrets/paw/internal-tls-cert/tls.key"
            - name: SSL_CERTIFICATE_CHAIN_FILE
              value: "/run/secrets/paw/internal-tls-cert/tls.crt"
            - name: SSL_CA_BUNDLE_FILE
              value: "/run/config/cacerts.pem"                         
          securityContext:
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: redis-data2-storage
              mountPath: /data
              subPath: redis-data2
            - name: pa-cacerts
              mountPath: /run/config              
            - name: pa-internal-tls-cert
              mountPath: /run/secrets/paw/internal-tls-cert
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 1
            initialDelaySeconds: 300
            tcpSocket:
              port: 6379
            periodSeconds: 2
          readinessProbe:
            failureThreshold: 1
            periodSeconds: 2
            tcpSocket:
              port: 6379
      hostNetwork: false
      hostIPC: false
      hostPID: false
      restartPolicy: Always
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      schedulerName: {{ .Values.persistence.podScheduler }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1

