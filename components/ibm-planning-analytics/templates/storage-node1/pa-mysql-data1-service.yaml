apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: {{ .Values.common.appName }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    name: mysql-data1{{ .Values.instanceIdWithinNamespace }}
    release: {{ .Release.Name }}
    paw_instance_name: {{ .Values.paw_instance_name }}
  name: mysql-data1{{ .Values.instanceIdWithinNamespace }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      name: mysql-data1{{ .Values.instanceIdWithinNamespace }}
  template:
    metadata:
      annotations:
        hook.activate.cpd.ibm.com/command: '[]'
        hook.deactivate.cpd.ibm.com/command: '[]'       
        cloudpakName: {{ .Values.cloudpakAnnotations.cloudpakName }}
        cloudpakId: {{ .Values.cloudpakAnnotations.cloudpakId }}
        productCloudpakRatio: {{ .Values.cloudpakAnnotations.productCloudpakRatio }}
        productName: {{ .Values.productName.PAWorkSpace }}
        productID:  {{ .Values.cloudpakAnnotations.productID }}
        productMetric: "VIRTUAL_PROCESSOR_CORE"
        productVersion: 3.5.2
        productChargedContainers: "All"
      labels:
        app.kubernetes.io/name: {{ .Values.common.appName }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        icpdsupport/addOnId: pa
        icpdsupport/app: "pa-workspace" 
        cloudpakInstanceId: "{{ .Values.zenCloudPakInstanceId }}"
        {{- include "planning-analytics.serviceid" . | indent 8 }}
        {{- if ( .Values.createdBy )  }}
        icpdsupport/createdBy: {{ .Values.createdBy | quote }}
        {{- end }} 
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        name: mysql-data1{{ .Values.instanceIdWithinNamespace }}
        release: {{ .Release.Name }}
        version: "1.0.107-ubi7"
        pa-cacerts-secret: {{ .Values.secrets.cacertVersion }}
        paw_instance_name: {{ .Values.paw_instance_name }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - {{ .Values.arch }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: name
                  operator: In
                  values:
                  - mysql-data2
              topologyKey: kubernetes.io/hostname
      volumes:
        - name: pa-cacerts
          secret:
            secretName: pa-cacerts{{ .Values.instanceIdWithinNamespace }}       
        - name: pa-internal-tls-cert
          secret:
            secretName: pa-internal-tls-cert{{ .Values.instanceIdWithinNamespace }}         
        - name: mysql-data1-storage
          persistentVolumeClaim:
            claimName: shared-storage{{ .Values.instanceIdWithinNamespace }}
        - name: pa-temp
          emptyDir:
            medium: "{{ .Values.mysqlCluster.emptyDirMedium }}"
            sizeLimit: "{{ .Values.mysqlCluster.emptyDirSizeLimit }}"
      containers:
        - name: wait-for-pods
          image: {{ .Values.docker_registry_prefix }}/pa-mysql-cluster:1.0.107-ubi7
          command: ["/bin/bash", "-c", "/tools/wait-for-pods.sh" ]
          ports:
            - containerPort: 31001
              protocol: TCP
          resources:
            limits:
              cpu: "{{ .Values.common.cpuLimit }}"
              memory: "{{ .Values.common.memoryLimit }}"
            requests:
              cpu: "{{ .Values.common.cpuRequestLimit }}"
              memory: "{{ .Values.common.memoryRequestLimit }}"
          env:
            - name: SERVICENAMES
              value: "mysql-data1{{ .Values.instanceIdWithinNamespace }}.{{ .Release.Namespace }}.{{ .Values.common.internalDomainName }} mysql-data2{{ .Values.instanceIdWithinNamespace }}.{{ .Release.Namespace }}.{{ .Values.common.internalDomainName }} mysql-mgmt{{ .Values.instanceIdWithinNamespace }}.{{ .Release.Namespace }}.{{ .Values.common.internalDomainName }}"
            - name: READINESS_PORT
              value: "31001"
          securityContext:
            runAsNonRoot: true
{{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }} 
            runAsUser: 2000
{{- end }} 
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: pa-temp
              mountPath: /run/readiness
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - date
            initialDelaySeconds: 0
            periodSeconds: 60
          readinessProbe:
            exec:
              command:
                - date
            initialDelaySeconds: 0
            periodSeconds: 60
        - name: mysql-data1-stunnel
          image: {{ .Values.docker_registry_prefix }}/pa-mysql-cluster:1.0.107-ubi7
          command: [ "/mysql-stunnel.sh", "mysql-data1" ]
          ports:
            - containerPort: 12201
              protocol: TCP
          resources:
            limits:
              cpu: "{{ .Values.mysqlDataStunnel.cpuLimit }}"
              memory: "{{ .Values.mysqlDataStunnel.memoryLimit }}"
            requests:
              cpu: "{{ .Values.mysqlDataStunnel.cpuRequestLimit }}"
              memory: "{{ .Values.mysqlDataStunnel.memoryRequestLimit }}"
          env:
            - name: MYSQL_INSTANCE
              value: "{{ .Values.instanceIdWithinNamespace }}"
            - name: MYSQL_DOMAIN
              value: "{{ .Release.Namespace }}.{{ .Values.common.internalDomainName }}"
          securityContext:
            runAsNonRoot: true
{{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }} 
            runAsUser: 2000
{{- end }} 
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: pa-cacerts
              mountPath: /run/config
            - name: pa-internal-tls-cert
              mountPath: /run/secrets/paw/internal-tls-cert
            - name: pa-temp
              mountPath: /run/readiness
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - date
            initialDelaySeconds: 0
            periodSeconds: 60
          readinessProbe:
            exec:
              command:
                - date
            initialDelaySeconds: 0
            periodSeconds: 60
        - name: mysql-data1
          image: {{ .Values.docker_registry_prefix }}/pa-mysql-cluster:1.0.107-ubi7
          command: ["/bin/bash", "-c", "while [ ! -f /run/readiness/stunnel.pid ]; do sleep 2; done; exec /paw-entrypoint.sh ndbd"]          
          ports:
            - containerPort: 2201
              protocol: TCP
          resources:
            limits:
              cpu: "{{ .Values.mysqlData.cpuLimit }}"
              memory: "{{ .Values.mysqlData.memoryLimit }}"
            requests:
              cpu: "{{ .Values.mysqlData.cpuRequestLimit }}"
              memory: "{{ .Values.mysqlData.memoryRequestLimit }}"
          env:
            - name: ENABLE_SSL
              value: "true"
          securityContext:
            runAsNonRoot: true
{{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }} 
            runAsUser: 2000
{{- end }} 
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
          volumeMounts:
            - name: mysql-data1-storage
              mountPath: /var/lib/mysql
              subPath: mysql-data1
            - name: pa-temp
              mountPath: /run/readiness              
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - date
            initialDelaySeconds: 30
            periodSeconds: 60
          readinessProbe:
            exec:
              command:
                - date
            initialDelaySeconds: 30
            periodSeconds: 60
      hostNetwork: false
      hostIPC: false
      hostPID: false
      restartPolicy: Always
      serviceAccountName: default
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      schedulerName: {{ .Values.persistence.podScheduler }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1

