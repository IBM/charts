{{- if not .Values.existingSecret }}
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ template "fullname" . }}-secret-config
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }} 
    app.kubernetes.io/name: {{ .Chart.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation
data:
  init.sh: |
    function generateRandomString() {
      length=${1}
      < /dev/urandom tr -dc A-Za-z0-9 | head -c${1:-${length}};echo;
    }
  
{{- if .Values.service.ssl }}
    # generate cert
    CERT_NAME={{ template "fullname" . }}-cert;    
    CERT_EXISTS=$(kubectl get secret $CERT_NAME -n $ICPD_CONTROLPLANE_NAMESPACE);
    rc=$?
    if [[ rc -eq 1 ]]
    then
            # Generate the cert secret
            echo "$CERT_NAME secret does not exist, creating...";
            # CA root
            openssl genrsa -out /certs/db2CA.key 2048;
            openssl req -x509 -new -nodes -key /certs/db2CA.key -sha256 -days 3650 -out /certs/db2CA.crt -subj "/C=US/ST=CA/O=IBM, Inc./CN=wdp-db2-ca";    
            openssl genrsa -out /certs/db2key.key 2048;    
            openssl req -new -sha256 -key /certs/db2key.key -subj "/C=US/ST=CA/O=IBM, Inc./CN=wdp-db2" -reqexts SAN -config <(cat /etc/pki/tls/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:wdp-db2")) -out /certs/db2cert.csr;      
            openssl x509 -req -in /certs/db2cert.csr -CA /certs/db2CA.crt -CAkey /certs/db2CA.key -CAcreateserial -out /certs/db2cert.crt -days 3650 -sha256;
            
            CAEnc=$(cat /certs/db2CA.crt | base64 | tr -d '\n');            
            kubectl create secret generic $CERT_NAME -n $ICPD_CONTROLPLANE_NAMESPACE --from-file=wdp-db2.crt=/certs/db2cert.crt --from-file=wdp-db2-ca.crt=/certs/db2CA.crt --from-literal=wdp-db2-ca-b64.crt="$CAEnc" --from-file=wdp-db2.key=/certs/db2key.key;
            kubectl label secret $CERT_NAME -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ template "fullname" . }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
    else
            echo "$CERT_NAME secret already exists";
    fi
{{- end }}
    
    # generate db2 credentials secret
    SEC_NAME={{ template "fullname" . }};    
    SEC_EXISTS=$(kubectl get secret $SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE);
    rc=$?
    if [[ rc -eq 1 ]]
    then
            # Generate the secret
            echo "$SEC_NAME secret does not exist, creating...";
            {{- if .Values.db2inst.password }}
            DB2_PW={{ .Values.db2inst.password | quote }}
            {{- else }}
            DB2_PW=$(generateRandomString 10);
            {{- end }}
                
            kubectl create secret generic $SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE --from-literal=password="$DB2_PW";
            kubectl label secret $SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ template "fullname" . }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};                       
    else
            echo "$SEC_NAME secret already exists";
    fi      

{{- end }}
