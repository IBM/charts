apiVersion: batch/v1
kind: Job
metadata:
  name: preinstall-wml-secret
  labels:
    app: preinstall-wml-secret
    chart: "{{ .Chart.Name }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    app.kubernetes.io/managed-by: {{.Release.Service | quote }}
    app.kubernetes.io/instance: {{.Release.Name | quote }}
    app.kubernetes.io/name: "{{ .Release.Name }}"
    helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation
    "helm.sh/hook-weight": "3"
spec:
  activeDeadlineSeconds: 300
  template:
    metadata:
      name: preinstall-wml-secret
      labels:
        app: preinstall-wml-secret
        chart: "{{ .Chart.Name }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
        app.kubernetes.io/managed-by: {{.Release.Service | quote }}
        app.kubernetes.io/instance: {{.Release.Name | quote }}
        app.kubernetes.io/name: "{{ .Release.Name }}"
        helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
      annotations:
        cloudpakName: IBM Cloud Pak for Data
        cloudpakId: eb9998dcc5d24e3eb5b6fb488f750fe2
        cloudpakVersion: 3.0.1
        productName: IBM Watson Machine Learning for IBM Cloud Pak for Data
        productID: ICP4D-Watson-Machine-Learning-3-0-1
        productVersion: 3.0.1
        productMetric: VIRTUAL_PROCESSOR_CORE
        productChargedContainers: All
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                  - ppc64le
      serviceAccount: {{ .Values.global.editor.sa }}
      serviceAccountName: {{ .Values.global.editor.sa }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      restartPolicy: Never
      containers:
        - name: "wml-kubectl"
          image: "{{ .Values.global.docker_registry_prefix }}/{{ .Values.wmlPreinstall.image.repository }}:{{ .Values.wmlPreinstall.image.tag }}"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsUser: {{ .Values.global.user.id }}
          resources:
            limits:
              cpu: "0.5"
              memory: "256Mi"
            requests:
              cpu: "0.5"
              memory: "256Mi"
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: {{ .Values.global.user.id }}
            capabilities:
              drop:
              - ALL
          command:
          - "/bin/bash"
          - -c
          - |
            # Dynamic generation of SSL key and certificate
            key_trust=`cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 | tr -d '\n'`

            openssl req -newkey rsa:2048 -x509 -keyout cakey.pem -out cacert.pem -days 365000 -subj "/C=US/ST=California/L=San Jose/O=IBM/OU=Watson" -passin pass:$key_trust -passout pass:$key_trust

            openssl pkcs12 -export -in cacert.pem -inkey cakey.pem -out keystore.p12 -name "wmlcp4dkey" -passin pass:$key_trust -passout pass:$key_trust

            openssl rsa -in cakey.pem -out cakey_decrypted.pem -passin pass:$key_trust -passout pass:$key_trust

            openssl x509 -in cacert.pem -inform pem -outform der -out carootcert.der

            keytool -importkeystore -destkeystore keystore.jks -deststorepass $key_trust -srckeystore keystore.p12 -srcstoretype PKCS12 -srcstorepass $key_trust
            keytool -import -file cacert.pem -keystore trust-store.jks -storepass $key_trust -noprompt

            cert_key=`cat cakey_decrypted.pem | base64 | tr -d '\n'`
            key_trust_pass=`echo -n $key_trust  | base64 | tr -d '\n'`

            #creating a configmap for keystore
            kubectl create configmap wmlsslcertsconfigmap --from-file=cakey.pem,cacert.pem,keystore.p12,cakey_decrypted.pem,carootcert.der,keystore.jks,trust-store.jks
            cat <<EOF | kubectl apply -f -
            apiVersion: v1
            kind: Secret
            metadata:
              name: "etcd-secret"
              labels:
                app: wml-etcd
                chart: "{{ .Chart.Name }}"
                release: "{{ .Release.Name }}"
                heritage: "{{ .Release.Service }}"
            type: Opaque
            data:
              etcd_cluster: aHR0cDovL3dtbC1ldGNkOjIzNzk=
              etcd_password: `cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 | tr -d '\n' | base64 | tr -d '\n'`
              etcd_username: cm9vdA==
            EOF
            cat <<EOF1 | kubectl apply -f -
            apiVersion: v1
            kind: Secret
            metadata:
              name: "wml-scoring-svc-secret"
              labels:
                app: wml-scoring-svc-secret
                chart: "{{ .Chart.Name }}"
                release: "{{ .Release.Name }}"
                heritage: "{{ .Release.Service }}"
            type: Opaque
            data:
              WML_SCORING_SVC_RM_ADMIN_SECRET: `cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 | tr -d '\n' | base64 | tr -d '\n'`
            EOF1
            cat <<EOF2 | kubectl apply -f -
            apiVersion: v1
            data:
              keystore_password: ${key_trust_pass}
              server_key: ${cert_key}
              truststore_password: ${key_trust_pass}
            kind: Secret
            metadata:
              name: ssl-secret
              labels:
                app: ssl-secret
                chart: "{{ .Chart.Name }}"
                release: "{{ .Release.Name }}"
                heritage: "{{ .Release.Service }}"
            type: Opaque
            EOF2
            cat <<EOF4 | kubectl apply -f -
            apiVersion: v1
            data:
              glusterfs_path: L3dtbC1hc3NldHMv
              ssl_password_icp: ${key_trust_pass}
              ssl_path_icp: L29wdC9pYm0vcmVwb3NpdG9yeS9rZXlzL2tleXN0b3JlLmprcw==
              training_data_path: L3dtbC10cmFpbmluZy1kYXRh
              predefined_runtime: OHdaaWRnU0IxNA==
            kind: Secret
            metadata:
              name: repo-secrets
              labels:
                app: wmlrepository
                chart: "{{ .Chart.Name }}"
                release: "{{ .Release.Name }}"
                heritage: "{{ .Release.Service }}"
            type: Opaque
            EOF4
            cat <<EOF5 | kubectl apply -f -
            apiVersion: v1
            data:
              key_store_password : ${key_trust_pass}
            kind: Secret
            metadata:
              name: training-secrets
              labels:
                app: mltraining4icp
                chart: "{{ .Chart.Name }}"
                release: "{{ .Release.Name }}"
                heritage: "{{ .Release.Service }}"
            type: Opaque
            EOF5