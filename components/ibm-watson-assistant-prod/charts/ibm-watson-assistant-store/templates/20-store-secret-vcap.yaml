
{{- define "store.vcap.secret" -}}apiVersion: v1
kind: Secret
metadata:
  name: "{{ .Release.Name }}-store-vcap"
  labels:
    <<: &primary_labels # Don't touch or extend these labels!
      service:                     "conversation"
      component:                   "store"
      slot:                        "{{ .Release.Name }}"
    # Make sure the indent of other labels is the same as this comment's
    tenant:                        "PUBLIC"
    release:                       "{{ .Release.Name }}"
    app.kubernetes.io/instance:    "{{ .Release.Name }}"
    app.kubernetes.io/managed-by:  "{{ .Release.Service }}"
    app.kubernetes.io/name:        "ibm-watson-assistant"
    helm.sh/chart:                 "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    icpdsupport/addOnName:         "assistant"
    icpdsupport/app:               "store"
    icpdsupport/serviceInstanceId: "{{ .Values.global.zenServiceInstanceId | int64 }}"
type: Opaque
data: 
  vcap_services: "$(echo '{}' | jq -c '
      .["user-provided"][0] |= {
          "name":  "pgservice",
          "label": "user-provided",
          "credentials": {
              "host":      env.PGHOST,
              "port":     (env.PGPORT | tonumber),
              "database":  env.PGDATABASE,
              "username":  env.PGUSER,
              "password":  env.PGPASSWORD
          }
      }' | tr -d '\n' | base64 | tr -d '\n' )"
  ssl_mode:      "$( echo "${PGSSLMODE}"     | tr -d '\n' | base64 | tr -d '\n' )"
  password:      "$( echo "${PGPASSWORD}"    | tr -d '\n' | base64 | tr -d '\n' )"
  tls.crt:       "$( cat  "${PGSSLROOTCERT}"              | base64 | tr -d '\n' )"
{{- end -}} 
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-store-vcap-gen-job"
  labels:  &labels
    <<: &primary_labels # Don't touch or extend these labels!
      service:                     "conversation"
      component:                   "store-vcap-gen-job"
      slot:                        "{{ .Release.Name }}"
    # Make sure the indent of other labels is the same as this comment's
    tenant:                        "PUBLIC"
    release:                       "{{ .Release.Name }}"
    app.kubernetes.io/instance:    "{{ .Release.Name }}"
    app.kubernetes.io/managed-by:  "{{ .Release.Service }}"
    app.kubernetes.io/name:        "ibm-watson-assistant"
    helm.sh/chart:                 "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    icpdsupport/addOnName:         "assistant"
    icpdsupport/app:               "store-vcap-gen-job"
    icpdsupport/serviceInstanceId: "{{ .Values.global.zenServiceInstanceId | int64 }}"
spec:
  backoffLimit: 10
  template:
    metadata:
      name: cred-gen
      annotations:

        productName:              "IBM Watson Assistant for IBM Cloud Pak for Data"
        productID:                "ICP4D-addon-fa92c14a5cd74c31aab1616889cbe97a-assistant"
        productVersion:           "1.4.2"
        cloudpakName:             "IBM Cloud Pak for Data"
        cloudpakId:               "eb9998dcc5d24e3eb5b6fb488f750fe2"
        cloudpakVersion:          "3.0.0"
        productChargedContainers: "All"
        productMetric:            "VIRTUAL_PROCESSOR_CORE"
      labels: 
        <<: *labels
    spec:
      serviceAccountName: {{ (printf "%s-credentials" .Release.Name) | quote }}
      #imagePullSecrets:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: beta.kubernetes.io/arch
                  operator: In
                  values: [ "amd64" ]
        {{- if .Values.global.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions }}
          {{- printf "\n%s" ( .Values.global.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions | toYaml | indent 16 ) }}
        {{- end }}
      hostIPC: false
      hostNetwork: false
      hostPID: false

      containers:
      - name: cred-gen
        image: "{{ if tpl ( .Values.creds.image.repository | toString ) . }}{{ trimSuffix "/" (tpl (.Values.creds.image.repository | toString ) . ) }}{{ end }}/{{ .Values.creds.image.name }}:{{ .Values.creds.image.tag }}"
        imagePullPolicy: {{ .Values.creds.image.pullPolicy | quote }}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
          {{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
          runAsUser: 2000
          {{- end }}
        env:
        - name: "PGHOST"
          value: "{{ include "assistant.postgres.hostname"       . }}"
        - name: "PGPORT"
          value: "{{ include "assistant.postgres.port"           . }}"
        - name: "PGDATABASE"
          value: "{{ include "assistant.postgres.store.database" . }}"
        - name: "PGUSER"
          value: "{{ include "assistant.postgres.store.user"     . }}"
        - name: "PGPASSWORD"
          valueFrom:
            secretKeyRef:
              name: "{{ include "assistant.postgres_store.secretName" . }}"
              key:  "password"
        - name: "PGSSLMODE"
          value: "{{ .Values.global.postgres.sslMode               }}"
        - name: "PGSSLROOTCERT"
          value: "/etc/secrets/postgres/tls.crt"
        volumeMounts:
          - name: postgres
            mountPath: "/etc/secrets/postgres/"
        command:
        - "/bin/sh"
        - -c
        - |
          set -e
          echo ""
          cat <<EOF | kubectl apply -n {{ .Release.Namespace }} -f -
          ---
{{ include "store.vcap.secret" . | indent 10 }}
          EOF
        resources:
{{ .Values.creds.resources | toYaml | indent 10 }}
      volumes:
        - name: postgres
          secret:
            secretName: "{{ include "assistant.postgres.secret_name" . }}"
      restartPolicy: Never