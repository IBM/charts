
{{- define "store.ssl.secret" -}}apiVersion: v1
kind: Secret
metadata:
  name: "{{ .Release.Name }}-store-ssl"
  labels:
    <<: &primary_labels # Don't touch or extend these labels!
      service:                     "conversation"
      component:                   "store"
      slot:                        "{{ .Release.Name }}"
    # Make sure the indent of other labels is the same as this comment's
    tenant:                        "PUBLIC"
    release:                       "{{ .Release.Name }}"
    app.kubernetes.io/instance:    "{{ .Release.Name }}"
    app.kubernetes.io/managed-by:  "{{ .Release.Service }}"
    app.kubernetes.io/name:        "ibm-watson-assistant"
    helm.sh/chart:                 "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    icpdsupport/addOnName:         "assistant"
    icpdsupport/app:               "store"
    icpdsupport/serviceInstanceId: "{{ .Values.global.zenServiceInstanceId | int64 }}"
type: Opaque
data:
  {{- if tpl ( .Values.ssl.secretName | toString ) . }}
  # Certificate used by the store microservice is provided by user in a custom secret --> copy the values
  ssl_key:                   "$(cat /etc/store/cert/ssl_key                             | base64 | tr -d '\n')"
  ssl_cert:                  "$(cat /etc/store/cert/ssl_cert                            | base64 | tr -d '\n')"
  {{- else }}
  # Using dynamically generated self-signed cert
  ssl_key:                   "$(cat ca.key                                               | base64 | tr -d '\n')"
  ssl_cert:                  "$(cat ca.crt                                               | base64 | tr -d '\n')"
  {{- end }}
  
  dialog_litelinks_ssl_cert: "$(cat "/etc/litelinks/certs/dialog_litelinks_ssl_cert.pem" | base64 | tr -d '\n' )"
  nlu_litelinks_ssl_cert:    "$(cat "/etc/litelinks/certs/nlu_litelinks_ssl_cert.pem"    | base64 | tr -d '\n' )"
{{- end -}} 
  
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-store-ssl-gen-job"
  labels:  &labels
    <<: &primary_labels # Don't touch or extend these labels!
      service:                     "conversation"
      component:                   "store-ssl-gen-job"
      slot:                        "{{ .Release.Name }}"
    # Make sure the indent of other labels is the same as this comment's
    tenant:                        "PUBLIC"
    release:                       "{{ .Release.Name }}"
    app.kubernetes.io/instance:    "{{ .Release.Name }}"
    app.kubernetes.io/managed-by:  "{{ .Release.Service }}"
    app.kubernetes.io/name:        "ibm-watson-assistant"
    helm.sh/chart:                 "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    icpdsupport/addOnName:         "assistant"
    icpdsupport/app:               "store-ssl-gen-job"
    icpdsupport/serviceInstanceId: "{{ .Values.global.zenServiceInstanceId | int64 }}"
spec:
  backoffLimit: 10
  template:
    metadata:
      name: ssl-gen
      annotations:

        productName:              "IBM Watson Assistant for IBM Cloud Pak for Data"
        productID:                "ICP4D-addon-fa92c14a5cd74c31aab1616889cbe97a-assistant"
        productVersion:           "1.4.2"
        cloudpakName:             "IBM Cloud Pak for Data"
        cloudpakId:               "eb9998dcc5d24e3eb5b6fb488f750fe2"
        cloudpakVersion:          "3.0.0"
        productChargedContainers: "All"
        productMetric:            "VIRTUAL_PROCESSOR_CORE"
      labels:
        <<: *labels
    spec:
      serviceAccountName: {{ (printf "%s-credentials" .Release.Name) | quote }}
      #imagePullSecrets:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: beta.kubernetes.io/arch
                  operator: In
                  values: [ "amd64" ]
        {{- if .Values.global.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions }}
          {{- printf "\n%s" ( .Values.global.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions | toYaml | indent 16 ) }}
        {{- end }}
      hostIPC: false
      hostNetwork: false
      hostPID: false

      containers:
      - name: ssl-gen
        image: "{{ if tpl ( .Values.ssl.image.repository | toString ) . }}{{ trimSuffix "/" (tpl (.Values.ssl.image.repository | toString ) . ) }}{{ end }}/{{ .Values.ssl.image.name }}:{{ .Values.ssl.image.tag }}"
        imagePullPolicy: {{ .Values.ssl.image.pullPolicy | quote }}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
          {{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
          runAsUser: 2000
          {{- end }}
        command:
        - "/bin/sh"
        - -c
        - |
          set -ex
          openssl genrsa -out ca.key 2048
          {{- $altName1 := printf "%s.%s.svc.%s" (include "store.service_name" . ) .Release.Namespace ( tpl .Values.clusterDomain . ) }}
          {{- $altName2 := printf "%s.%s"        (include "store.service_name" . ) .Release.Namespace                                 }}
          {{- $altName3 := printf "%s"           (include "store.service_name" . )                                                    }}
          cp /etc/ssl/openssl.cnf /tmp/openssl.cnf
          echo $'\n[SAN]\nsubjectAltName=DNS:{{ $altName1 }},DNS: {{ $altName2 }},DNS:{{ $altName3 }}' >>/tmp/openssl.cnf
          openssl req -x509 -new -nodes -key ca.key -subj "/CN={{ .Release.Name }}" -days 3650 -reqexts v3_req -extensions SAN -config /tmp/openssl.cnf -out ca.crt

          cat <<EOF | kubectl apply -n {{ .Release.Namespace }} -f -
          ---
{{ include "store.ssl.secret" . | indent 10 }}
          EOF
        resources:
{{ .Values.ssl.resources | toYaml | indent 10 }}
        volumeMounts:
        - name: "work-dir"
          mountPath: /tmp
        - name: "dialog-litelinks-ssl-cert"
          mountPath: "/etc/litelinks/certs/dialog_litelinks_ssl_cert.pem"
          subPath: litelinks_ssl_cert.pem
          readOnly: true
        - name: "nlu-litelinks-ssl-cert"
          mountPath: "/etc/litelinks/certs/nlu_litelinks_ssl_cert.pem"
          subPath: nlu_certificate
          readOnly: true
  {{- if tpl  ( .Values.ssl.secretName | toString ) . }}
        - name: "store-ssl-cert-key"
          mountPath: "/etc/store/cert/"
          readOnly: true
  {{- end }}
      volumes:
        - name: "work-dir"
          emptyDir: {}
        - name: "nlu-litelinks-ssl-cert"
          secret:
            secretName: "{{ .Release.Name }}-clu-config-secret"
        - name: "dialog-litelinks-ssl-cert"
          secret:
            secretName: "{{ .Release.Name }}-dialog-litelinks-ssl"
  {{- if tpl  ( .Values.ssl.secretName | toString ) . }}
        - name: "store-ssl-cert-key"
          secret:
            secretName: "{{ .Release.Name }}-dialog-litelinks-ssl"
  {{- end }}
      restartPolicy: Never
