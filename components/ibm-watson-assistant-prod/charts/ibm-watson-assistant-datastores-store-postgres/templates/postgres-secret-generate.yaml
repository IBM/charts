###############################################################################
# Licensed Materials - Property of IBM.
# Copyright IBM Corporation 2018. All Rights Reserved.
# U.S. Government Users Restricted Rights - Use, duplication or disclosure 
# restricted by GSA ADP Schedule Contract with IBM Corp.
#
# Contributors:
#  IBM Corporation - initial API and implementation
###############################################################################
{{- include "sch.config.init" (list . .Values.global.schConfigTemplate) }}
{{- define "assistant.postgres.authsecret" -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "assistant.postgres.secret_name" . | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 4 }}
data:
  {{- if .Values.global.postgres.auth.authSecretName }}
  pg_su_password:   $(echo "${POSTGRES_ADMIN_PASSWORD}"              | tr -d '\n' | base64 | tr -d '\n')
  {{- else }}
  pg_su_password:   $(openssl rand -base64  20          | tr '/' '-' | tr -d '\n' | base64 | tr -d '\n')
  {{- end }}
  pg_repl_password: $(openssl rand -base64 20           | tr '/' '-' | tr -d '\n' | base64 | tr -d '\n')
  
  {{- if .Values.global.postgres.sslSecretName }}
  # Provided certificate
    {{- if .Values.global.postgres.create }}
  tls.key: "$(cat /etc/secrets/postgres/tls.key | base64 | tr -d '\n')"
    {{- end }}
  tls.crt: "$(cat /etc/secrets/postgres/tls.crt | base64 | tr -d '\n')"
  {{- else }}
  # Generated certificate
  tls.crt: "$(cat ca.crt | base64 | tr -d '\n')"
  tls.key: "$(cat ca.key | base64 | tr -d '\n')"
  {{- end }}
{{- end }}

{{- $pgServiceName :=  include "assistant.postgres.hostname" . }}
{{- $_ := set . "pgServiceName" $pgServiceName }}
{{- define "assistant.postgres.ssl_cert_config" -}}
  {{- $pgServiceName := .pgServiceName -}}
[ req ]
default_bits       = 2048
distinguished_name = req_distinguished_name
x509_extensions    = usr_cert

[ req_distinguished_name ]

[ usr_cert ]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer

# Extensions to add to a certificate request
basicConstraints = CA:FALSE
#keyUsage         = critical,digitalSignature,keyEncipherment,keyAgreement,nonRepudiation
#extendedKeyUsage = critical,serverAuth

subjectAltName = @alt_names

[alt_names]
DNS.1   = {{ $pgServiceName }}.{{ .Release.Namespace }}.svc.{{ tpl .Values.clusterDomain . }}
DNS.2   = {{ $pgServiceName }}.{{ .Release.Namespace }}
DNS.3   = {{ $pgServiceName }}
DNS.4   = {{ include "assistant.postgres.hostname" . }}

{{- end }}

apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-gen-secret-postgres"
  labels:  &labels
{{ include "sch.metadata.labels.standard" (list . "" (dict "icpdsupport/addOnName" .Values.global.addOnName "icpdsupport/app" "helm-postgres-generate-password-secret" "icpdsupport/serviceInstanceId" (.Values.global.zenServiceInstanceId | int64))) | indent 4 }}
    component: "helm-postgres-generate-password-secret"
spec:
  backoffLimit: 10
  template:
    metadata:
      name: cred-gen
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering "" "" "") | indent 8 }}
      labels: 
        <<: *labels
    spec:
      serviceAccountName: {{ (printf "%s-credentials" .Release.Name) | quote }}
      #imagePullSecrets:
      hostIPC: false
      hostNetwork: false
      hostPID: false

      containers:
      - name: cred-gen
        image: "{{ if tpl ( .Values.creds.image.repository | toString ) . }}{{ trimSuffix "/" (tpl (.Values.creds.image.repository | toString ) . ) }}{{ end }}/{{ .Values.creds.image.name }}:{{ .Values.creds.image.tag }}"
        imagePullPolicy: {{ .Values.creds.image.pullPolicy | quote }}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
          {{- if not ( .Capabilities.APIVersions.Has "security.openshift.io/v1" ) }}
          runAsUser: 2000
          {{- end }}

{{- if .Values.global.postgres.auth.authSecretName }}
        env:
          - name: "POSTGRES_ADMIN_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.postgres.auth.authSecretName | quote }}
                key: password
{{- end }}
        command:
        - "/bin/sh"
        - -c
        - |
          set -e
          openssl genrsa -out ca.key 2048
          cat >/tmp/openssl.cnf <<EOF
{{ include "assistant.postgres.ssl_cert_config" . | indent 10 }}
          EOF
          
          openssl req -x509 -new -nodes -days 3560 -key ca.key -subj "/CN={{ $pgServiceName }}" -config /tmp/openssl.cnf -out ca.crt 
          echo "Dumping the certificate:"
          openssl x509 -in ca.crt -text -noout
          cat <<EOF | kubectl apply -n {{ .Release.Namespace }} -f -
          ---
{{ include "assistant.postgres.authsecret" . | indent 10 }}
          EOF
        resources:
{{ .Values.creds.resources | toYaml | indent 10 }}
{{- if .Values.global.postgres.sslSecretName }}
        volumeMounts:
        - name: postgres-ssl
          mountPath: "/etc/secrets/postgres"
      volumes:
        - name: postgres-ssl
          secret:
            secretName: "{{ .Values.global.postgres.sslSecretName }}"
{{- end }}
      restartPolicy: Never
      affinity:
{{ include "assistant.nodeAffinities" . | indent 8 }}
