{{- if include "ibm-postgresql.licenseValidate" .  | required "License must be accepted by setting license key to true" }}
{{- include "sch.config.init" (list . "ibmPostgres.sch.chart.config.values") -}}
{{ if .Release.IsInstall }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.createCluster) | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.createCluster (dict "icpdsupport/addOnName" .Values.global.addOnName "icpdsupport/app" .sch.chart.components.createCluster "icpdsupport/serviceInstanceId" (.Values.global.zenServiceInstanceId | int64))) | indent 4 }}
spec:
  template:
    metadata:
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering "" "" "") | indent 8 }}
      labels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.createCluster (dict "icpdsupport/addOnName" .Values.global.addOnName "icpdsupport/app" .sch.chart.components.createCluster "icpdsupport/serviceInstanceId" (.Values.global.zenServiceInstanceId | int64))) | indent 8 }}
    spec:
      serviceAccountName: {{ include "stolon.serviceAccountName" . | quote }}
      restartPolicy: Never
      affinity:
{{ include "ibm-postgresql.affinity" (list . .Values.createCluster.affinity (dict "kind" "Job" "component" "createCluster")) | indent 8 }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.postgresPodSecurityContext) | indent 8 }}
{{- if tpl .Values.global.image.pullSecret . }}
      imagePullSecrets:
      - name: {{ tpl .Values.global.image.pullSecret . | quote }}
{{- end }}
      containers:
      - name: create-cluster
        image: {{ if tpl (.Values.global.dockerRegistryPrefix  | toString ) .  }}{{ trimSuffix "/" (tpl (.Values.global.dockerRegistryPrefix  | toString) . ) }}/{{ end }}{{ tpl (.Values.postgres.image.name | toString ) . }}:{{ .Values.postgres.image.tag }}
        imagePullPolicy: {{ .Values.global.image.pullPolicy }}
        securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.postgresContainerSecurityContext) | indent 10 }}
        resources:
{{ toYaml .Values.createCluster.resources | indent 10 }}
        command: ["/usr/local/bin/stolonctl"]
        args:
          - init
          - --cluster-name={{ template "stolon.clusterName" . }}
          - --store-backend={{ .Values.store.backend }}
    {{- if eq .Values.store.backend "kubernetes" }}
          - --kube-resource-kind={{ default "configmap" .Values.store.kubeResourceKind }}
    {{- else }}
          - --store-endpoints={{ .Values.store.endpoints }}
    {{- end }}
          - --yes
    {{- if include "ibm-postgresql.boolConvertor" (list .Values.tls.enabled . ) }}
          - '{  "initMode": "new", "pgParameters": { "max_connections" :  "{{ .Values.maxConnections }}", "ssl": "on", "ssl_cert_file": "/etc/secrets/ssl_copy/tls.crt", "ssl_key_file": "/etc/secrets/ssl_copy/tls.key"{{ if .Values.slowQueries.enabled }}, "log_min_duration_statement" :  "{{ .Values.slowQueries.minDuration }}" {{ end }} } }'
    {{- else if .Values.slowQueries.enabled }}
          - '{  "initMode": "new", "pgParameters": { "max_connections" :  "{{ .Values.maxConnections }}", "log_min_duration_statement" :  {{ .Values.slowQueries.minDuration }} } }'
    {{- else }}
          - '{  "initMode": "new", "pgParameters": { "max_connections" :  "{{ .Values.maxConnections }}" } }'
    {{- end }}
{{ end }}
{{ end }}
