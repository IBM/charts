{{- if include "ibm-postgresql.licenseValidate" .  | required "License must be accepted by setting license key to true" }}
{{- include "sch.config.init" (list . "ibmPostgres.sch.chart.config.values") -}}
apiVersion: v1
kind: Pod
metadata:
  name:  {{ include "sch.names.statefulSetName" (list . .sch.chart.components.masterTest) | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.masterTest (dict "icpdsupport/addOnName" .Values.global.addOnName "icpdsupport/app" .sch.chart.components.masterTest "icpdsupport/serviceInstanceId" (.Values.global.zenServiceInstanceId | int64))) | indent 4 }}
  annotations:
    "helm.sh/hook": test-success
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering "" "" "") | indent 4 }}
spec:
  affinity:
{{ include "ibm-postgresql.affinity" (list . .Values.test.affinity (dict "kind" "Pod" "component" "masterTest")) | indent 4 }}
  hostNetwork: false
  hostPID: false
  hostIPC: false
  securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.postgresPodSecurityContext) | indent 4 }}
  restartPolicy: Never
{{- if tpl .Values.global.image.pullSecret . }}
  imagePullSecrets:
  - name: {{ tpl .Values.global.image.pullSecret . | quote }}
{{- end }}
  serviceAccountName: {{ include "stolon.serviceAccountName" . | quote }}
  containers:
  - name: master-test
    image: {{ if tpl (.Values.global.dockerRegistryPrefix | toString ) .  }}{{ trimSuffix "/" (tpl (.Values.global.dockerRegistryPrefix | toString) . ) }}/{{ end }}{{ tpl (.Values.postgres.image.name | toString ) . }}:{{ .Values.postgres.image.tag }}
    imagePullPolicy: {{ .Values.global.image.pullPolicy }}
    securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.postgresContainerSecurityContext) | indent 8 }}
    resources:
      requests:
        memory: 128Mi
        cpu: 10m
      limits:
        memory: 128Mi
        cpu: 50m
    command:
      - "psql"
      - "-c"
      - "select * from pg_catalog.pg_tables;"
    env:
    - name: PGHOST
      value: {{ include "sch.names.fullCompName" (list . .sch.chart.components.proxyService) | quote }}
    - name: PGUSER
      value: {{tpl .Values.auth.pgSuperuserName . | quote }}
    - name: PGDATABASE
      value: "postgres"
    - name: PGPASSWORD
      valueFrom:
        secretKeyRef:
          {{- if not (tpl .Values.auth.authSecretName . ) }}
          name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.authSecret) | quote }}
          {{- else }}
          name: {{ tpl .Values.auth.authSecretName . }}
          {{- end }}
          key: pg_su_password
{{ end }}
