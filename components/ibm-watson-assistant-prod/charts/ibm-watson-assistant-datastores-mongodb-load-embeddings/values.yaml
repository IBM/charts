global:
  languages:
    # synonym-recommendations supported languages
    english: true
    spanish: false
    french: false
    japanese: false
  image:
    repository: ""

loader:
  image:
    repository:     "{{ tpl .Values.global.image.repository . }}"
    name:           "improve-recommendations-mongo-ubi"
    tag:            "3.6-20200419104929"
    pullPolicy:     "IfNotPresent"

  # Applies to main as well as all init containers
  resources:
    requests:
      memory: "2Gi"
      cpu: "1"
    limits:
      memory: "6Gi"
      cpu: "2"
dataEmbeddings:
  en:
    counts:
      image:
        repository: "{{ tpl .Values.global.image.repository . }}"
        name:       "improve-recommendations-data-embeddings-ubi.en.counts"
        tag:        "1.4.2-20200420130802"
        pullPolicy: "IfNotPresent"
    precomputed:
      image:
        repository: "{{ tpl .Values.global.image.repository . }}"
        name:       "improve-recommendations-data-embeddings-ubi.en.precomputed"
        tag:        "1.4.2-20200420130802"
        pullPolicy: "IfNotPresent"
    wordEmbeddings:
      image:
        repository: "{{ tpl .Values.global.image.repository . }}"
        name:       "improve-recommendations-data-embeddings-ubi.en.word_embeddings"
        tag:        "1.4.2-20200420130802"
        pullPolicy: "IfNotPresent"
  es:
    image:
      repository: "{{ tpl .Values.global.image.repository . }}"
      name:       "improve-recommendations-data-embeddings-ubi.es"
      tag:        "1.4.2-20200420130802"
      pullPolicy: "IfNotPresent"
  fr:
    image:
      repository: "{{ tpl .Values.global.image.repository . }}"
      name:       "improve-recommendations-data-embeddings-ubi.fr"
      tag:        "1.4.2-20200420130802"
      pullPolicy: "IfNotPresent"
  ja:
    image:
      repository: "{{ tpl .Values.global.image.repository . }}"
      name:       "improve-recommendations-data-embeddings-ubi.ja"
      tag:        "1.4.2-20200420130802"
      pullPolicy: "IfNotPresent"

# global persistence settings
persistence:
  # persistence.enabled - Enable persistence using Persistent Volume Claims, otherwise the empty-dir is used.
  enabled: false
  
  # useDynamicProvisioning - if enabled the dataPVC.storageClassName volumes will be dynamicaly created (if the storage class can be created automatically).
  #  If disabled either dataPVC.selector.label should be specify and then the PVC will bound to precreated PV based on labels or dataPVC.storageClassName should be empty and then cluster admin has to bound the PVC to existing PV manually
  useDynamicProvisioning: true

dataPVC:
  name: "recommends-data-pvc"
  
  # specify the storageClassName you want to use if you don't specify a storageClassName it will use the default
  storageClassName: "local-storage"

  # Specify the name of the Existing Claim to be used by your application empty string means don't use an existClaim
  existingClaimName: ""
  
  # if your not using dynamic provisioning, you can use selectors to refine the binding process. You cannot specify a selector if your using dynamic provisioning!
  selector:
    label: ""
    value: ""

  size: 50Gi
  accessMode: ReadWriteOnce
