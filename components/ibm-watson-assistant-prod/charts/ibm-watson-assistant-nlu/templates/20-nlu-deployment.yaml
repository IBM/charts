{{- include "sch.config.init" (list . .Values.global.schConfigTemplate) -}}apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-nlu"
  labels: &deployment_labels
    <<: &primary_labels # Don't touch or extend these labels!
      service:                     "conversation"
      component:                   "nlu"
      slot:                        "{{ .Release.Name }}"
    # Make sure the indent of other labels is the same as this comment's
    tenant:                        "PUBLIC"
    release:                       "{{ .Release.Name }}"
    app.kubernetes.io/instance:    "{{ .Release.Name }}"
    app.kubernetes.io/managed-by:  "{{ .Release.Service }}"
    app.kubernetes.io/name:        "ibm-watson-assistant"
    helm.sh/chart:                 "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    icpdsupport/addOnName:         "assistant"
    icpdsupport/app:               "nlu"
    icpdsupport/serviceInstanceId: "{{ .Values.global.zenServiceInstanceId | int64 }}"
spec:
  replicas: {{ include "assistant.nlu.replicas" . }}
  selector:
    matchLabels: *primary_labels # Don't touch or extend!
  strategy:
    rollingUpdate:
      # Ensure that a Deployment with a single instance is never
      # unavailable during an upgrade.  This forces each new pod to
      # become ready before an old one is stopped.
      maxUnavailable: 0
  
  revisionHistoryLimit: 4
  template:
    metadata:
      annotations:

        productName:              "IBM Watson Assistant for IBM Cloud Pak for Data"
        productID:                "ICP4D-addon-fa92c14a5cd74c31aab1616889cbe97a-assistant"
        productVersion:           "1.4.2"
        cloudpakName:             "IBM Cloud Pak for Data"
        cloudpakId:               "eb9998dcc5d24e3eb5b6fb488f750fe2"
        cloudpakVersion:          "3.0.0"
        productChargedContainers: "All"
        productMetric:            "VIRTUAL_PROCESSOR_CORE"
      labels:
        <<: *deployment_labels
        # Any pod-specific labels go below
    spec:
      {{- if tpl .Values.imagePullSecret . }}
      imagePullSecrets:
        - name: {{ tpl .Values.global.image.pullSecret . | quote }}
      {{- end }}

      hostIPC: false
      hostNetwork: false
      hostPID: false

      initContainers:
        - name: etcd-running
          image: "{{ if tpl ( .Values.init.etcd.image.repository | toString ) . }}{{ trimSuffix "/" (tpl (.Values.init.etcd.image.repository | toString ) . ) }}{{ end }}/{{ .Values.init.etcd.image.name }}:{{ .Values.init.etcd.image.tag }}"
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
            {{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
            runAsUser: 2000
            {{- end }}
          imagePullPolicy: {{ .Values.init.etcd.image.pullPolicy | quote }}
          command: [ "/scripts/etcd_running.sh" ]
          env:
            - name:  "LL_FULL_SERVICE_NAME"
              value: "voyager-nlu/voyager-nlu-slot-{{ .Release.Name }}"
          resources:
            {{ .Values.init.etcd.resources | toYaml | indent 12 | trim }}
          volumeMounts:
            - name: "init-scripts"
              mountPath: /scripts
            - name: global-etcd
              mountPath: "/etc/secrets/etcd"
              readOnly: true
        - name: cos-running-check
          image: "{{ if tpl ( .Values.init.cosRunning.image.repository | toString ) . }}{{ trimSuffix "/" (tpl (.Values.init.cosRunning.image.repository | toString ) . ) }}{{ end }}/{{ .Values.init.cosRunning.image.name }}:{{ .Values.init.cosRunning.image.tag }}"
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
            {{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
            runAsUser: 2000
            {{- end }}
          imagePullPolicy: {{ .Values.init.cosRunning.image.pullPolicy | quote }}
          command: [ "/scripts/cos_ready.sh" ]
          env:
            - name:  "NLU_SERVICE_NAME"
              value: "voyager-nlu-slot-{{ .Release.Name }}"
          resources:
            {{ .Values.init.cosRunning.resources | toYaml | indent 12 | trim }}
          volumeMounts:
            - name: "init-scripts"
              mountPath: /scripts
            - name: global-etcd
              mountPath: "/etc/secrets/etcd"
              readOnly: true
            - name: "cos-certificate"
              mountPath: "/etc/secrets/cos/"
              readOnly: true
      containers:
        - name: "nlu"
          image: "{{ if tpl ( .Values.image.repository | toString ) . }}{{ trimSuffix "/" (tpl (.Values.image.repository | toString ) . ) }}{{ end }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
            {{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
            runAsUser: 2000
            {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          
          ports:
            - name: "thrift"
              containerPort: 8080
          
          env:
            # KUBERNETES SPECIFIC ENVIRONMENT VARIABLES
            - name:  "WKUBE_POD_NAME"
              valueFrom:
                fieldRef:
                  fieldPath: "metadata.name"
            - name:  "WKUBE_POD_IPADDR"
              valueFrom:
                fieldRef:
                  fieldPath: "status.podIP"
  
            # As the NLU is not set to be visible outside k8s. The WKUBE_NODE_NAME, WKUBE_SERVICE_NAME and WKUBE_SERVICE_PORT_NAME are not defined.

            - name: PRIMARY_OBJECTSTORE_CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-clu-config-secret
                  key: primary_objectstore_string
            - name: "KV_STORE"
              value: "etcd:/etc/secrets/etcd/etcd_connection"
            
            - name:  "NLU_SERVICE_NAME"
              value: "voyager-nlu-slot-{{ .Release.Name }}"
            
            - name: LL_PRIVATE_DOMAIN_ID
              valueFrom:
                configMapKeyRef:
                   name: "{{ .Release.Name }}-config-litelinks"
                   key: kubernetes_cluster_name
            
            
            - name:  "MASTER_SERVICE_NAME"
              value: "voyager-master-slot-{{ .Release.Name }}"

            - name: "SERVICE_VERSION"
              value: "20200520-135104-2-caaae5"
            - name:  "CERTIFICATES_IMPORT_LIST"
              value: "/etc/secrets/cos/ca.crt:cos-minio"
            - name: "LITELINKS_SSL_KEY_PATH"
              value: "/opt/voyager/nlu/config/nlu_privatekey"
            - name: "LITELINKS_SSL_KEY_CERTPATH"
              value: "/opt/voyager/nlu/config/nlu_certificate"
            - name: "LITELINKS_SSL_TRUSTCERTS_PATH"
              value: "/etc/litelinks/certs"
            - name: "FORCE_WRITE_SHARED_SLOT_COUNTER"
              value: "true"

          volumeMounts:
            - name: config
              mountPath: /opt/voyager/nlu/config
              readOnly: true
            - mountPath: "/etc/secrets/etcd"
              readOnly: true
              name: global-etcd
            - name: "cos-certificate"
              mountPath: "/etc/secrets/cos/"
              readOnly: true
            - name: ssl-certs
              mountPath: /etc/litelinks/certs
              readOnly: true
          resources:
            {{ .Values.resources | toYaml | indent 12 | trim }}
          readinessProbe:
            httpGet:
              path: /ready
              port: 8089
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 120
            timeoutSeconds: 60
          
          livenessProbe:
            httpGet:
              path: /live
              port: 8089
              scheme: HTTP
            # Offset this probe by 1 minute from the readiness probe
            initialDelaySeconds: 30
            periodSeconds: 120
            timeoutSeconds: 60
            failureThreshold: 2
          
          lifecycle:
            preStop:
              exec:
                command:
                  - /opt/voyager/nlu/stop.sh
      volumes:
        - name: config
          secret:
            secretName: "{{ .Release.Name }}-clu-config-secret"
        - name: ssl-certs
          secret:
            secretName: "{{ .Release.Name }}-clu-config-secret"
            items:
              - key: master_certificate
                path: master_certificate.pem
              - key: tas_certificate
                path: tas_certificate.pem
        - name: global-etcd
          secret:
            secretName: "{{ .Release.Name }}-global-etcd"
        - name: "init-scripts"
          configMap:
            name: "{{ .Release.Name }}-nlu-init-scripts"
            defaultMode: 0755
        - name: "cos-certificate"
          secret:
            secretName:  "{{ include "assistant.cos.tls.secretName" . }}"
            defaultMode: 420
            items:
            - key: tls.cacrt
              path: ca.crt

  
      serviceAccountName: "{{ .Release.Name }}-litelinks-registrant"

        {{- if and (semverCompare ">=1.16" (printf "%s.%s" ( regexReplaceAll "[^0-9]" (.Capabilities.KubeVersion.Major | toString ) "" ) ( regexReplaceAll "[^0-9]" (.Capabilities.KubeVersion.Minor | toString ) "" ))) .Values.global.topologySpreadConstraints.enabled }}
      topologySpreadConstraints:
      - maxSkew:           {{ tpl ( .Values.global.topologySpreadConstraints.maxSkew           | toString ) . }}
        topologyKey:       "{{ tpl ( .Values.global.topologySpreadConstraints.topologyKey       | toString ) . }}"
        whenUnsatisfiable: "{{ tpl ( .Values.global.topologySpreadConstraints.whenUnsatisfiable | toString ) . }}"
        labelSelector:
          matchExpressions:
          - key: "service"
            operator: In
            values:
            - "conversation"
          - key: "component"
            operator: In
            values:
            - "nlu"
          - key: "slot"
            operator: In
            values:
            - "{{ .Release.Name }}"
        {{- end }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: beta.kubernetes.io/arch
                  operator: In
                  values: [ "amd64" ]
        {{- if .Values.global.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions }}
          {{- printf "\n%s" ( .Values.global.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions | toYaml | indent 16 ) }}
        {{- end }}
        {{- if (or (eq .Values.global.podAntiAffinity "Enable") (and (eq .Values.global.deploymentType "Production") (ne .Values.global.podAntiAffinity "Disable"))) }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: "service"
                operator: In
                values:
                - "conversation"
              - key: "component"
                operator: In
                values:
                - "nlu"
              - key: "slot"
                operator: In
                values:
                - "{{ .Release.Name }}"
            topologyKey: "kubernetes.io/hostname"
        {{- end }}
