
{{- define "recommends.secret" -}}apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: "{{ .Release.Name }}-recommends"
  labels:
    <<: &primary_labels # Don't touch or extend these labels!
      service:                     "conversation"
      component:                   "recommends"
      slot:                        "{{ .Release.Name }}"
    # Make sure the indent of other labels is the same as this comment's
    tenant:                        "PUBLIC"
    release:                       "{{ .Release.Name }}"
    app.kubernetes.io/instance:    "{{ .Release.Name }}"
    app.kubernetes.io/managed-by:  "{{ .Release.Service }}"
    app.kubernetes.io/name:        "ibm-watson-assistant"
    helm.sh/chart:                 "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    icpdsupport/addOnName:         "assistant"
    icpdsupport/app:               "recommends"
    icpdsupport/serviceInstanceId: "{{ .Values.global.zenServiceInstanceId | int64 }}"
data:
  cos_api_key:                      "$(echo "unused"          | tr -d '\n' | base64 | tr -d '\n')"
  reco_key_pw:                      "$(openssl rand -hex 32   | tr -d '\n' | base64 | tr -d '\n')"
  
  ssl_cert:                         "$( cat "recommends.crt"               | base64 | tr -d '\n' )"
  ssl_key:                          "$( cat "recommends.key"               | base64 | tr -d '\n' )"
  store_cert:                       "$( cat "/etc/secrets/store/store.crt" | base64 | tr -d '\n' )"
  
{{- if .Values.global.mongodb.create }}
  mongodb_connection_string:        "$( echo "mongodb://${MONGODB_ADMIN_USER}:${MONGODB_ADMIN_PASSWORD}@{{ include "assistant.mongodb.svc.connectionString" . }}" | tr -d '\n' | base64 | tr -d '\n' )"
{{- else }}
  mongodb_connection_string:        "$( echo "mongodb://${MONGODB_ADMIN_USER}:${MONGODB_ADMIN_PASSWORD}@{{ .Values.global.mongodb.hostname }}:{{ .Values.global.mongodb.port }}/admin?ssl=true" | tr -d '\n' | base64 | tr -d '\n' )"
{{- end }}
  mongodb_certificate:              "$( echo "${MONGODB_TLS_CERT}"  | base64 | tr -d '\n' )"

  redis_connection_string:          "$( echo "redis://admin:${REDIS_PASSWORD}@{{ include "assistant.redis.hostname" . }}:{{ include "assistant.redis.port" . }}" | tr -d '\n' | base64 | tr -d '\n' )"
  redis_secret:                     "$( openssl rand -hex 64 | cut -c -16 | tr -d '\n' | base64 | tr -d '\n' )"
{{- end -}}
{{- define "assistant.recommends.openssl.config" -}}[ req ]
default_bits       = 2048
distinguished_name = req_distinguished_name
x509_extensions    = v3_req

[ req_distinguished_name ]

[ v3_req ]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer

# Extensions to add to a certificate request
basicConstraints = CA:FALSE
keyUsage         = critical,nonRepudiation, digitalSignature, keyEncipherment
#extendedKeyUsage = critical,serverAuth

#subjectAltName = @alt_names

[ v3_ca ]
# Extensions for a typical CA
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
basicConstraints = CA:true
{{- end -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-recommends-secret-gen-job"
  labels:  &labels
    <<: &primary_labels # Don't touch or extend these labels!
      service:                     "conversation"
      component:                   "recommends-secret-gen-job"
      slot:                        "{{ .Release.Name }}"
    # Make sure the indent of other labels is the same as this comment's
    tenant:                        "PUBLIC"
    release:                       "{{ .Release.Name }}"
    app.kubernetes.io/instance:    "{{ .Release.Name }}"
    app.kubernetes.io/managed-by:  "{{ .Release.Service }}"
    app.kubernetes.io/name:        "ibm-watson-assistant"
    helm.sh/chart:                 "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    icpdsupport/addOnName:         "assistant"
    icpdsupport/app:               "recommends-secret-gen-job"
    icpdsupport/serviceInstanceId: "{{ .Values.global.zenServiceInstanceId | int64 }}"
spec:
  backoffLimit: 10
  template:
    metadata:
      name: cred-gen
      annotations:

        productName:              "IBM Watson Assistant for IBM Cloud Pak for Data"
        productID:                "ICP4D-addon-fa92c14a5cd74c31aab1616889cbe97a-assistant"
        productVersion:           "1.4.2"
        cloudpakName:             "IBM Cloud Pak for Data"
        cloudpakId:               "eb9998dcc5d24e3eb5b6fb488f750fe2"
        cloudpakVersion:          "3.0.0"
        productChargedContainers: "All"
        productMetric:            "VIRTUAL_PROCESSOR_CORE"
      labels:
        <<: *labels
    spec:
      serviceAccountName: {{ (printf "%s-credentials" .Release.Name) | quote }}
      #imagePullSecrets:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: beta.kubernetes.io/arch
                  operator: In
                  values: [ "amd64" ]
        {{- if .Values.global.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions }}
          {{- printf "\n%s" ( .Values.global.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions | toYaml | indent 16 ) }}
        {{- end }}
      hostIPC: false
      hostNetwork: false
      hostPID: false

      containers:
      - name: cred-gen
        image: "{{ if tpl ( .Values.creds.image.repository | toString ) . }}{{ trimSuffix "/" (tpl (.Values.creds.image.repository | toString ) . ) }}{{ end }}/{{ .Values.creds.image.name }}:{{ .Values.creds.image.tag }}"
        imagePullPolicy: {{ .Values.creds.image.pullPolicy | quote }}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
          {{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
          runAsUser: 2000
          {{- end }}
        env:
          - name: "REDIS_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-redis-password # Secret generated for redis datachart.
                key: password
          - name: MONGODB_ADMIN_USER
            valueFrom:
              secretKeyRef:
                name: "{{ template "assistant.mongodb.admin.secretName" . }}"
                key: user
          - name: MONGODB_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{ template "assistant.mongodb.admin.secretName" . }}"
                key: password
          - name: MONGODB_TLS_CERT
            valueFrom:
              secretKeyRef:
                name: "{{ template "assistant.mongodb.cert.secretName" . }}"
                key: tls.crt
        command:
        - "/bin/sh"
        - -c
        - |
          set -e
          cp /etc/ssl/openssl.cnf /tmp/openssl.cnf
          openssl req -x509 -newkey rsa:2048 -nodes -subj "/CN=localhost" -days 3650 -config /tmp/openssl.cnf -extensions v3_ca -out recommends.crt -keyout recommends.key
          openssl x509 -noout -text -in recommends.crt
          echo ""
          cat <<EOF | kubectl apply -n {{ .Release.Namespace }} -f -
          ---
{{ include "recommends.secret" . | indent 10 }}
          EOF
        resources:
{{ .Values.creds.resources | toYaml | indent 10 }}
        volumeMounts:
        - name: secret-store-ssl
          mountPath: "/etc/secrets/store/store.crt"
          subPath: ssl_cert
          readOnly: true
      volumes:
      - name: secret-store-ssl
        secret:
          secretName: "{{ .Release.Name }}-store-ssl"
      restartPolicy: Never
