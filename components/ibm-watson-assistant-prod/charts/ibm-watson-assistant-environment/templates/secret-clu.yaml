
{{- define "clu.config.secret" -}}
apiVersion: v1
kind: Secret
metadata:
  name: "{{ .Release.Name }}-clu-config-secret"
  labels:
    <<: &primary_labels # Don't touch or extend these labels!
      service:                    "conversation"
      component:                  "clu"
      slot:                       "{{ .Release.Name }}"
    # Make sure the indent of other labels is the same as this comment's
    tenant:                       "PUBLIC"
    release:                       "{{ .Release.Name }}"
    app.kubernetes.io/instance:    "{{ .Release.Name }}"
    app.kubernetes.io/managed-by:  "{{ .Release.Service }}"
    app.kubernetes.io/name:        "ibm-watson-assistant"
    helm.sh/chart:                 "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    icpdsupport/addOnName:         "assistant"
    icpdsupport/app:               "clu"
    icpdsupport/serviceInstanceId: "{{ .Values.global.zenServiceInstanceId | int64 }}"
type: Opaque
data:
{{- if .Values.global.mongodb.create }}
  mongodb_connection_string: $( echo "mongodb://${MONGODB_ADMIN_USER}:${MONGODB_ADMIN_PASSWORD}@{{ include "assistant.mongodb.svc.connectionString" . }}" | tr -d '\n' | base64 | tr -d '\n' )
{{- else }}
  mongodb_connection_string: $( echo "mongodb://${MONGODB_ADMIN_USER}:${MONGODB_ADMIN_PASSWORD}@{{ .Values.global.mongodb.hostname }}:{{ .Values.global.mongodb.port }}/admin?ssl=true" | tr -d '\n' | base64 | tr -d '\n' )
{{- end }}
  mongodb_certificate: "$( echo "${MONGODB_TLS_CERT}"  | base64 | tr -d '\n' )"
  primary_objectstore_string: $( echo "s3,endpoint={{ include "assistant.cos.schema" . }}://{{ include "assistant.cos.hostname" . }}:{{ include "assistant.cos.port" . }},accesskey=${MINIO_ACCESS_KEY},secretkey=${MINIO_SECRET_KEY},bucketsuffix={{ .Values.global.cos.bucket }}" | base64 | tr -d '\n' )
  entitiesdistro_certificate:          "$(cat entitiesdistro.crt | base64 | tr -d '\n')"
  entitiesdistro_privatekey:           "$(cat entitiesdistro.key | base64 | tr -d '\n')"
  spellcheck_certificate:              "$(cat spellcheck.crt | base64 | tr -d '\n')"
  spellcheck_privatekey:               "$(cat spellcheck.key | base64 | tr -d '\n')"
  system_entities_certificate:         "$(cat system_entities.crt | base64 | tr -d '\n')"
  system_entities_privatekey:          "$(cat system_entities.key | base64 | tr -d '\n')"
  tf_mm_certificate:                   "$(cat tf_mm.crt | base64 | tr -d '\n')"
  tf_mm_privatekey:                    "$(cat tf_mm.key | base64 | tr -d '\n')"
  autolearn_disambiguator_certificate: ""
  autolearn_disambiguator_privatekey:  ""
  nlu_certificate:                     "$(cat nlu.crt | base64 | tr -d '\n')"
  nlu_privatekey:                      "$(cat nlu.key | base64 | tr -d '\n')"
  master_certificate:                  "$(cat master.crt | base64 | tr -d '\n')"
  master_privatekey:                   "$(cat master.key | base64 | tr -d '\n')"
  tas_certificate:                     "$(cat tas.crt | base64 | tr -d '\n')"
  tas_privatekey:                      "$(cat tas.key | base64 | tr -d '\n')"
  sireg_certificate:                   "$(cat sireg.crt | base64 | tr -d '\n')"
  sireg_privatekey:                    "$(cat sireg.key | base64 | tr -d '\n')"
  clu_embedding_service_certificate:   "$(cat clu_embedding_service.crt | base64 | tr -d '\n')"
  clu_embedding_service_privatekey:    "$(cat clu_embedding_service.key | base64 | tr -d '\n')"
{{- end -}}
{{- define "assistant.environment.openssl.config" -}}[ req ]
default_bits       = 2048
distinguished_name = req_distinguished_name
x509_extensions    = v3_req

[ req_distinguished_name ]

[ v3_req ]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer

# Extensions to add to a certificate request
basicConstraints = CA:FALSE
keyUsage         = critical,nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = critical,serverAuth

#subjectAltName = @alt_names

[ v3_ca ]
# Extensions for a typical CA
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
basicConstraints = CA:true
{{- end -}}

apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-clu-config-secret-gen-secret"
  labels:  &labels
    <<: &primary_labels # Don't touch or extend these labels!
      service:                     "conversation"
      component:                   "clu-secret-gen-job"
      slot:                        "{{ .Release.Name }}"
    # Make sure the indent of other labels is the same as this comment's
    tenant:                        "PUBLIC"
    release:                       "{{ .Release.Name }}"
    app.kubernetes.io/instance:    "{{ .Release.Name }}"
    app.kubernetes.io/managed-by:  "{{ .Release.Service }}"
    app.kubernetes.io/name:        "ibm-watson-assistant"
    helm.sh/chart:                 "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    icpdsupport/addOnName:         "assistant"
    icpdsupport/app:               "clu-secret-gen-job"
    icpdsupport/serviceInstanceId: "{{ .Values.global.zenServiceInstanceId | int64 }}"
spec:
  backoffLimit: 10
  template:
    metadata:
      name: cred-gen
      annotations:

        productName:              "IBM Watson Assistant for IBM Cloud Pak for Data"
        productID:                "ICP4D-addon-fa92c14a5cd74c31aab1616889cbe97a-assistant"
        productVersion:           "1.4.2"
        cloudpakName:             "IBM Cloud Pak for Data"
        cloudpakId:               "eb9998dcc5d24e3eb5b6fb488f750fe2"
        cloudpakVersion:          "3.0.0"
        productChargedContainers: "All"
        productMetric:            "VIRTUAL_PROCESSOR_CORE"
      labels: 
        <<: *labels
    spec:
      serviceAccountName: {{ (printf "%s-credentials" .Release.Name) | quote }}
      #imagePullSecrets:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: beta.kubernetes.io/arch
                  operator: In
                  values: [ "amd64" ]
        {{- if .Values.global.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions }}
          {{- printf "\n%s" ( .Values.global.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions | toYaml | indent 16 ) }}
        {{- end }}
      hostIPC: false
      hostNetwork: false
      hostPID: false

      containers:
      - name: cred-gen
        image: "{{ if tpl ( .Values.creds.image.repository | toString ) . }}{{ trimSuffix "/" (tpl (.Values.creds.image.repository | toString ) . ) }}{{ end }}/{{ .Values.creds.image.name }}:{{ .Values.creds.image.tag }}"
        imagePullPolicy: {{ .Values.creds.image.pullPolicy | quote }}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
          {{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
          runAsUser: 2000
          {{- end }}
        env:
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ include "assistant.cos.auth.secretName" . }}"
              key: accesskey
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ include "assistant.cos.auth.secretName" . }}"
              key: secretkey
        - name: MONGODB_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: "{{ template "assistant.mongodb.admin.secretName" . }}"
              key: user 
        - name: MONGODB_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ template "assistant.mongodb.admin.secretName" . }}"
              key: password 
        - name: MONGODB_TLS_CERT
          valueFrom:
            secretKeyRef:
              name: "{{ template "assistant.mongodb.cert.secretName" . }}"
              key: tls.crt
        command:
        - "/bin/sh"
        - -c
        - |
          set -e
          cat <<EOF >/tmp/openssl.cnf.base
{{ include "assistant.environment.openssl.config" . | indent 10 }}
          EOF
          
          echo "*********************************************************************"
          echo "* Generating certificate for entities distro:"
          echo "*********************************************************************"
          {{- $altName1 := printf "%s.%s.svc.%s" (include "ed.service_name" . ) .Release.Namespace (tpl .Values.clusterDomain . ) }}
          {{- $altName2 := printf "%s.%s"        (include "ed.service_name" . ) .Release.Namespace                                }}
          {{- $altName3 := printf "%s"           (include "ed.service_name" . )                                                   }}
          cp /tmp/openssl.cnf.base /tmp/openssl.cnf
          # echo $'\n[SAN]\nsubjectAltName=DNS:{{ $altName1 }},DNS: {{ $altName2 }},DNS:{{ $altName3 }}' >>/tmp/openssl.cnf
          openssl req -x509 -newkey rsa:2048 -nodes -subj "/CN=EntitiesDistro" -days 3650 -config /tmp/openssl.cnf  -extensions v3_ca -out entitiesdistro.crt -keyout entitiesdistro.key
          openssl x509 -text -noout -in entitiesdistro.crt
          
          echo
          echo
          echo "*********************************************************************"
          echo "* Generating certificate for SpellCheck"
          echo "*********************************************************************"
          cat /tmp/openssl.cnf.base | sed -e 's/#subjectAltName .*/subjectAltName = @spellchecker_alt_names/' >/tmp/openssl.cnf
          echo "[ spellchecker_alt_names ]"                                   >>/tmp/openssl.cnf
          echo "# Hostname override"                                          >>/tmp/openssl.cnf
          echo "DNS.1  =  SpellcheckServer"                                   >>/tmp/openssl.cnf
          echo "# Localhosts"                                                 >>/tmp/openssl.cnf
          echo "DNS.2  =   localhost"                                         >>/tmp/openssl.cnf 
          echo "DNS.3  =   127.0.0.1"                                         >>/tmp/openssl.cnf 
          echo "DNS.4  =   ::1"                                               >>/tmp/openssl.cnf
          echo "# Service names"                                              >>/tmp/openssl.cnf
          {{- $serviceName := include "spellcheck.service_name.en" . }}
          echo "DNS.5  =   {{ printf   "%s.%s.svc.%s" $serviceName .Release.Namespace (tpl .Values.clusterDomain . ) }}" >>/tmp/openssl.cnf 
          echo "DNS.6  =   {{ printf "*.%s.%s.svc.%s" $serviceName .Release.Namespace (tpl .Values.clusterDomain . ) }}" >>/tmp/openssl.cnf 
          echo "DNS.7  =   {{ printf   "%s.%s.svc"    $serviceName .Release.Namespace                                }}" >>/tmp/openssl.cnf 
          echo "DNS.8  =   {{ printf "*.%s.%s.svc"    $serviceName .Release.Namespace                                }}" >>/tmp/openssl.cnf 
          echo "DNS.9  =   {{ printf   "%s.%s"        $serviceName .Release.Namespace                                }}" >>/tmp/openssl.cnf 
          echo "DNS.10 =   {{ printf "*.%s.%s"        $serviceName .Release.Namespace                                }}" >>/tmp/openssl.cnf 
          echo "DNS.11 =   {{ printf   "%s"           $serviceName                                                   }}" >>/tmp/openssl.cnf 
          echo "DNS.12 =   {{ printf "*.%s"           $serviceName                                                   }}" >>/tmp/openssl.cnf 
          {{- $serviceName := include "spellcheck.service_name.fr" . }}
          echo "DNS.13 =   {{ printf   "%s.%s.svc.%s" $serviceName .Release.Namespace (tpl .Values.clusterDomain . ) }}" >>/tmp/openssl.cnf 
          echo "DNS.14 =   {{ printf "*.%s.%s.svc.%s" $serviceName .Release.Namespace (tpl .Values.clusterDomain . ) }}" >>/tmp/openssl.cnf 
          echo "DNS.15 =   {{ printf   "%s.%s.svc"    $serviceName .Release.Namespace                                }}" >>/tmp/openssl.cnf 
          echo "DNS.16 =   {{ printf "*.%s.%s.svc"    $serviceName .Release.Namespace                                }}" >>/tmp/openssl.cnf 
          echo "DNS.17 =   {{ printf   "%s.%s"        $serviceName .Release.Namespace                                }}" >>/tmp/openssl.cnf 
          echo "DNS.18 =   {{ printf "*.%s.%s"        $serviceName .Release.Namespace                                }}" >>/tmp/openssl.cnf 
          echo "DNS.19 =   {{ printf   "%s"           $serviceName                                                   }}" >>/tmp/openssl.cnf 
          echo "DNS.20 =   {{ printf "*.%s"           $serviceName                                                   }}" >>/tmp/openssl.cnf 
          openssl req -x509 -newkey rsa:2048 -nodes -subj "/CN=SpellcheckServer" -days 3650 -config /tmp/openssl.cnf -out spellcheck.crt -keyout spellcheck.key
          openssl x509 -text -noout -in spellcheck.crt

          echo
          echo
          echo "*********************************************************************"
          echo "* Generating certificate for clu-embedding-service"
          echo "*********************************************************************"
          cat /tmp/openssl.cnf.base | sed -e 's/#subjectAltName .*/subjectAltName = @clu_embedding_service_alt_names/' >/tmp/openssl.cnf
          echo "[ clu_embedding_service_alt_names ]"                          >>/tmp/openssl.cnf
          echo "# Hostname override"                                          >>/tmp/openssl.cnf
          echo "DNS.1  =  GrpcWordEmbeddingServer"                             >>/tmp/openssl.cnf
          echo "# Localhosts"                                                 >>/tmp/openssl.cnf
          echo "DNS.2  =   localhost"                                         >>/tmp/openssl.cnf 
          echo "DNS.3  =   127.0.0.1"                                         >>/tmp/openssl.cnf 
          echo "DNS.4  =   ::1"                                               >>/tmp/openssl.cnf
          echo "# Service names"                                              >>/tmp/openssl.cnf
          {{- $serviceName := include "clu_embedding_service.service_name" . }}
          echo "DNS.5  =   {{ printf   "%s.%s.svc.%s" $serviceName .Release.Namespace (tpl .Values.clusterDomain . ) }}" >>/tmp/openssl.cnf 
          echo "DNS.6  =   {{ printf "*.%s.%s.svc.%s" $serviceName .Release.Namespace (tpl .Values.clusterDomain . ) }}" >>/tmp/openssl.cnf 
          echo "DNS.7  =   {{ printf   "%s.%s.svc"    $serviceName .Release.Namespace                                }}" >>/tmp/openssl.cnf 
          echo "DNS.8  =   {{ printf "*.%s.%s.svc"    $serviceName .Release.Namespace                                }}" >>/tmp/openssl.cnf 
          echo "DNS.9  =   {{ printf   "%s.%s"        $serviceName .Release.Namespace                                }}" >>/tmp/openssl.cnf 
          echo "DNS.10 =   {{ printf "*.%s.%s"        $serviceName .Release.Namespace                                }}" >>/tmp/openssl.cnf 
          echo "DNS.11 =   {{ printf   "%s"           $serviceName                                                   }}" >>/tmp/openssl.cnf 
          echo "DNS.12 =   {{ printf "*.%s"           $serviceName                                                   }}" >>/tmp/openssl.cnf 
          openssl req -x509 -newkey rsa:2048 -nodes -subj "/CN=GrpcWordEmbeddingServer" -days 3650 -config /tmp/openssl.cnf -out clu_embedding_service.crt -keyout clu_embedding_service.key
          openssl x509 -text -noout -in clu_embedding_service.crt
          
          
          echo
          echo
          echo "*********************************************************************"
          echo "* Generating certificate for SystemEntities"
          echo "*********************************************************************"
          cat /tmp/openssl.cnf.base | sed -e 's/#subjectAltName .*/subjectAltName = @system_entities_alt_names/' >/tmp/openssl.cnf
          echo "[ system_entities_alt_names ]"                                >>/tmp/openssl.cnf
          echo "# Hostname override"                                          >>/tmp/openssl.cnf
          echo "DNS.1  =  SystemEntitiesServer"                               >>/tmp/openssl.cnf
          echo "# Localhosts"                                                 >>/tmp/openssl.cnf
          echo "DNS.2  =  localhost"                                          >>/tmp/openssl.cnf
          echo "DNS.3  =  127.0.0.1"                                          >>/tmp/openssl.cnf
          echo "DNS.4  =  ::1"                                                >>/tmp/openssl.cnf
          echo "# Service names"                                              >>/tmp/openssl.cnf
          {{- $serviceName := include "system_entities.service_name" . }}
          echo "DNS.5  =  {{ printf   "%s.%s.svc.%s" $serviceName .Release.Namespace (tpl .Values.clusterDomain . ) }}" >>/tmp/openssl.cnf 
          echo "DNS.6  =  {{ printf   "%s.%s.svc"    $serviceName .Release.Namespace                                }}" >>/tmp/openssl.cnf 
          echo "DNS.7 =   {{ printf   "%s"           $serviceName                                                   }}" >>/tmp/openssl.cnf 
          openssl req -x509 -newkey rsa:2048 -nodes -subj "/CN=SystemEntitiesServer" -days 3650 -config /tmp/openssl.cnf -out system_entities.crt -keyout system_entities.key
          openssl x509 -text -noout -in system_entities.crt
          
          echo
          echo
          echo "*********************************************************************"
          echo "* Generating certificate for TF-MM"
          echo "*********************************************************************"
          {{- $altName1 := printf "%s.%s.svc.%s" (include "tf_mm.service_name" . ) .Release.Namespace (tpl .Values.clusterDomain . ) }}
          {{- $altName2 := printf "%s.%s"        (include "tf_mm.service_name" . ) .Release.Namespace                                }}
          {{- $altName3 := printf "%s"           (include "tf_mm.service_name" . )                                                   }}
          cp /tmp/openssl.cnf.base /tmp/openssl.cnf
          echo $'\n[SAN]\nsubjectAltName=DNS:{{ $altName1 }},DNS: {{ $altName2 }},DNS:{{ $altName3 }}' >>/tmp/openssl.cnf
          openssl req -x509 -newkey rsa:2048 -nodes -subj "/CN=MMTF" -days 3650 -config /tmp/openssl.cnf -extensions v3_ca -out tf_mm.crt -keyout tf_mm.key

          cp /etc/ssl/openssl.cnf /tmp/openssl.cnf
          openssl req -x509 -newkey rsa:2048 -nodes -subj "/CN=sireg.watson.ibm.com" -days 3650 -config /tmp/openssl.cnf -extensions v3_ca -out sireg.crt -keyout sireg.key

          {{- $altName1 := printf "%s.%s.svc.%s" (include "nlu.service_name" . ) .Release.Namespace (tpl .Values.clusterDomain . ) }}
          {{- $altName2 := printf "%s.%s"        (include "nlu.service_name" . ) .Release.Namespace                                }}
          {{- $altName3 := printf "%s"           (include "nlu.service_name" . )                                                   }}
          cp /tmp/openssl.cnf.base /tmp/openssl.cnf
          echo $'\n[SAN]\nsubjectAltName=DNS:{{ $altName1 }},DNS: {{ $altName2 }},DNS:{{ $altName3 }}' >>/tmp/openssl.cnf
          openssl req -x509 -newkey rsa:2048 -nodes -subj "/CN={{ .Release.Name }}" -days 3650 -config /tmp/openssl.cnf -extensions v3_ca -out nlu.crt -keyout nlu.key
          
          {{- $altName1 := printf "%s.%s.svc.%s" (include "master.service_name" . ) .Release.Namespace (tpl .Values.clusterDomain . ) }}
          {{- $altName2 := printf "%s.%s"        (include "master.service_name" . ) .Release.Namespace                                }}
          {{- $altName3 := printf "%s"           (include "master.service_name" . )                                                   }}
          cp /tmp/openssl.cnf.base /tmp/openssl.cnf
          echo $'\n[SAN]\nsubjectAltName=DNS:{{ $altName1 }},DNS: {{ $altName2 }},DNS:{{ $altName3 }}' >>/tmp/openssl.cnf
          openssl req -x509 -newkey rsa:2048 -nodes -subj "/CN={{ .Release.Name }}" -days 3650 -config /tmp/openssl.cnf -extensions v3_ca -out master.crt -keyout master.key

          {{- $altName1 := printf "%s.%s.svc.%s" (include "tas.service_name" . ) .Release.Namespace (tpl .Values.clusterDomain . ) }}
          {{- $altName2 := printf "%s.%s"        (include "tas.service_name" . ) .Release.Namespace                                }}
          {{- $altName3 := printf "%s"           (include "tas.service_name" . )                                                   }}
          cp /tmp/openssl.cnf.base /tmp/openssl.cnf
          echo $'\n[SAN]\nsubjectAltName=DNS:{{ $altName1 }},DNS: {{ $altName2 }},DNS:{{ $altName3 }}' >>/tmp/openssl.cnf
          openssl req -x509 -newkey rsa:2048 -nodes -subj "/CN={{ .Release.Name }}" -days 3650 -config /tmp/openssl.cnf -extensions v3_ca -out tas.crt -keyout tas.key
          
          cat <<EOF | kubectl apply -n {{ .Release.Namespace }} -f -
          ---
{{ include "clu.config.secret" . | indent 10 }}
          EOF
        resources:
{{ .Values.creds.resources | toYaml | indent 10 }}
      restartPolicy: Never
