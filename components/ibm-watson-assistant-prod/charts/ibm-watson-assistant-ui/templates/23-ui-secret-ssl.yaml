
{{- define "ui.ssl.secret" -}}apiVersion: v1
kind: Secret
metadata:
  name: "{{ .Release.Name }}-ui-ssl"
  labels:
    <<: &primary_labels # Don't touch or extend these labels!
      service:                     "conversation"
      component:                   "ui"
      slot:                        "{{ .Release.Name }}"
    # Make sure the indent of other labels is the same as this comment's
    tenant:                        "PUBLIC"
    release:                       "{{ .Release.Name }}"
    app.kubernetes.io/instance:    "{{ .Release.Name }}"
    app.kubernetes.io/managed-by:  "{{ .Release.Service }}"
    app.kubernetes.io/name:        "ibm-watson-assistant"
    helm.sh/chart:                 "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    icpdsupport/addOnName:         "assistant"
    icpdsupport/app:               "ui"
    icpdsupport/serviceInstanceId: "{{ .Values.global.zenServiceInstanceId | int64 }}"
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  {{- if tpl ( .Values.ssl.secretName | toString ) . }}
  # Certificate used by the ui microservice is provided by user in a custom secret
  ssl_key:                   "$(cat /etc/ui/cert/ssl_key                             | base64 | tr -d '\n')"
  ssl_cert:                  "$(cat /etc/ui/cert/ssl_cert                            | base64 | tr -d '\n')"
  {{- else }}
  # UI microservice uses a dynamically generated self-signed cert
  ssl_key:                   "$(cat ui.key                                               | base64 | tr -d '\n')"
  ssl_cert:                  "$(cat ui.crt                                               | base64 | tr -d '\n')"
  {{- end }}
{{- end -}} 
{{- define "assistant.ui.openssl.config" -}}[ req ]
default_bits       = 2048
distinguished_name = req_distinguished_name
x509_extensions    = v3_req

[ req_distinguished_name ]

[ v3_req ]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer

# Extensions to add to a certificate request
basicConstraints = CA:FALSE
keyUsage         = critical,nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = critical,serverAuth

#subjectAltName = @alt_names

[ v3_ca ]
# Extensions for a typical CA
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
basicConstraints = CA:true
{{- end -}}
  
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-ui-ssl-gen-job"
  labels:  &labels
    <<: &primary_labels # Don't touch or extend these labels!
      service:                     "conversation"
      component:                   "ui-ssl-gen-job"
      slot:                        "{{ .Release.Name }}"
    # Make sure the indent of other labels is the same as this comment's
    tenant:                        "PUBLIC"
    release:                       "{{ .Release.Name }}"
    app.kubernetes.io/instance:    "{{ .Release.Name }}"
    app.kubernetes.io/managed-by:  "{{ .Release.Service }}"
    app.kubernetes.io/name:        "ibm-watson-assistant"
    helm.sh/chart:                 "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    icpdsupport/addOnName:         "assistant"
    icpdsupport/app:               "ui-ssl-gen-job"
    icpdsupport/serviceInstanceId: "{{ .Values.global.zenServiceInstanceId | int64 }}"
spec:
  backoffLimit: 10
  template:
    metadata:
      name: ssl-gen
      annotations:
        
        productName:              "IBM Watson Assistant for IBM Cloud Pak for Data"
        productID:                "ICP4D-addon-fa92c14a5cd74c31aab1616889cbe97a-assistant"
        productVersion:           "1.4.2"
        cloudpakName:             "IBM Cloud Pak for Data"
        cloudpakId:               "eb9998dcc5d24e3eb5b6fb488f750fe2"
        cloudpakVersion:          "3.0.0"
        productChargedContainers: "All"
        productMetric:            "VIRTUAL_PROCESSOR_CORE"
      labels:
        <<: *labels
    spec:
      serviceAccountName: {{ (printf "%s-credentials" .Release.Name) | quote }}
      #imagePullSecrets:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: beta.kubernetes.io/arch
                  operator: In
                  values: [ "amd64" ]
        {{- if .Values.global.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions }}
          {{- printf "\n%s" ( .Values.global.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions | toYaml | indent 16 ) }}
        {{- end }}
      hostIPC: false
      hostNetwork: false
      hostPID: false

      containers:
      - name: ssl-gen
        image: "{{ if tpl ( .Values.ssl.image.repository | toString ) . }}{{ trimSuffix "/" (tpl (.Values.ssl.image.repository | toString ) . ) }}{{ end }}/{{ .Values.ssl.image.name }}:{{ .Values.ssl.image.tag }}"
        imagePullPolicy: {{ .Values.ssl.image.pullPolicy | quote }}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
          {{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
          runAsUser: 2000
          {{- end }}
        command:
        - "/bin/sh"
        - -c
        - |
          set -ex
          cat <<EOF >/tmp/openssl.cnf.base
{{ include "assistant.ui.openssl.config" . | indent 10 }}
          EOF
          
          echo
          echo
          echo "*********************************************************************"
          echo "* Generating self-signed certificate for ui microservice (tooling) "
          echo "*********************************************************************"
          cat /tmp/openssl.cnf.base | sed -e 's/#subjectAltName .*/subjectAltName = @ui_alt_names/' >/tmp/openssl.cnf
          echo "[ ui_alt_names ]"                                             >>/tmp/openssl.cnf
          echo "# Localhosts"                                                 >>/tmp/openssl.cnf
          echo "DNS.1  =   localhost"                                         >>/tmp/openssl.cnf 
          echo "DNS.2  =   127.0.0.1"                                         >>/tmp/openssl.cnf 
          echo "DNS.3  =   ::1"                                               >>/tmp/openssl.cnf
          echo "# Service names"                                              >>/tmp/openssl.cnf
          {{- $serviceName := include "ui.service_name" . }}
          echo "DNS.4  =   {{ printf   "%s.%s.svc.%s" $serviceName .Release.Namespace (tpl .Values.clusterDomain . ) }}" >>/tmp/openssl.cnf 
          echo "DNS.5  =   {{ printf   "%s.%s.svc"    $serviceName .Release.Namespace                                }}" >>/tmp/openssl.cnf 
          echo "DNS.6  =   {{ printf   "%s.%s"        $serviceName .Release.Namespace                                }}" >>/tmp/openssl.cnf 
          echo "DNS.7  =   {{ printf   "%s"           $serviceName                                                   }}" >>/tmp/openssl.cnf 
          openssl req -x509 -newkey rsa:2048 -nodes -subj "/CN={{ $serviceName }}" -days 3650 -config /tmp/openssl.cnf -out ui.crt -keyout ui.key
          openssl x509 -text -noout -in ui.crt
          
          
          cat <<EOF | kubectl apply -n {{ .Release.Namespace }} -f -
          ---
{{ include "ui.ssl.secret" . | indent 10 }}
          EOF
        resources:
{{ .Values.ssl.resources | toYaml | indent 10 }}
        volumeMounts:
        - name: "work-dir"
          mountPath: /tmp
  {{- if tpl  ( .Values.ssl.secretName | toString ) . }}
        - name: "ui-ssl-cert-key"
          mountPath: "/etc/ui/cert/"
          readOnly: true
  {{- end }}
      volumes:
        - name: "work-dir"
          emptyDir: {}
  {{- if tpl  ( .Values.ssl.secretName | toString ) . }}
        - name: "ui-ssl-cert-key"
          secret:
            secretName: {{- tpl  ( .Values.ssl.secretName | toString ) . }}
  {{- end }}
      restartPolicy: Never
