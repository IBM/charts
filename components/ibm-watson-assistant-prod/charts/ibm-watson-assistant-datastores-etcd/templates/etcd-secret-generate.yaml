###############################################################################
# Licensed Materials - Property of IBM.
# Copyright IBM Corporation 2018. All Rights Reserved.
# U.S. Government Users Restricted Rights - Use, duplication or disclosure 
# restricted by GSA ADP Schedule Contract with IBM Corp.
#
# Contributors:
#  IBM Corporation - initial API and implementation
###############################################################################
{{- include "sch.config.init" (list . "assistant.sch.chart.config.values") }}
{{- define "assistant.etcd.authsecret" -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "assistant.etcd.secretName" . | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . "" ) | indent 4 }}
data:
  username: {{ .Values.global.etcd.auth.user    | b64enc }}
  
  {{- if .Values.global.etcd.auth.authSecretName }}
  password:   $(echo "${ETCD_ROOT_PASSWORD}"                   | tr -d '\n' | base64 | tr -d '\n')
  {{- else }}
  password:   $(openssl rand -base64  20          | tr '/' '-' | tr -d '\n' | base64 | tr -d '\n')
  {{- end }}

  {{- if .Values.global.etcd.tls.enabled }}
    {{- if .Values.global.etcd.tls.tlsSecretName }}
  # Provided certificate
  tls.cacrt: "$(cat /etc/secrets/etcd/tls.cacrt | base64 | tr -d '\n')"
      {{- if .Values.global.etcd.create }}
  tls.key:   "$(cat /etc/secrets/etcd/tls.key | base64 | tr -d '\n')"
  tls.crt:   "$(cat /etc/secrets/etcd/tls.crt | base64 | tr -d '\n')"
      {{- else }}
  # Provided etcd - not specifying cert/privkey
  tls.key:   ""
  tls.crt:   ""
      {{- end }}
    {{- else }}
  # Generated certificate
  tls.cacrt: "$(cat ca.crt   | base64 | tr -d '\n')"
  tls.crt:   "$(cat etcd.crt | base64 | tr -d '\n')"
  tls.key:   "$(cat etcd.key | base64 | tr -d '\n')"
    {{- end }}
  {{- end }}
{{- end }}

{{- $etcdSimulatedContext := dict }}
{{- $_ := set $etcdSimulatedContext "Values"  .Values.config }}
{{- $_ := set $etcdSimulatedContext "Release" .Release }}
{{- $_ := set $etcdSimulatedContext "Chart" .Chart }}
{{- $etcdServiceName := include "sch.names.fullName" (list $etcdSimulatedContext ) }}
{{- $_ := set . "etcdServiceName" $etcdServiceName }}

{{- define "assistant.etcd.ssl_cert_config" -}}
  {{- $etcdServiceName := .etcdServiceName -}}
[ req ]
default_bits       = 2048
distinguished_name = req_distinguished_name
x509_extensions    = v3_req

[ req_distinguished_name ]

[ v3_req ]
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer

# Extensions to add to a certificate request
basicConstraints = CA:FALSE
keyUsage         = critical,nonRepudiation, digitalSignature, keyEncipherment
#extendedKeyUsage = critical,serverAuth

subjectAltName = @alt_names

[alt_names]
DNS.1   = {{ $etcdServiceName }}.{{ .Release.Namespace }}.svc.{{ tpl .Values.config.clusterDomain . }}
DNS.2   = {{ $etcdServiceName }}
DNS.3   = *.{{ $etcdServiceName }}.{{ .Release.Namespace }}.svc.{{ tpl .Values.config.clusterDomain . }}
DNS.4   = *.{{ $etcdServiceName }}
DNS.5 = localhost
DNS.6 = 127.0.0.1

[ v3_ca ]
# Extensions for a typical CA
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
basicConstraints = CA:true
{{- end }}


apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ .Release.Name }}-gen-secret-etcd"
  labels:  &labels
{{ include "sch.metadata.labels.standard" (list . "" (dict "icpdsupport/addOnName" .Values.global.addOnName "icpdsupport/app" "helm-etcd-generate-password-secret" "icpdsupport/serviceInstanceId" (.Values.global.zenServiceInstanceId | int64))) | indent 4 }}
    component: "helm-etcd-generate-password-secret"
spec:
  backoffLimit: 10
  template:
    metadata:
      name: cred-gen
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering "" "" "") | indent 8 }}
      labels: 
        <<: *labels
    spec:
      serviceAccountName: {{ (printf "%s-credentials" .Release.Name) | quote }}
      #imagePullSecrets:
      hostIPC: false
      hostNetwork: false
      hostPID: false

      containers:
      - name: cred-gen
        image: "{{ if tpl ( .Values.creds.image.repository | toString ) . }}{{ trimSuffix "/" (tpl (.Values.creds.image.repository | toString ) . ) }}{{ end }}/{{ .Values.creds.image.name }}:{{ .Values.creds.image.tag }}"
        imagePullPolicy: {{ .Values.creds.image.pullPolicy | quote }}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop:
              - ALL
          {{- if not ( .Capabilities.APIVersions.Has "security.openshift.io/v1" ) }}
          runAsUser: 2000
          {{- end }}

  
{{- if .Values.global.etcd.auth.authSecretName }}
        env:
          - name: "ETCD_ROOT_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: {{ .Values.global.etcd.auth.authSecretName | quote }}
                key: password
{{- end }}
        command:
        - "/bin/sh"
        - -c
        - |
          set -e
{{- if and .Values.global.etcd.tls.enabled (not .Values.global.etcd.tls.tlsSecretName) }}
          cat >/tmp/openssl.cnf <<EOF
          {{ include "assistant.etcd.ssl_cert_config" . | indent 10 }}
          EOF
          
          echo "Generating CA"
          openssl genrsa -out ca.key 2048
          openssl req -x509 -new -nodes -key ca.key -subj "/CN=ETCD CA" -config /tmp/openssl.cnf -days 3650 -reqexts v3_req -extensions v3_ca -out ca.crt
          echo "Dumping CA certificate"
          openssl x509 -in ca.crt -text -noout
          
          
          openssl genrsa -out etcd.key 2048
          openssl req -new -key etcd.key -out etcd.csr -subj "/CN={{ $etcdServiceName }}" -config /tmp/openssl.cnf
          openssl x509 -req -in etcd.csr \
            -CA ca.crt -CAkey ca.key -CAcreateserial \
            -out etcd.crt -days 3650 -extensions v3_req -extfile /tmp/openssl.cnf
          
          echo "Dumping the ETCD certificate:"
          openssl x509 -in etcd.crt -text -noout
{{- end }}
          
          cat <<EOF | kubectl apply -n {{ .Release.Namespace }} -f -
          ---
{{ include "assistant.etcd.authsecret" . | indent 10 }}
          EOF
        resources:
{{ .Values.creds.resources | toYaml | indent 10 }}
{{- if .Values.global.etcd.tls.tlsSecretName }}
        volumeMounts:
        - name: etcd-tls
          mountPath: "/etc/secrets/etcd"
      volumes:
        - name: etcd-tls
          secret:
            secretName: "{{ .Values.global.etcd.tls.tlsSecretName }}"
{{- end }}
      restartPolicy: Never
      affinity:
{{ include "assistant.nodeAffinities" . | indent 8 }}
