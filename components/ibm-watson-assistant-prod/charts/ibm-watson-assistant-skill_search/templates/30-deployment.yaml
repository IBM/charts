apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-skill-search
  labels: &deployment_labels
    <<: &primary_labels # Don't touch or extend these labels!
      service:                     "conversation"
      component:                   "skill-search"
      slot:                        "{{ .Release.Name }}"
    # Make sure the indent of other labels is the same as this comment's
    tenant:                        "PUBLIC"
    release:                       "{{ .Release.Name }}"
    app.kubernetes.io/instance:    "{{ .Release.Name }}"
    app.kubernetes.io/managed-by:  "{{ .Release.Service }}"
    app.kubernetes.io/name:        "ibm-watson-assistant"
    helm.sh/chart:                 "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    icpdsupport/addOnName:         "assistant"
    icpdsupport/app:               "skill-search"
    icpdsupport/serviceInstanceId: "{{ .Values.global.zenServiceInstanceId | int64 }}"
spec:
  replicas: {{ include "assistant.skillSearch.replicas" . }}
  revisionHistoryLimit: 4
  selector:
    matchLabels: *primary_labels # Don't touch or extend!
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 4
  template:
    metadata:
      labels:
        <<: *deployment_labels
        # Any pod-specific labels go below
      annotations:

        productName:              "IBM Watson Assistant for IBM Cloud Pak for Data"
        productID:                "ICP4D-addon-fa92c14a5cd74c31aab1616889cbe97a-assistant"
        productVersion:           "1.4.2"
        cloudpakName:             "IBM Cloud Pak for Data"
        cloudpakId:               "eb9998dcc5d24e3eb5b6fb488f750fe2"
        cloudpakVersion:          "3.0.0"
        productChargedContainers: "All"
        productMetric:            "VIRTUAL_PROCESSOR_CORE"
    spec:
      {{- if tpl .Values.imagePullSecret . }}
      imagePullSecrets:
        - name: {{ tpl .Values.global.image.pullSecret . | quote }}
      {{- end }}

      terminationGracePeriodSeconds: 35
      hostIPC: false
      hostNetwork: false
      hostPID: false

      containers:
        - name: "skill-search"
          image: "{{ if tpl ( .Values.image.repository | toString ) . }}{{ trimSuffix "/" (tpl (.Values.image.repository | toString ) . ) }}{{ end }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            capabilities:
              drop:
                - ALL
            {{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
            runAsUser: 1001
            {{- end }}
          ports:
            - name: "https"
              containerPort: 9443
          env:
            - name: "PAGERDUTY_CLIENT_NAME"
              value: "{{ .Release.Name }}-skill-search"
            - name: "SKILLS_ENABLED"
              value: "SEARCH"
            - name: "MAX_THREADS"
              value: "{{ .Values.maxThreads }}"
            - name: "DISCOVERY_CONFIDENCE_THRESHOLD_DEFAULT"
              value: "0.0"
            - name: "ICP_ENVIRONMENT"
              value: "true"

  # insert AUTHORIZATION_ENCRYPTION_KEY only if it is available
            - name: "AUTHORIZATION_ENCRYPTION_KEY"
              valueFrom:
                secretKeyRef:
                  name: "{{ include "skillSearch.authorization-encryption.secretName"        . }}"
                  key: "authorization_encryption_key"
            - name:  "JAVA_MEMORY_XMX"
              value: "{{ .Values.javaMemoryXMX }}"
          volumeMounts:
            - name: "secret-skill-search-ssl"
              mountPath: "/etc/secrets/ssl"
              readOnly: true
          resources:
            {{ .Values.resources | toYaml | indent 12 | trim }}
          lifecycle:
            preStop:
              exec:
                command: ["bash", "-c", "sleep 30"]

          readinessProbe:
            httpGet:
              path: /skills/search/api/v1/ready
              scheme: HTTPS
              port: "https"
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3

          livenessProbe:
            httpGet:
              path: /skills/search/api/v1/live
              scheme: HTTPS
              port: "https"
            initialDelaySeconds: 60
            timeoutSeconds: 5
            periodSeconds: 60
            successThreshold: 1
            failureThreshold: 2
      volumes:
        - name: secret-skill-search-ssl
          secret:
            secretName: "{{ .Release.Name }}-skill-search"
      serviceAccountName: "{{ .Release.Name }}-restricted"

        {{- if and (semverCompare ">=1.16" (printf "%s.%s" ( regexReplaceAll "[^0-9]" (.Capabilities.KubeVersion.Major | toString ) "" ) ( regexReplaceAll "[^0-9]" (.Capabilities.KubeVersion.Minor | toString ) "" ))) .Values.global.topologySpreadConstraints.enabled }}
      topologySpreadConstraints:
      - maxSkew:           {{ tpl ( .Values.global.topologySpreadConstraints.maxSkew           | toString ) . }}
        topologyKey:       "{{ tpl ( .Values.global.topologySpreadConstraints.topologyKey       | toString ) . }}"
        whenUnsatisfiable: "{{ tpl ( .Values.global.topologySpreadConstraints.whenUnsatisfiable | toString ) . }}"
        labelSelector:
          matchExpressions:
          - key: "service"
            operator: In
            values:
            - "conversation"
          - key: "component"
            operator: In
            values:
            - "skill-search"
          - key: "slot"
            operator: In
            values:
            - "{{ .Release.Name }}"
        {{- end }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: beta.kubernetes.io/arch
                  operator: In
                  values: [ "amd64" ]
        {{- if .Values.global.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions }}
          {{- printf "\n%s" ( .Values.global.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions | toYaml | indent 16 ) }}
        {{- end }}
        {{- if (or (eq .Values.global.podAntiAffinity "Enable") (and (eq .Values.global.deploymentType "Production") (ne .Values.global.podAntiAffinity "Disable"))) }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: "service"
                operator: In
                values:
                - "conversation"
              - key: "component"
                operator: In
                values:
                - "skill-search"
              - key: "slot"
                operator: In
                values:
                - "{{ .Release.Name }}"
            topologyKey: "kubernetes.io/hostname"
        {{- end }}
