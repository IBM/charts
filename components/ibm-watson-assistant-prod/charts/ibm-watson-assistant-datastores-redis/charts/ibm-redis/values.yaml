###############################################################################
# Licensed Materials - Property of IBM.
# Copyright IBM Corporation 2018. All Rights Reserved.
# U.S. Government Users Restricted Rights - Use, duplication or disclosure
# restricted by GSA ADP Schedule Contract with IBM Corp.
#
# Contributors:
#  IBM Corporation - initial API and implementation
###############################################################################

# Specify architecture (amd64, ppc64le, s390x) and weight to be  used for scheduling as follows :
#   0 - Do not use
#   1 - Least preferred
#   2 - No preference
#   3 - Most preferred
arch:
  amd64: "2 - No preference"
  ppc64le: "2 - No preference"
  s390x: "2 - No preference"

image:
  name: "opencontent-redis-3"
  tag: "1.1.5"
  pullPolicy: "IfNotPresent"

creds:
  image:
    name: "opencontent-common-utils"
    tag: "1.1.7"
    pullPolicy: "IfNotPresent"

global:
  dockerRegistryPrefix: ""
  environmentSize: "custom"
  image:
    pullSecret: ""
  persistence:
    enabled: false
    supplementalGroups: []  # this is required for NFS storage
      # - 1001              # - provide the gid of the volumes as list
      # - 1002
    # useDynamicProvisioning - if enabled the persistence.storageClassName volumes will be dynamicaly created (if the storage class can be created automatically).
    #  If disabled either dataPVC.selectot.label should be specify and then the PVC will bound to precreated PV based on labels or persistence.storageClassName should be empty and then cluster admin has to bound the PVC to existing PV manually
    useDynamicProvisioning: true
  sch:
    # global.sch.enabled - Specifies if the ibm-sch chart should be used as sub-chart. If set to false, a compatible version of sch chart should be provided by umbrella chart.
    enabled: true
  rbac:
    # Specifies whether RBAC resources should be created
    create: true
    serviceAccountName: ""
  metering:
    productName: "ibm-redis"
    productID: "ibm_redis_1_0_0_Apache_2___88888"
    productVersion: "1.0.0"
    productMetric: "VIRTUAL_PROCESSOR_CORE"
    productChargedContainers: "All"
    cloudpakName: "IBM Cloud Pak for Data"
    cloudpakId: "eb9998dcc5d24e3eb5b6fb488f750fe2"
    cloudpakVersion: "3.0.0"
  # Change license to true to indicate have read and agree to license agreements : http://ibm.biz/oms-license & http://ibm.biz/oms-apps-license
  license: false
  storageClassName: ""
  ## Persistant Volume Storage Class Name
  ## Default value is the default storage class configured by the cluster admin

# if true, don't delete the datastore objects during a helm delete
keep: false

affinity: {}

# affinityRedis - Affinities for Redis stateful set. Overrides the generated affinities if provided.
#  Supports templated values like "{{- incluede "umbrella-chart.ibm-redis.affinities" . -}}"
#  Usage: e.g., generated podAntiAffinity, ...
affinityRedis: {}

# antiAffinity specification of the anti-affinity for redis statefulset pods (both server and sentinel)
antiAffinity:
  # antiAffinity.policy -  Policy for anti affinity of the StatefulSet.
  #      If **soft** is set, the scheduler tries to create the pods on nodes (with the default topology key) not to co-locate them,
  #         but it will not be guaranteed.
  #      If **hard**, the scheduler tries to create the pods on nodes not to co-locate them and will not create the pods in case of co-location.
  #      If the other value, anti affinity is disabled.
  #  Support templates
  policy: "soft"

  # antiAffinity.topologyKey - Key for the node label that the system uses to denote a topology domain.
  #  Support templates
  topologyKey: "kubernetes.io/hostname"

replicas:
  servers: 2
  sentinels: 3

##redis password
auth:
  authSecretName: ""

cachemode: "no"
#yes - to enable redis cache mode
#no - to enable redis storage mode
maxmemory: "100mb"
#<bytes>
maxmemoryPolicy:  "allkeys-lru"
#allkeys-lru,

#configuration parameters
appendonly: "yes"
# no - to turn off AOF, AOF need to be turned off when the data needs to be restored in redis.
# yes - to turn on AOF
timeout: 0
#default 0 (Close the connection after a client is idle for N seconds (0 to disable)).

tcpKeepAlive: 300
#default 300 (Send TCP ACKs to clients every N seconds in absence of communication).

luaTimeLimit: 5000
#default 5000 (Max execution time of a Lua script in milliseconds).

slowlogLogSlowerThan: 10000
#default 10000 (The execution time, in microseconds, that commands must exceed in order to get logged in the slowlog).

slowlogMaxLen: 120
#default 120 (The maximum length of the slow log).

persistence:
  ## Persistent Volume Access Mode.
  ##
  accessMode: ReadWriteOnce
  ## Persistent Volume Storage Size.
  ##
  size: 2Gi

dataPVC:
  # name - name (prefix) of the created PVC
  name: "data"

  # selector - if you not using dynamic provisioning, you can use selectors to refine the binding process. You cannot specify a selector if your using dynamic provisioning.
  selector:
    # label - label that the PV should have to be boundable to created PVCs
    label: ""
    # value - value of the label that the PV should have to be boundable to created PVCs
    value: ""


##
## Redis Master parameters
##

master:
  ## Redis Master Liveness Probe
  livenessProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5

  ## Redis Master Readiness Probe
  readinessProbe:
    enabled: true
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 3

  podDisruptionBudget: {}

  # master.topologySpreadConstraints configures how the pods are distributed across multiple reziliency/failure zones.
  #  Requires kubernetes 1.16+ with enabled MZR support.
  #  See https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/ to get more info about topologyContraints.
  topologySpreadConstraints:
    # master.topologySpreadConstraints.enabled - Specifies if the topology spread contraints should be added to Redis (server) statefulset
    enabled:           false
    
    # master.topologySpreadConstraints.maxSkew - How much the failure/availity zones can differ in number of pods.
    maxSkew:           1
    
    # master.topologySpreadConstraints.topologyKey - Label of nodes defining failure zone;
    #     the nodes with the same values of the label are consider to belong to the same failure zone.
    topologyKey:       "failure-domain.beta.kubernetes.io/zone"
    
    # master.topologySpreadConstraints.whenUnsatisfiable - Specifies action in case new pod cannot be scheduled because of topology contraints.
    #   Possible values are DoNotSchedule and ScheduleAnyway
    whenUnsatisfiable: "ScheduleAnyway"

##
## Redis Sentinel parameters
##
sentinel:
  ## Redis Master Liveness Probe
  livenessProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5

  ## Redis Master Readiness Probe
  readinessProbe:
    enabled: true
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 3

  podDisruptionBudget: {}

  # sentinel.topologySpreadConstraints configures how the pods are distributed across multiple reziliency/failure zones.
  #  Requires kubernetes 1.16+ with enabled MZR support.
  #  See https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/ to get more info about topologyContraints.
  topologySpreadConstraints:
    # master.topologySpreadConstraints.enabled - Specifies if the topology spread contraints should be added to sentinel statefulset
    enabled:           false
    
    # sentinel.topologySpreadConstraints.maxSkew - How much the failure/availity zones can differ in number of pods.
    maxSkew:           1
    
    # sentinel.topologySpreadConstraints.topologyKey - Label of nodes defining failure zone;
    #     the nodes with the same values of the label are consider to belong to the same failure zone.
    topologyKey:       "failure-domain.beta.kubernetes.io/zone"
    
    # sentinel.topologySpreadConstraints.whenUnsatisfiable - Specifies action in case new pod cannot be scheduled because of topology contraints.
    #   Possible values are DoNotSchedule and ScheduleAnyway
    whenUnsatisfiable: "ScheduleAnyway"

serverService:
  type: ClusterIP  # [ClusterIP|LoadBalancer]

rbac:
  # Specifies whether RBAC resources should be created
  create:

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  server:
    requests:
      memory: 200Mi
      cpu: 100m
    limits:
      memory: 700Mi
      # cpu limits removed for WA ICP deployments
      #cpu: 100m
  sentinel:
    requests:
      memory: 200Mi
      cpu: 100m
    limits:
      memory: 200Mi
      # cpu limits removed for WA ICP deployments
      #cpu: 100m

securityContext:
  redis:
    fsGroup: 1000
    runAsUser: 1000
    runAsGroup: 1000
  creds:
    runAsUser: 99

# clusterDomain - the suffix of all the cluster DNS names like service_name.service_namespace.svc.cluster.local. Supports templated values like "{{ .Values.global.clusterDomain }}"
clusterDomain: "cluster.local"

# metering - Configures annotations for metering service (if present in the cluster). Supports string templates or dictionary type.
#metering: "{{ .Values.global.umbrellaChartMetering | toYaml }}"
#
# Default values if not specified
#metering:
#  productName:    "Redis HA"
#  productID:      "RedisHA_3212r0_free_00000"
#  productVersion: "3.2.12-r0"
#  cloudpakName:   "IBM Cloud Pak for Data"
#  cloudpakId:     "eb9998dcc5d24e3eb5b6fb488f750fe2"
metering: {}
