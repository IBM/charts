{{- if include "ibmRedis.licenseValidate" .  | required "License must be accepted by setting license key to true" }}
{{/*
###############################################################################
# Licensed Materials - Property of IBM.
# Copyright IBM Corporation 2018. All Rights Reserved.
# U.S. Government Users Restricted Rights - Use, duplication or disclosure
# restricted by GSA ADP Schedule Contract with IBM Corp.
#
# Contributors:
#  IBM Corporation - initial API and implementation
###############################################################################
*/}}
{{- if not (include "ibmRedis.boolConvertor" (list .Values.keep . )) }}
{{- include "sch.config.init" (list . "ibmRedis.sch.chart.config.values") -}}
{{- if not ( tpl ( .Values.auth.authSecretName | toString ) . ) -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.credsCleanup) | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.credsCleanup (dict "icpdsupport/addOnName" .Values.global.addOnName "icpdsupport/app" .sch.chart.components.credsCleanup "icpdsupport/serviceInstanceId" (.Values.global.zenServiceInstanceId | int64))) | indent 4 }}
  annotations:
    "helm.sh/hook": "pre-delete"
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": "hook-succeeded"
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 300
  template:
    metadata:
      name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.credsCleanup) | quote }}
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering "" "" "") | indent 8 }}
      labels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.credsCleanup (dict "icpdsupport/addOnName" .Values.global.addOnName "icpdsupport/app" .sch.chart.components.credsCleanup "icpdsupport/serviceInstanceId" (.Values.global.zenServiceInstanceId | int64))) | indent 8 }}
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.credsPodSecurityContext) | indent 8 }}
      affinity:
{{ include "ibmRedis.affinity" (list . (dict "kind" "Job" "component" "credsCleanup")) | indent 8 }}
      serviceAccountName: {{ include "ibmRedis.serviceAccountName" . | quote }}
{{- if tpl ( .Values.global.image.pullSecret | toString ) . }}
      imagePullSecrets:
      - name:  {{ tpl ( .Values.global.image.pullSecret | toString ) . }}
{{- end }}
      containers:
      - name: cleanup
        image: "{{ if tpl ( .Values.global.dockerRegistryPrefix | toString ) .  }}{{ trimSuffix "/" (tpl ( .Values.global.dockerRegistryPrefix | toString ) . ) }}/{{ end }}{{ tpl ( .Values.creds.image.name | toString ) . }}:{{ .Values.creds.image.tag }}"
        imagePullPolicy: {{ ( tpl ( .Values.creds.image.pullPolicy | toString ) . ) | quote }}
        resources:
          requests:
            memory: 128Mi
            cpu: 10m
          limits:
            memory: 128Mi
            cpu: 50m
        securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.credsContainerSecurityContext) | indent 10 }}
        command:
        - "/bin/bash"
        - -c
        - |
{{- if not ( tpl ( .Values.auth.authSecretName | toString ) . ) }}
          echo "=>>>Deleting {{ include "sch.names.fullCompName" (list . .sch.chart.components.authsecret) }} ..." && kubectl delete secret {{ include "sch.names.fullCompName" (list . .sch.chart.components.authsecret) }} -n {{ .Release.Namespace }}
{{- end }}
      restartPolicy: Never
{{- end }}
{{- end }}
{{ end }}
