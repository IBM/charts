{{- if include "ibm-minio.licenseValidate" .  | required "License must be accepted by setting license key to true" }}
{{- include "sch.config.init" (list . "ibmMinio.sch.config.values") -}}
apiVersion: v1
kind: Pod
metadata:
  name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.minioTest) | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.minioTest (dict "icpdsupport/addOnName" .Values.global.addOnName "icpdsupport/app" .sch.chart.components.minioTest "icpdsupport/serviceInstanceId" (.Values.global.zenServiceInstanceId | int64))) | indent 4 }}
  annotations:
    "helm.sh/hook": test-success
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering "" "" "") | indent 4 }}
spec:
  restartPolicy: Never
  hostNetwork: false
  hostPID: false
  hostIPC: false
  serviceAccountName: {{ include "ibm-minio.serviceAccountName" . | quote }}
  securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.minioPodSecurityContext) | indent 4 }}
  affinity:
{{ include "ibm-minio.affinity" (list . (dict "kind" "Pod" "component" .sch.chart.components.minioTest )) | indent 4 }}
{{- if .Values.nodeSelector }}
  nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
  volumes:
    - name: minio-configuration
      projected:
        sources:
        - configMap:
            name: {{ include "sch.names.fullName" (list .) | quote }}
        - secret:
            name: {{ if (tpl (.Values.existingSecret | toString ) . ) }}{{ tpl ( .Values.existingSecret | toString ) . }}{{ else }}{{ include "sch.names.fullCompName" (list . .sch.chart.components.authSecret) | quote }}{{ end }}
{{- if include "ibm-minio.boolConvertor" (list .Values.tls.enabled . ) }}
    - name: cert-secret-volume-mc
      secret:
      {{-  if (tpl (.Values.tls.certSecret | toString ) . ) }}
        secretName: {{ tpl (.Values.tls.certSecret | toString ) . }}
      {{-  else }}
        secretName: {{ include "sch.names.fullCompName" (list . .sch.chart.components.tlsSecret) | quote }}
      {{-  end }}
        items:
        - key: tls.crt
          path: public.crt
        - key: tls.key
          path: private.key
        - key: tls.cacrt
          path: CAs/public.crt
    {{ end }}
  containers:
    - name: minio-mc
      image:  {{ if .Values.global.dockerRegistryPrefix }}{{ trimSuffix "/" .Values.global.dockerRegistryPrefix }}/{{ end }}{{ .Values.minioClient.image.name }}:{{ .Values.minioClient.image.tag }}
      imagePullPolicy: {{ tpl ( .Values.minioClient.image.pullPolicy | toString ) . }}
      resources:
{{ toYaml .Values.resources | indent 10 }}
      securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.minioContainerSecurityContext) | indent 8 }}
      command: ["/bin/bash","-c","export MC_HOST_ibmminio=https://$MINIO_ACCESS_KEY:$MINIO_SECRET_KEY@$MINIO_ENDPOINT:$MINIO_PORT && /workdir/bin/mc ls ibmminio" ]
      env:
        - name: MINIO_ENDPOINT
          value: {{ include "sch.names.fullCompName" (list . .sch.chart.components.service) }}.{{ .Release.Namespace }}.svc.{{ tpl (.Values.clusterDomain | toString ) . }}
        - name: MINIO_PORT
          value: {{ .Values.service.port | quote }}
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ if (tpl (.Values.existingSecret | toString ) . ) }}{{ tpl (.Values.existingSecret | toString ) . }}{{ else }}{{ include "sch.names.fullCompName" (list . .sch.chart.components.authSecret) | quote }}
{{ end }}
              key: accesskey
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ if (tpl (.Values.existingSecret | toString ) . ) }}{{ tpl (.Values.existingSecret | toString ) . }}{{ else }}{{ include "sch.names.fullCompName" (list . .sch.chart.components.authSecret) | quote }}
{{ end }}
              key: secretkey
      volumeMounts:
        - name: minio-configuration
          mountPath: /config
{{- if include "ibm-minio.boolConvertor" (list .Values.tls.enabled . ) }}
        - name: cert-secret-volume-mc
          mountPath: {{ .Values.configPathmc }}certs
        {{ end }}
{{ end }}
