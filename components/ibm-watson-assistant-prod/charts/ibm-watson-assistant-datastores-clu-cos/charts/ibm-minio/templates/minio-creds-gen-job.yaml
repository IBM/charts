{{- if include "ibm-minio.licenseValidate" .  | required "License must be accepted by setting license key to true" }}
{{- include "sch.config.init" (list . "ibmMinio.sch.config.values") -}}
{{ if .Release.IsInstall }}
{{- if or (not (tpl (.Values.existingSecret | toString ) . )) (and (include "ibm-minio.boolConvertor" (list .Values.tls.enabled . )) (not (tpl (.Values.tls.certSecret | toString ) . ))) (and (include "ibm-minio.boolConvertor" (list .Values.sse.enabled . )) (not (tpl (.Values.sse.masterKeySecret | toString ) . ))) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.credsGen) | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.credsGen (dict "icpdsupport/addOnName" .Values.global.addOnName "icpdsupport/app" .sch.chart.components.credsGen "icpdsupport/serviceInstanceId" (.Values.global.zenServiceInstanceId | int64))) | indent 4 }}
  annotations:
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 300
  template:
    metadata:
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering "" "" "") | indent 8 }}
      labels:
{{ include "sch.metadata.labels.standard" (list . .sch.chart.components.credsGen (dict "icpdsupport/addOnName" .Values.global.addOnName "icpdsupport/app" .sch.chart.components.credsGen "icpdsupport/serviceInstanceId" (.Values.global.zenServiceInstanceId | int64))) | indent 8 }}
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      serviceAccountName: {{ include "ibm-minio.serviceAccountName" . | quote }}
      securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.credsPodSecurityContext) | indent 8 }}
      containers:
      - name: cred-gen
        image: {{ if .Values.global.dockerRegistryPrefix }}{{ trimSuffix "/" .Values.global.dockerRegistryPrefix }}/{{ end }}{{ .Values.creds.image.name }}:{{ .Values.creds.image.tag }}
        imagePullPolicy: {{ tpl ( .Values.creds.image.pullPolicy | toString ) . }}
        securityContext:
{{ include "sch.security.securityContext" (list . .sch.chart.credsContainerSecurityContext) | indent 10 }}
        resources:
          requests:
            memory: 128Mi
            cpu: 100m
          limits:
            memory: 128Mi
            cpu: 100m
        command:
        - "/bin/bash"
        - -c
        - |
{{- if and (include "ibm-minio.boolConvertor" (list .Values.tls.enabled . )) (not (tpl (.Values.tls.certSecret | toString ) . )) }}
          openssl genrsa -out ca.key 2048
          openssl req -x509 -new -nodes -key ca.key -subj "/CN={{ include "sch.names.fullName" (list .) }}" -days 3650 -reqexts v3_req -extensions v3_ca -out ca.crt
          cat >openssl.cnf <<EOL
          [req]
          req_extensions = v3_req
          distinguished_name = req_distinguished_name
          [req_distinguished_name]
          [ v3_req ]
          basicConstraints = CA:FALSE
          keyUsage = nonRepudiation, digitalSignature, keyEncipherment
          subjectAltName = @alt_names
          [alt_names]
          DNS.1 = {{ include "sch.names.fullName" (list .) }}
          DNS.2 = *.{{ include "sch.names.fullCompName" (list . .sch.chart.components.headless) }}.{{ .Release.Namespace }}.svc.{{ tpl ( .Values.clusterDomain | toString ) . }}
          DNS.3 = {{ include "sch.names.fullCompName" (list . .sch.chart.components.service) }}.{{ .Release.Namespace }}.svc.{{ tpl ( .Values.clusterDomain | toString ) . }}
          DNS.4 = localhost
          DNS.5 = 127.0.0.1
          EOL
          openssl genrsa -out minio.key 2048
          openssl req -new -key minio.key -out minio.csr -subj "/CN={{ include "sch.names.fullName" (list .) }}" -config openssl.cnf
          openssl x509 -req -in minio.csr \
            -CA ca.crt -CAkey ca.key -CAcreateserial \
            -out minio.crt -days 3650 -extensions v3_req -extfile openssl.cnf
{{- end }}
          cat <<EOF | kubectl create -n {{ .Release.Namespace }} -f -
{{- if and (include "ibm-minio.boolConvertor" (list .Values.tls.enabled . )) (not (tpl (.Values.tls.certSecret | toString ) . )) }}
          apiVersion: v1
          kind: Secret
          type: kubernetes.io/tls
          metadata:
            name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.tlsSecret) | quote }}
            labels:
{{ include "sch.metadata.labels.standard" (list .) | indent 14 }}
          data:
            tls.cacrt: $(cat ca.crt | base64 | tr -d '\n')
            tls.crt: $(cat minio.crt | base64 | tr -d '\n')
            tls.key: $(cat minio.key | base64 | tr -d '\n')
            tls.cacrt.str: $(sed '1d;$d' ca.crt | tr -d '\n' | base64 | tr -d '\n')
{{- end }}
{{- if not (tpl (.Values.existingSecret | toString ) . ) }}
          ---
          apiVersion: v1
          kind: Secret
          type: Opaque
          metadata:
            labels:
{{ include "sch.metadata.labels.standard" (list .) | indent 14 }}
            name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.authSecret) | quote }}
          data:
            accesskey: $(openssl rand -hex 18 | tr -d '\n' | base64 | tr -d '\n')
            secretkey: $(openssl rand -hex 18 | tr -d '\n' | base64 | tr -d '\n')
{{- end }}
{{- if and (include "ibm-minio.boolConvertor" (list .Values.sse.enabled . )) (not (tpl (.Values.sse.masterKeySecret | toString ) . )) }}
          ---
          apiVersion: v1
          kind: Secret
          type: Opaque
          metadata:
            name: {{ include "ibm-minio.sse.masterKeySecret" . | quote }}
            labels:
{{ include "sch.metadata.labels.standard" (list .) | indent 14 }}
          data:
            {{ tpl ( .Values.sse.masterKeyName | toString ) . | quote }}: $(echo "KEY_ID:$(openssl rand -hex 32 | tr -d '\n')" | tr -d '\n' | base64 | tr -d '\n')
{{- end }}
          EOF
      restartPolicy: Never
      affinity:
{{ include "ibm-minio.affinity" (list . (dict "kind" "Job" "component" .sch.chart.components.credsGen)) | indent 8 }}
{{- end }}
{{- end }}
{{ end }}
