{{/* vim: set filetype=mustache: */}}

{{/*
Display license
Copied wcn-addon's template and modified to display WKS license
because it's impossible to pass files of parent chart to sub-chart in Helm 2,
which might be fixed by helm 3 https://github.com/helm/helm/issues/1892
*/}}
{{- define "wks.license" -}}
  {{- $license := .Files.Get "LICENSES/LICENSE" -}}
  {{- $msg := "Please read the above license and set license=accept to install the product." -}}
  {{- $border := printf "\n%s\n" (repeat (len $msg ) "=") -}}
  {{- printf "\n%s\n\n\n%s%s%s" $license $border $msg $border -}}
{{- end -}}

{{/*
ImagePullSecrets for pods.
In case service account is injected by user, imagePullSecrets may not be attached to the account,
so add all WKS pod definition to imagePullSecrets field.
*/}}
{{- define "wks.docker.registry.secret" }}
  {{- if .Values.global.existingServiceAccount -}}
{{ include "wks.docker.imagePullSecrets" . }}
  {{- end -}}
{{- end }}

{{- define "wks.docker.imagePullSecrets" -}}
  {{- if or (or .Values.global.dockerRegistrySecret .Values.global.image.pullSecret) (not (.Capabilities.APIVersions.Has "security.openshift.io/v1")) -}}
imagePullSecrets:
    {{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
  - name: {{ printf "%s" (default (printf "sa-%s" .Release.Namespace) .Values.global.dockerRegistrySecret) }}
    {{- end }}
    {{- if .Values.global.dockerRegistrySecret }}
  - name: {{ .Values.global.dockerRegistrySecret }}
    {{- end }}
    {{- if .Values.global.image.pullSecret }}
  - name: {{ .Values.global.image.pullSecret }}
    {{- end }}
  {{- end -}}
{{- end }}

{{/*
Docker image name template
args: rootContext
args: image:
        repository: ""
        tag: ""
*/}}
{{- define "wks.docker.image.name" }}
{{- $rootContext := (index . 0) -}}
{{- $image := (index . 1 ) -}}
image: {{ if tpl ($rootContext.Values.global.dockerRegistryPrefix | toString ) $rootContext }}{{ trimSuffix "/" (tpl ($rootContext.Values.global.dockerRegistryPrefix | toString) $rootContext ) }}/{{ end }}{{ tpl ($image.repository | toString) $rootContext }}:{{ $image.tag }}
{{- end }}


{{/*
Internal cluster domain name of the services where chart is installed.
*/}}
{{- define "wks.k8s.svc.domain" }}
{{- printf "%s.svc.%s" .Release.Namespace .Values.global.clusterDomain }}
{{- end }}

{{/*****************************************************************************
   * Minio(S3) details
   **************************************************************************/}}

{{/*
Name template of Minio AccessSecret name
access secret is generated by sch on pre-install phase
*/}}
{{- define "wks.minio.access.secret.name" -}}
{{- printf "minio-access-secret-%s" .Release.Name }}
{{- end -}}

{{/*
Service name
*/}}
{{- define "wks.minio.service.name" -}}
{{- printf "%s-ibm-minio-svc" .Release.Name }}
{{- end -}}

{{- define "wks.minio.service.fullName" -}}
{{- printf "%s.%s" (include "wks.minio.service.name" .) (include "wks.k8s.svc.domain" .) }}
{{- end -}}

{{/*
Name template of Minio endpoint
*/}}
{{- define "wks.minio.endpoint" -}}
http{{ if .Values.global.s3.sslEnabled }}s{{ end }}://{{ include "wks.minio.service.fullName" . }}:9000
{{- end -}}

{{/*
Name template of Minio bucket name used by WKS Frontend and SIRE training
*/}}
{{- define "wks.minio.bucket.name" -}}
{{- .Values.global.s3.defaultBucket.name -}}
{{- end -}}

{{/*
Named template of the TLS certificate generated by Minio chart
*/}}
{{- define "wks.minio.tls.secret.name" -}}
{{ .Release.Name }}-ibm-minio-tls
{{- end -}}

{{/*****************************************************************************
   * Mongodb details
   **************************************************************************/}}

{{- define "wks.mongodb.admin.secretName" -}}
{{- include "ibm-wks-nosql.admin.secretName" . -}}
{{- end -}}

{{- define "wks.mongodb.cert.secretName" -}}
{{- include "ibm-wks-nosql.cert.secretName" . -}}
{{- end -}}

{{- define "wks.mongodb.endpoint" -}}
  {{- range $podNum, $_ := (until (int .Values.mongodb.replicas)) -}}
    {{- if not (eq $podNum 0) -}},{{- end -}}
    {{- printf "%s-%d.%s:27017" (include "ibm-wks-nosql.svc.statefulsetName" $) $podNum (include "ibm-wks-nosql.svc.fullName" $) }}
  {{- end -}}
{{- end -}}

{{/*****************************************************************************
   * PostgreSQL details
   **************************************************************************/}}

{{- define "wks.postgresql.service.endpoint" -}}
{{- printf "%s-%s-proxy-svc" .Release.Name .Values.global.postgres.nameOverride -}}
{{- end -}}

{{/*
Named template of PostgreSQL TLS secret name
*/}}
{{- define "wks.postgresql.tls.secret.name" -}}
{{ .Release.Name }}-ibm-postgresql-tls-secret
{{- end -}}

{{/*
Named template of PostgreSQL TLS auth secret name
*/}}
{{- define "wks.postgresql.auth.secret.name" -}}
{{ .Release.Name }}-ibm-postgresql-auth-secret
{{- end -}}

{{/*****************************************************************************
   * Certificates details
   **************************************************************************/}}

{{- define "wks.cert.internal.secret.name" -}}
{{- printf "internal-cert-%s" .Release.Name -}}
{{- end -}}

{{- define "wks.cert.internal.dns.name" }}
{{- printf "*.%s" (include "wks.k8s.svc.domain" .) }}
{{- end }}

{{/*****************************************************************************
   * SIRE templates details
   **************************************************************************/}}

{{/*
Named template of SIREG tokenizer service endpoint
Workaround for "sireTraining.siregEndpointTpl" depending on sub-chart's context
*/}}
{{- define "wks.sire.tokenizer.service.endpoint" -}}
{{- $rootContext := (index . 0) -}}
{{- $lang := (index . 1 ) -}}
{{ $rootContext.Release.Name }}-sire-training-sireg-{{ $lang }}:{{ $rootContext.Values.sire.sireg.securePort }}
{{- end -}}


{{/*****************************************************************************
   * WKS Frontend/Broker/Dispatcher common templates
   **************************************************************************/}}

{{/*
Name template of init container generating keystore from TLS cert/key.
Necessary volumes must be mounted using "wks.keystoregen.volumes".
*/}}
{{- define "wks.keystoregen.initcontainer" -}}
{{- $rootContext := (index . 0) -}}
{{- $keyStorePass := (index . 1 ) -}}
- name: pem-to-keystore
{{ include "wks.docker.image.name" (list $rootContext $rootContext.Values.initContainer.keystoreGen.image) | indent 2 }}
{{- include "sch.security.securityContext" (list $rootContext $rootContext.sch.chart.securityContext1) | indent 2 }}
  resources:
    limits:
      cpu: {{ $rootContext.Values.initContainer.resources.limits.cpu }}
      memory: {{ $rootContext.Values.initContainer.resources.limits.memory }}
    requests:
      cpu: {{ $rootContext.Values.initContainer.resources.requests.cpu }}
      memory: {{ $rootContext.Values.initContainer.resources.requests.memory }}
  env:
    - name: keyfile
      value: /mnt/tlscerts/tls.key
    - name: crtfile
      value: /mnt/tlscerts/tls.crt
    - name: keystore_pkcs12
      value: /mnt/keystores/keystore.pkcs12
    - name: keystore_jks
      value: /mnt/keystores/keystore.jks
    - name: keystore_passfile
      value: /mnt/keystores/password
    - name: password
      value: {{ $keyStorePass }}
  command: ['/bin/bash']
  args:
    - "-c"
    - "openssl pkcs12 -export -inkey $keyfile -in $crtfile -out $keystore_pkcs12 -password pass:$password && keytool -importkeystore -noprompt -srckeystore $keystore_pkcs12 -srcstoretype pkcs12 -destkeystore $keystore_jks -storepass $password -srcstorepass $password"
  volumeMounts:
    - name: keystore-volume
      mountPath: /mnt/keystores
    - name: service-certs
      mountPath: /mnt/tlscerts
{{- end -}}

{{/*
Name template of volumes list used by keystore gengeration init container.
*/}}
{{- define "wks.keystoregen.volumes" -}}
- name: keystore-volume
  emptyDir: {}
- name: service-certs
  secret:
    secretName: {{ template "wks.cert.internal.secret.name" . }}
{{- end -}}

{{/*
Volume mount fields for keystore volume generated by keystoregen init container.
*/}}
{{- define "wks.keystore.volumemount" -}}
- name: keystore-volume
  mountPath: /mnt/keystores
{{- end -}}

{{/*
Environment variable required to use the keystore generated by keystoregen init container.
*/}}
{{- define "wks.keystore.envvars" -}}
{{- $rootContext := (index . 0) -}}
{{- $keyStorePass := (index . 1 ) -}}
- name: KEYSTORE_PATH
  value: /mnt/keystores/keystore.jks
- name: KEYSTORE_PASSWORD
  value: {{ $keyStorePass }}
{{- end -}}

{{/*
affinity settings. Defaults values are in _sch-chart-config.tpl
*/}}
{{- define "wks.affinity" -}}
  {{- if .Values.affinity }}
    {{- $affinity := .Values.affinity -}}
    {{- if kindIs "map" $affinity }}
{{ toYaml $affinity }}
    {{- else }}
{{ tpl $affinity . }}
    {{- end -}}
  {{- else }}
{{- include "sch.affinity.nodeAffinity" (list . ) }}
  {{- end }}
{{- end -}}

{{/*****************************************************************************
   * WKS Frontend details
   **************************************************************************/}}

{{/*
Name template of Minio config used by WKS frontend
*/}}
{{- define "wks.frontend.minio.config" }}
{{- template "sch.names.fullName" (list .) }}-frontend-minio-config
{{- end }}

{{/*
The content of wks.frontend.minio.config
*/}}
{{- define "wks.frontend.minio.properties" }}
{{ printf "endpoint=%s" (include "wks.minio.endpoint" .) }}
{{ printf "wksgen.bucket=%s" (include "wks.minio.bucket.name" .) }}
{{ printf "wksts.bucket=%s" (include "wks.minio.bucket.name" .) }}
{{- end }}

{{/*
The Frontend properties for calling SIREG
*/}}
{{- define "wks.frontend.sireg.properties" }}
{{- $sireg := .Values.sire.sireg -}}
{{- $rootContext := . -}}
{{- range $langKey, $langValue := $sireg.languages -}}
{{ printf "tokenizer.%s=%s\n" $langKey (include "wks.sire.tokenizer.service.endpoint" (list $rootContext $langKey)) }}
{{- end }}
{{- end }}

{{/*
Name template of the depenent service config used by WKS frontend
*/}}
{{- define "wks.frontend.dependent.service.config" }}
{{- printf "%s-frontend-dependent-service-config" (include "sch.names.fullName" (list .)) }}
{{- end }}

{{- define "wks.frontend.ingress.path" }}
{{- printf "/%s" .Release.Name }}
{{- end }}

{{/*
Name template of MongoDB config used by WKS frontend
*/}}
{{- define "wks.frontend.mongodb.config" }}
{{- printf "%s-frontend-mongodb-config" (include "sch.names.fullName" (list .)) }}
{{- end }}

{{/*
The content of wks.frontend.mongodb.config
*/}}
{{- define "wks.frontend.mongodb.properties" }}
authenticationDatabase=admin
envdata.database=ENVDATA
endpoint={{ include "wks.mongodb.endpoint" . }}
sbsep.database=escloud_sbsep
{{- end }}

{{/*
Name template of helm test job of WKS frontend
*/}}
{{- define "wks.frontend.helm.test" }}
{{- printf "%s-connection-check" (include "sch.names.fullName" (list .)) }}
{{- end }}

{{/*
FIXME: This is workaround for ibm-wcn-addon
*/}}
{{- define "wks.frontend.svc.name" }}
{{- printf "%s-ibm-watson-ks" .Release.Name }}
{{- end }}

{{/*
FIXME: This is workaround for ibm-wcn-addon
*/}}
{{- define "wks.broker.svc.name" }}
{{- printf "%s-ibm-watson-ks-servicebroker" .Release.Name }}
{{- end }}

{{/*
FIXME: This is workaround for ibm-wcn-addon
*/}}
{{- define "wks.dispatcher.svc.name" }}
{{- printf "%s-ibm-watson-ks-dispatcher" .Release.Name }}
{{- end }}

{{/*

*/}}
{{- define "wks.envvar.enable.newfeature" -}}
  {{- if (not .Values.glimpse.create) }}
- name: DISABLE_GLIMPSE
  value: "true"
  {{- end }}
  {{- if (not .Values.awt.create) }}
- name: DISABLE_AWT
  value: "true"
  {{- end }}
{{- end -}}

{{/*****************************************************************************
   * MMA details
   **************************************************************************/}}

{{- define "wks.mma.service.endpoint" }}
{{- printf "https://%s-ibm-watson-mma-model-management-api" .Release.Name -}}:{{ .Values.global.mma.v1Port }}
{{- end }}



{{/*****************************************************************************
   * Etcd details
   **************************************************************************/}}

{{- define "wks.etcd.service.endpoint" }}
{{- printf "%s-ibm-etcd:2379" .Release.Name -}}
{{- end }}

{{- define "wks.etcd.auth.secret.name" -}}
{{ .Release.Name }}-ibm-etcd-root
{{- end -}}

{{- define "wks.etcd.tls.secret.name" -}}
{{ .Release.Name }}-ibm-etcd-tls
{{- end -}}


{{/*****************************************************************************
   * Glimpse details
   **************************************************************************/}}


{{- define "wks.glimpse.queryServer.service.name" }}
{{- printf "%s-%s-glimpse-query" .Release.Name .Values.global.appName -}}
{{- end }}

{{- define "wks.glimpse.builder.service.name" }}
{{- printf "%s-%s-glimpse-builder" .Release.Name .Values.global.appName -}}
{{- end }}

{{- define "wks.glimpse.builder.port" }}
{{- if .Values.glimpse.create }}
{{- .Values.glimpse.builder.port -}}
{{- end }}
{{- end }}



{{/*****************************************************************************
   * AWT details
   **************************************************************************/}}

{{/* Region name */}}
{{- define "wks.awt.region.name" -}}
rzhz11
{{- end -}}

{{- define "wks.awt.sslSecret.name" }}
{{- $compName := .sch.chart.components.awt.credentials.tls.name -}}
{{ include "sch.names.fullCompName" (list . $compName ) }}
{{- end }}

{{- define "wks.awt.service.name" }}
{{- $compName := .sch.chart.components.awt.name -}}
{{ include "sch.names.fullCompName" (list . $compName ) }}
{{- end }}

{{- define "wks.awt.service.port" }}
{{- .Values.awt.port -}}
{{- end }}

{{- define "wks.awt.service.fullName" }}
{{- printf "%s.%s" (include "wks.awt.service.name" .) (include "wks.k8s.svc.domain" .) }}
{{- end }}


{{- define "wks.awt.filePvc.name" }}
{{- $compName := .sch.chart.components.awt.filePvc.name -}}
{{ include "sch.names.fullCompName" (list . $compName ) | quote }}
{{- end }}

{{- define "wks.awt.filePvc.size" -}}
{{- .Values.awt.persistentVolume.size -}}
{{- end -}}

{{- define "wks.awt.replicas" }}
{{- .Values.awt.replicas }}
{{- end }}

{{- define "wks.awt.deployments.resources" -}}
{{- $resources := (index . 0 ) -}}
{{- toYaml $resources }}
{{- end -}}


{{/* ##### AWT--postgres connection settings ###### */}}
{{- define "wks.awt.postgresql.tls.secret.name" -}}
{{ include "wks.postgresql.tls.secret.name" . }}
{{- end -}}

{{- define "wks.awt.postgresql.auth.secret.name" -}}
{{- include "wks.postgresql.auth.secret.name" . -}}
{{- end -}}

{{- define "wks.awt.postgresql.auth.secret.userName" -}}
{{- .Values.global.postgresql.adminUser -}}
{{- end -}}

{{- define "wks.awt.postgresql.auth.secret.password.fieldName" -}}
{{- .Values.global.postgresql.authSecret.fieldAdminPassword -}}
{{- end -}}

{{- define "wks.awt.postgresql.tls.secret.cert.fieldName" -}}
{{- .Values.global.postgresql.tlsSecret.fieldRootCertificate -}}
{{- end -}}

{{- define "wks.awt.postgresql.service.endpoint" -}}
{{- include "wks.postgresql.service.endpoint" . -}}
{{- end -}}

{{- define "wks.awt.postgresql.db.name" -}}
awt
{{- end -}}

{{- define "wks.awt.postgresql.jdbc.connString" -}}
  {{- $host := (include "wks.postgresql.service.endpoint" . ) -}}
  {{- $port := .Values.global.postgresql.port | toString -}}
  {{- $db := (include "wks.awt.postgresql.db.name" . ) -}}
  {{- printf "jdbc:postgresql://%s:%s/%s" $host $port $db -}}
{{- end -}}

{{- define "wks.awt.postgresql.init.job.image" -}}
{{ if .Values.global.image.repository }}{{ trimSuffix "/" .Values.global.image.repository }}/{{ end }}{{ .Values.postgresql.postgres.image.name }}:{{ .Values.postgresql.postgres.image.tag }}
{{- end -}}

{{/*
{{- define "wks.awt.postgresql.tls.secret.key.fieldName" -}}
{{- .Values.awt.auth.fieldKey | default "tls.key" -}}
{{- end -}}
*/}}

{{/*****************************************************************************
   * WKS RBAC details
   * WKS chart creates a service account for sch to create/delete secrets.
   **************************************************************************/}}

{{- define "wks.role.name" -}}
{{ .Release.Name }}-ibm-watson-ks
{{- end -}}

{{- define "wks.serviceaccount.name" -}}
  {{- if tpl .Values.global.existingServiceAccount . -}}
{{- tpl .Values.global.existingServiceAccount . -}}
  {{- else -}}
{{ .Release.Name }}-ibm-watson-ks
  {{- end -}}
{{- end -}}

{{- define "wks.rolebinding.name" -}}
{{ .Release.Name }}-ibm-watson-ks
{{- end -}}

