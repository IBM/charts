global:
  foundationalServicesReleaseName: ""
  dockerRepository: ""
  createPv: true
  nfsServer: ""
  enableMonitoring: true
  deployOnIBMCloud: false
  passwords:
    grafanauser: ""

arch: amd64

rbac:
  create: true
  pspEnabled: true
  pspUseAppArmor: true
serviceAccount:
  create: true
  name: ""

replicas: 1

readinessProbe:
  httpGet:
    path: /api/health
    scheme: HTTPS
    port: 3000

livenessProbe:
  httpGet:
    path: /api/health
    scheme: HTTPS
    port: 3000
  initialDelaySeconds: 60
  timeoutSeconds: 30
  failureThreshold: 10

image:
  repository: ibmcom/fci-grafana
  tag: 6.3.3
  pullPolicy: IfNotPresent

  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistrKeySecretName

securityContext:
  runAsUser: 472
  fsGroup: 472

## Assign a PriorityClassName to pods if set
# priorityClassName:

## Pod Annotations
podAnnotations: {}

## Deployment annotations
annotations: {}

## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  type: ClusterIP
  port: 3000
  annotations: {}
  labels: {}

#Grafana - Not deployed in CPD
resources:
  requests:
    memory: "32Mi"
    cpu: 0.01
  limits:
    memory: "512Mi"
    cpu: 0.5

## Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
#
nodeSelector: {}

## Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## Affinity for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##

pvNfsPath: /fci-grafana-data

pvcSpec:
  storageClassName: nfs-storage-class
  accessModes:
    - ReadWriteOnce
  size: 2Gi

# Administrator credentials when not using an existing secret (see below)
adminUser: grafanauser

# Use an existing secret for the admin user.
admin:
  existingSecret: ""
  userKey: admin-user
  passwordKey: admin-password


## Extra environment variables that will be pass onto deployment pods
env:
  GF_SERVER_PROTOCOL: https
  GF_SERVER_CERT_FILE: /etc/grafana/fci.crt
  GF_SERVER_CERT_KEY: /etc/grafana/fci.pem

## The name of a secret in the same kubernetes namespace which contain values to be added to the environment
## This can be useful for auth tokens, etc
envFromSecret: ""

## Additional grafana server secret mounts
# Defines additional mounts with secrets. Secrets must be manually created in the namespace.
extraSecretMounts: []
  # - name: secret-files
  #   mountPath: /etc/secrets
  #   secretName: grafana-secret-files
  #   readOnly: true

## Additional grafana server volume mounts
# Defines additional volume mounts.
extraVolumeMounts: []
  # - name: extra-volume
  #   mountPath: /mnt/volume
  #   readOnly: true
  #   existingClaim: volume-claim

## Pass the plugins you want installed as a list.
##
plugins: []
  # - digrich-bubblechart-panel
  # - grafana-clock-panel

## Configure grafana dashboard providers
## ref: http://docs.grafana.org/administration/provisioning/#dashboards
##
## `path` must be /var/lib/grafana/dashboards/<provider_name>
##
dashboardProviders:
  dashboardproviders.yaml:
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      editable: true
      options:
        path: /var/lib/grafana/dashboards/default

## Configure grafana dashboard to import
## NOTE: To use dashboards you must also enable/configure dashboardProviders
## ref: https://grafana.com/dashboards
##
## dashboards per provider, use provider name as key.
##
dashboards:
  default:
    node-exporter-dashboard:
      json: dashboards/node-exporter.json
    kubernetes-cluster-monitoring-dashboard:
      json: dashboards/kubernetes-cluster-monitoring.json
    kubernetes-cluster-alerts-dashboard:
      json: dashboards/kubernetes-cluster-alerts.json

## Reference to external ConfigMap per provider. Use provider name as key and ConfiMap name as value.
## A provider dashboards must be defined either by external ConfigMaps or in values.yaml, not in both.
## ConfigMap data example:
##
## data:
##   example-dashboard.json: |
##     RAW_JSON
##
dashboardsConfigMaps: {}
#  default: ""

## Grafana's primary configuration
## NOTE: values in map will be converted to ini format
## ref: http://docs.grafana.org/installation/configuration/
##
grafana.ini:
  paths:
    data: /var/lib/grafana/data
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning
  analytics:
    check_for_updates: false
  log:
    mode: console
  grafana_net:
    url: https://grafana.net


## Grafana's SMTP configuration
## NOTE: To enable, grafana.ini must be configured with smtp.enabled
## ref: http://docs.grafana.org/installation/configuration/#smtp
smtp:
  # `existingSecret` is a reference to an existing secret containing the smtp configuration
  # for Grafana.
  existingSecret: ""
  userKey: "user"
  passwordKey: "password"
