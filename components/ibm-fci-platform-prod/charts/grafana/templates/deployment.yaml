{{- if and .Values.global.enableMonitoring (not (or .Values.global.deployOnIBMCloud .Values.global.deployOnEKS .Values.global.deployOnCP4D)) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "grafana.fullname" . }}
  labels:
    app: {{ template "grafana.name" . }}
    chart: {{ template "grafana.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- with .Values.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}
spec:
{{ include "grafana.scaleDownIfDisabled" . | indent 2 }}
  selector:
    matchLabels:
      app: {{ template "grafana.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "grafana.name" . }}
        release: {{ .Release.Name }}
      annotations:
{{ include "common.meteringAnnotations" . | indent 8 }}      
{{- with .Values.podAnnotations }}        
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
{{ include "common.configureHostAliases" . | indent 6 }}
      serviceAccountName: {{ template "grafana.serviceAccountName" . }}
{{- if .Values.schedulerName }}
      schedulerName: "{{ .Values.schedulerName }}"
{{- end }}
{{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
{{- end }}
{{- if .Values.securityContext }}
      securityContext:
{{ toYaml .Values.securityContext | indent 8 }}
{{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.global.dockerRepository }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            capabilities:
              drop:
              - ALL
          volumeMounts:
            - name: file-secrets
              mountPath: /etc/grafana/fci.pem
              subPath: fci_universal_ks.pvtk.pem
            - name: file-secrets
              mountPath: /etc/grafana/fci.crt
              subPath: fci_universal_ks.crt.pem
            - name: config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
            - name: storage
              mountPath: "/var/lib/grafana"
{{- if .Values.dashboards }}
  {{- range $provider, $dashboards := .Values.dashboards }}
    {{- range $key, $value := $dashboards }}
      {{- if hasKey $value "json" }}
            - name: dashboards-{{ $provider }}
              mountPath: "/var/lib/grafana/dashboards/{{ $provider }}/{{ $key }}.json"
              subPath: "{{ $key }}.json"
      {{- end }}
    {{- end }}
  {{- end }}
{{- end -}}
{{- if .Values.dashboardsConfigMaps }}
  {{- range keys .Values.dashboardsConfigMaps }}
            - name: dashboards-{{ . }}
              mountPath: "/var/lib/grafana/dashboards/{{ . }}"
  {{- end }}
{{- end }}
            - name: config
              mountPath: "/etc/grafana/provisioning/datasources/datasources.yaml"
              subPath: datasources.yaml
{{- if .Values.dashboardProviders }}
            - name: config
              mountPath: "/etc/grafana/provisioning/dashboards/dashboardproviders.yaml"
              subPath: dashboardproviders.yaml
{{- end }}
          {{- range .Values.extraSecretMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              readOnly: {{ .readOnly }}
          {{- end }}
          {{- range .Values.extraVolumeMounts }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              readOnly: {{ .readOnly }}
          {{- end }}
          ports:
            - name: service
              containerPort: {{ .Values.service.port }}
              protocol: TCP
            - name: grafana
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              value: {{ .Values.adminUser }}
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.admin.existingSecret | default (printf "%s-platform-secrets-env" .Release.Name) }}
                  key: {{ .Values.admin.passwordKey | default "admin-password" }}
            {{- if .Values.plugins }}
            - name: GF_INSTALL_PLUGINS
              valueFrom:
                configMapKeyRef:
                  name: {{ template "grafana.fullname" . }}
                  key: plugins
            {{- end }}
            {{- if .Values.smtp.existingSecret }}
            - name: GF_SMTP_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.smtp.existingSecret }}
                  key: {{ .Values.smtp.userKey | default "user" }}
            - name: GF_SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.smtp.existingSecret }}
                  key: {{ .Values.smtp.passwordKey | default "password" }}
            {{- end }}
{{- range $key, $value := .Values.env }}
            - name: "{{ $key }}"
              value: "{{ $value }}"
{{- end }}
          {{- if .Values.envFromSecret }}
          envFrom:
            - secretRef:
                name: {{ .Values.envFromSecret }}
          {{- end }}
          livenessProbe:
{{ toYaml .Values.livenessProbe | indent 12 }}
          readinessProbe:
{{ toYaml .Values.readinessProbe | indent 12 }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
      affinity:
{{ include "common.ArchNodeAffinity" . | indent 8 }}
    {{- with .Values.affinity }}
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
      volumes:
        - name: file-secrets
          secret:
            secretName: {{ .Release.Name }}-platform-secret-files
        - name: config
          configMap:
            name: {{ template "grafana.fullname" . }}
        {{- if .Values.dashboards }}
          {{- range keys .Values.dashboards }}
        - name: dashboards-{{ . }}
          configMap:
            name: {{ template "grafana.fullname" $ }}-dashboards-{{ . }}
          {{- end }}
        {{- end }}
        {{- if .Values.dashboardsConfigMaps }}
          {{- range $provider, $name := .Values.dashboardsConfigMaps }}
        - name: dashboards-{{ $provider }}
          configMap:
            name: {{ $name }}
          {{- end }}
        {{- end }}
        - name: storage
          persistentVolumeClaim:
            claimName: {{ default (include "grafana.fullname" .) }}
      {{- range .Values.extraSecretMounts }}
        - name: {{ .name }}
          secret:
            secretName: {{ .secretName }}
            defaultMode: {{ .defaultMode }}
      {{- end }}
      {{- range .Values.extraVolumeMounts }}
        - name: {{ .name }}
          persistentVolumeClaim:
            claimName: {{ .existingClaim }}
      {{- end }}
{{- end -}}
