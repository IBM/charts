{{- $advertisedListenersOverride := first (pluck "advertised.listeners" .Values.configurationOverrides) }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "kafka.fullname" . }}
  labels:
    app: {{ include "kafka.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ include "kafka.name" . }}
      release: {{ .Release.Name }}
  serviceName: {{ include "kafka.fullname" . }}-headless
  podManagementPolicy: {{ .Values.podManagementPolicy }}
{{ if .Values.enabled }}
  replicas: {{ default 3 .Values.replicas }}
{{ else }}
  replicas: 0
{{ end }}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Release.Name }}-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.pvcSpec.size }}
{{- if .Values.global.persistence.useDynamicProvisioning }}
{{-   if not .Values.pvcSpec.storageClassName }}
      storageClassName: {{ default nil .Values.global.persistence.storageClassName | quote }}
{{-   else }}
      storageClassName: {{ .Values.pvcSpec.storageClassName | quote }}
{{-   end }}
{{- else }}
      storageClassName: {{ default "" .Values.pvcSpec.storageClassName | quote }}
{{- end }}
{{- if not .Values.global.persistence.useDynamicProvisioning }}
      selector:
        matchLabels:
          app: {{ template "kafka.name" . }}
          release: {{ .Release.Name }}
{{ end }}
  template:
    metadata:
      annotations:
{{ include "common.meteringAnnotations" . | indent 8 }}
      labels:
        app: {{ include "kafka.name" . }}
        release: {{ .Release.Name }}
        chart: {{ template "kafka.chart" . }}
        heritage: {{ .Release.Service }}
    spec:
{{ include "common.configureHostAliases" . | indent 6 }}
{{ include "common.PodHostConfig" . | indent 6 }}
      securityContext:
{{ include "common.PodSecurityContextConfig" . | indent 8 }}
{{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
{{- end }}
      affinity:
{{ include "common.ArchNodeAffinity" . | indent 8 }}
{{- if .Values.affinity }}
{{ toYaml .Values.affinity | indent 8 }}
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
      serviceAccount: {{ include "kafka.fullname" . }}
      serviceAccountName: {{ include "kafka.fullname" . }}
      initContainers:
        {{- if or .Values.global.deployOnIBMCloud .Values.global.deployOnEKS }}
        - name: permissionsfix
          securityContext:
            runAsNonRoot: false
            privileged: false
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
              add:
              - CHOWN 
          args:
          - chown -R 1000:1000 /mount;
          command:
          - /bin/sh
          - -c
          image: "{{ required "global.dockerRepository must specify from which repository the docker image should be fetched." .Values.global.dockerRepository }}/{{ .Values.global.commonScripts.image.repository }}:{{ .Values.global.commonScripts.image.tag }}"
          resources:
{{ toYaml .Values.sideCarContainers.resources | indent 12 }}
          volumeMounts:
          - mountPath: /mount
            name: {{ .Release.Name }}-data
        {{- end }}
        - name: init-svc-depend
          image: "{{ required "global.dockerRepository must specify from which repository the docker image should be fetched." .Values.global.dockerRepository }}/{{ .Values.global.commonScripts.image.repository }}:{{ .Values.global.commonScripts.image.tag }}"
          resources:
{{ toYaml .Values.sideCarContainers.resources | indent 12 }}
          command: [ "/common-scripts/init-container-svc-depend.sh" ]
          securityContext:
{{ include "common.AnyuidContainerSecurityContext" . | indent 12 }}
            capabilities:
              drop:
              - ALL
          args: [ "{{ .Release.Namespace }}/{{ .Release.Name }}-kafka-zk" ]
        - name: nodeport-data
          image: "{{ required "global.dockerRepository must specify from which repository the docker image should be fetched." .Values.global.dockerRepository }}/{{ .Values.global.commonScripts.image.repository }}:{{ .Values.global.commonScripts.image.tag }}"
          env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          resources:
{{ toYaml .Values.sideCarContainers.resources | indent 12 }}
          securityContext:
{{ include "common.AnyuidContainerSecurityContext" . | indent 12 }}
            capabilities:
              drop:
              - ALL
          volumeMounts:
          - name: config-data
            mountPath: /data
          command:
            - sh
            - -c
            - |
              source /common-scripts/configure && \
              $KUBECTL get svc | grep $POD_NAME | awk '{ print $5 }' | cut -d':' -f 2 | cut -d'/' -f 1 > /data/nodeport && \
              export NODE_PORT=$(cat /data/nodeport) && \
              ($KUBECTL patch svc ${POD_NAME}-external --patch '{"spec": {"ports": [{"port": 19092,"targetPort": '${NODE_PORT}'}]}}' || exit 0)
      containers:
      - name: {{ include "kafka.name" . }}-broker
        image: "{{ .Values.global.dockerRepository }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        livenessProbe:
          exec:
            command:
              - sh
              - -ec
              - /usr/bin/jps | /bin/grep -q SupportedKafka
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        readinessProbe:
          tcpSocket:
            port: kafka
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        ports:
        - containerPort: 9092
          name: kafka
        resources:
{{ toYaml .Values.resources | indent 10 }}
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: MASTER_HOST
          value: {{ .Values.global.managerFQDN }}
        - name: ULIMIT_NOFILES
          value: {{ .Values.ulimitNofiles | quote }}
        - name: KAFKA_HEAP_OPTS
          value: {{ .Values.kafkaHeapOptions }}
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: {{ .Values.replicas | quote }} 
        - name: KAFKA_DEFAULT_REPLICATION_FACTOR
          value: {{ .Values.replicas | quote }}
        - name: KAFKA_MESSAGE_MAX_BYTES
          value: {{ int .Values.messageMaxBytes | quote}}
        - name: KAFKA_REPLICA_FETCH_MAX_BYTES
          value: {{ int .Values.messageMaxBytes | quote }} 
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: {{ include "kafka.zookeeper.connect" . }} 
        - name: KAFKA_LOG4J_LOGGERS
          value: "kafka.controller=WARN,state.change.logger=WARN,kafka.log.LogCleaner=WARN,kafka=WARN"
        - name: CONNECT_LOG4J_ROOT_LOGLEVEL
          value: WARN
        - name: KAFKA_TOOLS_LOG4J_ROOT_LOGLEVEL
          value: WARN
        - name: KAFKA_LOG4J_ROOT_LOGLEVEL
          value: WARN
        - name: KAFKA_LOG_DIRS
          value: {{ printf "%s/%s" .Values.persistence.mountPath .Values.logSubPath | quote }}
        - name: KAFKA_SSL_CLIENT_AUTH
          value: required
        - name: KAFKA_SSL_KEYSTORE_FILENAME
          value: kafka.client.keystore.jks
        - name: KAFKA_SSL_TRUSTSTORE_FILENAME
          value: kafka.client.truststore.jks
        - name: KAFKA_SSL_KEY_CREDENTIALS
          value: kafka.client.jks.credentials
        - name: KAFKA_SSL_KEYSTORE_CREDENTIALS
          value: kafka.client.jks.credentials
        - name: KAFKA_SSL_TRUSTSTORE_CREDENTIALS
          value: kafka.client.jks.credentials
        {{- range $key, $value := .Values.configurationOverrides }}
        - name: {{ printf "KAFKA_%s" $key | replace "." "_" | upper | quote }}
          value: {{ $value | quote }}
        {{- end }}
        # This is required because the Downward API does not yet support identification of
        # pod numbering in statefulsets. Thus, we are required to specify a command which
        # allows us to extract the pod ID for usage as the Kafka Broker ID.
        # See: https://github.com/kubernetes/kubernetes/issues/31218
        command:
        - sh
        - -ec
        - |
          unset KAFKA_PORT && \
          export NODE_PORT=$(cat /data/nodeport) && \
          export KAFKA_BROKER_ID=${HOSTNAME##*-} && \
          export KAFKA_ADVERTISED_LISTENERS=SSL://${POD_IP}:9092{{ if kindIs "string" $advertisedListenersOverride }}{{ printf ",%s" $advertisedListenersOverride }}{{ end }} && \
          ulimit -n "${ULIMIT_NOFILES}" && \
          ulimit -a && \
          exec /etc/confluent/docker/run
        securityContext:
{{ include "common.PrivilegedContainerSecurityContext" . | indent 10 }}
          capabilities:
            drop:
            - ALL
            add: ["SYS_RESOURCE"]
          runAsUser: 0
        volumeMounts:
        - name: {{ .Release.Name }}-data
          mountPath: {{ .Values.persistence.mountPath | quote }}
        - name: file-secrets
          mountPath: /etc/kafka/secrets/kafka.client.truststore.jks
          subPath: fci_universal_ks.jks
        - name: file-secrets
          mountPath: /etc/kafka/secrets/kafka.client.keystore.jks
          subPath: fci_universal_ks.jks
        - name: env-secrets
          mountPath: /etc/kafka/secrets/kafka.client.jks.credentials
          subPath: FCI_JKS_PASSWORD
        - name: config-data
          mountPath: /data
      volumes:
      - name: env-secrets
        secret:
          secretName: {{ .Release.Name }}-platform-secrets-env
      - name: file-secrets
        secret:
          secretName: {{ .Release.Name }}-platform-secret-files
      - name: config-data
        emptyDir: {}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
