apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "security-audit.fullname" . }}-app
  labels:
{{- include "common.label.metadata" (list . (printf "%s-%s" (include "security-audit.name" .) "app") (include "security-audit.chart" .) .Release.Name .Release.Service ) | indent 4 }}
spec:
{{ include "common.scaleDownIfDisabled" . | indent 2 }}
  selector:
    matchLabels:
      app: {{ template "security-audit.name" . }}-app
      release: {{ .Release.Name }}
{{- include "common.selector.labels" (list . (printf "%s-%s" (include "security-audit.name" .) "app" ) .Release.Name ) | indent 6 }}
  template:
    metadata:
      annotations:
{{ include "common.meteringAnnotations" . | indent 8 }}
      labels:
{{- include "common.label.metadata" (list . (printf "%s-%s" (include "security-audit.name" .) "app") (include "security-audit.chart" .) .Release.Name .Release.Service ) | indent 8 }}
{{- include "common.using-secrets" (list "db2" "platform") | indent 8 }}
    spec:
{{ include "common.configureHostAliases" . | indent 6 }}
{{ include "common.PodHostConfig" . | indent 6 }}
      securityContext:
{{ include "common.PodSecurityContextConfig" . | indent 8 }}
      serviceAccountName: fci-common-scripts
      volumes:
      - name: file-secrets
        secret:
          secretName: {{ .Release.Name }}-platform-secret-files
      - name: logs
        emptyDir: {}
      initContainers:
        - name: init-svc-depend
          image: "{{ required "global.dockerRegistryPrefix must specify from which repository the docker image should be fetched." .Values.global.dockerRegistryPrefix }}/{{ .Values.global.commonScripts.image.repository }}:{{ .Values.global.commonScripts.image.tag }}"
          command: [ "/common-scripts/init-container-svc-depend.sh" ]
          resources:
{{ toYaml .Values.sideCarContainers.resources | indent 12 }}
          args: [ "{{ .Release.Namespace }}/{{ .Release.Name }}-{{ .Values.config.db2_service }}" ]
          securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 12 }}
        - name: security-audit-data-store
          image: "{{ required "global.dockerRegistryPrefix must specify from which repository the docker image should be fetched." .Values.global.dockerRegistryPrefix }}/{{ .Values.db2.image.repository }}:{{ .Values.db2.image.tag }}"
          imagePullPolicy: {{ .Values.db2.image.pullPolicy }}
          resources:
{{ toYaml .Values.db2.resources | indent 12 }}
          securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 12 }}
              - ALL
          args: ["migrate"]
          envFrom:
          - configMapRef:
              name: {{ template "security-audit.fullname" . }}
          env:
{{- include "common.import-secret" (list . "FLYWAY_PASSWORD" "db2" "DB2INST1_PASSWORD") | indent 10 }}
{{- include "common.import-secret" (list . "SSL_KEYSTORE_PASSWORD_CONFIG" "platform" "FCI_JKS_PASSWORD") | indent 10 }}
          - name: FLYWAY_URL
            value: "{{ printf "jdbc:db2://%s-%s:56000/fcidb:sslConnection=true;sslTrustStoreLocation=/fci_universal_ks.jks;sslTrustStorePassword=$(SSL_KEYSTORE_PASSWORD_CONFIG);" .Release.Name .Values.config.db2_service }}"
          volumeMounts:
            - name: file-secrets
              mountPath: /fci_universal_ks.jks
              subPath: fci_universal_ks.jks
      containers:
        - name: security-audit-app
          image: "{{ required "When global.createPv is set to true, global.nfsServer must specify the NFS server that holds the persistent volume." .Values.global.dockerRegistryPrefix }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 12 }}
          livenessProbe:
{{ toYaml .Values.liberty.livenessProbe | indent 12 }}
          readinessProbe:
{{ toYaml .Values.liberty.readinessProbe | indent 12 }}
          envFrom:
          - configMapRef:
              name: {{ template "security-audit.fullname" . }}
          env:
{{- include "common.import-secret" (list . "SSL_TRUSTSTORE_PASSWORD_CONFIG" "platform" "FCI_JKS_PASSWORD") | indent 10 }}
{{- include "common.import-secret" (list . "SSL_KEYSTORE_PASSWORD_CONFIG" "platform" "FCI_JKS_PASSWORD") | indent 10 }}
{{- include "common.import-secret" (list . "SSL_KEY_PASSWORD_CONFIG" "platform" "FCI_JKS_PASSWORD") | indent 10 }}
{{- include "common.import-secret" (list . "FCI_KAFKA_MSG_KS_ALIASNAME" "platform" "FCI_KAFKA_MSG_JKS_ALIASNAME") | indent 10 }}
{{- include "common.import-secret" (list . "FCI_KAFKA_MSG_KS_PASSWORD" "platform" "FCI_KAFKA_MSG_JKS_PASSWORD") | indent 10 }}
{{- include "common.import-secret" (list . "com_fci_keystore_password" "platform" "FCI_JKS_PASSWORD") | indent 10 }}
{{- include "common.import-secret" (list . "com_fci_db2_password" "db2" "FCIAUTHID_PASSWORD") | indent 10 }}
{{- include "common.import-secret" (list . "JWT_KEY" "platform" "JWT_KEY") | indent 10 }}
          ports:
          - containerPort: 9080
          - containerPort: 9443
          volumeMounts:
          - name: file-secrets
            mountPath: /opt/ibm/wlp/usr/servers/fciServer/resources/security/fci_universal_ks.jks
            subPath: fci_universal_ks.jks
          - name: file-secrets
            mountPath: /opt/ibm/wlp/usr/servers/fciServer/resources/security/kafka.client.truststore.jks
            subPath: fci_universal_ks.jks
          - name: file-secrets
            mountPath: /opt/ibm/wlp/usr/servers/fciServer/resources/security/kafka.client.keystore.jks
            subPath: fci_universal_ks.jks
          - name: file-secrets
            mountPath: /opt/ibm/wlp/usr/servers/fciServer/resources/security/fci_kafka_msg.p12
            subPath: fci_kafka_msg.p12
          - name: logs
            mountPath: /opt/ibm/wlp/usr/servers/fciServer/logs
        - name: message-log
          image: "{{ required "global.dockerRegistryPrefix must specify from which repository the docker image should be fetched." .Values.global.dockerRegistryPrefix }}/{{ .Values.global.commonScripts.image.repository }}:{{ .Values.global.commonScripts.image.tag }}"
          args: [/bin/sh, -c, 'tail -n+1 -F /logs/messages.log']
          resources:
{{ toYaml .Values.sideCarContainers.resources | indent 12 }}
{{ include "common.sideCarHealthCheck" . | indent 10 }}
          securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 12 }}
          volumeMounts:
          - name: logs
            mountPath: /logs
        - name: trace-log
          image: "{{ required "global.dockerRegistryPrefix must specify from which repository the docker image should be fetched." .Values.global.dockerRegistryPrefix }}/{{ .Values.global.commonScripts.image.repository }}:{{ .Values.global.commonScripts.image.tag }}"
          resources:
{{ toYaml .Values.sideCarContainers.resources | indent 12 }}
{{ include "common.sideCarHealthCheck" . | indent 10 }}
          args: [/bin/sh, -c, 'tail -n+1 -F /logs/trace.log']
          securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 12 }}
          volumeMounts:
          - name: logs
            mountPath: /logs
{{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
      affinity:
{{ include "common.ArchNodeAffinity" . | indent 8 }}
{{- with .Values.affinity }}
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
