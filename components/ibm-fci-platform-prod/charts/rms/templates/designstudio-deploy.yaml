apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "rms.fullname" . }}-designstudio
  labels:
    app: {{ template "rms.name" . }}-designstudio
    chart: {{ template "rms.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
{{ include "common.scaleDownIfDisabled" . | indent 2 }}
  selector:
    matchLabels:
      app: {{ template "rms.name" . }}-designstudio
      release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
{{ include "common.meteringAnnotations" . | indent 8 }}
      labels:
        app: {{ template "rms.name" . }}-designstudio
        release: {{ .Release.Name }}
        chart: {{ template "rms.chart" . }}
        heritage: {{ .Release.Service }}
    spec:
{{ include "common.configureHostAliases" . | indent 6 }}
{{ include "common.PodHostConfig" . | indent 6 }}
      securityContext:
{{ include "common.PodSecurityContextConfig" . | indent 8 }}
      serviceAccountName: {{ .Release.Name }}-common-scripts
      volumes:
        - name: file-secrets
          secret:
            secretName: {{ .Release.Name }}-platform-secret-files
        - name: db2-instance
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-db2-scripts-{{ .Release.Name }}-{{ .Values.rmsConfig.db2_service }}
        - name: rms-designstudio-common
          persistentVolumeClaim:
            claimName: {{ template "rms.fullname" . }}-designstudio-training
        - name: rms-designstudio-modules
          persistentVolumeClaim:
            claimName: {{ template "rms.fullname" . }}-designstudio-modules
        - name: rms-designstudio-hdfs
          persistentVolumeClaim:
            claimName: {{ template "rms.fullname" . }}-designstudio-hdfs
        - name: rms-designstudio-liberty-volume
          persistentVolumeClaim:
            claimName: {{ template "rms.fullname" . }}-designstudio-liberty
        - name: logs
          emptyDir: {}
      initContainers:
        - name: init-svc-depend
          image: "{{ required "global.dockerRepository must specify from which repository the docker image should be fetched." .Values.global.dockerRepository }}/{{ .Values.global.commonScripts.image.repository }}:{{ .Values.global.commonScripts.image.tag }}"
          resources:
{{ toYaml .Values.sideCarContainers.resources | indent 12 }}
          command: [ "/common-scripts/init-container-svc-depend.sh" ]
          securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 12 }}
          args: [ "{{ .Release.Namespace }}/{{ .Release.Name }}-{{ .Values.rmsConfig.db2_service }}" ]
        - name: rms-data-store
          image: "{{ required "global.dockerRepository must specify from which repository the docker image should be fetched." .Values.global.dockerRepository }}/{{ .Values.db2Client.image.repository }}:{{ .Values.db2Client.image.tag }}"
          resources:
{{ toYaml .Values.db2Client.resources | indent 12 }}
          imagePullPolicy: {{ .Values.db2Client.image.pullPolicy }}
          securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 12 }}
          command: ["/bin/sh","-c"]
          args: ["mkdir -p /db2Instance/fcrms; cp -r /flyway/mountable/fcrms/* /db2Instance/fcrms/; ls -latr /db2Instance/fcrms/rmsmaster; /flyway/flyway migrate"]
          envFrom:
          - configMapRef:
              name: {{ template "rms.fullname" . }}
          env:
          - name: FLYWAY_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-platform-secrets-env
                key: DB2INST1_PASSWORD
          - name: SSL_KEYSTORE_PASSWORD_CONFIG
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-platform-secrets-env
                key: FCI_JKS_PASSWORD
          - name: FLYWAY_URL
            value: "{{ printf "jdbc:db2://%s-%s:56000/fcidb:sslConnection=true;sslTrustStoreLocation=/fci_universal_ks.jks;sslTrustStorePassword=$(SSL_KEYSTORE_PASSWORD_CONFIG);" .Release.Name .Values.rmsConfig.db2_service }}"
          volumeMounts:
            - name: file-secrets
              mountPath: /fci_universal_ks.jks
              subPath: fci_universal_ks.jks
            - name: db2-instance
              mountPath: /db2Instance
      containers:
        - name: rms-designstudio
          image: "{{ required "When global.createPv is set to true, global.nfsServer must specify the NFS server that holds the persistent volume." .Values.global.dockerRepository }}/{{ .Values.rmsDesignStudio.image.repository }}:{{ .Values.rmsDesignStudio.image.tag }}"
          imagePullPolicy: {{ .Values.rmsDesignStudio.image.pullPolicy }}
{{ include "common.readinessProbe" . | indent 10 }}
{{ include "common.livenessProbe" . | indent 10 }}
          securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 12 }}
          envFrom:
          - configMapRef:
              name: {{ template "rms.fullname" . }}
          env:
          - name: LIVY_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-platform-secrets-env
                key: LIVY_PASSWORD
          - name: ACTIANCE_REST_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-platform-secrets-env
                key: ACTIANCE_REST_PASSWORD
          - name: rms_wasadmin_password
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-platform-secrets-env
                key: rms_wasadmin_password
          - name: STREAMS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-platform-secrets-env
                key: STREAMS_PASSWORD
          - name: WATSON_S2T_SERVICE_APIKEY
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-platform-secrets-env
                key: WATSON_S2T_SERVICE_APIKEY
          - name: SSL_TRUSTSTORE_PASSWORD_CONFIG
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-platform-secrets-env
                key: FCI_JKS_PASSWORD
          - name: SSL_KEYSTORE_PASSWORD_CONFIG
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-platform-secrets-env
                key: FCI_JKS_PASSWORD
          - name: SSL_KEY_PASSWORD_CONFIG
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-platform-secrets-env
                key: FCI_JKS_PASSWORD
          - name: FCI_KAFKA_MSG_KS_ALIASNAME
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-platform-secrets-env
                key: FCI_KAFKA_MSG_JKS_ALIASNAME
          - name: FCI_KAFKA_MSG_KS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-platform-secrets-env
                key: FCI_KAFKA_MSG_JKS_PASSWORD
          - name: SERVER_TRUSTSTORE_PWD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-platform-secrets-env
                key: FCI_JKS_PASSWORD
          - name: rms_db2_password
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-platform-secrets-env
                key: FCIAUTHID_PASSWORD
          - name: JWT_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-platform-secrets-env
                key: JWT_KEY
          ports:
          - containerPort: 9080
          - containerPort: 9443
          volumeMounts:
            - name: rms-designstudio-common
              mountPath: /training
            - name: rms-designstudio-modules
              mountPath: /modules
            - name: rms-designstudio-hdfs
              mountPath: /hdfsaccess
            - name: rms-designstudio-liberty-volume
              mountPath: /opt/ibm/rms
            - name: file-secrets
              mountPath: /opt/ibm/wlp/usr/servers/fciServer/resources/security/fci_universal_ks.jks
              subPath: fci_universal_ks.jks
            - name: file-secrets
              mountPath: /opt/ibm/wlp/usr/servers/fciServer/resources/security/kafka.client.truststore.jks
              subPath: fci_universal_ks.jks
            - name: file-secrets
              mountPath: /opt/ibm/wlp/usr/servers/fciServer/resources/security/kafka.client.keystore.jks
              subPath: fci_universal_ks.jks
            - name: file-secrets
              mountPath: /opt/ibm/wlp/usr/servers/fciServer/resources/security/fci_kafka_msg.p12
              subPath: fci_kafka_msg.p12            
            - name: logs
              mountPath: /opt/ibm/wlp/usr/servers/fciServer/logs
#          livenessProbe:
#            httpGet:
#              path: /
#              port: http
#          readinessProbe:
#            httpGet:
#              path: /
#              port: http
          resources:
{{ toYaml .Values.rmsDesignStudio.resources | indent 12 }}
        - name: message-log
          image: "{{ required "global.dockerRepository must specify from which repository the docker image should be fetched." .Values.global.dockerRepository }}/{{ .Values.global.commonScripts.image.repository }}:{{ .Values.global.commonScripts.image.tag }}"
          resources:
{{ toYaml .Values.sideCarContainers.resources | indent 12 }}
          args: [/bin/sh, -c, 'tail -n+1 -F /logs/messages.log']
          securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 12 }}
{{ include "common.sideCarHealthCheck" . | indent 10 }}          
          volumeMounts:
          - name: logs
            mountPath: /logs
        - name: trace-log
          image: "{{ required "global.dockerRepository must specify from which repository the docker image should be fetched." .Values.global.dockerRepository }}/{{ .Values.global.commonScripts.image.repository }}:{{ .Values.global.commonScripts.image.tag }}"
          resources:
{{ toYaml .Values.sideCarContainers.resources | indent 12 }}
          args: [/bin/sh, -c, 'tail -n+1 -F /logs/trace.log']
          securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 12 }}
{{ include "common.sideCarHealthCheck" . | indent 10 }}          
          volumeMounts:
          - name: logs
            mountPath: /logs
{{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
      affinity:        
{{ include "common.ArchNodeAffinity" . | indent 8 }}
{{- with .Values.affinity }}
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}

