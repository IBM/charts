apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "db2.fullname" . }}-datastore
  labels:
    podApplication: DB2
    app: {{ template "db2.name" . }}-datastore
    chart: {{ template "db2.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  serviceName: {{ template "db2.fullname" . }}-datastore
  selector:
    matchLabels:
      app: {{ template "db2.name" . }}-datastore
      release: {{ .Release.Name }}
  replicas: {{ .Values.global.db2Instances }}
  volumeClaimTemplates:
  - metadata:
      name: {{ .Release.Name }}-{{ template "db2.name" . }}-db
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.dbPvcSpec.size }}
{{- if .Values.global.persistence.useDynamicProvisioning }}
{{-   if not .Values.dbPvcSpec.storageClassName }}
      storageClassName: {{ default nil .Values.global.persistence.storageClassName | quote }}
{{-   else }}
      storageClassName: {{ .Values.dbPvcSpec.storageClassName | quote }}
{{-   end }}
{{- else }}
      storageClassName: {{ default "" .Values.dbPvcSpec.storageClassName | quote }}
{{- end }}
{{- if not .Values.global.persistence.useDynamicProvisioning }}
      selector:
        matchLabels:
          app: {{ template "db2.name" . }}-db
          release: {{ .Release.Name }}
{{ end }}
  - metadata:
      name: {{ .Release.Name }}-{{ template "db2.name" . }}-instance
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.instancePvcSpec.size }}
{{- if .Values.global.persistence.useDynamicProvisioning }}
{{-   if not .Values.instancePvcSpec.storageClassName }}
      storageClassName: {{ default nil .Values.global.persistence.storageClassName | quote }}
{{-   else }}
      storageClassName: {{ .Values.instancePvcSpec.storageClassName | quote }}
{{-   end }}
{{- else }}
      storageClassName: {{ default "" .Values.instancePvcSpec.storageClassName | quote }}
{{- end }}
{{- if not .Values.global.persistence.useDynamicProvisioning }}
      selector:
        matchLabels:
          app: {{ template "db2.name" . }}-instance
          release: {{ .Release.Name }}  
{{ end }}
  - metadata:
      name: {{ .Release.Name }}-{{ template "db2.name" . }}-scripts
    spec:
      accessModes: [ "ReadWriteMany" ]
      resources:
        requests:
          storage: {{ .Values.scriptsPvcSpec.size }}
{{- if .Values.global.persistence.useDynamicProvisioning }}
{{-   if not .Values.scriptsPvcSpec.storageClassName }}
      storageClassName: {{ default nil .Values.global.persistence.storageClassName | quote }}
{{-   else }}
      storageClassName: {{ .Values.scriptsPvcSpec.storageClassName | quote }}
{{-   end }}
{{- else }}
      storageClassName: {{ default "" .Values.scriptsPvcSpec.storageClassName | quote }}
{{- end }}
{{- if not .Values.global.persistence.useDynamicProvisioning }}
      selector:
        matchLabels:
          app: {{ template "db2.name" . }}-scripts
          release: {{ .Release.Name }}  
{{ end }}
  template:
    metadata:
      annotations:
{{ include "common.meteringAnnotations" . | indent 8 }}
      labels:
        podApplication: DB2
        app: {{ template "db2.name" . }}-datastore
        release: {{ .Release.Name }}
        chart: {{ template "db2.chart" . }}
        heritage: {{ .Release.Service }}
    spec:
{{ include "common.configureHostAliases" . | indent 6 }}
      serviceAccount: {{ .Release.Name }}-db2
      serviceAccountName: {{ .Release.Name }}-db2
      hostIPC: {{ .Values.hostIPC }}
      hostPID: false
      hostNetwork: false
      affinity:
{{ include "common.ArchNodeAffinity" . | indent 8 }}    
{{- if eq .Values.podAntiAffinity "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: "kubernetes.io/hostname"
            labelSelector:
              matchExpressions:
                - key: podApplication
                  operator: In
                  values:
                  - DB2
{{- else if eq .Values.podAntiAffinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: podApplication
                    operator: In
                    values:
                    - DB2
              topologyKey: "kubernetes.io/hostname"
{{- end }}
      volumes:
        {{- if or .Values.global.deployOnIBMCloud .Values.global.deployOnEKS }}
        - name: modifyetc
          hostPath:
            path: /etc
        {{- end }}
        - name: sys
          hostPath:
            path: /proc/sys
        - name: proc
          hostPath:
            path: /proc
        - name: logs
          emptyDir: {}
        - name: file-secrets
          secret:
            secretName: {{ .Release.Name }}-platform-secret-files
      initContainers:
        - name: init-db2
          image: "{{ required "global.dockerRepository must specify from which repository the docker image should be fetched." .Values.global.dockerRepository }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
{{ toYaml .Values.sideCarContainers.resources | indent 12 }}
          command: ['sh','-c','/opt/ibm/fci/scripts/set_kernel_params.sh']
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - SYS_RESOURCE
              - IPC_OWNER
              - SYS_NICE
            privileged: true
            readOnlyRootFilesystem: false
            runAsNonRoot: false
            runAsUser: 0
          volumeMounts:
          - name: proc
            mountPath: /host/proc
            readOnly:  false
          - name: sys
            mountPath: /host/proc/sys
            readOnly: false
        {{- if or .Values.global.deployOnIBMCloud .Values.global.deployOnEKS }}
        - image: "{{ required "global.dockerRepository must specify from which repository the docker image should be fetched." .Values.global.dockerRepository }}/{{ .Values.global.commonScripts.image.repository }}:{{ .Values.global.commonScripts.image.tag }}"
          resources:
{{ toYaml .Values.sideCarContainers.resources | indent 12 }}
          name: unrootsquash
          command: ["/bin/sh", "-c"]
          args:
            - >
              set -x;
              grep "^Domain = slnfsv4.com" /modifyetc/idmapd.conf;
              if [ "$?" -ne "0" ] ; then
                sed -i 's/.*Domain =.*/Domain = slnfsv4.com/g' /modifyetc/idmapd.conf;
                nfsidmap -c;
              fi
          volumeMounts:
            - name: modifyetc
              mountPath: /modifyetc
        {{- end }}
      containers:
        - name: db2-data-store
          image: "{{ required "global.dockerRepository must specify from which repository the docker image should be fetched." .Values.global.dockerRepository }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          readinessProbe:
            exec:
              command:
              - sh 
              - -c
              - "timeout --kill-after=30s --signal=INT 25s /opt/ibm/fci/scripts/healthcheck.sh"
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }} 
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - "timeout --kill-after=30s --signal=INT 25s /opt/ibm/fci/scripts/healthcheck.sh"
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }} 
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
              - IPC_OWNER
              - SYS_NICE
              - SYS_RESOURCE
              - SYS_PTRACE
            privileged: true
            readOnlyRootFilesystem: false
          ports:
          - containerPort: 50000
          - containerPort: 56000
          envFrom:
          - configMapRef:
              name: {{ template "db2.fullname" . }}
          env:
{{ include "common.db2LdapEnv" . | indent 10 }}
          - name: LDAP_SSL_KEYFILE
            value: '/fci-audit-data-store-data/ks/fci_universal_ks.jks'
          - name: IPC_CLEAN
            {{- if .Values.hostIPC }}
            value: 'true'
            {{- else }}
            value: 'false'
            {{- end }}
          - name: com_fci_db2_password
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-platform-secrets-env
                key: FCIAUTHID_PASSWORD
          - name: db2dbadm_password
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-platform-secrets-env
                key: DB2DBADM_PASSWORD
          - name: db2inst1_password
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-platform-secrets-env
                key: DB2INST1_PASSWORD
          volumeMounts:
            - name: {{ .Release.Name }}-{{ template "db2.name" . }}-instance
              mountPath: /home/db2inst1-anchor
            - name: {{ .Release.Name }}-{{ template "db2.name" . }}-db
              mountPath: /fci-data-store-data
            - name: {{ .Release.Name }}-{{ template "db2.name" . }}-scripts
              mountPath: /home/db2inst1-anchor/db2inst1/mount
            - name: logs
              mountPath: /home/db2inst1-anchor/db2inst1/sqllib/db2dump/DIAG0000
            - name: file-secrets
              mountPath: /home/db2inst1-anchor/db2inst1/ks/fci_universal_ks.jks
              subPath: fci_universal_ks.jks
            - name: file-secrets
              mountPath: /home/db2inst1-anchor/db2inst1/ks/fci_universal_ks.kdb
              subPath: fci_universal_ks.kdb
            - name: file-secrets
              mountPath: /home/db2inst1-anchor/db2inst1/ks/fci_universal_ks.sth
              subPath: fci_universal_ks.sth
          resources:
{{ toYaml .Values.resources | indent 12 }}
        {{- with .Values.nodeSelector }}
          nodeSelector:
{{ toYaml . | indent 12 }}
        {{- end }}
        {{- with .Values.affinity }}
          affinity:
{{ toYaml . | indent 12 }}
        {{- end }}
        {{- with .Values.tolerations }}
          tolerations:
{{ toYaml . | indent 12 }}
        {{- end }}
        - name: db2diag-log
          image: "{{ required "global.dockerRepository must specify from which repository the docker image should be fetched." .Values.global.dockerRepository }}/{{ .Values.global.commonScripts.image.repository }}:{{ .Values.global.commonScripts.image.tag }}"
          securityContext:
{{ include "common.AnyuidContainerSecurityContext" . | indent 12 }}
            capabilities:
              drop:
              - ALL
          resources:
{{ toYaml .Values.sideCarContainers.resources | indent 12 }}
{{ include "common.sideCarHealthCheck" . | indent 10 }}
          command: 
          - sh
          - -c
          - |
            LOGS_LOCATION="/logs"
            DIAG_PATTERN="db2diag.*.log"
            CURRENT_LOG=""
            SLEEP_DURATION="30s"
            PID=""

            while true; do
               LATEST_LOG=$(ls -t ${LOGS_LOCATION}/${DIAG_PATTERN} | head -n1)
               if [[ "${LATEST_LOG}" != "${CURRENT_LOG}" ]]; then
              CURRENT_LOG="${LATEST_LOG}"
                [[ ${PID} != "" ]] && kill "${PID}" &>/dev/null
              tail -F "${CURRENT_LOG}" &
                PID=$!
               fi
               sleep "${SLEEP_DURATION}"
            done
          volumeMounts:
          - name: logs
            mountPath: /logs
