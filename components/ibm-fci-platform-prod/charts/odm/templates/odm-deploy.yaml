apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "odm.fullname" . }}
  labels:
{{- include "common.label.metadata" (list . (include "odm.name" .) (include "odm.chart" .) .Release.Name .Release.Service ) | indent 4 }}
spec:
{{ include "common.scaleDownIfDisabled" . | indent 2 }}
  selector:
    matchLabels:
{{- include "common.selector.labels" (list . (include "odm.name" .) .Release.Name ) | indent 6 }}
  template:
    metadata:
      annotations:
{{ include "common.meteringAnnotations" . | indent 8 }}
      labels:
{{- include "common.label.metadata" (list . (include "odm.name" .) (include "odm.chart" .) .Release.Name .Release.Service ) | indent 8 }}
{{- include "common.using-secrets" (list "odm" "db2" "platform") | indent 8 }}
    spec:
{{ include "common.configureHostAliases" . | indent 6 }}
{{ include "common.PodHostConfig" . | indent 6 }}
      securityContext:
{{ include "common.PodSecurityContextConfig" . | indent 8 }}
      serviceAccountName: fci-common-scripts
      volumes:
        - name: file-secrets
          secret:
            defaultMode: 420
            secretName: {{ .Release.Name }}-platform-secret-files
        - name: logs
          emptyDir: {}
        - name: db2-cert
          secret:
            defaultMode: 420
            secretName: {{ .Release.Name }}-db2-secrets-env
        - name: fcicert
          emptyDir: {}
      initContainers:
        - name: init-svc-depend
          image: "{{ required "global.dockerRegistryPrefix must specify from which repository the docker image should be fetched." .Values.global.dockerRegistryPrefix }}/{{ .Values.global.commonScripts.image.repository }}:{{ .Values.global.commonScripts.image.tag }}"
{{ if eq .Values.global.DB2_PROVISIONER "CLOUD_PAK" }}
          command:
            - bash
            - -c
            - . /common-scripts/configure && $KUBECTL wait --for=condition=complete job/fci-db2-provisioner --timeout=-1s
{{ else }}
          command: [ "/common-scripts/init-container-svc-depend.sh" ]
          args: [ "{{ .Release.Namespace }}/{{ .Release.Name }}-db2-datastore-0" ]
{{ end }}
          resources:
{{ toYaml .Values.sideCarContainers.resources | indent 12 }}
          securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 12 }}
{{ if eq .Values.global.DB2_PROVISIONER "CLOUD_PAK" }}
        - name: import-db2-cert
          image: "{{ required "global.dockerRegistryPrefix must specify from which repository the docker image should be fetched." .Values.global.dockerRegistryPrefix }}/{{ .Values.global.cryptoUtils.image.repository }}:{{ .Values.global.cryptoUtils.image.tag }}"
          command:
            - bash
            - -c
            - cp /fci_universal_ks.jks /etc/tls/fci_universal_ks.jks && /opt/ibm/java-x86_64-80/jre/bin/keytool -import -noprompt -deststorepass $SSL_KEYSTORE_PASSWORD_CONFIG -file /db2cert -storetype JKS -keystore /etc/tls/fci_universal_ks.jks
          resources:
{{ toYaml .Values.sideCarContainers.resources | indent 12 }}
          env:
{{- include "common.import-secret" (list . "SSL_KEYSTORE_PASSWORD_CONFIG" "platform" "FCI_JKS_PASSWORD") | indent 10 }}
          volumeMounts:
          - name: fcicert
            mountPath: /etc/tls
          - name: db2-cert
            mountPath: /db2cert
            subPath: db2_cert
          - name: file-secrets
            mountPath: /fci_universal_ks.jks
            subPath: fci_universal_ks.jks
          securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 12 }}
{{ end }}
        - name: odm-data-store
          image: "{{ required "global.dockerRegistryPrefix must specify from which repository the docker image should be fetched." .Values.global.dockerRegistryPrefix }}/{{ .Values.dbClient.image.repository }}:{{ .Values.dbClient.image.tag }}"
          imagePullPolicy: {{ .Values.dbClient.image.pullPolicy }}
          resources:
{{ toYaml .Values.dbClient.resources | indent 12 }}
          args: ["migrate"]
          securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 12 }}
          envFrom:
          - configMapRef:
              name: {{ template "odm.fullname" . }}
          env:
{{ if eq .Values.global.DB2_PROVISIONER "CLOUD_PAK" }}
{{- include "common.import-secret" (list . "FLYWAY_PASSWORD" "db2" "db2_password") | indent 10 }}
{{ else }}
{{- include "common.import-secret" (list . "FLYWAY_PASSWORD" "db2" "DB2INST1_PASSWORD") | indent 10 }}
{{ end }}
{{- include "common.import-secret" (list . "SSL_KEYSTORE_PASSWORD_CONFIG" "platform" "FCI_JKS_PASSWORD") | indent 10 }}
{{ if eq .Values.global.DB2_PROVISIONER "CLOUD_PAK" }}
          - name: FLYWAY_USER
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-db2
                key: db_userid
          - name: DB2_HOST
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-db2
                key: db_host
{{ else }}
          - name: FLYWAY_USER
            value: "db2inst1"
          - name: DB2_HOST
            value: "fci-db2-datastore-0"
{{ end }}
          - name: FLYWAY_URL
{{ if eq .Values.global.DB2_PROVISIONER "CLOUD_PAK" }}
            value: "{{ printf "jdbc:db2://$(DB2_HOST):50001/FCIDB:sslConnection=true;sslTrustStoreLocation=/etc/tls/fci_universal_ks.jks;sslTrustStorePassword=$(SSL_KEYSTORE_PASSWORD_CONFIG);" }}"
{{ else }}
            value: "{{ printf "jdbc:db2://%s-db2-datastore-0:56000/fcidb:sslConnection=true;sslTrustStoreLocation=/fci_universal_ks.jks;sslTrustStorePassword=$(SSL_KEYSTORE_PASSWORD_CONFIG);" .Release.Name }}"
{{ end }}
          volumeMounts:
            - name: fcicert
              mountPath: /etc/tls
            - name: file-secrets
              mountPath: /fci_universal_ks.jks
              subPath: fci_universal_ks.jks
      containers:
        - name: odm
          image: "{{ required "When global.createPv is set to true, global.nfsServer must specify the NFS server that holds the persistent volume." .Values.global.dockerRegistryPrefix }}/{{ .Values.odm.image.repository }}:{{ .Values.odm.image.tag }}"
          imagePullPolicy: {{ .Values.odm.image.pullPolicy }}
{{ if eq .Values.global.DB2_PROVISIONER "CLOUD_PAK" }}
          command:
            - bash
            - -c
            - cp /etc/tls/fci_universal_ks.jks /opt/ibm/wlp/usr/servers/fciServer/resources/security/fci_universal_ks.jks && /opt/ibm/fci/scripts/start.sh
{{ end }}
          resources:
{{ toYaml .Values.odm.resources | indent 12 }}
          envFrom:
          - configMapRef:
              name: {{ template "odm.fullname" . }}
{{- include "common.import-all-secrets" (list . "platform") | indent 10 }}
{{- include "common.import-all-secrets" (list . "db2") | indent 10 }}
{{- include "common.import-all-secrets" (list . "odm") | indent 10 }}
          securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 12 }}
          livenessProbe:
{{ toYaml .Values.odm.livenessProbe | indent 12 }}
          readinessProbe:
{{ toYaml .Values.odm.readinessProbe | indent 12 }}
          env:
{{- include "common.import-secret" (list . "rms_wasadmin_password" "odm" "rms_wasadmin_password") | indent 10 }}
{{ if eq .Values.global.DB2_PROVISIONER "CLOUD_PAK" }}
{{- include "common.import-secret" (list . "odm_db2_password" "db2" "db2_password") | indent 10 }}
{{ else }}
{{- include "common.import-secret" (list . "odm_db2_password" "db2" "FCIAUTHID_PASSWORD") | indent 10 }}
{{ end }}
{{- include "common.import-secret" (list . "SERVER_TRUSTSTORE_PWD" "platform" "FCI_JKS_PASSWORD") | indent 10 }}
{{ if eq .Values.global.DB2_PROVISIONER "CLOUD_PAK" }}
          - name: odm_db2_userid
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-db2
                key: db_userid
          - name: odm_db2_server
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-db2
                key: db_host
          - name: db2_service
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-db2
                key: db_host
          - name: odm_db2_port
            value: "50001"
{{ else }}
          - name: odm_db2_userid
            value: "fciauthid"
          - name: odm_db2_server
            value: "fci-db2-datastore-0"
          - name: db2_service
            value: "fci-db2-datastore-0"
          - name: odm_db2_port
            value: "56000"
{{ end }}
          ports:
          - containerPort: 9060
          - containerPort: 9443
          volumeMounts:
{{ if eq .Values.global.DB2_PROVISIONER "FCI" }}
            - name: file-secrets
              mountPath: /opt/ibm/wlp/usr/servers/fciServer/resources/security/fci_universal_ks.jks
              subPath: fci_universal_ks.jks
{{ end }}
            - name: fcicert
              mountPath: /etc/tls
            - name: logs
              mountPath: /opt/ibm/wlp/usr/servers/fciServer/logs
        - name: message-log
          image: "{{ required "global.dockerRegistryPrefix must specify from which repository the docker image should be fetched." .Values.global.dockerRegistryPrefix }}/{{ .Values.global.commonScripts.image.repository }}:{{ .Values.global.commonScripts.image.tag }}"
          args: [/bin/sh, -c, 'tail -n+1 -F /logs/messages.log']
          resources:
{{ toYaml .Values.sideCarContainers.resources | indent 12 }}
          securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 12 }}
{{ include "common.sideCarHealthCheck" . | indent 10 }}
          volumeMounts:
          - name: logs
            mountPath: /logs
        - name: trace-log
          image: "{{ required "global.dockerRegistryPrefix must specify from which repository the docker image should be fetched." .Values.global.dockerRegistryPrefix }}/{{ .Values.global.commonScripts.image.repository }}:{{ .Values.global.commonScripts.image.tag }}"
          args: [/bin/sh, -c, 'tail -n+1 -F /logs/trace.log']
          resources:
{{ toYaml .Values.sideCarContainers.resources | indent 12 }}
          securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 12 }}
{{ include "common.sideCarHealthCheck" . | indent 10 }}
          volumeMounts:
          - name: logs
            mountPath: /logs
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
      affinity:
{{ include "common.ArchNodeAffinity" . | indent 8 }}
    {{- with .Values.affinity }}
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}
