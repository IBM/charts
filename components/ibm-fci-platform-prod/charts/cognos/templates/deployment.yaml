apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "cognos.fullname" . }}
  labels:
    app: {{ template "cognos.name" . }}
    chart: {{ template "cognos.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
{{ include "common.scaleDownIfDisabled" . | indent 2 }}
  selector:
    matchLabels:
      app: {{ template "cognos.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
{{ include "common.meteringAnnotations" . | indent 8 }}
      labels:
        app: {{ template "cognos.name" . }}
        release: {{ .Release.Name }}
        chart: {{ template "cognos.chart" . }}
        heritage: {{ .Release.Service }}
    spec:
{{ include "common.configureHostAliases" . | indent 6 }}
{{ include "common.PodHostConfig" . | indent 6 }}
      securityContext:
{{ include "common.PodSecurityContextConfig" . | indent 8 }}
      affinity:
{{ include "common.ArchNodeAffinity" . | indent 8 }}
      serviceAccountName: {{ .Release.Name }}-cognos
      serviceAccount: {{ .Release.Name }}-cognos
      volumes:
        - name: dashboards
          persistentVolumeClaim:
            claimName: {{ template "cognos.fullname" . }}
        - name: logs
          emptyDir: {}
        - name: file-secrets
          secret:
            secretName: {{ .Release.Name }}-platform-secret-files
      initContainers:
        - name: init-svc-depend
          resources:
{{ toYaml .Values.sideCarContainers.resources | indent 12 }}
          securityContext:
{{ include "common.AnyuidContainerSecurityContext" . | indent 12 }}
            capabilities:
              drop:
              - ALL
          image: "{{ required "global.dockerRepository must specify from which repository the docker image should be fetched." .Values.global.dockerRepository }}/{{ .Values.global.commonScripts.image.repository }}:{{ .Values.global.commonScripts.image.tag }}"
          command: [ "/common-scripts/init-container-svc-depend.sh" ]
          args: [ "{{ .Release.Namespace }}/{{ .Release.Name }}-{{ .Values.db2_service }}" ]
      containers:
      - name: 'cognos'
        envFrom:
        - configMapRef:
            name: {{ template "cognos.fullname" . }}
        env:
        - name: COGNOS_DB2_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-platform-secrets-env
              key: FCIAUTHID_PASSWORD
        volumeMounts:
        - name: dashboards
          mountPath: "/opt/ibm/cognos/analytics/deployment"
        - name: logs
          mountPath: /opt/ibm/cognos/analytics/logs
        - name: file-secrets
          mountPath: /opt/ibm/fci/ks/fci_universal_ks.pem
          subPath: fci_universal_ks.pem
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
{{ include "common.AnyuidContainerSecurityContext" . | indent 10 }}
          capabilities:
            drop:
            - ALL
{{ include "common.readinessProbe" . | indent 8 }}
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "if [ -e /opt/ibm/fci/scripts/healthcheck.sh ]; then /opt/ibm/fci/scripts/healthcheck.sh; else exit {{ default 0 .Values.global.enforceHealthCheck }}; fi"
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        image: {{ required "global.dockerRepository must specify from which repository the docker image should be fetched." .Values.global.dockerRepository }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
      - name: cognosserver-log
        image: "{{ required "global.dockerRepository must specify from which repository the docker image should be fetched." .Values.global.dockerRepository }}/{{ .Values.global.commonScripts.image.repository }}:{{ .Values.global.commonScripts.image.tag }}"
        resources:
{{ toYaml .Values.sideCarContainers.resources | indent 10 }}
        args: [/bin/sh, -c, 'tail -n+1 -F /logs/cognosserver.log']
{{ include "common.sideCarHealthCheck" . | indent 8 }} 
        securityContext:
{{ include "common.AnyuidContainerSecurityContext" . | indent 10 }}
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: logs
          mountPath: /logs
      - name: 'cognos-proxy'
{{ include "common.sideCarHealthCheck" . | indent 8 }}
        envFrom:
        - configMapRef:
            name: {{ template "cognos.fullname" . }}
        env:
        - name: JWT_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-platform-secrets-env
              key: JWT_KEY
        securityContext:
{{ include "common.AnyuidContainerSecurityContext" . | indent 10 }}
          capabilities:
            drop:
            - ALL
        resources:
{{ toYaml .Values.proxy.resources | indent 10 }}
        volumeMounts:
        - name: file-secrets
          mountPath: /opt/ibm/fci/dashboards-proxy/ssl-key.pem
          subPath: fci_universal_ks.pvtk.pem
        - name: file-secrets
          mountPath: /opt/ibm/fci/dashboards-proxy/ssl-cert.pem
          subPath: fci_universal_ks.crt.pem
        imagePullPolicy: {{ .Values.proxy.image.pullPolicy }}
{{ include "common.readinessProbe" . | indent 8 }}
        image: {{ required "global.dockerRepository must specify from which repository the docker image should be fetched." .Values.global.dockerRepository }}/{{ .Values.proxy.image.repository }}:{{ .Values.proxy.image.tag }}
        resources:
{{ toYaml .Values.proxy.resources | indent 10 }}
        ports:
        - containerPort: 3000
      restartPolicy: Always
