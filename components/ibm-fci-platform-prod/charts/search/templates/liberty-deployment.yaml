apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "search.fullname" . }}-liberty
  labels:
    app: {{ template "search.name" . }}-liberty
    chart: {{ template "search.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
{{ include "common.scaleDownIfDisabled" . | indent 2 }}
  selector:
    matchLabels:
      app: {{ template "search.name" . }}-liberty
      release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
{{ include "common.meteringAnnotations" . | indent 8 }}
      labels:
        app: {{ template "search.name" . }}-liberty
        release: {{ .Release.Name }}
        chart: {{ template "search.chart" . }}
        heritage: {{ .Release.Service }}
    spec:
{{ include "common.configureHostAliases" . | indent 6 }}
{{ include "common.PodHostConfig" . | indent 6 }}
      securityContext:
{{ include "common.PodSecurityContextConfig" . | indent 8 }}
      affinity:
{{ include "common.ArchNodeAffinity" . | indent 8 }}
      serviceAccountName: {{template "case.core-release-name" . }}-common-scripts
      volumes:
      - name: file-secrets
        secret:
          secretName: {{ .Release.Name }}-platform-secret-files
      - name: logs
        emptyDir: {}
      initContainers:
      - name: init-svc-depend
        image: "{{ required "global.dockerRepository must specify from which repository the docker image should be fetched." .Values.global.dockerRepository }}/{{ .Values.global.commonScripts.image.repository }}:{{ .Values.global.commonScripts.image.tag }}"
        resources:
{{ toYaml .Values.sideCarContainers.resources | indent 10 }}
        command: [ "/common-scripts/init-container-svc-depend.sh" ]
        securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 10 }}
        args: [ {{ .Release.Namespace }}/{{ .Release.Name }}-elasticsearch ]
      containers:
      - image: {{ required "global.dockerRepository must specify from which repository the docker image should be fetched." .Values.global.dockerRepository }}/{{ .Values.liberty.image.repository }}:{{ .Values.liberty.image.tag }}
        imagePullPolicy: {{ .Values.liberty.image.pullPolicy }}
        name: liberty
        securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 10 }}
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "if [ -e /opt/ibm/fci/scripts/healthcheck.sh ]; then /opt/ibm/fci/scripts/healthcheck.sh; else exit {{ default 0 .Values.global.enforceHealthCheck }}; fi"
          initialDelaySeconds: 240
          periodSeconds: 60
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "if [ -e /opt/ibm/fci/scripts/healthcheck.sh ]; then /opt/ibm/fci/scripts/healthcheck.sh; else exit {{ default 0 .Values.global.enforceHealthCheck }}; fi"
          initialDelaySeconds: 360
          periodSeconds: 60
{{- with .Values.liberty.resources }}
        resources:
{{ toYaml . | indent 10 }}
{{- end }}
{{- with .Values.liberty.nodeSelector }}
        nodeSelector:
{{ toYaml . | indent 10 }}
{{- end }}
{{- with .Values.liberty.tolerations }}
        tolerations:
{{ toYaml . | indent 10 }}
{{- end }}
{{- with .Values.liberty.affinity }}
        affinity:
{{ toYaml . | indent 10 }}
{{- end }}
        envFrom:
        - configMapRef:
            name: {{ template "search.fullname" . }}
        env:
        - name: com_fci_password
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-platform-secrets-env
              key: com_fci_password
        - name: SSL_TRUSTSTORE_PASSWORD_CONFIG
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-platform-secrets-env
              key: FCI_JKS_PASSWORD
        - name: SSL_KEYSTORE_PASSWORD_CONFIG
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-platform-secrets-env
              key: FCI_JKS_PASSWORD
        - name: SSL_KEY_PASSWORD_CONFIG
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-platform-secrets-env
              key: FCI_JKS_PASSWORD
        - name: com_fci_keystore_password
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-platform-secrets-env
              key: FCI_JKS_PASSWORD
        - name: JWT_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-platform-secrets-env
              key: JWT_KEY
        - name: SEARCH_SERVICE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Release.Name }}-platform-secrets-env
              key: ELASTIC_ADMIN_PASSWORD
        ports:
        - containerPort: 9080
        - containerPort: 9443
        volumeMounts:
        - name: file-secrets
          mountPath: /opt/ibm/wlp/usr/servers/fciServer/resources/security/fci_universal_ks.jks
          subPath: fci_universal_ks.jks
        - mountPath: /opt/ibm/wlp/usr/servers/fciServer/logs
          name: logs
      - image: "{{ required "global.dockerRepository must specify from which repository the docker image should be fetched." .Values.global.dockerRepository }}/{{ .Values.global.commonScripts.image.repository }}:{{ .Values.global.commonScripts.image.tag }}"
        name: message-log
        resources:
{{ toYaml .Values.sideCarContainers.resources | indent 10 }}
        args: [/bin/sh, -c, 'tail -n+1 -F /logs/messages.log']
        securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 10 }}
{{ include "common.sideCarHealthCheck" . | indent 8 }}
        volumeMounts:
        - name: logs
          mountPath: /logs
      - image: "{{ required "global.dockerRepository must specify from which repository the docker image should be fetched." .Values.global.dockerRepository }}/{{ .Values.global.commonScripts.image.repository }}:{{ .Values.global.commonScripts.image.tag }}"
        name: trace-log
        resources:
{{ toYaml .Values.sideCarContainers.resources | indent 10 }}
        args: [/bin/sh, -c, 'tail -n+1 -F /logs/trace.log']
        securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 10 }}
{{ include "common.sideCarHealthCheck" . | indent 8 }}
        volumeMounts:
        - name: logs
          mountPath: /logs
      restartPolicy: Always
