{{- if eq .Values.sip.enable true }}
{{- include "sch.config.init" (list . .Values.schConfigName) -}}
{{- $compName := "sip" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "sch.names.fullCompName" (list . $compName) | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 6 }}
  template:
    metadata:
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 8 }}
      labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 8 }}
    spec:
      hostNetwork: true
      hostPID: false
      hostIPC: false
{{- include "sch.security.securityContext" (list . .sch.chart.securityContextSpec) | indent 6 }}
      {{- if .Values.global.image.pullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.global.image.pullSecrets }}
      {{- end }}
      affinity:
{{- include "sch.affinity.nodeAffinity" (list .) | indent 8 }}
      {{- if .Values.sip.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.sip.nodeSelector | indent 8 }}
      {{- end }}
      volumes:
      {{- if eq .Values.persistence.recordingsVolume.enablePersistentRecordings true }}
      - persistentVolumeClaim:
          claimName: {{ .Release.Name }}-{{ .Values.persistence.recordingsVolume.name }}
        name: {{ template "chart.fullname" . }}-{{ .Values.persistence.recordingsVolume.name }}
      {{- end }}
      {{- if eq .Values.persistence.logsVolume.enablePersistentLogs true }}
      - persistentVolumeClaim:
          claimName: {{ .Release.Name }}-{{ .Values.persistence.logsVolume.name }}
        name: {{ template "chart.fullname" . }}-{{ .Values.persistence.logsVolume.name }}
      {{- end }}
      {{- if eq .Values.sipOrchestratorEnvVariables.enableSslorMutualAuth true }}
      - name: ssl-so
        secret:
          secretName: {{ .Values.sipOrchestratorEnvVariables.sslKeyTrustStoreSecret }}
          items:
          - key: "trustStoreFile"
            path: "trustStoreFile"
      {{- end }}
      {{- if eq .Values.mediaRelayEnvVariables.enableMutualAuth true }}
      - name: ssl-mr-ma
        secret:
          secretName: {{ .Values.mediaRelayEnvVariables.sslClientPkcs12FileSecret }}
          items:
          - key: "clientPkcs12File"
            path: "clientPkcs12File"
      {{- end }}
      {{- if eq .Values.mediaRelayEnvVariables.enableSsl true }}
      - name: ssl-mr
        secret:
          secretName: {{ .Values.mediaRelayEnvVariables.sslClientCACertSecret }}
          items:
          - key: "clientCaCertFile"
            path: "clientCaCertFile"
      {{- end }}
      - name: tenantconfig
        secret:
          secretName: {{ .Values.tenantConfigSecretName }}
          items:
          - key: tenantConfig
            path: tenantConfig.json
      {{- if eq .Values.mediaRelayEnvVariables.enableMrcp true }}
      - name: unimrcpconfig
        secret:
          secretName: {{ .Values.mediaRelayEnvVariables.unimrcpConfigSecretName }}
          items:
          - key: unimrcpConfig
            path: unimrcpclient.xml
      {{- end }}
      dnsPolicy: ClusterFirstWithHostNet
      terminationGracePeriodSeconds: 600
      restartPolicy: Always
      containers:
      - name: {{ .Values.image.mediaRelay.containerName }}
        image: "{{ if tpl ( .Values.image.mediaRelay.repository | toString ) . }}{{ trimSuffix "/" (tpl (.Values.image.mediaRelay.repository | toString ) . ) }}{{ end }}/{{ .Values.image.mediaRelay.name }}:{{ .Values.image.mediaRelay.tag }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        terminationMessagePath: "/dev/termination-log"
        resources:
          requests:
            cpu: "{{ .Values.sip.resources.requests.cpu }}"
            memory: "{{ .Values.sip.resources.requests.memory }}"
          limits:
            cpu: "{{ .Values.sip.resources.limits.cpu }}"
            memory: "{{ .Values.sip.resources.limits.memory }}"
{{- include "sch.security.securityContext" (list . .sch.chart.securityContextContainer) | indent 8 }}
        ports:
        - containerPort: {{ .Values.mediaRelayEnvVariables.mediaRelayWsPort }}
          hostPort: {{ .Values.mediaRelayEnvVariables.mediaRelayWsPort }}
          protocol: TCP
        {{- if eq .Values.mediaRelayEnvVariables.enableMrcp true }}
        - containerPort: {{ .Values.mediaRelayEnvVariables.mrcpv2SipPort }}
          hostPort: {{ .Values.mediaRelayEnvVariables.mrcpv2SipPort }}
          protocol: UDP
        {{- end }}
        readinessProbe:
          tcpSocket:
            port: {{ .Values.mediaRelayEnvVariables.mediaRelayWsPort }}
          initialDelaySeconds: {{ .Values.mediaRelayEnvVariables.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.mediaRelayEnvVariables.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.mediaRelayEnvVariables.readinessProbe.timeoutSeconds }}
        livenessProbe:
          tcpSocket:
            port: {{ .Values.mediaRelayEnvVariables.mediaRelayWsPort }}
          initialDelaySeconds: {{ .Values.mediaRelayEnvVariables.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.mediaRelayEnvVariables.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.mediaRelayEnvVariables.livenessProbe.timeoutSeconds }}
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/quiesce.sh"
        env:
        - name: LICENSED_FOR_PRODUCTION_USE
          value: "true"
        {{- if .Values.mediaRelayEnvVariables.sdpAddress }}
        - name: SDP_ADDRESS
          value: "{{ .Values.mediaRelayEnvVariables.sdpAddress }}"
        {{- else }}
        - name: SDP_ADDRESS
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        {{- end }}
        - name: MEDIA_RELAY_WS_HOST
          value: "{{ .Values.mediaRelayEnvVariables.mediaRelayWsHost }}"
        - name: MEDIA_RELAY_WS_PORT
          value: "{{ .Values.mediaRelayEnvVariables.mediaRelayWsPort }}"
        - name: RTP_UDP_PORT_RANGE
          value: {{ .Values.mediaRelayEnvVariables.rtpUdpPortRange }}
        - name: CLUSTER_WORKERS
          value: "{{ .Values.mediaRelayEnvVariables.clusterWorkers }}"
        - name: MAX_SESSIONS
          value: "{{ .Values.mediaRelayEnvVariables.maxSessions }}"
        - name: ENABLE_RECORDING
          value: "{{ .Values.mediaRelayEnvVariables.enableRecording }}"
        - name: STEREO_RECORDING
          value: "{{ .Values.mediaRelayEnvVariables.stereoRecording }}"
        - name: TRACE_TYPE
          value: "both"
        - name: MEDIA_RELAY_LOG_LEVEL
          value: "{{ .Values.mediaRelayEnvVariables.mediaRelayLogLevel }}"
        - name: MEDIA_RELAY_LOG_ROTATION_FILE_COUNT
          value: "{{ .Values.mediaRelayEnvVariables.mediaRelayLogRotationFileCount }}"
        - name: MEDIA_RELAY_LOG_ROTATION_PERIOD
          value: "{{ .Values.mediaRelayEnvVariables.mediaRelayLogRotationPeriod }}"
        - name: RTP_PACKET_LOSS_REPORTING_THRESHOLD
          value: "{{ .Values.mediaRelayEnvVariables.rtpPacketLossReportingThreshold }}"
        - name: PROXY_TYPE
          value: "{{ .Values.mediaRelayEnvVariables.proxyType }}"
        {{- if .Values.mediaRelayEnvVariables.proxyHost }}
        - name: PROXY_HOST
          value: "{{ .Values.mediaRelayEnvVariables.proxyHost }}"
        {{- end }}
        {{- if .Values.mediaRelayEnvVariables.proxyPort }}
        - name: PROXY_PORT
          value: "{{ .Values.mediaRelayEnvVariables.proxyPort }}"
        {{- end }}
        {{- if .Values.mediaRelayEnvVariables.proxyUsername }}
        - name: PROXY_USERNAME
          value: "{{ .Values.mediaRelayEnvVariables.proxyUsername }}"
        {{- end }}
        {{- if .Values.mediaRelayEnvVariables.proxyPasswordSecret }}
        - name: PROXY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.mediaRelayEnvVariables.proxyPasswordSecret }}
              key: mrProxyPassword
        {{- end }}
        - name: WATSON_STT_ENABLE_PROXY
          value: "{{ .Values.mediaRelayEnvVariables.watsonSttEnableProxy }}"
        - name: WATSON_TTS_ENABLE_PROXY
          value: "{{ .Values.mediaRelayEnvVariables.watsonTtsEnableProxy }}"
        - name: MUSIC_ON_HOLD_ENABLE_PROXY
          value: "{{ .Values.mediaRelayEnvVariables.musicOnHoldEnableProxy }}"
        {{- if eq .Values.mediaRelayEnvVariables.enableSsl true}}
        - name: SSL_CLIENT_CA_CERTIFICATE_FILE
          value: "/sslConf/clientCaCertFile"
        {{- end }}
        {{- if eq .Values.sip.codecs.g729.enable true }}
        - name: EXTERNAL_AUDIO_TRANSFORMS
          value: "ws://localhost:{{ .Values.sip.codecs.g729.envVariables.webSocketServerPort }}"
        {{- end }}
        {{- if eq .Values.mediaRelayEnvVariables.enableMutualAuth true}}
        - name: SSL_CLIENT_PKCS12_FILE
          value: "/sslConf/clientPkcs12File"
        - name: SSL_CLIENT_PASSPHRASE
          valueFrom:
            secretKeyRef:
              name: {{ .Values.mediaRelayEnvVariables.sslClientPassphraseSecret }}
              key: sslClientPassphrase
        {{- end }}
        {{- if eq .Values.global.disableSslCertValidation true}}
        - name: NODE_TLS_REJECT_UNAUTHORIZED
          value: '0'
        {{- end }}
        volumeMounts:
        {{- if eq .Values.persistence.recordingsVolume.enablePersistentRecordings true }}
        - name: {{ template "chart.fullname" . }}-{{ .Values.persistence.recordingsVolume.name }}
          mountPath: "/vgw-media-relay/recordings"
        {{- end }}
        {{- if eq .Values.persistence.logsVolume.enablePersistentLogs true }}
        - name: {{ template "chart.fullname" . }}-{{ .Values.persistence.logsVolume.name }}
          mountPath: "/vgw-media-relay/logs"
        {{- end }}
        {{- if eq .Values.mediaRelayEnvVariables.enableMrcp true }}
        - name: unimrcpconfig
          mountPath: "/vgw-media-relay/config/unimrcpclient.xml"
          subPath: "unimrcpclient.xml"
        {{- end }}
        {{- if eq .Values.mediaRelayEnvVariables.enableSsl true }}
        - name: ssl-mr
          mountPath: "/sslConf/clientCaCertFile"
          subPath: "clientCaCertFile"
        {{- end }}
        {{- if eq .Values.mediaRelayEnvVariables.enableMutualAuth true }}
        - name: ssl-mr-ma
          mountPath: "/sslConf/clientPkcs12File"
          subPath: "clientPkcs12File"
        {{- end }}
      - name: "{{ .Values.image.sipOrchestrator.containerName }}"
        image: "{{ if tpl ( .Values.image.sipOrchestrator.repository | toString ) . }}{{ trimSuffix "/" (tpl (.Values.image.sipOrchestrator.repository | toString ) . ) }}{{ end }}/{{ .Values.image.sipOrchestrator.name }}:{{ .Values.image.sipOrchestrator.tag }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        terminationMessagePath: "/dev/termination-log"
        resources:
          requests:
            cpu: "{{ .Values.sip.resources.requests.cpu }}"
            memory: "{{ .Values.sip.resources.requests.memory }}"
          limits:
            cpu: "{{ .Values.sip.resources.limits.cpu }}"
            memory: "{{ .Values.sip.resources.limits.memory }}"
{{- include "sch.security.securityContext" (list . .sch.chart.securityContextContainer) | indent 8 }}
        ports:
        - containerPort: {{ .Values.sipOrchestratorEnvVariables.sipPort }}
          hostPort: {{ .Values.sipOrchestratorEnvVariables.sipPort }}
          protocol: TCP
        - containerPort: {{ .Values.sipOrchestratorEnvVariables.sipPort }}
          hostPort: {{ .Values.sipOrchestratorEnvVariables.sipPort }}
          protocol: UDP
        - containerPort: {{ .Values.sipOrchestratorEnvVariables.httpPort }}
          hostPort: {{ .Values.sipOrchestratorEnvVariables.httpPort }}
          protocol: TCP
        - containerPort: {{ .Values.sipOrchestratorEnvVariables.httpPortTls }}
          hostPort: {{ .Values.sipOrchestratorEnvVariables.httpPortTls }}
          protocol: TCP
        readinessProbe:
          exec:
            command:
            - probe.sh
            - readiness
          initialDelaySeconds: {{ .Values.sipOrchestratorEnvVariables.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.sipOrchestratorEnvVariables.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.sipOrchestratorEnvVariables.readinessProbe.timeoutSeconds }}
        livenessProbe:
          exec:
            command:
            - probe.sh
            - liveness
          initialDelaySeconds: {{ .Values.sipOrchestratorEnvVariables.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.sipOrchestratorEnvVariables.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.sipOrchestratorEnvVariables.livenessProbe.timeoutSeconds }}
        lifecycle:
          preStop:
            exec:
              command:
              - "/opt/quiesce.sh"
        env:
        - name: LICENSED_FOR_PRODUCTION_USE
          value: "true"
        {{- if .Values.sipOrchestratorEnvVariables.sipHost }}
        - name: SIP_HOST
          value: "{{ .Values.sipOrchestratorEnvVariables.sipHost }}"
        {{- else }}
        - name: SIP_HOST
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        {{- end }}
        - name: HTTP_HOST
          value: "{{ .Values.sipOrchestratorEnvVariables.httpHost }}"
        - name: HTTP_PORT
          value: "{{ .Values.sipOrchestratorEnvVariables.httpPort }}"
        - name: HTTPS_PORT
          value: "{{ .Values.sipOrchestratorEnvVariables.httpPortTls }}"
        {{- if .Values.sipOrchestratorEnvVariables.secureAdminInterface }}
        - name: ADMIN_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ .Values.sipOrchestratorEnvVariables.adminCredentialSecret }}
              key: adminUsername
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.sipOrchestratorEnvVariables.adminCredentialSecret }}
              key: adminPassword
        {{- end }}
        - name: MEDIA_RELAY_HOST
          value: "{{ .Values.sipOrchestratorEnvVariables.mediaRelayHost }}"
        - name: SIP_PORT
          value: "{{ .Values.sipOrchestratorEnvVariables.sipPort }}"
        - name: SIP_PORT_TCP
          value: "{{ .Values.sipOrchestratorEnvVariables.sipPortTcp }}"
        - name: SIP_PORT_TLS
          value: "{{ .Values.sipOrchestratorEnvVariables.sipPortTls }}"
        - name: LOG_LEVEL
          value: "{{ .Values.sipOrchestratorEnvVariables.logLevel }}"
        - name: LOG_MAX_FILES
          value: "{{ .Values.sipOrchestratorEnvVariables.logMaxFiles }}"
        - name: LOG_MAX_FILE_SIZE
          value: "{{ .Values.sipOrchestratorEnvVariables.logMaxFileSize }}"
        - name: ENABLE_AUDIT_MESSAGES
          value: "{{ .Values.sipOrchestratorEnvVariables.enableAuditMessages }}"
        - name: ENABLE_TRANSCRIPTION_AUDIT_MESSAGES
          value: "{{ .Values.sipOrchestratorEnvVariables.enableTranscriptionAuditMessages }}"
        - name: LATENCY_REPORTING_THRESHOLD
          value: "{{ .Values.sipOrchestratorEnvVariables.latencyReportingThreshold }}"
        - name: RELAY_LATENCY_REPORTING_THRESHOLD
          value: "{{ .Values.sipOrchestratorEnvVariables.relayLatencyReportingThreshold }}"
        - name: WEB_HOOK_HOST
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: VGW_PRODUCT_NAME
          value: "{{ .Values.addon.displayName }}"
        {{- if .Values.sipOrchestratorEnvVariables.proxyHost }}
        - name: PROXY_HOST
          value: "{{ .Values.sipOrchestratorEnvVariables.proxyHost }}"
        {{- end }}
        {{- if .Values.sipOrchestratorEnvVariables.proxyPort }}
        - name: PROXY_PORT
          value: "{{ .Values.sipOrchestratorEnvVariables.proxyPort }}"
        {{- end }}
        {{- if .Values.sipOrchestratorEnvVariables.proxyUsername }}
        - name: PROXY_USERNAME
          value: "{{ .Values.sipOrchestratorEnvVariables.proxyUsername }}"
        {{- end }}
        {{- if .Values.sipOrchestratorEnvVariables.proxyPasswordSecret }}
        - name: PROXY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ .Values.sipOrchestratorEnvVariables.proxyPasswordSecret }}
              key: soProxyPassword
        {{- end }}
        - name: TRUSTED_IP_LIST
          value: "{{ .Values.sipOrchestratorEnvVariables.trustedIpList }}"
        {{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
        - name: METERING_API_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.metering.apiKeySecret }}
              key: meteringApiKey
        - name: PRODUCT_METERING_ENABLED
          value: "{{ .Values.metering.enable }}"
        - name: ICP_MASTER_NODE_IP
          value: "{{ .Values.metering.icpMasterNodeIP }}"
        - name: METERING_SERVER_SERVICE_URL
          value: "{{ .Values.metering.serverURL }}"
        {{- else }}
        - name: PRODUCT_METERING_ENABLED
          value: "false"
        {{- end }}
        {{- if .Values.sipOrchestratorEnvVariables.cmrHealthCheckFailErrCode }}
        - name: CMR_HEALTH_CHECK_FAIL_ERR_CODE
          value: {{ .Values.sipOrchestratorEnvVariables.cmrHealthCheckFailErrCode }}
        {{- end }}
        - name: MULTI_TENANT_CONFIG_FILE
          value: "/tenantconfig/tenantConfig.json"
        - name: WLP_LOGGING_CONSOLE_FORMAT
          value: "{{ .Values.sipOrchestratorEnvVariables.consoleLogFormat }}"
        - name: WLP_LOGGING_CONSOLE_LOGLEVEL
          value: "{{ .Values.sipOrchestratorEnvVariables.consoleLogLevel }}"
        - name: WLP_LOGGING_CONSOLE_SOURCE
          value: "{{ .Values.sipOrchestratorEnvVariables.consoleLogSource }}"
        {{- if eq .Values.sipOrchestratorEnvVariables.enableSslorMutualAuth true }}
        - name: SSL_KEY_TRUST_STORE_FILE
          value: "/sslConf/trustStoreFile"
        - name: SSL_FILE_TYPE
          value: "{{ .Values.sipOrchestratorEnvVariables.sslFileType }}"
        - name: SSL_PASSPHRASE
          valueFrom:
            secretKeyRef:
              name: {{ .Values.sipOrchestratorEnvVariables.sslPassphraseSecret }}
              key: sslPassphrase
        {{- end }}
        - name: ENABLE_METRICS_AUTH
          value: "{{ .Values.sipOrchestratorEnvVariables.enableMetricsAuth }}"
        - name: METRICS_SAMPLING_INTERVAL
          value: "{{ .Values.sipOrchestratorEnvVariables.metricsSamplingInterval }}"
        {{- if eq .Values.global.disableSslCertValidation true}}
        - name: WATSON_CONVERSATION_DISABLE_SSL_CERTIFICATE_VALIDATION
          value: "true"
        {{- end }}
        volumeMounts:
        {{- if eq .Values.persistence.logsVolume.enablePersistentLogs true }}
        - name: {{ template "chart.fullname" . }}-{{ .Values.persistence.logsVolume.name }}
          mountPath: "/logs"
        {{- end }}
        {{- if eq .Values.sipOrchestratorEnvVariables.enableSslorMutualAuth true }}
        - name: ssl-so
          mountPath: "/sslConf/trustStoreFile"
          subPath: "trustStoreFile"
        {{- end }}
        - name: tenantconfig
          mountPath: "/tenantconfig/tenantConfig.json"
          subPath: "tenantConfig.json"
      {{- if eq .Values.sip.codecs.g729.enable true }}
      - name: "{{ .Values.sip.codecs.g729.image.containerName }}"
        image: "{{ if tpl ( .Values.sip.codecs.g729.image.repository | toString ) . }}{{ trimSuffix "/" (tpl (.Values.sip.codecs.g729.image.repository | toString ) . ) }}{{ end }}/{{ .Values.sip.codecs.g729.image.name }}:{{ .Values.sip.codecs.g729.image.tag }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        terminationMessagePath: "/dev/termination-log"
        resources:
          requests:
            cpu: "{{ .Values.sip.codecs.g729.resources.requests.cpu }}"
            memory: "{{ .Values.sip.codecs.g729.resources.requests.memory }}"
          limits:
            cpu: "{{ .Values.sip.codecs.g729.resources.limits.cpu }}"
            memory: "{{ .Values.sip.codecs.g729.resources.limits.memory }}"
{{- include "sch.security.securityContext" (list . .sch.chart.securityContextContainer) | indent 8 }}
        ports:
        - containerPort: {{ .Values.sip.codecs.g729.envVariables.webSocketServerPort }}
          hostPort: {{ .Values.sip.codecs.g729.envVariables.webSocketServerPort }}
          protocol: TCP
        readinessProbe:
          tcpSocket:
            host: 127.0.0.1
            port: {{ .Values.sip.codecs.g729.envVariables.webSocketServerPort }}
          initialDelaySeconds: 60
          periodSeconds: 20
          timeoutSeconds: 20
        livenessProbe:
          tcpSocket:
            host: 127.0.0.1
            port: {{ .Values.sip.codecs.g729.envVariables.webSocketServerPort }}
          initialDelaySeconds: 60
          periodSeconds: 35
          timeoutSeconds: 20
        env:
        - name: WEBSOCKET_SERVER_HOST
          value: "localhost"
        - name: WEBSOCKET_SERVER_PORT
          value: {{ .Values.sip.codecs.g729.envVariables.webSocketServerPort }}
        - name: LOG_LEVEL
          value: "{{ .Values.sip.codecs.g729.envVariables.logLevel }}"
      {{- end }}
{{- end }}