
# StatefulSet for the additional Big SQL Worker node Pods
# https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.15/#statefulset-v1-apps

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: bigsql-{{ .Values.zenServiceInstanceId | int64 }}-worker

  labels:
    app: {{ template "bigsql.app_name" . }}
    app.kubernetes.io/component: "worker"
    app.kubernetes.io/instance: {{ .Values.zenServiceInstanceId | int64 | quote }}
    app.kubernetes.io/managed-by: "Tiller"
    app.kubernetes.io/name: {{ template "bigsql.app_name" . }}
    chart: {{ template "bigsql.chart" . }}
    helm.sh/chart: {{ template "bigsql.chart_name" . }}
    heritage: {{ .Release.Service }}
    instance: {{ .Values.zenServiceInstanceId | int64 | quote }}
    instanceType: {{ .Values.zenServiceInstanceType | quote }}
    instanceVersion: {{ .Values.zenServiceInstanceVersion | quote }}
    release: {{ .Release.Name }}

spec:
  podManagementPolicy: Parallel
  replicas: {{ .Values.workerCount }}

  selector:
    matchLabels:
      app: {{ template "bigsql.app_name" . }}
      bigsql-node-role: worker
      instance: {{ .Values.zenServiceInstanceId | int64 | quote }}
      release: {{ .Release.Name }}

  # The name of the service that governs this StatefulSet.
  # It must exist before the StatefulSet, and is responsible for the network identity of the set.
  #   -> Pods FQDN will be  <pod-specific-string>.service-name.default.cluster-domain-name

  serviceName: bigsql-{{ .Values.zenServiceInstanceId | int64 }}  # See service-bigsql-node.yaml

  template:

    # The Big SQL node Pod template

    metadata:

      name: bigsql-additional-worker
      annotations:
        cloudpakId: {{ template "bigsql.cloudpak_id" . }}
        cloudpakInstanceId: {{ .Values.global.cloudpakInstanceId | int64 | quote }}
        cloudpakName: {{ template "bigsql.cloudpak_name" . }}
        hook.activate.cpd.ibm.com/command: "[]"
        hook.deactivate.cpd.ibm.com/command: "[]"
        hook.quiesce.cpd.ibm.com/command: "[]"
        hook.unquiesce.cpd.ibm.com/command: "[]"
        productChargedContainers: {{ template "bigsql.product_charged_containers" . }}
        productCloudpakRatio: {{ template "bigsql.product_cloudpak_ratio" . }}
        productID: {{ template "bigsql.product_id" . }}
        productMetric: {{ template "bigsql.product_metric" . }}
        productName: {{ template "bigsql.product_name" . }}
        productVersion: {{ include "bigsql.product_version" . | quote }}
      labels:
        app: {{ template "bigsql.app_name" . }}
        app.kubernetes.io/component: "worker"
        app.kubernetes.io/instance: {{ .Values.zenServiceInstanceId | int64 | quote }}
        app.kubernetes.io/managed-by: "Tiller"
        app.kubernetes.io/name: {{ template "bigsql.app_name" . }}
        bigsql-node-role: worker
        helm.sh/chart: {{ template "bigsql.chart_name" . }}
        icpdsupport/addOnId: "bigsql"
        icpdsupport/app: "db2-bigsql"
        icpdsupport/createdBy: {{ .Values.zenServiceInstanceUID | int64 | quote }}
        icpdsupport/podSelector: bigsql-worker
        icpdsupport/serviceInstanceId: {{ .Values.zenServiceInstanceId | int64 | quote }}
        instance: {{ .Values.zenServiceInstanceId | int64 | quote }}
        instanceType: {{ .Values.zenServiceInstanceType | quote }}
        instanceVersion: {{ .Values.zenServiceInstanceVersion | quote }}
        release: {{ .Release.Name }}
        {{ if .Values.resources.setHostIPCTrue }} 
        type: engine
        {{ end }}


    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - {{ .Values.arch }}
        {{ if .Values.resources.setHostIPCTrue }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: 'type'
                  operator: In
                  values:
                  - 'engine'
              topologyKey: 'kubernetes.io/hostname'
        {{ end }}

      containers:

        # The Big SQL worker container

        - name: bigsql-worker
          command: [ "/bin/sh", -c ]
          args: [ "/home/bigsql/bigsql-container.sh -A addWorkerParallel -M" ]

          env:
            - name: CM_ADMIN_USER
              value: {{ .Values.remoteCluster.cmAdminUser | quote }}
            - name: CM_HOST
              value: {{ .Values.remoteCluster.cmHost | quote }}
            - name: CM_PORT
              value: {{ .Values.remoteCluster.cmPort | quote }}
            - name: CM_PROTOCOL
              value: {{ .Values.remoteCluster.cmProtocol | quote }}

            - name: OS_BUCKETNAME
              value: {{ .Values.objectStore.bucketName | quote }}
            - name: OS_ENDPOINT
              value: {{ .Values.objectStore.endpoint | quote }}
            - name: OS_HMAC_ACCESS
              value: {{ .Values.objectStore.hmacAccess | quote }}
            - name: OS_SSL_ENABLED
              value: {{ .Values.objectStore.sslEnabled | quote }}

            - name: ZEN_INSTANCE_ID
              value: {{ .Values.zenServiceInstanceId | int64 | quote }}

          image: "{{ .Values.docker_registry_prefix }}/{{ .Values.bigsqlWorker.image.dockerImage }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}

          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","/home/bigsql/bigsql-container.sh -A dropWorkerParallel"]

          livenessProbe:
            exec:
              command: ["/bin/sh","-c","/home/bigsql/bigsql-container.sh -A live" ]
            initialDelaySeconds: 600
            periodSeconds: 30
            timeoutSeconds: 20
            failureThreshold: 20

          ports:
            - name: ssh
              containerPort: 2222
              protocol: TCP

          readinessProbe:
            exec:
              command: ["/bin/sh","-c","/home/bigsql/bigsql-container.sh -A ready" ]
            initialDelaySeconds: 5
            periodSeconds: 30
            timeoutSeconds: 20
            failureThreshold: 20

{{- $bigsqlCPUReq := (.Values.resources.workers.requests.cpu) -}}
{{- $bigsqlCPULim := (.Values.resources.workers.requests.cpu) -}}
{{- $bigsqlMem := (.Values.resources.workers.requests.memory) -}}
{{- include "bigsql.helpers.resources" (list . (dict "requests" (dict "cpu" $bigsqlCPUReq "memory" $bigsqlMem) "limits" (dict "cpu" $bigsqlCPULim "memory" $bigsqlMem) )) | indent 10 }}

          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
                - AUDIT_WRITE
                - CHOWN
                - DAC_OVERRIDE
                - FOWNER
                - FSETID
                - KILL
                - MKNOD
                - NET_BIND_SERVICE
                - NET_RAW
                - SETFCAP
                - SETGID
                - SETPCAP
                - SETUID
                - SYS_CHROOT
                - IPC_OWNER
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true

          volumeMounts:
            - name: pv
              mountPath: /mnt/PV
            - name: secret-volume
              readOnly: true
              mountPath: "/etc/secret-volume"
            {{ if .Values.optionalSharedVolume.use }}
            - mountPath: /mnt/PV/shared
              name: shared-volume
            {{ end }}

      hostIPC: {{ template "bigsql.hostIPC" . }}
      hostNetwork: false
      hostPID: false

      initContainers:

        # The Big SQL volume init container

        - name: bigsql-volume-init
          args: [ "python3", "-u", "/restore-volumes-script.py", "worker", "false" ]
          image: "{{ .Values.docker_registry_prefix }}/{{ .Values.bigsqlInit.image.dockerImage }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
{{- include "bigsql.helpers.resources" (list . (dict "requests" (dict "cpu" $bigsqlCPUReq "memory" $bigsqlMem) "limits" (dict "cpu" $bigsqlCPULim "memory" $bigsqlMem) )) | indent 10 }}

          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
                - CHOWN
                - DAC_OVERRIDE
                - FOWNER
                - SETGID
                - SETUID
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000322824 # bigsql user

          volumeMounts:
            - name: pv
              mountPath: /mnt/PV

      securityContext:
        runAsNonRoot: true
        runAsUser: 1000322824 # bigsql user
        {{ if .Values.resources.setKernelSemSysCtls }}
        sysctls:
          - name: kernel.sem
            value: "250 256000 100 4096"
        {{ end }}

      serviceAccountName: {{ template "bigsql.service_account_name" . }}

      terminationGracePeriodSeconds: 600

      volumes:
        - name: secret-volume
          secret:
            secretName: bigsql-secret{{ template "bigsql.instance.secret.suffix" . }}
        {{ if .Values.optionalSharedVolume.use }}
        - name: shared-volume
          persistentVolumeClaim:
            claimName: {{ .Values.optionalSharedVolume.persistentVolumeClaimName }}
        {{ end }}

  volumeClaimTemplates:

    - apiVersion: core/v1
      kind: PersistentVolumeClaim
      metadata:
        name: pv       # Claim pv-{statefulSet.metadata.name}-{index} will be created
        labels:
          app: {{ template "bigsql.app_name" . }}
          app.kubernetes.io/component: "worker"
          app.kubernetes.io/instance: {{ .Values.zenServiceInstanceId | int64 | quote }}
          app.kubernetes.io/managed-by: "Tiller"
          app.kubernetes.io/name: {{ template "bigsql.app_name" . }}
          instance: {{ .Values.zenServiceInstanceId | int64 | quote }}
          instanceType: {{ .Values.zenServiceInstanceType | quote }}
          instanceVersion: {{ .Values.zenServiceInstanceVersion | quote }}

      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.persistence.workerPvSize }}
        {{ if .Values.persistence.workerStorageClassName }}
        storageClassName: {{ .Values.persistence.workerStorageClassName }}
        {{ else }}
        storageClassName: {{ .Values.global.persistence.storageClassName }}
        {{ end }}
