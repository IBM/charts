location @jkghandler {
    set $original_uri $uri;
    set $orig_loc $upstream_http_location;
    set $orig_auth $upstream_http_authorization;
    if ($uri ~* "(.*)/jkg/(.*)"){
        set $new_uri $2;
    }
    proxy_http_version 1.1;
    proxy_set_header Authorization $orig_auth;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    proxy_read_timeout 86400;
    proxy_pass $orig_loc$new_uri;
    add_header Cache-Control "no-cache, no-store, must-revalidate";
    add_header Pragma "no-cache";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";
}
location = /internal {
    internal;
    proxy_pass              {{ .Values.microService.scheme }}://{{ .Values.environment.name }}-control-plane:{{ .Values.microService.port }}/access/v1/apikey/authorize;
    proxy_pass_request_body off;
    proxy_set_header        Content-Length "";
    proxy_set_header X-Original-Request $request;
}
location = /internal1 {
    internal;
    proxy_pass              {{ .Values.microService.scheme }}://{{ .Values.environment.name }}-control-plane:{{ .Values.microService.port }}/v1/authorizeUser;
    proxy_pass_request_body off;
    proxy_set_header        Content-Length "";
    proxy_set_header X-Original-Request $request;
}
location @sparkuihandler {
    set $original_uri $uri;
    set $sparkui "sparkui";
    set $orig_loc $upstream_http_location;
    set $orig_auth $upstream_http_authorization;
    proxy_ignore_headers    Set-Cookie;
    proxy_set_header Cookie "";
    proxy_set_header Authorization $orig_auth;
    proxy_pass $orig_loc$sparkui/$3$is_args$args;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Accept-Encoding "";
        sub_filter 'href="/$kernel_id/sparkui/"' 'href="/v2/spark/ae/$1/sparkui/$kernel_id/"';
        sub_filter '</a><a href="/$kernel_id/sparkui/">Back to Master</a></p>' '</a><a href="/v2/spark/ae/$1/sparkui/$kernel_id/">Back to Master</a></p>';
        sub_filter "/$kernel_id/sparkui/proxy/app" "/v2/spark/ae/$1/sparkui/$kernel_id/proxy/app";
        sub_filter '"/$kernel_id/sparkui/static/' '"/v2/spark/ae/$1/sparkui/$kernel_id/static/';
        sub_filter "/$kernel_id/sparkui/proxy/worker" "/v2/spark/ae/$1/sparkui/$kernel_id/proxy/worker";
        sub_filter_once off;
}
location @sparkuistatichandler {
    set $original_uri $uri;
    set $sparkui "sparkui";
    set $orig_loc $upstream_http_location;
    set $orig_auth $upstream_http_authorization;
    proxy_ignore_headers    Set-Cookie;
    proxy_set_header Cookie "";
    proxy_set_header Authorization $orig_auth;
    proxy_pass $orig_loc$sparkui/static/$3$is_args$args;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Accept-Encoding "";
        sub_filter 'href="/$kernel_id/sparkui/"' 'href="/v2/spark/ae/$1/sparkui/$kernel_id/"';
        sub_filter '</a><a href="/$kernel_id/sparkui/">Back to Master</a></p>' '</a><a href="/v2/spark/ae/$1/sparkui/$kernel_id/">Back to Master</a></p>';
        sub_filter "/$kernel_id/sparkui/proxy/app" "/v2/spark/ae/$1/sparkui/$kernel_id/proxy/app";
        sub_filter '"/$kernel_id/sparkui/static/' '"/v2/spark/ae/$1/sparkui/$kernel_id/static/';
        sub_filter "/$kernel_id/sparkui/proxy/worker" "/v2/spark/ae/$1/sparkui/$kernel_id/proxy/worker";
        sub_filter_once off;
}
location @historyuihandler {
    set $original_uri $uri;
    set $historyui "historyui";
    set $orig_loc $upstream_http_location;
    set $orig_auth $upstream_http_authorization;
    proxy_set_header Authorization $orig_auth;
    proxy_pass $orig_loc$historyui/$3;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Accept-Encoding "";
        sub_filter "$kernel_id/historyui" "ae/$1/historyui/$kernel_id";
        sub_filter_once off;
}
location @instancehistoryuihandler {
    set $original_uri $uri;
    set $historyui "historyui";
    set $orig_loc $upstream_http_location;
    set $orig_auth $upstream_http_authorization;
    proxy_set_header Authorization $orig_auth;
    proxy_pass $orig_loc$historyui/$2$is_args$args;
    proxy_redirect ~^(http://[^:]+):\d+/[a-zA-Z0-9]+/historyui(/.+)$ /v2/spark/ae/$instance_id/historyui$2;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Accept-Encoding "";
        sub_filter_types *;
        sub_filter "$instance_id/historyui" "v2/spark/ae/$instance_id/historyui";
        sub_filter_once off;
}
location @instancejobhistoryuihandler {
    set $original_uri $uri;
    set $historyui "historyui";
    set $orig_loc $upstream_http_location;
    set $orig_auth $upstream_http_authorization;
    proxy_set_header Authorization $orig_auth;
    #return 404 $orig_loc;
    proxy_pass $orig_loc/$3$is_args$args;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Accept-Encoding "";
        sub_filter_types  application/javascript;
        #sub_filter_types *;
        sub_filter "$instance_id/historyui" "v2/spark/ae/$instance_id/historyui";
        sub_filter_once off;
}
location ~ /ae/spark/v2(.*)$ {
    rewrite /ae/spark/v2(.*) /v2/spark/ae$1 last;
}
location ~ /v2/spark/ae(.*)$ {
    proxy_intercept_errors on;
    tcp_nodelay             on;
    client_body_timeout     2m;
    proxy_connect_timeout   600;
    proxy_send_timeout      600;
    proxy_read_timeout      600;
    send_timeout            600;
    location ~ /v2/spark/ae/(.*)/historyui/(\w+-\w+-\w+-\w+-\w+)/(.*) {
        access_by_lua_file /nginx_data/checkjwt.lua;
        auth_request     /internal;
        auth_request_set $auth_status $upstream_status;
        set $instance_id $1;
        set $kernel_id $2;
        proxy_set_header content-type "application/json";
        set $serv  {{ .Values.microService.scheme }}://{{ .Values.environment.name }}-control-plane:{{ .Values.microService.port }}/{{ .Values.jobService.contextRoot }}/v2/$1/historyui/$2;
        proxy_pass  $serv;
        error_page 301 302 303 = @instancejobhistoryuihandler;
    }
    location ~ /v2/spark/ae/(.*)/historyui/(.*) {
        access_by_lua_file /nginx_data/checkjwt.lua;
        #auth_request     /internal;
        #auth_request_set $auth_status $upstream_status;
        set $instance_id $1;
        proxy_set_header content-type "application/json";
        set $serv {{ .Values.microService.scheme }}://{{ .Values.environment.name }}-control-plane:{{ .Values.microService.port }}/{{ .Values.instanceManagerService.contextRoot }}/instance/history/$1;
        proxy_pass  $serv;
        sub_filter_once off;
        error_page 301 302 303 = @instancehistoryuihandler;
    }
    location ~ /v2/spark/ae/(.*)/sparkui/(.*)$ {
        location ~ /v2/spark/ae/(.*)/sparkui/(.*){
            location ~ /v2/spark/ae/(.*)/sparkui/(\w+-\w+-\w+-\w+-\w+)/static/(.*) {
                # we are not authenticating the Static resources
                set $kernel_id $2;
                proxy_set_header content-type "application/json";
                set $serv  {{ .Values.microService.scheme }}://{{ .Values.environment.name }}-control-plane:{{ .Values.microService.port }}/{{ .Values.kernelService.contextRoot }}/$1/$2;
                proxy_pass  $serv;
                error_page 301 302 303 = @sparkuistatichandler;

            }
            location ~ /v2/spark/ae/(.*)/sparkui/(\w+-\w+-\w+-\w+-\w+)/(.*) {
                #auth_request     /internal;
                #auth_request_set $auth_status $upstream_status;
                set $kernel_id $2;
                proxy_set_header content-type "application/json";
                set $serv  {{ .Values.microService.scheme }}://{{ .Values.environment.name }}-control-plane:{{ .Values.microService.port }}/{{ .Values.kernelService.contextRoot }}/$1/$2;
                proxy_pass  $serv;
                error_page 301 302 303 = @sparkuihandler;
            }
        }
    }
    location ~ /v2/spark/ae/(.*)/sparkuia/(.*)$ {
        location ~ /v2/spark/ae/(.*)/sparkuia/(.*){
            location ~ /v2/spark/ae/(.*)/sparkuia/(\w+-\w+-\w+-\w+-\w+)/static/(.*) {
                set $kernel_id $2;
                proxy_set_header content-type "application/json";
                set $serv  {{ .Values.microService.scheme }}://{{ .Values.environment.name }}-control-plane:{{ .Values.microService.port }}/{{ .Values.kernelService.contextRoot }}/$1/$2;
                proxy_pass  $serv;
                error_page 301 302 303 = @sparkuiastatichandler;
            }
            location ~ /v2/spark/ae/(.*)/sparkuia/(\w+-\w+-\w+-\w+-\w+)/(.*) {
                #auth_request     /internal;
                #auth_request_set $auth_status $upstream_status;
                set $kernel_id $2;
                proxy_set_header content-type "application/json";
                set $serv  {{ .Values.microService.scheme }}://{{ .Values.environment.name }}-control-plane:{{ .Values.microService.port }}/{{ .Values.kernelService.contextRoot }}/$1/$2;
                proxy_pass  $serv;
                error_page 301 302 303 = @sparkuiahandler;
            }
        }
    }
    location ~ /v2/spark/ae/(.*)/jkg/(.*)$ {
        #auth_request     /internal;
        #auth_request_set $auth_status $upstream_status;
        location ~ /v2/spark/ae/(.*)/jkg/(.*)(interrupt|restart){
            proxy_method GET;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header content-type "application/json";
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-NginX-Proxy true;
            set $serv  {{ .Values.microService.scheme }}://{{ .Values.environment.name }}-control-plane:{{ .Values.microService.port }}/{{ .Values.kernelService.contextRoot }}/$1/jkg/$2;
            proxy_pass  $serv;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header X-XSS-Protection "1; mode=block";
            add_header X-Content-Type-Options "nosniff";
            error_page 301 302 303 = @jkghandler;
        }
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header content-type "application/json";
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-NginX-Proxy true;
        set $serv  {{ .Values.microService.scheme }}://{{ .Values.environment.name }}-control-plane:{{ .Values.microService.port }}/{{ .Values.kernelService.contextRoot }}/$1/jkg/$2;
        proxy_pass  $serv;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";
        error_page 301 302 303 = @jkghandler;
    }
    location ~ /v2/spark/ae/(\w+)/jobs(.*)$ {
        #auth_request     /internal;
        #auth_request_set $auth_status $upstream_status;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header content-type "application/json";
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-NginX-Proxy true;
        set $serv  {{ .Values.microService.scheme }}://{{ .Values.environment.name }}-control-plane:{{ .Values.microService.port }}/{{ .Values.jobService.contextRoot }}/v1/$1/jobs$2;
        proxy_pass  $serv;
    }
    location ~ /v2/spark/ae/(\w+)/v2/jobs(.*)$ {
        auth_request     /internal;
        auth_request_set $auth_status $upstream_status;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header content-type "application/json";
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-NginX-Proxy true;
        set $serv  {{ .Values.microService.scheme }}://{{ .Values.environment.name }}-control-plane:{{ .Values.microService.port }}/{{ .Values.jobService.contextRoot }}/v2/$1/jobs$2;
        proxy_pass  $serv$is_args$args;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";
    }
    location ~ /v2/spark/ae/jobs(.*)$ {
        access_by_lua_file /nginx_data/checkjwt.lua;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header content-type "application/json";
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-NginX-Proxy true;
        set $serv  {{ .Values.microService.scheme }}://{{ .Values.environment.name }}-control-plane:{{ .Values.microService.port }}/{{ .Values.jobService.contextRoot }}/v2/jobs$1;
        proxy_pass  $serv$is_args$args;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";
    }
    location ~ /v2/spark/ae/dryrun(.*)$ {
        #auth_request     /internal;
        #auth_request_set $auth_status $upstream_status;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header content-type "application/json";
        proxy_set_header X-NginX-Proxy true;
        proxy_pass {{ .Values.microService.scheme }}://{{ .Values.environment.name }}-control-plane:{{ .Values.microService.port }}/{{ .Values.instanceManagerService.contextRoot }}/instance$1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";
    }
    location ~ /v2/spark/ae/v2/instances(.*)$ {
        auth_request     /internal;
        auth_request_set $auth_status $upstream_status;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header content-type "application/json";
        proxy_set_header X-NginX-Proxy true;
        proxy_set_header verify-jwt true;
        proxy_pass {{ .Values.microService.scheme }}://{{ .Values.environment.name }}-control-plane:{{ .Values.microService.port }}/{{ .Values.instanceManagerServiceV2.contextRoot }}/instance$1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";
    }
    location ~ /v2/spark/ae(.*)$ {
        auth_request     /internal;
        auth_request_set $auth_status $upstream_status;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header content-type "application/json";
        proxy_set_header X-NginX-Proxy true;
        proxy_pass {{ .Values.microService.scheme }}://{{ .Values.environment.name }}-control-plane:{{ .Values.microService.port }}/{{ .Values.instanceManagerService.contextRoot }}/instance$1;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";
    }
    location ~ /v2/spark/ae(.*)$ {
        location ~ /v2/spark/ae/v1/(.*)$ {
            auth_request     /internal1;
            auth_request_set $auth_status $upstream_status;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header content-type "application/json";
            proxy_set_header X-NginX-Proxy true;
            access_by_lua_file /nginx_data/checkjwt.lua;
            proxy_pass {{ .Values.microService.scheme }}://{{ .Values.environment.name }}-control-plane:{{ .Values.microService.port }}/v1/$1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header X-XSS-Protection "1; mode=block";
            add_header X-Content-Type-Options "nosniff";
        }
        location ~ /v2/spark/ae(.*)$ {
            access_by_lua_file /nginx_data/checkjwt.lua;
            auth_request     /internal;
            auth_request_set $auth_status $upstream_status;
            proxy_set_header Host $http_host;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header content-type "application/json";
            proxy_set_header X-NginX-Proxy true;
            proxy_set_header verify-jwt true;
            proxy_pass {{ .Values.microService.scheme }}://{{ .Values.environment.name }}-control-plane:{{ .Values.microService.port }}/{{ .Values.instanceManagerService.contextRoot }}/instance$1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header X-XSS-Protection "1; mode=block";
            add_header X-Content-Type-Options "nosniff";
        }
    }
}
location ~ /v2/spark/v3/instances/(.*)/(.*)/applications(.*)$ {
    auth_request  /internal;
    auth_request_set $auth_status $upstream_status;
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header content-type "application/json";
    proxy_set_header X-NginX-Proxy true;
    set $serv  {{ .Values.microService.scheme }}://{{ .Values.environment.name }}-control-plane:{{ .Values.microService.port }}/{{ .Values.jobService.contextRoot }}/v3/instances/$1/$2/applications$3;
    proxy_pass  $serv$is_args$args;
}
location ~ /v2/spark/v3/instances(.*)$ {
    auth_request /internal;
    auth_request_set $auth_status $upstream_status;
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header content-type "application/json";
    proxy_set_header X-NginX-Proxy true;
    set $serv {{ .Values.microService.scheme }}://{{ .Values.environment.name }}-control-plane:{{ .Values.microService.port }}/{{ .Values.instanceManagerServiceV3.contextRoot }}/instances$1;
    proxy_pass  $serv;
}