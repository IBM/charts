# This is a YAML-formatted file.

apiVersion: batch/v1
kind: Job
metadata:
  namespace: {{ .Release.Namespace }}
  name: "{{ .Values.environment.name }}-create-confidential-properties"
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "5"
  labels:
    app: "{{ .Values.environment.name }}-create-confidential-properties"
    chart: "{{ .Chart.Name }}"
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: helm
    app.kubernetes.io/name: {{ .Release.Name }}
    helm.sh/chart: "{{ .Chart.Name }}"
spec:
  template:
    metadata:
      labels:
        app: "{{ .Values.environment.name }}-create-confidential-properties"
        chart: "{{ .Chart.Name }}"
        heritage: {{ .Release.Service }}
        release: {{ .Release.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: helm
        app.kubernetes.io/name: {{ .Release.Name }}
        helm.sh/chart: "{{ .Chart.Name }}"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - {{ .Values.global.architecture }}
      restartPolicy: "OnFailure"
      serviceAccount: {{ .Values.sa.editor }}
      securityContext:
        runAsUser: {{ .Values.user.uid }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      containers:
      - name: "{{ .Values.environment.name }}-create-confidential-properties"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          runAsUser: {{ .Values.user.uid }}
          runAsNonRoot: true
          privileged: false
          readOnlyRootFilesystem: false
        image: "{{ .Values.global.dockerRegistryPrefix }}/{{ .Values.trustStore.image }}:{{ .Values.spark.image.tag }}"
        command: ["/bin/bash", "-c"]
        args :
        - "bash {{ .Values.microService.pathPrefix }}/scripts/create-confidential-properties-secret.sh {{ .Values.environment.name }}-confidential-properties"
        imagePullPolicy: {{ .Values.microService.pullPolicy }}
        resources:
          requests:
            cpu: {{ .Values.microService.requests.cpu100 }}
            memory: {{ .Values.microService.requests.memory128 }}
          limits:
            cpu: {{ .Values.microService.limits.cpu100 }}
            memory: {{ .Values.microService.limits.memory128 }}
        volumeMounts:
        - name: "{{ .Values.environment.name }}-confidential-properties-secret"
          mountPath: "{{ .Values.microService.pathPrefix }}/confidential_config"
          readOnly: true
        - name: "{{ .Values.environment.name }}-create-confidential-secret-script"
          mountPath: "{{ .Values.microService.pathPrefix }}/scripts"
      volumes:
        - name: "{{ .Values.environment.name }}-confidential-properties-secret"
          secret:
             secretName: "{{ .Values.environment.name }}-confidential-properties-temp-secret"
        - name: "{{ .Values.environment.name }}-create-confidential-secret-script"
          configMap:
            name: "{{ .Values.environment.name }}-create-confidential-secret-script"
            items:
            - key: "create-confidential-properties-secret.sh"
              path: "create-confidential-properties-secret.sh"
