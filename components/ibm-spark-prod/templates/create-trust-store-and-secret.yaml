apiVersion: batch/v1
kind: Job
metadata:
  namespace: {{ .Release.Namespace }}
  name: "{{ .Values.environment.name }}-create-trust-store"
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "5"
    "hook.deactivate.cpd.ibm.com/command": "[]"
    "hook.activate.cpd.ibm.com/command": "[]"
  labels:
    app: "{{ .Values.environment.name }}-create-trust-store"
{{- include "helm.labels" . | indent 4 }}
{{- include "cloudpak.labels" . | indent 4 }}
spec:
  template:
    metadata:
      annotations:
{{- include "zenhelper.annotations" . | indent 8 }}
      labels:
        app: "{{ .Values.environment.name }}-create-trust-store"
{{- include "helm.labels" . | indent 8 }}
{{- include "cloudpak.labels" . | indent 8 }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - {{ .Values.global.architecture }}
      serviceAccount: {{ .Values.sa.editor }}
      serviceAccountName: {{ .Values.sa.editor }}
      securityContext:
        runAsUser: {{ .Values.user.zensysId }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      restartPolicy: "OnFailure"
      containers:
      - name: "{{ .Values.environment.name }}-create-trust-store"
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          runAsUser: {{ .Values.user.zensysId }}
          runAsNonRoot: true
          privileged: false
          readOnlyRootFilesystem: false
        image: "{{ .Values.global.dockerRegistryPrefix }}/{{ .Values.trustStore.image }}:{{ .Values.spark.image.tag }}"
        command: ["/bin/bash", "-c"]
        args :
        - "bash {{ .Values.trustStore.scriptPath }}create-trust-store-and-secret.sh {{ .Values.trustStore.password }} {{ .Values.trustStore.icp4dTsSecretName }} {{ .Values.trustStore.osCertSecretName }} {{ .Values.trustStore.icp4dCertPath }} {{ .Values.trustStore.zenMetastoreCertsSecretName }} {{ .Values.sparkMetastoredb.cockroachdb }} {{ .Values.sparkMetastoredb.certsPath }} {{ .Values.sparkMetastoredb.databaseRootCert }} {{ .Values.sparkMetastoredb.databaseClientCert }} {{ .Values.sparkMetastoredb.databaseClientKey }} {{ .Values.sparkMetastoredb.databaseClientKeyPkcs8 }}"
        imagePullPolicy: {{ .Values.microService.pullPolicy }}
        resources:
          requests:
            cpu: {{ .Values.trustStore.requests.cpu }}
            memory: {{ .Values.trustStore.requests.memory }}
          limits:
            cpu: {{ .Values.trustStore.limits.cpu }}
            memory: {{ .Values.trustStore.limits.memory }}
        volumeMounts:
        - name: "icp4d-certs"
          mountPath: {{ .Values.trustStore.icp4dCertPath }}
          readOnly: true
        - name: "{{ .Values.environment.name }}-create-trust-store-secret-script"
          mountPath: "{{ .Values.trustStore.scriptPath }}"
        {{- if .Values.sparkMetastoredb.cockroachdb }}
        - name: "{{ .Values.environment.name }}-zen-user-home-pvc"
          mountPath: "{{ .Values.microService.zenMetastoreCerts }}"
          subPath: "{{ .Values.zenUserHomeVol.metaStoreCertPath }}"
          readOnly: true
        {{- end }}
#        - name: "{{ .Values.environment.name }}-rabbit-mq-certs"
#          mountPath: "{{ .Values.rabbitMQ.certPath }}"
      volumes:
        - name: "icp4d-certs"
          secret:
             secretName: {{ .Values.trustStore.certSecretName }}
             items:
             - key: {{ .Values.trustStore.certFileName }}
               path: {{ .Values.trustStore.certFileName }}
        - name: "{{ .Values.environment.name }}-create-trust-store-secret-script"
          configMap:
            name: "{{ .Values.environment.name }}-create-trust-store-secret-script"
            items:
            - key: "create-trust-store-and-secret.sh"
              path: "create-trust-store-and-secret.sh"
        {{- if .Values.sparkMetastoredb.cockroachdb }}
        - name: "{{ .Values.environment.name }}-zen-user-home-pvc"
          persistentVolumeClaim:
            claimName: "{{ .Values.zenUserHomeVol.name }}"
        {{- end }}
#        - name: "{{ .Values.environment.name }}-rabbit-mq-certs"
#          secret:
#             secretName: "{{ .Values.rabbitMQ.certSecret }}"
