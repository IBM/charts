apiVersion: v1
kind: ConfigMap
metadata:
 name: {{ template "fullname" . }}-prop-config
 labels:
    {{- include "cognos-analytics.labels" . | indent 4 }}
data:
  rsvpproperties.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <!--
    Licensed Materials - Property of IBM

    IBM Cognos Products: rsvp

    (C) Copyright IBM Corp. 2005, 2017

    US Government Users Restricted Rights - Use, duplication or disclosure
    restricted by GSA ADP Schedule Contract with IBM Corp.
    -->
    <rsvp_property xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                   xsi:noNamespaceSchemaLocation="rsvpProperty.xsd">
      <structure>
        <!-- Setting StaticDateTimeOutput to a non-zero value will cause all data time output to use a static value.  value=time_t data type.   -->
        <!-- 1060180744 = Aug. 6, 2003  10:39:04 AM                      -->
        <!--<property>StaticDateTimeOutput</property>
                        <value type="long">1060180744</value>-->
      </structure>
      <structure>
        <!--
                                The amount of time (in seconds) a locally stored Content Manager reportCache cache output object can remain inactive before it
                                is removed from the Report Server local cache output storage.

                                Can be any non-negative integer.
                        -->
        <!--<property>LocalCacheOutputInactivityTimeout</property>
                        <value type="long">3600</value>-->
      </structure>
      <structure>
        <!--
                                The maximum number of locally stored Content Manager reportCache cache output objects maintained by Report Server.

                                If a value of less than 1 is given, the cache size will default to a size of 1.

                                Can be any non-negative integer.
                        -->
        <!--<property>LocalCacheOutputSize</property>
                        <value type="long">50</value>-->
      </structure>
      <structure>
        <!--
                                The amount of time (in seconds) a session can be inactive before it is removed from the session cache maintained by Report Server.
                                Can be any non-negative integer.  If this property is not specified the value for SessionInactivityTimeout will be retrieved from the
                                Cognos Series8 configuration.
                        -->
        <!--<property>SessionInactivityTimeout</property>
                        <value type="long">3600</value>-->
      </structure>
      <structure>
        <!--
                                The maximum size of the session cache maintained by Report Server.  value=number of entries.; can be any non-negative integer greater than 0.
                                If a value of less than 1 is given, the session cache size will default to a size of 1.
                        -->
        <!--<property>SessionCacheSize</property>
                        <value type="long">20</value>-->
      </structure>
      <structure>
        <!--
                                The amount of time (in seconds) that a session can be completed execution and not be accessed by a secondary request
                                before the session manager considers it to be abandoned by the client.  Requests tagged as abandoned are deleted from the system.
                        -->
        <!--<property>SessionAbandonedTimeout</property>
                        <value type="long">120</value>-->
      </structure>
      <structure>
        <!--
                                Indicate the number of items that the Session cache is allowed to grow before the session limit error is thrown.
                                The default is 20; can be any non-negative integer.
                        -->
        <!--<property>SessionsListGrowthLimit</property>
                        <value type="long">20</value>-->
      </structure>
      <structure>
        <!--
                                Indicate the number of execution threads to create that will be responsible for execute reports asynchronously
                        -->
        <!--<property>ExecutionThreadPoolSize</property>
                        <value type="long">20</value>-->
      </structure>
      <structure>
        <!-- Setting VirtualMemoryDiagnostics. Value can be
                                eDiagNone=0                                                                                                     No diagnostics
                                eDiagPageMap=1                                                                                  Dump the paging map to a file (look for rsvpvdiag* in your temp directory)
                                eDiagNoPaging=2                                                                                 Turns off paging to disk, all objects will be held in memory
                                eDiagDetectMemoryOverWrites=4                           Turns on aggressive memory overwrite detection.
                                eDiagAbortProcessOnMemoryOverWrite=8    If a memory overwrite occurs abort the process.
                                eDiagStderrVerbose=16                                                                   Write verbose information to stderr.
                                eDiagVerifyStructures=32                                                                Verify internal structures.

                                Values can be or'd together.
                        -->
        <!--<property>VirtualMemoryDiagnostics</property>
                        <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- Setting VirtualMemoryDump options.  Value can be
                               eDumpStats=1                     Dump paging statistics
                               eDumpMapper=2                    Dump mapper objects
                               eDumpUnrefOnly=4         Dump mapper objects that are being referenced (or'd with eDumpMapper)

                                Values can be or'd together
                          -->
        <!--<property>VirtualMemoryDump</property>
                        <value type="long">7</value>-->
      </structure>
      <structure>
        <!-- Setting VirtualMemoryTreeDump option.  1=on; 0=off  -->
        <!--<property>VirtualMemoryTreeDump</property>
                        <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- Setting VirtualMapperType option.
                                        0 - Offset Mapper
                                        1 - Indirect Mapper  (default)
                                        2 - Direct Mapper
                                        3 - Paged Index Mapper
                        -->
        <!--<property>VirtualMapperType</property>
                        <value type="long">1</value>-->
      </structure>
      <structure>
        <!-- Setting VirtualMaxPoolSize controls the maximum virtual memory pool for each document.  The default is 80MB. -->
        <!--<property>VirtualMaxPoolSize</property>
                        <value type="long">41943040</value>-->
      </structure>
      <structure>
        <!-- Setting ContextVirtualMaxPoolSize controls the maximum virtual memory pool available for context/metadata processing.  The default is 80MB. -->
        <!--<property>ContextVirtualMaxPoolSize</property>
                        <value type="long">83886080</value>-->
      </structure>
      <structure>
        <!-- Setting ContextBlockSize controls the data block size used in context/metadata processing.  The default is 150. -->
        <!--<property>ContextBlockSize</property>
                        <value type="long">150</value>-->
      </structure>
      <structure>
        <!-- Setting ContextVirtualBlockingVectorBlockSize controls the default block size for the context virtual blocking vector.  The default is 1000. -->
        <!--<property>ContextVirtualBlockingVectorBlockSize</property>
                        <value type="long">1000</value>-->
      </structure>
      <structure>
        <!-- Max number of bytes for temporary document output. If the document size exceeds the maximum, the document output is written to disk instead of using the virtual memory -->
        <!--<property>MaxDocumentOutputCache</property>
                        <value type="long">10485760</value>-->
      </structure>
      <structure>
        <!-- Setting DocIOVirtualMaxPoolSize controls the maximum virtual memory pool for each document IO. The default is 10MB.
        -->
        <!--<property>DocIOVirtualMaxPoolSize</property>
                        <value type="long">10485760</value>-->
      </structure>
      <structure>
        <!-- When RecordingsEnabled is set Report Server will record the requests and responses that it sends and receives, this can include SOAP
                            requests to external services, in-process requests to other components (for example QFW), report specification and intermediate data logs.
                            When recordings are enabled, the asynch protocol is disabled so that a working response will not occur.  The server will reply only
                            once the request has completed.  This behavior can be overridden via the RecordAsynch setting.

                            @see the following properties:
                                    -WriteReportSpecToFile
                                    -WriteParameters
                                    -DatasetRecordingMode
                                    -ExternalServicesRecordingMode
                                    -WriteIntermediateXml
                                    -WriteContextMetadataXml
                                    -RecordAsynch
                                    -KeepOnlyFaultRecordings

                            Files will be written to a directory under <temp_dir>/rsvp.

                        Valid values are:
                                    0=OFF             Record nothing. (default)
                                    1=ALL             Record all requests and responses.
                                    2=ALL_PER_REQUEST Record all requests and responses only when the incoming request indicates that it should be recorded.  The
                                                      incoming SOAP request must have a formFieldVar in the BIBusHeader with the name "_recordThisRequest".

                    -->
        <!--<property>RecordingsEnabled</property>
                    <value type="long">0</value>-->
      </structure>
      <structure>
      <!-- KeepOnlyFaultRecordings controls whether recordings for successful requests is are kept or discarded.  When the RecordingsEnabled property is
           enabled and when the KeepOnlyFaultRecordings property is enabled, only recordings for requests that fail are kept.  Recordings are created
           as normal.  Then, as a final step before returning the response, a check is made to determine if the request succeeded.  If it did, then the
           recording folder is removed, otherwise the recorded data is kept.

           This setting only applies when the 'RecordingsEnabled' property is enabled.
                            @see the following properties:
                                    -RecordingsEnabled

                        Valid values are:
                                    0=OFF            Keep all recordings (default)
                                    1=FAULTS_ONLY Only recodings for request that fail are kept.
                    -->
      <!-- <property>KeepOnlyFaultRecordings</property>
        <value type="long">0</value> -->
      </structure>

      <structure>
        <!-- Controls whether context metadata XML is written to file.

                            This setting only applies when the 'RecordingsEnabled' property is enabled.
                            @see the following properties:
                                    -RecordingsEnabled

                            Valid values are:
                                    0=OFF    Record nothing. (default)
                                    1=ON     When RecordingsEnabled is set, context metadata XML will be written to the recordings folder.
                    -->
        <!--<property>WriteContextMetadataXml</property>
                        <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- Controls whether ref query item collection  is written to file.

                            This setting only applies when the 'RecordingsEnabled' property is enabled.
                            @see the following properties:
                                    -RecordingsEnabled

                            Valid values are:
                                    0=OFF    Record nothing. (default)
                                    1=ON     When RecordingsEnabled is set, ref query item collection will be written to the recordings folder.
                    -->
        <!--<property>WriteRefQueryItemCollectionXml</property>
                        <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- Controls whether metadata cache  is written to file.

                            This setting only applies when the 'RecordingsEnabled' property is enabled.
                            @see the following properties:
                                    -RecordingsEnabled

                            Valid values are:
                                    0=OFF    Record nothing. (default)
                                    1=ON     When RecordingsEnabled is set, metdata cache will be written to the recordings folder.
                    -->
        <!--<property>WriteMetadataCache</property>
                        <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- Controls whether to write drill up/down intermittent state files

                            This setting only applies when the 'RecordingsEnabled' property is enabled.
                            @see the following properties:
                                    -RecordingsEnabled

                            Valid values are:
                                    0=OFF    Record nothing. (default)
                                    1=ON     When RecordingsEnabled is set, the following drill up/down files will be written to the recordings folder: _loadState_drill.xml, _loadState_mgr.xml, _storeState_drill.xml, _storeState_mgr.xml,                 drill_reportSpec_after.xml, drill_reportSpec_before.xml
                    -->
        <!--<property>WriteDrillUpDownFiles</property>
                        <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- Controls whether to write authored drill thorugh files

                            This setting only applies when the 'RecordingsEnabled' property is enabled.
                            @see the following properties:
                                    -RecordingsEnabled

                            Valid values are:
                                    0=OFF    Record nothing. (default)
                                    1=ON     When RecordingsEnabled is set, the following drill up/down files will be written to the recordings folder: _loadState_drill.xml, _loadState_mgr.xml, _storeState_drill.xml, _storeState_mgr.xml,                 drill_reportSpec_after.xml, drill_reportSpec_before.xml
                    -->
        <!--<property>WriteAuthoredDThroughTargetFiles</property>
                        <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- Determine whether or not asynch processing is enabled when recordings are enabled (see RecordingsEnabled).
                            This setting only applies when the 'RecordingsEnabled' property is enabled.
                            By default, the primary and secondary wait thresholds are set to a large value when recordings are enabled.  This ensures
                            processing of the request finishes before generating a SOAP response so the client never sees working as the conversation status.
                            As a result, the client never has to send a wait request.
                            This setting can be used to restore the standard behavior so that normal asynch processing still occurs.

                            @see the following properties:
                                    -RecordingsEnabled

                    Valid values are:
                                    0 - Disable asynch processing when recordings are enabled (default)
                                    1 - Preserve normal asynch processing when recordings are enabled.
                    -->
        <!--<property>RecordAsynch</property>
                    <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- When DatasetRecordingMode is set , the master datasets and the partial datasets retrieved will be written to an xml file in the
                            temp/rsvp directory. This setting only applies when the 'RecordingsEnabled' property is enabled.

                            @see the following properties:
                                    -RecordingsEnabled

                            NOTE:  If this is turned on when navigation is being done only the starting point to the end will be written.  For example, if you've just
                                   rendered page 2 then the data file will contain rows 21 to the end of data.

                            This property may turn off the 'allRows' query optimization hint.

                        Valid values are:
                              0=OFF
                              1=ON (default)
                              2=record QF command/response and master dataset.  Do not record partial dataset.  This setting does not affect query hints.
                    -->
        <!--<property>DatasetRecordingMode</property>
                    <value type="long">1</value>-->
      </structure>
      <structure>
        <!-- When WriteReportSpecToFile is non-zero, the report specification passed will be written to an xml file where
                             where recordings are being written.

                            This setting only applies when the 'RecordingsEnabled' property is enabled.
                            @see the following properties:
                                    -RecordingsEnabled

                                    0=OFF (default)
                                    1=record the V5 report specification that is being executed:
                                    2=same as 1 but also records the V5 specification prior to any pre-processing of the specification.
                                    3=same as 2 but also records the V5 specification after preprocessing (prior to the edit specification option being applied).

                            REPORT SPEC NAMES AND LOCATIONS:
                            VALUE  Run                                   RunSpec               Recordings Enabled (run or run specification)
                            =====  ===================================   =================   ===================================
                            1             <reportName>_reportSpec.xml    _reportSpec.xml     reportSpec.xml (in the current recordings directory)
                            2 same as 1 +   <reportName>_reportSpec-.xml   _reportSpec-.xml    reportSpec-.xml                                      "
                            3 same as 2 +   <reportName>_reportSpec+.xml   _reportSpec+.xml    reportSpec+.xml
                                                    <reportName>_reportSpec_ext+.xml   _reportSpec_ext+.xml    reportSpec_ext+.xml	 (preprocessing done by an extension library)
                    -->
        <!--<property>WriteReportSpecToFile</property>
                    <value type="long">1</value>-->
      </structure>
      <structure>
        <!-- Controls whether intermediate XML is written to file.

                            This setting only applies when the 'RecordingsEnabled' property is enabled.
                            @see the following properties:
                                    -RecordingsEnabled

                            Valid values are:
                                    0=OFF    Record nothing. (default)
                                    1=ON     When RecordingsEnabled is set, then intermediate XML will be written to the recordings folder under .../temp/rsvp.
                    -->
        <!--<property>WriteIntermediateXml</property>
                    <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- Controls how request/responses are written to file.

                            This setting only applies when the 'RecordingsEnabled' property is enabled.
                            @see the following properties:
                                    -RecordingsEnabled

                            Valid values are:
                                    0=OFF    Dump nothing.
                                    1=ON     Write the SOAP request/response to file. (default)
                    -->
        <!--<property>ExternalServicesRecordingMode</property>
                    <value type="long">1</value>-->
      </structure>
      <structure>
        <!-- Controls if request parameters are written to file.

                            This setting only applies when the 'RecordingsEnabled' property is enabled.
                            @see the following properties:
                                    -RecordingsEnabled

                            Valid values are:
                                    0=OFF    Write nothing.
                                    1=ON     Write the SOAP request parameters to file. (default)
                    -->
        <!--<property>WriteParameters</property>
                    <value type="long">1</value>-->
      </structure>
      <structure>
        <!-- Controls if chart assembly information is written to file.

                            This setting only applies when the 'RecordingsEnabled' property is enabled.
                            @see the following properties:
                                    -RecordingsEnabled

                                    Valid values are:
                                    0=OFF    Write nothing.
                                    1=ON     Write the chart assembly information to file (default)
                    -->
        <!--<property>RecordChartAssembly</property>
                    <value type="long">1</value>-->
      </structure>
      <structure>
        <!-- When FailoverEnabled is enabled set Report Server will attempt to re-create secondary requests that reference a session
                                that is not currently in memory.

                                Valid values are:
                                        0=OFF   Failover is disabled.
                                        1=ON    Failover is enabled (default) -->
        <!--<property>FailoverEnabled</property>
                        <value type="long">1</value>-->
      </structure>
      <structure>
        <!-- When WriteExcelToFile is set to 1, the Excel output produced will be written to a file in the bin directory.
                               Valid values are:
                                0=OFF (default)
                                1=ON ;                  -->
        <!--<property>WriteExcelToFile</property>
                        <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- ExcelSpreadSheetSize defines the user-defined number of rows per spreadsheet
                               Valid value is any number more than 10   -->
        <!--<property>ExcelSpreadSheetSize</property>
                        <value type="long">65000</value>-->
      </structure>
      <structure>
        <!-- Setting document output compression mechanism on or off.  value  can be either 1 or 0.  1=on; 0=off  -->
        <!--<property>DocumentOutputCompression</property>
                        <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- Display execution time values.  value can be either 1 or 0 or 3. 0=OFF 1=display in console; 3= display as xml execution tree
             set value to '3' to generate an xml tree of the execution times, works only for a standard install configuration
             if for the executing report there is a footer a button will be inserted in the page to display the execution times
             in either case, the execution times will be logged under /webcontent/performance_logs, open with a browser -->
        <!--<property>DisplayExecutionTimes</property>
                        <value type="long">1</value>-->
      </structure>
      <structure>
        <!-- Amount of spaces per stack depth to indent execution time results by (see 'DisplayExecutionTimes' property). -->
        <!-- can be any non-negative integer value  -->
        <!--<property>ExecutionTimerIdentSize</property>
                        <value type="long">1</value>-->
      </structure>
      <structure>
        <!-- Setting State Data compression mechanism on or off.  value  can be either 1 or 0.  1=on; 0=off
                               If ON, then State Data sent to the browser will be compressed and BASE64 encoded (squished)
                               By default, the flag is ON -->
        <!--<property>StateDataCompression</property>
                        <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- Display debug information from the RS Session Manager.  value  can be either 1 or 0.  1=on; 0=off  -->
        <!--<property>SessionDebugInfo</property>
                        <value type="long">1</value>-->
      </structure>
      <structure>
        <!-- Display debug information from the RS Capabilities Manager.  value  can be either 1 or 0.  1=on; 0=off  -->
        <!--<property>CapabilitiesDebugInfo</property>
                        <value type="long">1</value>-->
      </structure>
      <structure>
        <!-- Terminate process and generate core file when unknown thread error is encountered.
                                    This property only works under Windows os. Value can be either 1 or 0.  1=on; 0=off  -->
        <!--<property>TerminateOnUnknownThreadFault</property>
                        <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- Turning this flag ON will cause Report Server to generate name space qualified SOAP compliant faults.
                     When OFF, the faults are generated as they have always been.  1=ON; 0=OFF
                               By default, the flag is OFF -->
        <!--<property>FaultSoapCompliant</property>
                        <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- Trace incoming Soap requests (the Soap Request document) and the outgoing Soap responses.
                             Value of property is the file name.
                             Note, the system will add a process ID to the file name to prevent cross process collisions. -->
        <!--<property>TraceSoapRequest</property>
                        <value>../logs/_rsvpTraceSoap.xml</value>-->
      </structure>
      <structure>
        <!-- For the 'TraceSoapRequest' property, this setting defines the log format and which requests and responses are logged.
                                    This setting only applies when the 'TraceSoapRequest' property is enabled.
                                            0 = Trace all requests (default).
                                            1 = Trace only requests and responses where an error is returned.
                                            2 = Trace all requests and log in raw format.
                                            3 = Trace only requests and responses where an error is returned and log in raw format. -->
        <!--<property>TraceSoapRequestOption</property>
                        <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- Trace Soap request and the outgoing response messages made to keep user passport active during request.
                                     When ON, the messages are recorded in a directory under <temp_dir>/rsvp.
                                     1=ON; 0=OFF  By default, the flag is OFF
                             Note, the system will add a process ID to the directory to prevent cross process collisions. -->
        <!--<property>TracePingRequests</property>
                        <value type="long">1</value>-->
      </structure>
      <structure>
        <!-- Trace the printing process.
                             Value of property is the file name. -->
        <!--<property>TracePrintProcess</property>
                        <value>../logs/_rsvpTracePrint.log</value>-->
      </structure>
      <structure>
        <!-- Trace data on BIBusTKServerMain socket (inbound request and outgoing response)
                             The trace includes the HTTP headers, Soap documents and attachments (traces at the socket level)
                                 Value of property is the file name relative to the bin folder. -->
        <!--<property>TraceBIBus</property>
                        <value>../logs/_rsvpTraceBIBus.txt</value>-->
      </structure>
      <structure>
        <!-- Trace the QF commands and responses.
                                 Value of property is the file name relative to the bin folder. -->
        <!--<property>TraceQFCommand</property>
                        <value>../logs/_rsvpTraceQF.xml</value>-->
      </structure>
      <structure>
        <!-- Trace creation and deletion of session temporary files.
             Note, the system will add a process ID to the file name to prevent cross process collisions.
             Value of property is the file name relative to the bin folder. -->
        <!--<property>TraceTempFiles</property>
            <value>../logs/_rsvpTraceTempFiles</value>-->
      </structure>
      <structure>
        <!-- Turning this flag ON will cause Report Service operations with session affinity to attempt to reuse Query Framework sessions.
                               1=ON; 0=OFF
                               By default, the flag is ON -->
        <!--<property>SessionReUseEnabled</property>
                        <value type="long">1</value>-->
      </structure>
      <structure>
        <!-- Turning this flag ON will display console debugging information for RSHelper::xferWebResource.
                               1=ON; 0=OFF (default) -->
        <!--<property>XferWebResourceInfo</property>
                        <value type="long">1</value>-->
      </structure>
      <structure>
        <!-- Setting the default time wait in milliseconds for the Acrobat Reader to initialize.
                                 This value is used on WIN32 ONLY
                               By default 2000 milliseconds -->
        <!--<property>printDelay</property>
                        <value type="long">2000</value>-->
      </structure>
      <structure>
        <!-- Setting the time wait in minutes for Acrobat Reader to return from printing.
                                 This value is used on WIN32 ONLY
                             default is 5 minutes-->
        <!--<property>waitForPrintProcess</property>
                        <value type="long">5</value>-->
      </structure>
      <structure>
            <!-- Setting a polling interval whereby Acrobat Reader will be continuously pinged to ensure it is not hanging in an open but idle state.
                                 This value is used on WIN32 ONLY
                             default is 0 milliseconds, i.e., no polling occurs - we simply wait up until the 'waitForPrintProcess' value.
                             A recommended value if polling will be enabled is 1000 (1 second). 3 successive polls finding no new activity in the
                             Acrobat Reader process will be used to justify manually terminating its process and tagging the job as successful.-->
            <!--<property>printPollInterval</property>
                        <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- Specify the search path for prompt control skins in report output. -->
        <!--<property>promptSkin</property>
                        <value>../prompting/reportskin</value>-->
      </structure>
      <structure>
        <!-- Size of buffer used to hold report output.  When buffer overflows, output is written to disk. -->
        <!--<property>outputBufferSize</property>
                        <value type="long">300000</value>-->
      </structure>
      <structure>
        <!-- Maximum number of output buffers kept in the pool.  Additional buffers are deleted rather than queued. -->
        <!--<property>outputBufferPoolSize</property>
                        <value type="long">30</value>-->
      </structure>
      <structure>
        <!-- When WriteParameterValuesToFile is set, the parameter values content for each execution run will be written to a xml file in the \temp\rsvp.
                               Valid values are:
                                0=OFF (default)
                                1=ON ;                  -->
        <!--<property>WriteParameterValuesToFile</property>
                        <value type="long">1</value>-->
      </structure>
      <structure>
        <!-- Override the asynch wait processing.  This property can be used to override the primary and secondary wait thresholds
                                 or force a wait response regardless of how long it takes for the request to execute.
                               Valid values are:
                                <  0 Replace the primary and secondary wait thresholds with the absolute value (positive) AND
                                         force the request to generate a wait response by making the request thread sleep for the absolute value.
                                >= 0 Replace the primary and secondary wait thresholds with this value for all requests.
                                 If the primary wait threshold of a request is 0, a non-zero AsynchWaitOverride will be ignored.  The assumption is the client
                                 set the threshold to 0 to avoid async so we should not force async mode as the client may not handle the working response.  An AsynchWaitOverride=0
                                 will override the wait thresholds since this just prevents a request from going async.
                                -->
        <!--<property>AsynchWaitOverride</property>
                        <value type="long">3</value>-->
      </structure>
      <structure>
        <!-- If the flag is OFF, signed specification processing as per WO1753 is active.  If it is ON,
                                 returned specifications are not signed and capability checks are performed as if the specification is trusted
                                 0=OFF (default)
                                 1=ON
                        -->
        <!--<property>disableSpecSignCheck</property>
                        <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- Controls time interval formatting precision for numeric types. The values below indicate what time precision to use when
                                  formatting a numeric value to a time interval. The default is milliseconds.

                                Valid values are:
                                1 = milliseconds (default)
                                2 = seconds
                                3 = minutes
                    4 = hours
                    5 = days
                        -->
        <!--<property>timePrecisionForNumericIntervalFormatting</property>
                        <value type="long">1</value>-->
      </structure>
      <structure>
        <!-- HTML Style Sheet CSS optimizations.
                             1=on; 0=off (default)
                    -->
        <!--<property>optimizeHtmlCSSStyles</property>
                    <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- Xalan Tracing.
                                0=off (default)
                                1=trace templates
                                2=trace template children
                                4=trace generation event
                                8=trace selection event
                                16=diagnostic output
                                Note: These values can be or'd together to get the desired tracing/diagnostics options.
                                Note: If you turn this on while in the BIBusTKServerMain you must also enable the xalanTraceFile property otherwise Xalan will crash.
                         -->
        <!--<property>xalanTraceOptions</property>
                        <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- Xalan Trace file.
                             Value of property is the file name. -->
        <!--<property>xalanTraceFile</property>
                        <value>../logs/xalanTraceFile.txt</value> -->
      </structure>
      <structure>
        <!-- MIME type for MHT output.-->
        <!--<property>MHTMIMEType</property>
                        <value>text/html</value> -->
      </structure>
      <structure>
        <!-- Force asynch worker thread to pause as long as the following file exists.
                                 The value is the full file name. -->
        <!--<property>AsynchPause</property>
                        <value>s:\rsvp.pause</value> -->
      </structure>
      <structure>
        <!-- Setting MaxGeneratedBackgroundImageCache controls the maximum number of cached generated background images.  The default is 4000. -->
        <!--<property>MaxGeneratedBackgroundImageCache</property>
                        <value type="long">4000</value>-->
      </structure>
      <structure>
        <!-- Setting 'PercentOfGeneratedBackgroundImageToPurgeFromCache' controls the percentage of cached generated background images to purge when 'MaxGeneratedBackgroundImageCache' has been reached.  The default is 20. -->
        <!--<property>PercentOfGeneratedBackgroundImageToPurgeFromCache</property>
                        <value type="long">20</value>-->
      </structure>
      <structure>
        <!-- Determine whether to turn on or off the recording of the XLS Engine.
                             This setting is NOT dependent on 'RecordingsEnabled' property

                            @see the following properties:
                                    -RecordingsEnabled

                    Valid values are:
                                    0 = OFF (default)
                                    1 = ON
                    -->
        <!--<property>XLSERecordingsEnabled</property>
                    <value type="long">0</value>-->
      </structure>
      <structure>
        <!--
                            20100201 Temporary log option for CQ#238823 regarding missing user session ID
                            This code can be deleted once this problem has been resolved.
                    -->
        <!-- Determine whether to throw an exception when the incoming SOAP request
                             is missing the 'userSessionID' element from the CAM object in the BI Bus header.

                    Valid values are:
                                    0 = OFF (default)
                                    1 = ON
                    -->
        <!--<property>ThrowOnMissingUserSessionID</property>
                    <value type="long">0</value>-->
      </structure>
      <structure>
        <!--
                            20100201 Temporary log option regarding missing user session ID or conversation ID
                            This code can be deleted once this problem has been resolved.
                    -->
        <!-- Determine whether to throw an exception when the incoming SOAP request
                             is missing the conversation ID element or the 'userSessionID' element from the CAM object in the BI Bus header.

                    Valid values are:
                                    0 = OFF (default)
                                    1 = ON
                    -->
        <!--<property>ThrowOnMissingID</property>
                    <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- use cache for IROT resource contents
                    Valid values are:
                                    0 = OFF
                                    1 = ON (default)
                    -->
        <!--<property>IROTUseCache</property>
            <value type="long">1</value>-->
      </structure>
      <structure>
        <!-- Filter returned options.  When set to false, RSVP returns in primary request all options used to execute request.
                            Viewer has problems handling certain options so RSVP filters these out.
                            This option is intended to be used by development to allow viewer to reproduce problem.
                    Valid values are:
                                    0 = OFF
                                    1 = ON (default)
                    -->
        <!--<property>FilterReturnedOptions</property>
            <value type="long">1</value>-->
      </structure>
      <structure>
        <!-- When requesting print on windows, generate PostScript to a temp file instead of printing PDF.
                    Valid values are:
                                    0 = OFF (default)
                                    1 = ON
                    -->
        <!--<property>GenerateTestPostScript</property>
            <value type="long">0</value>-->
      </structure>
      <structure>
        <!-- Add an additional configuration settings (Advanced Server Property) to service for testing purposes.
                    Value is an XML encoded string representing configuration settings.
                     e.g. if you want to set RSVP.CONTENTMANAGER.USECACHE to 0 (turn CM cache usage off)
                    -->
        <!--<property>ConfigurationSettings</property>
            <value>&lt;settings xmlns=&quot;&quot;&gt;&lt;setting name=&quot;RSVP.CONTENTMANAGER.USECACHE&quot;&gt;0&lt;/setting&gt;&lt;/settings&gt;</value>-->
      </structure>
      <structure>
        <!-- Use Report Server's Report Specification cache options.  The default value 1.
                     Valid values are:
                                    0 = OFF
                                    1 = ON (default)
                    -->
       <!--<property>UseReportSpecificationCache</property>
            <value type="long">1</value>-->
      </structure>
      <structure>
        <!-- Report Specification cache pool size.  The default value is 100 -->
        <!--<property>ReportSpecificationPoolSize</property>
            <value type="long">100</value>-->
      </structure>
      <structure>
        <!-- Time in minutes to keep the report specification in the cache since it was last active.  The default value is 60 minutes -->
        <!--<property>CutOffTimeToKeepReportSpecInCache</property>
            <value type="long">60</value>-->
      </structure>
      <structure>
        <!-- Display debug information from the report specification in the cache.
                     Valid values are:
                                    0 = OFF (default)
                                    1 = Send debug information to stderr output.
                                    2 = Send debug information to rsvp_rsc_*.log file under application log folder.
                    -->
        <!--<property>ReportSpecCacheDebugInfo</property>
                        <value type="long">0</value>-->
      </structure>
      <structure>
       <!-- Controls whether to write a runnableReportSpec.xml file

                            This setting only applies when the 'RecordingsEnabled' property is enabled.
                            @see the following properties:
                                    -RecordingsEnabled

                            Valid values are:
                                    0=OFF    Record nothing. (default)
                                    1=ON
                    -->
        <!--<property>WriteRunnableReportSpec</property>
                        <value type="long">0</value>-->
       </structure>
      <structure>
       <!-- The URL that is POSTed to to convert CSV to data set.
                            The value of this property is appended to the host:port which is determined by RSVP.
                    -->
        <!--<property>csv2dataset</property>
                         <value>/bi/v1/csv2parquet</value>-->
      </structure>
      <structure>
       <!-- Specify the URL used to make REST calls (csv2parquet and baseModule creation).
            Normally the code uses the intenal dispatcher URL to determine this value.
            This setting allows you to intercept the calls via tcpmon. -->
        <!--<property>REST_URL</property>
                        <value>http://localhost:9300</value>-->
       </structure>
       <structure>
        <!-- Enable paginated saved output -->
        <!--<property>paginatedOutput</property>
                        <value type="long">0</value>-->
       </structure>
    </rsvp_property>
