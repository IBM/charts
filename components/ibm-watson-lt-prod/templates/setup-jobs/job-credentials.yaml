{{- include "sch.config.init" (list . "ibm-watson-lt.sch.chart.config.values") -}}
{{- if ( not .Values.global.serviceAccount.name ) -}}
apiVersion: v1
kind: ServiceAccount
imagePullSecrets:
  - name: sa-{{ .Release.Namespace }}
{{- if tpl .Values.global.image.pullSecret . }}
  - name: {{ tpl .Values.global.image.pullSecret . | quote }}
{{- end }}
metadata:
  name: {{ include "ibm-watson-lt.serviceAccountName" . | quote }}
  namespace: {{ .Values.global.zenControlPlaneNamespace | quote }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "0"
  labels:
{{ include "sch.metadata.labels.standard" (list .) | indent 4 }}
---
{{ end }}

{{- if .Values.global.rbac.create -}}
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ include "sch.names.fullName" (list .) | quote }}
  namespace: {{ .Values.global.zenControlPlaneNamespace | quote }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "1"
  labels:
{{ include "sch.metadata.labels.standard" (list . ) | indent 4 }}
rules:
- apiGroups:
    - ""
  resources:
    - pods
    - endpoints
    - configmaps
    - secrets
  verbs:
    - get
    - list
    - watch
    - patch
    - update
    - create
    - delete
---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ include "sch.names.fullName" (list .) | quote }}
  namespace: {{ .Values.global.zenControlPlaneNamespace | quote }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "2"
  labels:
{{ include "sch.metadata.labels.standard" (list .) | indent 4 }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: {{ include "sch.names.fullName" (list .) | quote }}
subjects:
- kind: ServiceAccount
  name: {{ include "ibm-watson-lt.serviceAccountName" . | quote }}
---
{{ end }}

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: "{{ .Release.Name }}-edb-rolebinding"
  namespace: {{ .Values.global.zenControlPlaneNamespace | quote }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "2"
  labels:
{{ include "sch.metadata.labels.standard" (list .) | indent 4 }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: "edb-operator"
subjects:
- kind: ServiceAccount
  name: "cpd-admin-sa"
---

{{- if .Values.creds.tls.create -}}
{{- $comp := "creds-gen" -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "sch.names.fullCompName" (list . $comp) | quote }}
  namespace: {{ .Values.global.zenControlPlaneNamespace | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $comp) | indent 4 }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "3"
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 300
  template:
    metadata:
      labels:
{{ include "sch.metadata.labels.standard" (list . $comp) | indent 8 }}
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 8 }}
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        {{- if not (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
        runAsUser: 1001
        {{- if semverCompare ">=1.14" .Capabilities.KubeVersion.GitVersion }}
        runAsGroup: 10000
        {{- end }}
        {{- end }}
      serviceAccountName: {{ include "ibm-watson-lt.serviceAccountName" . | quote }}
      containers:
      - name: cred-gen
        {{ include "sch.security.securityContext" (list . .sch.chart.dropAllContainerSecurityContext) | indent 8 }}
        {{ include "ibm-watson-lt.pullPolicyTemplate" . }}
        image: {{ include "ibm-watson-lt.repo" . }}{{ .Values.creds.image.name }}:{{ .Values.creds.image.tag }}
        resources:
          requests:
            memory: 128Mi
            cpu: 100m
          limits:
            memory: 128Mi
            cpu: 100m
        command:
        - "/bin/bash"
        - -c
        - |
          openssl genrsa -out ca.key 2048
          openssl req -x509 -new -nodes -key ca.key -subj "/CN=mnlp" -days 3650 -reqexts v3_req -extensions v3_ca -out ca.crt
          cat >openssl.cnf <<EOL
          [req]
          req_extensions = v3_req
          distinguished_name = req_distinguished_name
          [req_distinguished_name]
          [ v3_req ]
          basicConstraints = CA:FALSE
          keyUsage = nonRepudiation, digitalSignature, keyEncipherment
          subjectAltName = @alt_names
          [alt_names]
          DNS.1 = mnlp
          DNS.2 = localhost
          DNS.3 = 127.0.0.1
          DNS.4 = {{ include "sch.names.fullName" (list .) }}
          {{ $compName1 :=  .sch.chart.components.postgres.proxyService -}}
          {{ $compName2 :=  .sch.chart.components.postgres.name -}}
          DNS.5 = {{ include "sch.names.fullCompName" (list $ $compName1) }}.{{.Values.global.zenControlPlaneNamespace}}.{{.Values.global.clusterDomain }}
          DNS.6 = {{ include "sch.names.fullCompName" (list $ $compName2) }}.{{.Values.global.zenControlPlaneNamespace}}.{{.Values.global.clusterDomain }}
          {{ $compName3 :=  .sch.chart.components.minio.headless -}}
          {{ $compName4 :=  .sch.chart.components.minio.service -}}
          DNS.7 = *.{{ include "sch.names.fullCompName" (list $ $compName3) }}.{{ .Release.Namespace }}.{{ .Values.global.clusterDomain }}
          DNS.8 = {{ include "sch.names.fullCompName" (list $ $compName4) }}.{{ .Release.Namespace }}.{{ .Values.global.clusterDomain }}
          EOL
          openssl genrsa -out lt.key 2048
          openssl req -new -key lt.key -out lt.csr -subj "/CN={{ include "sch.names.fullName" (list .) }}" -config openssl.cnf
          # pkcs8 format required by gRPC Java
          openssl pkcs8 -topk8 -nocrypt -in lt.key -out lt.key.pkcs8
          openssl x509 -req -in lt.csr \
            -CA ca.crt -CAkey ca.key -CAcreateserial \
            -out lt.crt -days 3650 -extensions v3_req -extfile openssl.cnf
          cat <<EOF | kubectl create -n {{ .Release.Namespace }} -f -
          apiVersion: v1
          kind: Secret
          type: kubernetes.io/tls
          metadata:
            name: {{ include "ibm-watson-lt.tlsSecretName" . | quote }}
            labels:
{{ include "sch.metadata.labels.standard" (list .) | indent 14 }}
          data:
            tls.cacrt: $(cat ca.crt | base64 | tr -d '\n')
            tls.crt: $(cat lt.crt | base64 | tr -d '\n')
            tls.key: $(cat lt.key | base64 | tr -d '\n')
            tls.key.pkcs8: $(cat lt.key.pkcs8 | base64 | tr -d '\n')
            tls.cacrt.str: $(sed '1d;$d' ca.crt | tr -d '\n' | base64 | tr -d '\n')
            ca.crt: $(cat ca.crt | base64 | tr -d '\n') # duplicate value to feed edb postgres
          ---
          {{ if (not .Values.postgres.authSecretName) -}}
          apiVersion: v1
          kind: Secret
          type: Opaque
          metadata:
            labels:
{{ include "sch.metadata.labels.standard" (list .) | indent 14 }}
            {{ $compName :=  .sch.chart.components.postgres.authSecret -}}
            name: {{ include "sch.names.fullCompName" (list $ $compName) | quote }}
          data:
            PG_PASSWORD: $(openssl rand -base64 20 | tr -d '\n' | base64 | tr -d '\n')
            PG_REPLICATION_PASSWORD: $(openssl rand -base64 20 | tr -d '\n' | base64 | tr -d '\n')
            PG_REPLICATION_USER:  $(echo "replication" | tr -d '\n' | base64 | tr -d '\n')
            PG_USER: $(echo "enterprisedb" | tr -d '\n' | base64 | tr -d '\n')
            USING_SECRET: $(echo "true" | tr -d '\n' | base64 | tr -d '\n')
          {{- end }}
          ---
          {{ if (not .Values.s3.existingSecret ) -}}
          apiVersion: v1
          kind: Secret
          type: Opaque
          metadata:
            labels:
{{ include "sch.metadata.labels.standard" (list .) | indent 14 }}
            {{ $compName :=  .sch.chart.components.minio.authSecret -}}
            name: {{ include "sch.names.fullCompName" (list $ $compName) | quote }}
          data:
            accesskey: $(openssl rand -hex 18 | tr -d '\n' | base64 | tr -d '\n')
            secretkey: $(openssl rand -hex 18 | tr -d '\n' | base64 | tr -d '\n')
          {{- end }}
          ---
          {{- if and ( .Values.s3.sse.enabled ) (not .Values.s3.sse.masterKeySecret ) }}
          apiVersion: v1
          kind: Secret
          type: Opaque
          metadata:
            {{ $compName :=  .sch.chart.components.minio.sseMasterKeySecret -}}
            name: {{ include "sch.names.fullCompName" (list $ $compName) | quote }}
            labels:
{{ include "sch.metadata.labels.standard" (list .) | indent 14 }}
          data:
            {{ .Values.s3.sse.masterKeyName | quote }}: $(echo "KEY_ID:$(openssl rand -hex 32 | tr -d '\n')" | tr -d '\n' | base64 | tr -d '\n')
{{- end }}
          EOF
      restartPolicy: Never
      affinity:
{{ include "ibm-watson-lt.affinity" $ | trim | indent 8 }}
---
{{ $comp := "creds-del" -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "sch.names.fullCompName" (list . $comp) | quote }}
  namespace: {{ .Values.global.zenControlPlaneNamespace | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $comp) | indent 4 }}
  annotations:
    "helm.sh/hook": pre-delete
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 300
  template:
    metadata:
      labels:
{{ include "sch.metadata.labels.standard" (list . $comp) | indent 8 }}
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 8 }}
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      serviceAccountName: {{ include "ibm-watson-lt.serviceAccountName" . | quote }}
{{- include "sch.security.securityContext" (list . .sch.chart.mnlpPodSecurityContext) | indent 6 }}
      containers:
      - name: cred-gen
        {{ include "sch.security.securityContext" (list . .sch.chart.dropAllContainerSecurityContext) | indent 8 }}
        {{ include "ibm-watson-lt.pullPolicyTemplate" . }}
        image: {{ include "ibm-watson-lt.repo" . }}{{ .Values.creds.image.name }}:{{ .Values.creds.image.tag }}
        resources:
          requests:
            memory: 128Mi
            cpu: 100m
          limits:
            memory: 128Mi
            cpu: 100m
        command:
        - "/bin/bash"
        - -c
        - |
          set -e
          {{- $secretName := (include "ibm-watson-lt.tlsSecretName" .) }}
          if kubectl get secret {{ $secretName | quote }} -n {{ .Release.Namespace }} ; then
            echo "=>>>Deleting {{ $secretName }} ..."
            kubectl delete secret {{ $secretName | quote }} -n {{ .Release.Namespace }}
          else
            echo "=>>>Secret {{ $secretName }} does not exist (already deleted)"
          fi
      restartPolicy: Never
      affinity:
{{ include "ibm-watson-lt.affinity" $ | trim | indent 8 }}
{{- end -}}
