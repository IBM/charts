apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    app.kubernetes.io/managed-by: {{.Release.Service | quote }}
    app.kubernetes.io/instance: {{.Release.Name | quote }}
    app.kubernetes.io/name: "{{ .Release.Name }}"
    helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    app: mlrepositoryv4
  name: wml-repositoryv4 #deployment name
spec:
  selector:
    matchLabels:
      app: mlrepositoryv4
  revisionHistoryLimit: 5 #keep last 5 rs
  replicas: 1 # tells deployment to run 1 pod matching the template
  minReadySeconds: 10
  #strategy is something we will use later
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 0
  template: # create pods using pod definition in this template
    metadata:
      creationTimestamp: null
      labels:
        app: mlrepositoryv4
        chart: "{{ .Chart.Name }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
        app.kubernetes.io/managed-by: {{.Release.Service | quote }}
        app.kubernetes.io/instance: {{.Release.Name | quote }}
        app.kubernetes.io/name: "{{ .Release.Name }}"
        helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
        icpdsupport/addOnId: wml
        icpdsupport/app: api
      annotations:
        hook.deactivate.cpd.ibm.com/command: '["sh", "/opt/ibm/ml-repository/bin/startQuiesce.sh"]'
        hook.activate.cpd.ibm.com/command: '["sh" , "/opt/ibm/ml-repository/bin/endQuiesce.sh"]'
        hook.quiesce.cpd.ibm.com/command: '[]'
        hook.unquiesce.cpd.ibm.com/command: '[]'
        cloudpakName: "IBM Cloud Pak for Data"
        cloudpakId: "eb9998dcc5d24e3eb5b6fb488f750fe2"
        productCloudpakRatio: "1:1"
        productID: "eb9998dcc5d24e3eb5b6fb488f750fe2"
        cloudpakInstanceId: "{{ .Values.global.cloudpakInstanceId }}"
        productName: "IBM Watson Machine Learning"
        productVersion: 3.5.0
        productMetric: "VIRTUAL_PROCESSOR_CORE"
        productChargedContainers: All
        checksum.helm.kubernetes.io/configmap: {{ include (print $.Template.BasePath "/wmlrepositoryv4-configmap.yaml") . | sha256sum }}  
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: beta.kubernetes.io/arch
                    operator: In
                    values:
                      - {{ .Values.global.architecture }}
      serviceAccount: {{ .Values.global.editor.sa }}
      serviceAccountName: {{ .Values.global.editor.sa }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      containers:
        - name: mlrepositoryv4
          image: "{{ .Values.global.docker_registry_prefix}}/{{ .Values.mlRepositoryV4.image.repository }}:{{ .Values.mlRepositoryV4.image.tag }}"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            runAsUser: {{ .Values.global.user.id }}
            runAsNonRoot: true
            privileged: false
            readOnlyRootFilesystem: false
          envFrom:
            - secretRef:
                name: wdp-service-id
          livenessProbe:
            httpGet:
              path: ml/wml_services/ml-repository/heartbeat
              port: 18803
              scheme: HTTPS
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: ml/wml_services/ml-repository/heartbeat
              port: 18803
              scheme: HTTPS
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          lifecycle:
            preStop:
              exec:
                command:
                  - sleep
                  - "5"
          resources:
            limits:
              cpu: 1000m
              memory: 3072Mi
            requests:
              cpu: 150m
              memory: 1024Mi
          env:
            - name: INTERNAL_NGINX_CERT
              valueFrom:
                secretKeyRef:
                  key: certificate.pem
                  name: internal-nginx-svc-tls
            - name: WDP_BASE_URL
              valueFrom:
                configMapKeyRef:
                  key: host-url
                  name: wdp-config
            - name: KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: key_store_password
                  name: training-secrets
            - name: DEPLOYMENT_PLATFORM
              value: private
            - name: DEPLOYMENT_PRIVATE
              value: "local"
            - name: WMLENV
              value: prod
            - name: DATACENTRE
              value: Dallas
            - name: AZ
              value: dal10
            - name: MEMORY
              value: "3072"
            - name: CPU
              value: "1"
            - name: PLATFORM
              value: "wml"
            - name: SERVICE
              value: "Watson Machine Learning"
            - name: VERSION
              value: "4.0.0"
          ports:
            - containerPort: 32191 #needed for inter container communication
          volumeMounts:
            - name: config-volume
              mountPath: /opt/ibm/ml-repository/conf
            - mountPath: /user-home
              name: user-home-mount
            - mountPath: /opt/ibm/ml-repository/keys
              name: config-volume-keystore
            - mountPath: /wml-training-data
              name: wml-training-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
      volumes:
        - name: config-volume
          configMap:
            name: wmlrepositoryv4configmap
        - name: user-home-mount
          persistentVolumeClaim:
            claimName: user-home-pvc
        - name: config-volume-keystore
          configMap:
            name: wmlsslcertsconfigmap
        - name: wml-training-data
          persistentVolumeClaim:
            claimName: file-api-claim
