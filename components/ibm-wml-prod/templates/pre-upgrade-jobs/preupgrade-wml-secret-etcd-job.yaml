apiVersion: batch/v1
kind: Job
metadata:
  name: preupgrade-wml-secret-etcd
  labels:
    app: preupgrade-wml-secret-etcd
    chart: "{{ .Chart.Name }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    app.kubernetes.io/managed-by: {{.Release.Service | quote }}
    app.kubernetes.io/instance: {{.Release.Name | quote }}
    app.kubernetes.io/name: "{{ .Release.Name }}"
    helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation
    "helm.sh/hook-weight": "3"
spec:
  activeDeadlineSeconds: 300
  template:
    metadata:
      name: preupgrade-wml-secret-etcd
      labels:
        app: preupgrade-wml-secret-etcd
        chart: "{{ .Chart.Name }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
        app.kubernetes.io/managed-by: {{.Release.Service | quote }}
        app.kubernetes.io/instance: {{.Release.Name | quote }}
        app.kubernetes.io/name: "{{ .Release.Name }}"
        helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
        icpdsupport/addOnId: wml
        icpdsupport/app: api
      annotations:
        cloudpakName: "IBM Cloud Pak for Data"
        cloudpakId: "eb9998dcc5d24e3eb5b6fb488f750fe2"
        productCloudpakRatio: "1:1"
        productID: "eb9998dcc5d24e3eb5b6fb488f750fe2"
        productName: "IBM Watson Machine Learning"
        productVersion: "3.5.0"
        productMetric: "VIRTUAL_PROCESSOR_CORE"
        productChargedContainers: All
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                  - {{ .Values.global.architecture }}
      serviceAccount: {{ .Values.global.editor.sa }}
      serviceAccountName: {{ .Values.global.editor.sa }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      restartPolicy: Never
      containers:
        - name: "wml-kubectl-etcd"
          image: "{{ .Values.global.docker_registry_prefix }}/{{ .Values.wmlDeleteRuntime.image.repository }}:{{ .Values.wmlDeleteRuntime.image.tag }}"
          securityContext:
            allowPrivilegeEscalation: false
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: {{ .Values.global.user.id }}
            capabilities:
              drop:
                - ALL
          resources:
            limits:
              cpu: "0.5"
              memory: "512Mi"
            requests:
              cpu: "0.5"
              memory: "512Mi"
          command:
          - "/bin/bash"
          - -c
          - |

           {{- $cn := .Values.wmlclusterEtcd.etcdServiceName }}
           {{- $clusterDomain := .Values.wmlclusterEtcd.clusterDomain }}
           {{- $altName1 :=  printf "%s.%s.svc.%s" $cn .Release.Namespace $clusterDomain }}
           {{- $altName2 :=  printf "*.%s" $altName1 }}
            # Dynamic generation of SSL key and certificate
            cd /tmp
            echo '{"CN":"WML ICP Content CA","key":{"algo":"rsa","size":2048}, "signing":{"default":{"expiry":"87600h","usages":["signing","key encipherment","server auth","client auth"]}}}' | cfssl gencert -initca - | cfssljson -bare ca -
            echo '{"signing":{"default":{"expiry":"87600h","usages":["signing","key encipherment","server auth","client auth"]}}}' > ca-config.json

            export ADDRESS={{ $cn }},"{{ $altName1 }}","{{ $altName2 }}",localhost,127.0.0.1
            export NAME={{ $cn }}
            echo '{"CN":"'$NAME'","hosts":[""],"key":{"algo":"rsa","size":2048}}' | cfssl gencert -config=ca-config.json -ca=ca.pem -ca-key=ca-key.pem -hostname="$ADDRESS" - | cfssljson -bare $NAME
            ls -al
            caCert=`cat ca.pem | base64 | tr -d '\n'`
            key=`cat ${NAME}-key.pem | base64 | tr -d '\n'`
            crt=`cat ${NAME}.pem | base64 | tr -d '\n'`
            caCertB64=`cat ca.pem | base64 | tr -d '\n' | base64 | tr -d '\n'`
            etcdPassword=`cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 | tr -d '\n' | base64 | tr -d '\n'`

            cat <<EOF | kubectl apply -f -
            apiVersion: v1
            kind: Secret
            metadata:
              name: "wml-deployments-etcd-secret"
              labels:
                app: wml-deployments-etcd
                chart: "{{ .Chart.Name }}"
                release: "{{ .Release.Name }}"
                heritage: "{{ .Release.Service }}"
            type: Opaque
            data:
              etcd-cluster: aHR0cHM6Ly93bWwtZGVwbG95bWVudHMtZXRjZDoyMzc5LGh0dHBzOi8vd21sLWRlcGxveW1lbnRzLWV0Y2Q6MjM3OQ==
              etcd-user: cm9vdA==
              etcd-password: ${etcdPassword}
              server.cacrt.base64: ${caCertB64}
              server.cacrt: ${caCert}
              server.crt: ${crt}
              server.key: ${key}
            EOF