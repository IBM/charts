apiVersion: v1
data:
  build_info.ini: version=0.1.19-201801100132
  server_grpc.crt: |
    -----BEGIN CERTIFICATE-----
    MIIDcDCCAlgCCQD7w6yg3923ljANBgkqhkiG9w0BAQsFADB6MQswCQYDVQQGEwJV
    UzERMA8GA1UECAwITmV3IFlvcmsxDzANBgNVBAcMBkFybW9uazEzMDEGA1UECgwq
    SW50ZXJuYXRpb25hbCBCdXNpbmVzcyBNYWNoaW5lIENvcnBvcmF0aW9uMRIwEAYD
    VQQDDAlsb2NhbGhvc3QwHhcNMTkwMTIzMTIyMTQxWhcNMjkwMTIwMTIyMTQxWjB6
    MQswCQYDVQQGEwJVUzERMA8GA1UECAwITmV3IFlvcmsxDzANBgNVBAcMBkFybW9u
    azEzMDEGA1UECgwqSW50ZXJuYXRpb25hbCBCdXNpbmVzcyBNYWNoaW5lIENvcnBv
    cmF0aW9uMRIwEAYDVQQDDAlsb2NhbGhvc3QwggEiMA0GCSqGSIb3DQEBAQUAA4IB
    DwAwggEKAoIBAQDFrXXru1jAVLwB/01/MYNhddRC/3je0S7AXDyDyaoc57M9YW9P
    0UU/Dv61T8pCuhJZSw7AiPTjVDQEYc9F/uJCfaRDCxVcg9ECnRs7DZ90g8vLGgun
    f3GINyGkimHph628tvvNCJpSZY8RG21iQSLKoGmFxPxEJ9SFLaFRnih2oDvmpYpR
    ugL+pfor/TlX1mQ7JlvGtkwuRXhT+h07KZwYVjwEl7PQCwbNxhe3sJWpHbH7cnTH
    oo1+gPUiEAp1B2WD/BptJwGCggT//yBccne3GERS4GsFkNw5zEM5NKPyNx3MAAiF
    CaEp+5okH63PMHYPrMDbn0jJzTietKiQKjHLAgMBAAEwDQYJKoZIhvcNAQELBQAD
    ggEBAEMk62+OGskkkVbLFBRlXOt9FL16wpUQ3+4+6Cbiktzv2Go2dLhpzDTlrRek
    GEGwNAV6DZqf8cLIN04weCKgIpKWB3SaGvXVbRZ6u7qQGdY/fFBnMHlGLipyTboU
    5wZL3q6at0TeRYpdYtIdSqmi6KCDEeotxAkasXVoGWzV5ukSd7M3AyqcFoEFnppw
    Gj961x113sM8QkYrPK2PDuMKGddlq8y9DN0fZvyfpS6E1gfBNjguVtCVxuqzu06e
    1cRjnBENWs4cOmRE3CahRNthFXj8xxpALfNW5XQl9GD2y5ZDEIgta5HdFQEUiKXC
    w/GKf3ez3t5xwo+MwPSqGkcXjGg=
    -----END CERTIFICATE-----
  logging_flask.ini: |-
    [loggers]
    keys=root,wml,security

    [handlers]
    keys=rootFileHandler,wmlFileHandler,securityFileHandler

    [formatters]
    keys=rootFileFormatter,wmlFileFormatter

    [logger_root]
    level=INFO
    handlers=rootFileHandler
    qualname=root

    [logger_wml]
    level=INFO
    handlers=wmlFileHandler
    qualname=wml
    propagate=0

    [logger_security]
    level=INFO
    handlers=securityFileHandler
    qualname=security
    propagate=0

    [handler_rootFileHandler]
    class=handlers.RotatingFileHandler
    level=INFO
    formatter=rootFileFormatter
    args=('/opt/ibm/scoring/python/logs/server_default.log',)

    [handler_wmlFileHandler]
    class=handlers.RotatingFileHandler
    level=INFO
    formatter=wmlFileFormatter
    args=('/opt/ibm/scoring/python/logs/server_api.log',)

    [handler_securityFileHandler]
    class=handlers.RotatingFileHandler
    level=INFO
    formatter=wmlFileFormatter
    args=('/opt/ibm/scoring/python/logs/security-py-online-scoring-service.log',)

    [formatter_rootFileFormatter]
    format=%(asctime)s,%(msecs)03d|%(levelname)s|%(name)s:%(lineno)d|reqid|depid:%(message)s
    datefmt=%Y/%m/%d %H:%M:%S

    [formatter_wmlFileFormatter]
    format=%(asctime)s,%(msecs)03d|%(levelname)s|%(name)s:%(lineno)d|%(requestid)s|%(deploymentid)s:%(message)s
    datefmt=%Y/%m/%d %H:%M:%S
  logging_grpc.ini: |
    [loggers]
    keys=root

    [handlers]
    keys=grpcFileHandler

    [formatters]
    keys=grpcFormatter

    [logger_root]
    level=INFO
    handlers=grpcFileHandler

    [handler_grpcFileHandler]
    class=handlers.RotatingFileHandler
    level=INFO
    formatter=grpcFormatter
    args=('/opt/ibm/scoring/python/logs/server_grpc.log',)

    [formatter_grpcFormatter]
    format=%(asctime)s,%(msecs)03d|%(levelname)s|%(name)s:%(lineno)d|%(requestid)s|%(deploymentid)s:%(message)s
    datefmt=%Y/%m/%d %H:%M:%S
  py_ml_scoring_service.yml: |
    build:
      build_info: "/opt/ibm/scoring/python/conf-common/build_info.ini"

    flask_server:
      uwsgi_ini: "/opt/ibm/scoring/python/conf-common/uwsgi.ini"
      processes: 1
      threads: 20
      server_host: 127.0.0.1
      server_port: 16500
      server_hybrid_port: 16504
      p12_file: "/opt/ibm/scoring/keys/private_ssl/keystore.p12"
      key: "/opt/ibm/scoring/keys/private/keystore.key"
      certificate: "/opt/ibm/scoring/keys/private/keystore.crt"
      logger_ini: "/opt/ibm/scoring/python/conf-common/logging_flask.ini"
      flask_ssl_enabled: True

    grpc_server:
      server_host: 0.0.0.0
      server_port: 16501
      server_hybrid_port: 16503
      batch_server_port: 12201
      logger_ini: "/opt/ibm/scoring/python/conf-common/logging_grpc.ini"
      server_crt: "/opt/ibm/scoring/keys/private_ssl/cacert.pem"
      runtime_ssl_enabled: True
      http_timeout: 1800.000

    grpc_client:
      agent_host: "wml-scoring-rt-utils"
      agent_port: 16502
      agent_crt: "/opt/ibm/scoring/keys/server.crt"
      agent_ssl_enabled: True
      retries: 3
      retry_interval: 0.5
      timeout: 1800

    wdp:
      host_url: "https://internal-nginx-svc:12443"

    scoring:
      # legacy code dependency e.g. old automl image.
      # Need to keep it as we mount wmlscoringpythoncommon on the fly
      ml_repository_url: "https://internal-nginx-svc:12443"
      jwks_url: "https://notapplicable.ibm.com/oidc/jwks"
      # ----------------x---------------
      wml_base_url: "https://internal-nginx-svc:12443"
      mltoken_pubkey_path: "/opt/ibm/scoring/keys/mltoken.pub"
      icptoken_pubkey_path: "/user-home/_global_/config/jwt/public.pem"
      retry_interval: 0.5
      retries: 3
      min_batch_size: 128
      iam_config:
        # legacy code dependency e.g. old automl image
        authz_url: "https://notapplicable.ibm.com/v3/wml_instances/{0}/authz"
        keys_url: "https://notapplicable.ibm.com/identity/keys"
        # ----------------x---------------
        iam_base_url: "https://notapplicable.ibm.com"
        max_retries: 5
        backoff_factor: 0.3
        iam_keys_url: "{0}/identity/keys"
        reload_public_keys: 7200
        wml_authz_url: "{0}/v3/wml_instances/{1}/authz"
        authorize_action: "pm-20.instances.write"
        action_cache:
          expire_after: 900
          maximum_size: 10000
        iam_token_url: "{0}/identity/token"
        service_id_cache:
          expire_after: 3000
          maximum_size: 3
      cse_config:
        max_retries: 3
        backoff_factor: 0.3
        wml_instances_url: "{0}/v3/wml_instances/{1}"
        cse_access_cache:
          expire_after: 900
          maximum_size: 10000
      trusted-certs:
        envoy_cacert: "/opt/ibm/scoring/keys/private_ssl/cacert.pem"

    container_config:
      config_file: "/opt/ibm/scoring/python/conf-rt/py_ml_scoring_container_configs.yml"

    ml_event_client:
      topic_space: "misc"
      message_process_parallelism: 20
      timeout: 60

    features:
      list:
        - SPACES

    space_access:
      post:
        - Admin
        - Editor
        - Viewer

    space_cache_refresh:
      interval: 10

    usage_metrics_threadpool:
      max_workers: 120
  uwsgi.ini: |
    [uwsgi]

    # Home directory for uwsgi http python code
    chdir = /opt/ibm/scoring/python/py_scoring_base
    ################################################
    # set http socket port
    ;socket = %(SERVER_HOST):%(SERVER_PORT)

    # set http protocol
    ;protocol = http
    #Uncomment the above two lines to disable https
    ################################################

    # UID for the user to start uwsgi process
    uid = wmluser

    # GID for the user to start uwsgi process
    gid = wmluser

    # set https ports and certificates
    https = %(SERVER_HOST):%(SERVER_PORT),%(CERT_FILE),%(KEY_FILE)

    # including python plugin
    #plugins = python

    # disable the master process
    master = true

    # to monitor the statistics
    stats = /opt/ibm/scoring/python/logs/stats.socket

    # set cheaper algorithm to use, if not set default will be used
    cheaper-algo = spare

    # minimum number of workers to keep at all times
    cheaper = 0

    # number of workers to spawn at startup
    cheaper-initial = 1

    # maximum number of workers that can be spawned
    workers = %(PROCESSES)

    # how many workers should be spawned at a time
    cheaper-step = 1

    # set the main application file
    wsgi-file = app.py

    # app is the callable inside application.
    callable = app

    #how many workers should be created for each worker
    threads = %(THREADS)

    # enable threads
    enable-threads = true

    # enable thunder lock
    thunder-lock = true

    # soft limit will prevent cheaper from spawning new workers
    # if workers total rss memory is equal or higher
    # we use (128MB) soft limit below (values are in bytes)
    cheaper-rss-limit-soft = %(%(APP_SER_SIZE) * 1024 * 1024)
    print = cheaper-rss-limit-soft: %(cheaper-rss-limit-soft)

    # enable memory report
    memory-report = true

    # set log file path
    logto = /opt/ibm/scoring/python/logs/server_uwsgi.log
    log-maxsize = 2048000
    logger = heartbeat file:/dev/null
    log-route = heartbeat (heartbeat)

    log-date = %%Y/%%m/%%d %%H:%%M:%%S,000|INFO|uwsgi:0|reqid|depid:
    logformat-strftime = true
    logformat = %(ftime) %(method) %(uri) %(proto), status=%(status), rt=%(msecs) msecs, x-global-transaction-id=%(var.HTTP_X_GLOBAL_TRANSACTION_ID), x-request-id=%(var.HTTP_X_REQUEST_ID), returned size=%(size) bytes
    # disable request logging.
    # disable-logging = true

    # argument to pass in python configuration file
    pyargv = %(PYARGV)

    # Some deploy takes time to download files.
    http-timeout = 1800

    # Enable keep-alive
    http-keepalive = 5
    add-header = Connection: Keep-Alive
    so-keepalive = true

    # run it as background process
    daemonize = /opt/ibm/scoring/python/logs/server_uwsgi.log
kind: ConfigMap
metadata:
  name: wmlscoringpythoncommon
  labels:
    app: wml-scoring
    chart: "{{ .Chart.Name }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    app.kubernetes.io/managed-by: {{.Release.Service | quote }}
    app.kubernetes.io/instance: {{.Release.Name | quote }}
    app.kubernetes.io/name: "{{ .Release.Name }}"
    helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"

