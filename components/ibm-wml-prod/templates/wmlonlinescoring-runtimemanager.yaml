apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: wml-deployment-manager
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    app.kubernetes.io/managed-by: {{.Release.Service | quote }}
    app.kubernetes.io/instance: {{.Release.Name | quote }}
    app.kubernetes.io/name: "{{ .Release.Name }}"
    helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    app: wml-deployment-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wml-deployment-manager
  serviceName: scoring-headless-service
  template:
    metadata:
      annotations:
        hook.deactivate.cpd.ibm.com/command: '["bash", "-c", "/opt/ibm/wml-online-scoring/runtime-manager/bin/startQuiesce.sh 600"]'
        hook.activate.cpd.ibm.com/command: '["bash", "-c", "/opt/ibm/wml-online-scoring/runtime-manager/bin/endQuiesce.sh"]'
        hook.quiesce.cpd.ibm.com/command: '[]'
        hook.unquiesce.cpd.ibm.com/command: '[]'
        cloudpakName: "IBM Cloud Pak for Data"
        cloudpakId: "eb9998dcc5d24e3eb5b6fb488f750fe2"
        productCloudpakRatio: "1:1"
        productID: "eb9998dcc5d24e3eb5b6fb488f750fe2"
        cloudpakInstanceId: "{{ .Values.global.cloudpakInstanceId }}"
        productName: "IBM Watson Machine Learning"
        productVersion: 3.5.0
        productMetric: "VIRTUAL_PROCESSOR_CORE"
        productChargedContainers: All    
        checksum.helm.kubernetes.io/configmap: {{ include (print $.Template.BasePath "/wmlruntimemanager-configmap.yaml") . | sha256sum }}
      labels:
        app: wml-deployment-manager
        chart: "{{ .Chart.Name }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
        app.kubernetes.io/managed-by: {{.Release.Service | quote }}
        app.kubernetes.io/instance: {{.Release.Name | quote }}
        app.kubernetes.io/name: "{{ .Release.Name }}"
        helm.sh/chart: "{{.Chart.Name}}-{{.Chart.Version}}"
        icpdsupport/addOnId: wml 
        icpdsupport/app: api
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                  - {{ .Values.global.architecture }}
      serviceAccount: {{ .Values.global.editor.sa }}
      serviceAccountName: {{ .Values.global.editor.sa }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      initContainers:
      - name: init-container
        command: ['sh', '-c', 'while true; do echo "Waiting for Ectd service to come up..."; sleep 120; etcdctl --cert="/var/etcd/certs/server.crt" --key="/var/etcd/certs/server.key" --cacert="/var/etcd/certs/server.cacrt" --insecure-skip-tls-verify=true --user root:$ETCD_PASS --endpoints=wml-deployments-etcd:2379 endpoint health --dial-timeout=300s --command-timeout=300s && break; sleep 20; done; echo "Etcd service available!";']
        image: "{{ .Values.global.docker_registry_prefix }}/{{ .Values.wmlEtcd.image.repository }}:{{ .Values.wmlEtcd.image.tag }}"
        imagePullPolicy: IfNotPresent
        env:
        - name: ETCDCTL_API
          value: "3"
        - name: ETCD_PASS
          valueFrom:
            secretKeyRef:
              key: etcd-password
              name: wml-deployments-etcd-secret
        resources:
          limits:
            cpu: 250m
            memory: 512M
          requests:
            cpu: 200m
            memory: 256M
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          runAsUser: {{ .Values.global.user.id }}
          runAsNonRoot: true
          privileged: false
          readOnlyRootFilesystem: false
        volumeMounts:
        - mountPath: /var/etcd/certs/
          name: tls
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      containers:
       - name: runtimemanagercontainer
         image: "{{ .Values.global.docker_registry_prefix }}/{{ .Values.wmlRuntimeManager.image.repository }}:{{ .Values.wmlRuntimeManager.image.tag }}"
         securityContext:
           allowPrivilegeEscalation: false
           capabilities:
             drop:
               - ALL
           runAsUser: {{ .Values.global.user.id }}
           runAsNonRoot: true
           privileged: false
           readOnlyRootFilesystem: false
         envFrom:
         - secretRef:
             name: wdp-service-id
         - secretRef:
             name: wml-scoring-svc-secret
         livenessProbe:
           httpGet:
             path: /ml/wml_services/deployment/heartbeat
             port: 16500
             scheme: HTTPS
           failureThreshold: 3
           initialDelaySeconds: 60
           periodSeconds: 60
           successThreshold: 1
           timeoutSeconds: 5
         readinessProbe:
           httpGet:
             path: /ml/wml_services/deployment/heartbeat
             port: 16500
             scheme: HTTPS
           failureThreshold: 3
           initialDelaySeconds: 30
           periodSeconds: 60
           successThreshold: 1
           timeoutSeconds: 5
         resources:
           limits:
             cpu: 1
             memory: 2Gi
           requests:
             cpu: "150m"
             memory: 2Gi
         env:
         - name: WMLENV
           value: fvt
         - name: DEPLOYMENT_PRIVATE
           value: "local"
         - name: DATACENTRE
           value: $datacentre
         - name: AGT_ETCD_TLS
           value: "1"
         - name: MEMORY
           value: "3072"
         - name: INSTALL_TYPE
           value: "NEW_INSTALL"
         - name: CPU
           value: "2"
         - name: KUBECONFIG
           value: "/opt/ibm/wml-online-scoring/runtime-manager/bin/kubeconfig.yml"
         - name: INSTANCES_DISCOVERY_PREFIX
           value: "services/wml-deployment/instances/"
         - name: WDP_BASE_URL
           valueFrom:
             configMapKeyRef:
               key: host-url
               name: wdp-config
         - name: AGT_ETCD_CLUSTER
           valueFrom:
             secretKeyRef:
               name: wml-deployments-etcd-secret
               key: etcd-cluster
         - name: AGT_ETCD_USERNAME
           value: "root"
         - name: AGT_ETCD_PASSWORD
           valueFrom:
             secretKeyRef:
               name: wml-deployments-etcd-secret
               key: etcd-password
         - name: ZEN_SERVICE_BROKER_TOKEN
           valueFrom:
             secretKeyRef:
               name: zen-service-broker-secret
               key: token
         - name: AGT_CA_FILE
           value: "/var/etcd/certs/server.cacrt"
         - name: INSTANCE_CHECK_ATTEMPTS
           value: "120"
         - name: INSTANCE_CHECK_DELAY
           value: "5000"
         - name: ENABLE_MODEL_SHUFFLE
           value: "DISABLE"
         - name: MODEL_SHUFFLE_INTERVAL
           value: "300"
         - name: MEMORY_THRESHHOLD_PERCENTAGE
           value: "5.0"
         - name: WMLNEWRELIC
           value: "DISABLED"
         - name: DEPLOYMENT_PLATFORM
           value: "private"
         - name: DEFAULT_DEPLOY_REPLICA
           value: "1"
         - name: LINEAGE_APIKEY
           value: "WdBFemPCvw8XMpZnzSU9Bp503ddWOON-wiBD7JtCk2J7"
         - name: SSL_KEYSTORE_PASSWORD
           valueFrom:
             secretKeyRef:
               name: ssl-secret
               key: keystore_password
         - name: SSL_TRUSTSTORE_PASSWORD
           valueFrom:
             secretKeyRef:
               name: ssl-secret
               key: truststore_password
         - name: GRPC_SERVER_KEY
           valueFrom:
             secretKeyRef:
               name: ssl-secret
               key: server_key
         - name: WML_CAMS_RMQ_URL
           valueFrom:
             secretKeyRef:
               key: rabbitmq-url.txt
               name: rabbitmq-url
         - name: WML_CAMS_RMQ_CERT
           valueFrom:
             secretKeyRef:
               key: cacert.pem
               name: rabbitmq-ha-cert
         - name: WML_RMQ_URL_ICD
           valueFrom:
             secretKeyRef:
               key: rabbitmq-url.txt
               name: rabbitmq-url
         - name: ETCD_SSL_ENABLE # Once SSL is enabled in ETCD, this can be removed
           value: "1"
         - name: ENABLE_SPAWN_MORE_INITIAL_POD
           value: "false"
         - name: ENABLE_DELETE_EOL_VER_DEPLOYMENTS
           value: "ENABLE"
         volumeMounts:
          - name: tls
            mountPath: /var/etcd/certs/
          - name: config-volume
            mountPath: /opt/ibm/wml-online-scoring/runtime-manager/conf
          - name: user-home-mount
            mountPath: /user-home/_global_/config/jwt/
            readOnly: true
            subPath: _global_/config/jwt/
          - name: manager-pvc-mount
            mountPath: /manager-pvc
          - mountPath: /etc/pki/ca-trust/source/anchors/
            name: internalpubkey
          - mountPath: /opt/ibm/wml-online-scoring/runtime-manager/keys/private
            name: config-volume-keystore
      volumes:
       - name: tls
         secret:
           defaultMode: 420
           secretName: wml-deployments-etcd-secret
       - name: config-volume
         configMap:
           name: wmlruntimemanager
       - name: config-volume-keystore
         configMap:
           name: wmlsslcertsconfigmap
       - name: user-home-mount
         persistentVolumeClaim:
           claimName: user-home-pvc
       - name: manager-pvc-mount
         persistentVolumeClaim:
           claimName: manager-pvc
       - name: internalpubkey
         secret:
           secretName: internal-nginx-svc-tls
