apiVersion: v1
kind: ConfigMap
metadata:
  name: solr-configmap
  labels:
     app: solr-configmap
     chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
     release: "{{ .Release.Name }}"
     heritage: "{{ .Release.Service }}"
     app.kubernetes.io/name: solr-configmap
     helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
     app.kubernetes.io/managed-by: {{ .Release.Service }}
     app.kubernetes.io/instance: {{ .Release.Name }}
data:
  start-solr.sh: |
    #!/bin/bash
    #
    # Licensed Materials - Property of IBM
    # 5724-Q36
    # Copyright IBM Corp. 2018
    # US Government Users Restricted Rights - Use, duplication or disclosure
    # restricted by GSA ADP Schedule Contract with IBM Corp.
    set -e

    OPTS='-p 8983 -s $SOLR_HOME -q'

    if [ -n "$SOLR_ZOOKEEPER_CONNECT" ]; then
      echo "Using zookeeper connect: $SOLR_ZOOKEEPER_CONNECT"
      ZK_OPTS="-z $SOLR_ZOOKEEPER_CONNECT"
      OPTS="$OPTS -c $ZK_OPTS"

      # set up Zookeeper credentials if necessary
      if [ "$SOLR_ZOOKEEPER_SET_ACL" = "true" ]; then
        echo "Enabling set Zookeeper ACLs"
        SOLR_ZK_CREDS_AND_ACLS="$SOLR_ZK_CREDS_AND_ACLS -DzkACLProvider=org.apache.solr.common.cloud.SaslZkACLProvider"
      fi
      SOLR_CONFIG_JAAS_FILE='/opt/solr/bin/jaas.conf'
      if [ -f "$SOLR_CONFIG_JAAS_FILE" ]; then
        echo "Using JAAS configuration file: $SOLR_CONFIG_JAAS_FILE"
        SOLR_ZK_CREDS_AND_ACLS="$SOLR_ZK_CREDS_AND_ACLS -Djava.security.auth.login.config=$SOLR_CONFIG_JAAS_FILE"
      fi
      if [ -n "$SOLR_ZK_CREDS_AND_ACLS" ]; then
        echo 'SOLR_ZK_CREDS_AND_ACLS="'"$SOLR_ZK_CREDS_AND_ACLS"'"' >> /opt/solr/bin/solr.in.sh
        echo 'SOLR_OPTS="$SOLR_OPTS $SOLR_ZK_CREDS_AND_ACLS"' >> /opt/solr/bin/solr.in.sh
      fi

      # ensure root znode exists
      ZK_ROOT_CREATE=$(solr zk $ZK_OPTS ls / > /dev/null 2>&1 || echo $?)
      if [ -n "$ZK_ROOT_CREATE" ]; then
        echo "Creating root directory at $SOLR_ZOOKEEPER_CONNECT"
        solr zk $ZK_OPTS mkroot /
        solr zk $ZK_OPTS cp "/opt/solr/solr.xml" zk:/
      fi
    fi

    if [ -n "$SOLR_ADVERTISED_HOST" ]; then
      echo "Using advertised host name: $SOLR_ADVERTISED_HOST"
      OPTS="$OPTS -h $SOLR_ADVERTISED_HOST"
    fi

    SOLR_XML="$SOLR_HOME/solr.xml"
    if [ ! -f "$SOLR_XML" ]; then
      if [ -n "$SOLR_ZOOKEEPER_CONNECT" ]; then
        solr zk $ZK_OPTS cp zk:/solr.xml $SOLR_HOME
      else
        cp "/opt/solr/solr.xml" $SOLR_HOME
      fi
    fi

    exec solr $OPTS

  log4j.properties: |

    # Default Solr log4j config
    # rootLogger log level may be programmatically overridden by -Dsolr.log.level
    solr.log=${solr.log.dir}
    log4j.rootLogger=WARN, file, CONSOLE

    # Console appender will be programmatically disabled when Solr is started with option -Dsolr.log.muteconsole
    log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender
    log4j.appender.CONSOLE.layout=org.apache.log4j.EnhancedPatternLayout
    log4j.appender.CONSOLE.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p (%t) [%X{collection} %X{shard} %X{replica} %X{core}] %c{1.} %m%n

    #- size rotation with log cleanup.
    log4j.appender.file=org.apache.log4j.RollingFileAppender
    log4j.appender.file.MaxFileSize=4MB
    log4j.appender.file.MaxBackupIndex=9

    #- File to log to and log format
    log4j.appender.file.File=${solr.log}/solr.log
    log4j.appender.file.layout=org.apache.log4j.EnhancedPatternLayout
    log4j.appender.file.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss.SSS} %-5p (%t) [%X{collection} %X{shard} %X{replica} %X{core}] %c{1.} %m%n

    # Adjust logging levels that should differ from root logger
    log4j.logger.org.apache.zookeeper=WARN
    log4j.logger.org.apache.hadoop=WARN
    log4j.logger.org.eclipse.jetty=WARN
    log4j.logger.org.eclipse.jetty.server.Server=WARN
    log4j.logger.org.eclipse.jetty.server.ServerConnector=WARN

    # set to INFO to enable infostream log messages
    log4j.logger.org.apache.solr.update.LoggingInfoStream=OFF
