{{- $coreReleaseName := include "ibm-fci-alert-triage.core-release-name" . -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "ibm-fci-alert-triage.fullname" . }}-ar
  labels:
{{- include "common.label.metadata" (list . (printf "%s-%s" (include "ibm-fci-alert-triage.name" .) "ar") (include "ibm-fci-alert-triage.chart" .) .Release.Name .Release.Service ) | indent 4 }}
spec:
  {{ if .Values.fcai_alert_review.enabled }}
  replicas: 1
  {{ else }}
  replicas: 0
  {{ end }}
  selector:
    matchLabels:
{{- include "common.selector.labels" (list . (printf "%s-%s" (include "ibm-fci-alert-triage.name" .) "ar") .Release.Name ) | indent 6 }}
  template:
    metadata:
      annotations:
{{ include "common.meteringAnnotations" . | indent 8 }}
      labels:
{{- include "common.label.metadata" (list . (printf "%s-%s" (include "ibm-fci-alert-triage.name" .) "ar") (include "ibm-fci-alert-triage.chart" .) .Release.Name .Release.Service ) | indent 8 }}
    spec:
{{ include "common.configureHostAliases" . | indent 6 }}
{{ include "common.PodHostConfig" . | indent 6 }}
      securityContext:
{{ include "common.PodSecurityContextConfig" . | indent 8 }}
      affinity:
{{ include "common.ArchNodeAffinity" . | indent 8 }}
      serviceAccountName: fci-common-scripts
      volumes:
        - name: db2-instance
          persistentVolumeClaim:
            claimName: {{ template "ibm-fci-alert-triage.core-release-name" . }}-db2-scripts-{{ template "ibm-fci-alert-triage.core-release-name" . }}-{{ .Values.fcai_alert_review.dbclient.databaseConfig.DB2_SERVICE }}
        - name: file-secrets
          secret:
            secretName: {{ template "ibm-fci-alert-triage.core-release-name" . }}-platform-secret-files
{{- if hasKey .Values "global" }}
{{-   if hasKey .Values.global "swidtag" }}
{{-     if hasKey .Values.global.swidtag "file" }}
        - name: swidtags
          configMap:
            name: {{ .Release.Name }}-swidtag-files
{{-     end }}
{{-   end }}
{{- end }}
      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.global.imagePullSecrets | indent 6 }}
      {{- end }}
      initContainers:
      - name: init-svc-depend
        image: "{{ required "global.dockerRegistryPrefix must specify from which repository the docker image should be fetched." .Values.global.dockerRegistryPrefix }}/{{ .Values.global.commonScripts.image.repository }}:{{ .Values.global.commonScripts.image.tag }}"
        command: [ "/common-scripts/init-container-svc-depend.sh" ]
        securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 10 }}
        args: [ "{{ .Release.Namespace }}/{{ template "ibm-fci-alert-triage.core-release-name" . }}-{{ .Values.fcai_alert_review.dbclient.databaseConfig.DB2_SERVICE }}" ]
        {{- with .Values.fcai_alert_review.dbclient.resources }}
        resources:
{{    toYaml . | indent 12 }}
        {{- end }}
      - name: fcai-data-store
        image: "{{ required "global.dockerRegistryPrefix must specify from which repository the docker image should be fetched." .Values.global.dockerRegistryPrefix }}/{{ .Values.fcai_alert_review.dbclient.image.repository }}:{{ .Values.fcai_alert_review.dbclient.image.tag }}"
        imagePullPolicy: {{ .Values.fcai_alert_review.dbclient.image.pullPolicy }}
        command: ["/bin/sh","-c"]
        securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 10 }}
        args: ["mkdir -p /db2Instance/fcai; cp /flyway/sql/mountable/alertinsight/* /db2Instance/fcai/; /flyway/flyway migrate"]
        envFrom:
        - configMapRef:
            name: {{ template "ibm-fci-alert-triage.fullname" . }}-db
        env:
        - name: FLYWAY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "ibm-fci-alert-triage.core-release-name" . }}-db2-secrets-env
              key: DB2INST1_PASSWORD
        - name: SSL_KEYSTORE_PASSWORD_CONFIG
          valueFrom:
            secretKeyRef:
              name: {{ template "ibm-fci-alert-triage.core-release-name" . }}-platform-secrets-env
              key: FCI_JKS_PASSWORD
        - name: FLYWAY_URL
          value: "{{ printf "jdbc:db2://%s-%s:56000/fcidb:sslConnection=true;sslTrustStoreLocation=/fci_universal_ks.jks;sslTrustStorePassword=$(SSL_KEYSTORE_PASSWORD_CONFIG);" $coreReleaseName .Values.fcai_alert_review.dbclient.databaseConfig.DB2_SERVICE }}"
        volumeMounts:
          - name: file-secrets
            mountPath: /fci_universal_ks.jks
            subPath: fci_universal_ks.jks
          - name: db2-instance
            mountPath: /db2Instance
        {{- with .Values.fcai_alert_review.dbclient.resources }}
        resources:
{{    toYaml . | indent 12 }}
        {{- end }}
      containers:
      - name: nodejs
        image: {{ required "global.dockerRegistryPrefix must specify from which repository the docker image should be fetched." .Values.global.dockerRegistryPrefix }}/{{ .Values.fcai_alert_review.alertReview.image.repository }}:{{ .Values.fcai_alert_review.alertReview.image.tag }}
        imagePullPolicy: {{ .Values.fcai_alert_review.alertReview.image.pullPolicy }}
        {{- with .Values.fcai_alert_review.alertReview.resources }}
        resources:
{{    toYaml . | indent 12 }}
        {{- end }}
        securityContext:
{{ include "common.RestrictedContainerSecurityContext" . | indent 10 }}
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "if [ -e /opt/ibm/fci/scripts/healthcheck.sh ]; then /opt/ibm/fci/scripts/healthcheck.sh; else exit {{ default 0 .Values.global.enforceHealthCheck }}; fi"
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 30
          successThreshold: 1
          failureThreshold: 2
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "/opt/ibm/fci/scripts/healthcheck.sh"
          initialDelaySeconds: {{ .Values.fcai_alert_review.alertReview.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.fcai_alert_review.alertReview.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.fcai_alert_review.alertReview.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.fcai_alert_review.alertReview.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.fcai_alert_review.alertReview.livenessProbe.failureThreshold }}
        volumeMounts:
        - name: file-secrets
          mountPath: /opt/ibm/alert-review/certs/alert-review.pem
          subPath: fci_universal_ks.pvtk.pem
        - name: file-secrets
          mountPath: /opt/ibm/alert-review/certs/alert-review.crt
          subPath: fci_universal_ks.crt.pem
        - name: file-secrets
          mountPath: /opt/ibm/alert-review/certs/db2.crt
          subPath: fci_universal_ks.crt.pem
{{- if hasKey .Values "global" }}
{{-   if hasKey .Values.global "swidtag" }}
{{-     if hasKey .Values.global.swidtag "file" }}
        - name: swidtags
          mountPath: /opt/ibm/fci/swidtag/{{ .Values.global.swidtag.file }}
          subPath: {{ .Values.global.swidtag.file }}
{{-     end }}
{{-   end }}
{{- end }}
        envFrom:
        - configMapRef:
            name: {{ template "ibm-fci-alert-triage.fullname" . }}-ar
        env:
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "ibm-fci-alert-triage.core-release-name" . }}-db2-secrets-env
              key: FCIAUTHID_PASSWORD
        - name: JWT_KEY
          valueFrom:
            secretKeyRef:
              name: {{ template "ibm-fci-alert-triage.core-release-name" . }}-platform-secrets-env
              key: JWT_KEY
        ports:
        - containerPort: 4200
      restartPolicy: Always
