{{- if not .Values.existingSecret }}
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ template "uname" . }}-secret-config
  labels:
    app: "{{ template "uname" . }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }} 
    app.kubernetes.io/name: {{ .Chart.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation
data:
  init.sh: |
    function generateRandomString() {
      length=${1}
      < /dev/urandom tr -dc A-Za-z0-9 | head -c${1:-${length}};echo;
    }
  
{{- if eq .Values.protocol "https" }}
{{- if not .Values.global.installCerts }}
    # generate ES cert and secret
    ES_CERT_NAME={{ template "uname" . }}-cert;    
    ES_CERT_EXISTS=$(kubectl get secret $ES_CERT_NAME -n $ICPD_CONTROLPLANE_NAMESPACE);
    rc=$?
    if [[ rc -eq 1 ]]
    then
            # Generate the secret
            echo "$ES_CERT_NAME secret does not exist, creating...";
            # CA root
            openssl genrsa -out /certs/esCA.key 2048;
            openssl req -x509 -new -nodes -key /certs/esCA.key -sha256 -days 3650 -out /certs/esCA.crt -subj "/C=US/ST=CA/O=IBM, Inc./CN=wdpelasticsearch.ibm.com";    
            openssl genrsa -out /certs/es.key 2048;    
            
            {{- $uName := include "uname" . }}
            ES_URL1={{ printf "wdp-elasticsearch.%s.svc.%s" .Release.Namespace .Values.clusterDomain }};
            ES_URL2={{ printf "%s.%s.svc.%s" $uName .Release.Namespace .Values.clusterDomain }};
            
            openssl req -new -sha256 -key /certs/es.key -subj "/C=US/ST=CA/O=IBM, Inc./CN=wdp-elasticsearch" -reqexts SAN -config <(cat /etc/pki/tls/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:wdp-elasticsearch,DNS:{{ template "uname" . }},DNS:$ES_URL1,DNS:$ES_URL2")) -out /certs/es.csr;      
            openssl x509 -req -in /certs/es.csr -CA /certs/esCA.crt -CAkey /certs/esCA.key -CAcreateserial -extensions SAN -extfile <(cat /etc/pki/tls/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:wdp-elasticsearch,DNS:{{ template "uname" . }},DNS:$ES_URL1,DNS:$ES_URL2")) -out /certs/es.crt -days 3650 -sha256;
            
            ESCERT=$(cat /certs/es.crt /certs/es.key); 
            
            kubectl create secret generic $ES_CERT_NAME -n $ICPD_CONTROLPLANE_NAMESPACE --from-literal=cert.pem="$ESCERT" --from-file=certificate.pem=/certs/es.crt --from-file=key.pem=/certs/es.key --from-file=ca.pem=/certs/esCA.crt;
            kubectl label secret $ES_CERT_NAME -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ template "uname" . }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
    else
            echo "$ES_CERT_NAME secret already exists";
            
            # we might need to add the new missing combine cert for haproxy...
            CERT=$(kubectl get secret $ES_CERT_NAME -n $ICPD_CONTROLPLANE_NAMESPACE -o yaml | grep cert.pem);
            if [[ $? -eq 1 ]]
            then
               # combined cert not found.. add the key
               KEY=$(kubectl get secret $ES_CERT_NAME -n $ICPD_CONTROLPLANE_NAMESPACE -o=jsonpath="{.data['key\.pem']}" | base64 --decode)
               CERTIFICATE=$(kubectl get secret $ES_CERT_NAME -n $ICPD_CONTROLPLANE_NAMESPACE -o=jsonpath="{.data['certificate\.pem']}" | base64 --decode)
               COMBINED_CERT=$(echo -e "$CERTIFICATE\n\n$KEY" | base64 -w 0);
               
               kubectl patch secret $ES_CERT_NAME -n $ICPD_CONTROLPLANE_NAMESPACE --type='json' -p="[{'op': 'replace', 'path':'/data/cert.pem', 'value': '$COMBINED_CERT'}]"           
            fi
    fi
{{- end }}
{{- end }}
    
    # generate elastic credentials secret
    ES_SEC_NAME={{ template "uname" . }}-secret; 
    ES_SEC_EXISTS=$(kubectl get secret $ES_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE);
    rc=$?
    if [[ rc -eq 1 ]]
    then
            # Generate the secret
            echo "$ES_SEC_NAME secret does not exist, creating...";
            
            ES_PW=$(generateRandomString 8);
                           
            kubectl create secret generic $ES_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE --from-literal=username={{ .Values.username }} --from-literal=password="$ES_PW";
            kubectl label secret $ES_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ template "uname" . }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
    else
            echo "$ES_SEC_NAME secret already exists";
    fi 

{{- end }}
