apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "couchdb.fullname" . }}
  labels:
    app: {{ template "couchdb.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/name: {{ .Chart.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
spec:
  replicas: {{ .Values.clusterSize }}
  serviceName: {{ template "couchdb.fullname" . }}
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  selector:
    matchLabels:
{{ include "couchdb.ss.selector" . | indent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/name: {{ .Chart.Name }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        icpdsupport/app: "apis"
        {{ .Values.global.serviceabilityLabelName }}: {{ .Values.global.serviceabilityLabelValue }}
{{ include "couchdb.ss.selector" . | indent 8 }}
      annotations:
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
    spec:
      {{- if .Values.schedulerName }}
      schedulerName: "{{ .Values.schedulerName }}"
      {{- end }}
{{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
{{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - {{ .Values.archx86_64 }}
                - {{ .Values.archppc64le }}
      initContainers:
{{- if or .Values.initContainer.chown .Values.global.chownPV }}
        - name: init-chown-pv
          image: {{ if .Values.global.dockerRegistryPrefix }}{{ trimSuffix "/" .Values.global.dockerRegistryPrefix }}/{{ end }}{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}
          imagePullPolicy: {{ .Values.initImage.pullPolicy }}
          command: ['sh']
          args:
          - "-c"
          - |
            set -ex;
{{- if .Values.securityContext.runAsUser }}
            sudo chown {{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.runAsUser }} /opt/couchdb/data;
            sudo chmod 755 /opt/couchdb/data;
{{- end }}
          securityContext:
            privileged: false
            runAsNonRoot: true
            capabilities:
              add:
              - SETUID
              - SETGID
              drop:
              - ALL
{{- if .Values.initContainer.securityContext.runAsUser }}
            runAsUser: {{ .Values.initContainer.securityContext.runAsUser }}
{{- end }}
          resources:
{{ toYaml .Values.jobImage.resources | indent 12 }}
          volumeMounts:
          - name: database-storage
            mountPath: /opt/couchdb/data
{{- end }}
        - name: init-copy
          image: {{ if .Values.global.dockerRegistryPrefix }}{{ trimSuffix "/" .Values.global.dockerRegistryPrefix }}/{{ end }}{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}
          imagePullPolicy: {{ .Values.initImage.pullPolicy }}
          command:
          - sh
          - -c
          - |
            cp /tmp/chart.ini /default.d;
            cp /tmp/seedlist.ini /default.d;
            ls -lrt /default.d;
            
            # Create admin only if not already present
            if ! grep -Pzoqr "\[admins\]\n$COUCHDB_USER =" /local.d/*.ini; then
              printf "\n[admins]\n%s = %s\n" "$COUCHDB_USER" "$SALTED_PASSWORD" >> /local.d/docker.ini
            fi
            # Set secret only if not already present
            if ! grep -Pzoqr "\[couch_httpd_auth\]\nsecret =" /local.d/*.ini; then
              printf "\n[couch_httpd_auth]\nsecret = %s\n" "$COUCHDB_SECRET" >> /local.d/docker.ini
            fi
            # Set uuid only if not already present
            if ! grep -Pzoqr "\[couchdb\]\nuuid =" /local.d/*.ini; then
              printf "\n[couchdb]\nuuid = %s\n" "$COUCHDB_UUID" >> /local.d/docker.ini
            fi
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            capabilities:
              drop:
              - ALL
          env:
{{- if not .Values.allowAdminParty }}
            - name: COUCHDB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ template "couchdb.fullname" . }}
                  key: adminUsername
            - name: COUCHDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "couchdb.fullname" . }}
                  key: adminPassword
            - name: SALTED_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "couchdb.fullname" . }}
                  key: saltedPassword
            - name: COUCHDB_UUID
              valueFrom:
                secretKeyRef:
                  name: {{ template "couchdb.fullname" . }}
                  key: couchdbUUID
            - name: COUCHDB_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "couchdb.fullname" . }}
                  key: cookieAuthSecret
{{- end }}
          resources:
{{ toYaml .Values.jobImage.resources | indent 12 }}
          volumeMounts:
          - name: config
            mountPath: /tmp/
          - name: config-storage
            mountPath: /default.d
          - name: config-storage2
            mountPath: /local.d
      containers:
        - name: couchdb
          image: {{ if .Values.global.dockerRegistryPrefix }}{{ trimSuffix "/" .Values.global.dockerRegistryPrefix }}/{{ end }}{{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: couchdb
              containerPort: 5984
            - name: epmd
              containerPort: 4369
{{- if .Values.couchdbConfig }}
{{- if .Values.couchdbConfig.ssl }}
{{- if .Values.couchdbConfig.ssl.enable }}
            - name: https
              containerPort: 6984
{{- end }}
{{- end }}
{{- end }}
            - containerPort: 9100
          env:
{{- if not .Values.allowAdminParty }}
            - name: COUCHDB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ template "couchdb.fullname" . }}
                  key: adminUsername
            - name: COUCHDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "couchdb.fullname" . }}
                  key: adminPassword
            - name: COUCHDB_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ template "couchdb.fullname" . }}
                  key: cookieAuthSecret
{{- end }}
            - name: ERL_FLAGS
              value: "{{ range $k, $v := .Values.erlangFlags }} -{{ $k }} {{ $v }} {{ end }}"
          livenessProbe:
{{- if .Values.couchdbConfig.chttpd.require_valid_user }}
            exec:
              command:
                - sh
                - -c
                - curl -G --silent --fail -u ${COUCHDB_USER}:${COUCHDB_PASSWORD} http://localhost:5984/
            initialDelaySeconds: 45
            periodSeconds: 30
{{- else }}
            httpGet:
              path: /
              port: 5984
            initialDelaySeconds: 45
            periodSeconds: 30
{{- end }}
          readinessProbe:
{{- if .Values.couchdbConfig.chttpd.require_valid_user }}
            exec:
              command:
                - sh
                - -c
                - curl -G --silent --fail -u ${COUCHDB_USER}:${COUCHDB_PASSWORD} http://localhost:5984/_up
            initialDelaySeconds: 30
            periodSeconds: 15
{{- else }}
            httpGet:
              path: /_up
              port: 5984
            initialDelaySeconds: 30
            periodSeconds: 15
{{- end }}
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            capabilities:
              drop:
              - ALL
          resources:
{{ toYaml .Values.resources | indent 12 }}
          volumeMounts:
          - name: config-storage
            mountPath: /opt/couchdb/etc/default.d
          - name: config-storage2
            mountPath: /opt/couchdb/etc/local.d
          - name: database-storage
            mountPath: /opt/couchdb/data
{{- if .Values.couchdbConfig }}
{{- if .Values.couchdbConfig.ssl }}
{{- if .Values.couchdbConfig.ssl.enable }}
          - name: ssl-certs
            mountPath: /etc/couchdb/cert/
{{- end }}
{{- end }}
{{- end }}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end }}
{{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
      - name: {{ .Values.image.pullSecret }}
      {{- end }}
      securityContext:
        runAsNonRoot: true
{{- if .Values.securityContext.runAsUser }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
{{- end }}
      volumes:
        - name: config-storage
          emptyDir: {}
        - name: config-storage2
          emptyDir: {}
        - name: config
          configMap:
            name: {{ template "couchdb.fullname" . }}
            items:
              - key: inifile
                path: chart.ini
              - key: seedlistinifile
                path: seedlist.ini
{{- if .Values.couchdbConfig }}
{{- if .Values.couchdbConfig.ssl }}
{{- if .Values.couchdbConfig.ssl.enable }}
        - name: ssl-certs
          secret:
{{- if not .Values.global.installCerts }}
            secretName: couch-ha-cert
{{- else }}
            secretName: {{ .Values.useExistingCertificates.secretName }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- if not .Values.persistentVolume.enabled }}
        - name: database-storage
          emptyDir: {}
{{- else }}
  volumeClaimTemplates:
    - metadata:
        name: database-storage
        labels:
          app: {{ template "couchdb.name" . }}
          release: {{ .Release.Name }}
      spec:
        accessModes:
        {{- range .Values.persistentVolume.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistentVolume.size | quote }}
      {{- if .Values.persistentVolume.storageClass }}
      {{- if (eq "-" .Values.persistentVolume.storageClass) }}
        storageClassName: ""
      {{- else }}
      {{- if and .Values.global.persistence.useDynamicProvisioning (not .Values.persistentVolume.overrideStorageClass) }}
        storageClassName: {{ default nil .Values.global.persistence.storageClassName | quote }}
      {{- else }}
        storageClassName: "{{ .Values.persistentVolume.storageClass }}"
      {{- end }}
      {{- end }}
      {{- end }}
{{- end }}
