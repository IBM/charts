{{- if not .Values.existingSecret }}
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ template "couchdb.fullname" . }}-secret-config
  labels:
    app: "{{ template "couchdb.name" . }}"
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }} 
    app.kubernetes.io/name: {{ .Chart.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation
data:
  init.sh: |
    function generateRandomString() {
      length=${1}
      < /dev/urandom tr -dc A-Za-z0-9 | head -c${1:-${length}};echo;
    }
  
{{- if .Values.couchdbConfig }}
{{- if .Values.couchdbConfig.ssl }}
{{- if .Values.couchdbConfig.ssl.enable }}
{{- if not .Values.global.installCerts }}
    # generate ES cert and secret
    COUCHDB_CERT_NAME=couch-ha-cert;    
    COUCHDB_CERT_EXISTS=$(kubectl get secret $COUCHDB_CERT_NAME -n $ICPD_CONTROLPLANE_NAMESPACE);
    rc=$?
    if [[ rc -eq 1 ]]
    then
            # Generate the secret
            echo "$COUCHDB_CERT_NAME secret does not exist, creating...";
            # CA root
            openssl genrsa -out /certs/couchdbCA.key 2048
            openssl req -x509 -new -nodes -key /certs/couchdbCA.key -sha256 -days 3650 -out /certs/couchdbCA.crt -subj "/C=US/ST=CA/O=IBM, Inc./CN=wdpcouchdb.ibm.com";    
            openssl genrsa -out /certs/couchdb.key 2048;    
            
            COUCHDB_URL1={{ printf "wdp-cloudant.%s.svc.%s" .Release.Namespace .Values.dns.clusterDomainSuffix }};
            COUCHDB_URL2={{ printf "couchdb-ha-svc.%s.svc.%s" .Release.Namespace .Values.dns.clusterDomainSuffix }};
            
            openssl req -new -sha256 -key /certs/couchdb.key -subj "/C=US/ST=CA/O=IBM, Inc./CN=wdp-cloudant" -reqexts SAN -config <(cat /etc/pki/tls/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:wdp-cloudant,DNS:couchdb-ha-svc,DNS:$COUCHDB_URL1,DNS:$COUCHDB_URL2")) -out /certs/couchdb.csr;      
            openssl x509 -req -in /certs/couchdb.csr -CA /certs/couchdbCA.crt -CAkey /certs/couchdbCA.key -CAcreateserial -extensions SAN -extfile <(cat /etc/pki/tls/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:wdp-cloudant,DNS:couchdb-ha-svc,DNS:$COUCHDB_URL1,DNS:$COUCHDB_URL2")) -out /certs/couchdb.crt -days 3650 -sha256;
                        
            COUCHDBCAEnc=$(cat /certs/couchdbCA.crt | base64 | tr -d '\n');               
            
            kubectl create secret generic $COUCHDB_CERT_NAME -n $ICPD_CONTROLPLANE_NAMESPACE --from-file=cacert.pem=/certs/couchdbCA.crt --from-file=certificate.pem=/certs/couchdb.crt --from-file=key.pem=/certs/couchdb.key --from-literal=cacertb64.pem="$COUCHDBCAEnc";
            kubectl label secret $COUCHDB_CERT_NAME -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ template "couchdb.fullname" . }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
{{- if .Values.createCloudantArtifacts }}      
            COUCHDBCERT=$(cat /certs/couchdb.crt /certs/couchdb.key);    
            COUCHDBCACERT=$(cat /certs/couchdbCA.crt /certs/couchdbCA.key);      
            kubectl create secret generic wdp-cloudant-cert -n $ICPD_CONTROLPLANE_NAMESPACE --from-literal=certificate.pem="$COUCHDBCERT" --from-literal=ca.crt.pem="$COUCHDBCACERT" --from-file=key.pem=/certs/couchdb.key;
            kubectl label secret wdp-cloudant-cert -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ template "couchdb.fullname" . }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
{{- end }}            
    else
            echo "$COUCHDB_CERT_NAME secret already exists";
    fi
{{- end }}
{{- end }}
{{- end }}
{{- end }}
    
    # generate couchdb credentials secret
    COUCHDB_SEC_NAME={{ template "couchdb.fullname" . }};
    COUCHDB_SEC_EXISTS=$(kubectl get secret $COUCHDB_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE);
    rc=$?
    if [[ rc -eq 1 ]]
    then
            # Generate the secret
            echo "$COUCHDB_SEC_NAME secret does not exist, creating...";
            
            COUCHDB_PW=$(generateRandomString 20);
            COUCHDB_COOKIE=$(generateRandomString 20);               
            COUCHDB_SALT=$(generateRandomString 32);
            
            # generate pbkdf2 password
            ENC_PASS=$(PASS="$COUCHDB_PW" SALT="$COUCHDB_SALT" ITER=10 \python -c "import os,hashlib; print('-pbkdf2-%s,%s,%s' % (hashlib.pbkdf2_hmac('sha1',os.environ['PASS'].encode(),os.environ['SALT'].encode(),int(os.environ['ITER'].encode())).hex(), os.environ['SALT'], os.environ['ITER']))")

            # generate uuid
            UUID=$(python -c "import uuid; print(uuid.uuid4().hex);");
                        
            kubectl create secret generic $COUCHDB_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE --from-literal=adminUsername={{ .Values.adminUsername }} --from-literal=couchdbUUID="$UUID" --from-literal=adminPassword="$COUCHDB_PW" --from-literal=saltedPassword="$ENC_PASS" --from-literal=cookieAuthSecret="$COUCHDB_COOKIE";
            kubectl label secret $COUCHDB_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ template "couchdb.fullname" . }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
            
{{- if .Values.createCloudantArtifacts }}            
            kubectl create secret generic wdp-cloudant-creds -n $ICPD_CONTROLPLANE_NAMESPACE --from-literal=username={{ .Values.adminUsername }} --from-literal=password="$COUCHDB_PW" --from-literal=cookieAuthSecret="$COUCHDB_COOKIE";
            kubectl label secret wdp-cloudant-creds -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ template "couchdb.fullname" . }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
            
            # url endpoint secret wdp-cloudant-url
            COUCHDB_URL=$(echo "https://{{ .Values.adminUsername }}:$COUCHDB_PW@wdp-cloudant.{{ .Release.Namespace }}.svc.{{ .Values.dns.clusterDomainSuffix }}:443");
            COUCHDB_SVC=$(echo "wdp-cloudant.{{ .Release.Namespace }}.svc.{{ .Values.dns.clusterDomainSuffix }}:443");
            kubectl create secret generic wdp-cloudant-url -n $ICPD_CONTROLPLANE_NAMESPACE --from-literal=cloudant-url.txt="$COUCHDB_URL" --from-literal=database-svc="$COUCHDB_SVC";
            kubectl label secret wdp-cloudant-url -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ template "couchdb.fullname" . }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
{{- end }}                        
    else
            echo "$COUCHDB_SEC_NAME secret already exists, upgrading if needed...";
            UUID_EXIST=$(kubectl get secret $COUCHDB_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE -o yaml | grep couchdbUUID);
            if [[ $? -eq 1 ]]
            then            
              # upgrade secret, check if uuid present in secret.. if not generate new...
              # generate uuid and base64 enc
              UUID=$(python -c "import uuid; print(uuid.uuid4().hex);" | base64 -w 0);
              
              COUCHDB_PW=$(kubectl get secret $COUCHDB_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE -o=jsonpath="{.data['adminPassword']}" | base64 --decode);
                        
              COUCHDB_SALT=$(generateRandomString 32);
            
              # generate pbkdf2 password and base64 enc
              ENC_PASS=$(PASS="$COUCHDB_PW" SALT="$COUCHDB_SALT" ITER=10 \python -c "import os,hashlib; print('-pbkdf2-%s,%s,%s' % (hashlib.pbkdf2_hmac('sha1',os.environ['PASS'].encode(),os.environ['SALT'].encode(),int(os.environ['ITER'].encode())).hex(), os.environ['SALT'], os.environ['ITER']))" | base64 -w 0)
                            
              kubectl patch secret $COUCHDB_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE --type='json' -p="[{'op': 'add', 'path':'/data/couchdbUUID', 'value': '$UUID'},{'op': 'add', 'path':'/data/saltedPassword', 'value': '$ENC_PASS'}]"
            fi   
    fi

{{- end }}
