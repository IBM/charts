## global
global:
  chownPV: false
  dockerRegistryPrefix: ""
  installCerts: false
  persistence:
    useDynamicProvisioning: false
  serviceabilityLabelName: wkc
  serviceabilityLabelValue: wkc

## clusterSize is the initial size of the CouchDB cluster.
clusterSize: 3

## If allowAdminParty is enabled the cluster will start up without any database
## administrator account; i.e., all users will be granted administrative
## access. Otherwise, the system will look for a Secret called
## <ReleaseName>-couchdb containing `adminUsername`, `adminPassword` and
## `cookieAuthSecret` keys. See the `createAdminSecret` flag.
## ref: https://kubernetes.io/docs/concepts/configuration/secret/
allowAdminParty: false

adminUsername: admin
# adminPassword: this_is_not_secure
# cookieAuthSecret: neither_is_this

# Use existing certificates and do not create your own certificates
useExistingCertificates:
  secretName: ""

createCloudantArtifacts: true


serviceAccountName: 


## Use an alternate scheduler, e.g. "stork".
## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
##
# schedulerName:

## The storage volume used by each Pod in the StatefulSet. If a
## persistentVolume is not enabled, the Pods will use `emptyDir` ephemeral
## local storage. Setting the storageClass attribute to "-" disables dynamic
## provisioning of Persistent Volumes; leaving it unset will invoke the default
## provisioner.
persistentVolume:
  enabled: true
  accessModes:
    - ReadWriteOnce
  size: 10Gi
  storageClass: "couch-db-svc"
  overrideStorageClass: false

## The CouchDB image
image:
  pullSecret: ""
  repository: couchdb3
  tag: 3.1.1
  pullPolicy: IfNotPresent

jobImage:
  repository: wkc-init-container
  tag: 1.0.77
  pullPolicy: IfNotPresent
  resources: 
    limits:
      cpu: 100m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi

initImage:
  repository: wkc-init-container
  tag: 1.0.77
  pullPolicy: IfNotPresent
  
# if chown is true, an init-container with sudo is launched to
# change the owner of the persistence volume mount folder to the user defined in the
# security context  
initContainer:
  chown: false
  securityContext:
    runAsUser: 

securityContext:
  runAsUser: 
  
existingSecret: 
# job for generating secrets.. only runs is existingSecret=false
secretGeneration:
  serviceAccountName:
  image:
    repository: wkc-init-container
    tag: 1.0.77
    imagePullSecrets: ""
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 512Mi  
      
## CouchDB is happy to spin up cluster nodes in parallel, but if you encounter
## problems you can try setting podManagementPolicy to the StatefulSet default
## `OrderedReady`
podManagementPolicy: Parallel

## To better tolerate Node failures, we can prevent Kubernetes scheduler from
## assigning more than one Pod of CouchDB StatefulSet per Node using podAntiAffinity.
affinity:
  # podAntiAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #     - labelSelector:
  #         matchExpressions:
  #           - key: "app"
  #             operator: In
  #             values:
  #             - couchdb
  #       topologyKey: "kubernetes.io/hostname"

## A StatefulSet requires a headless Service to establish the stable network
## identities of the Pods, and that Service is created automatically by this
## chart without any additional configuration. The Service block below refers
## to a second Service that governs how clients connect to the CouchDB cluster.
service:
  # annotations:
  enabled: true
  type: ClusterIP
  externalPort: 5984
  httpsExternalPort: 6984

## An Ingress resource can provide name-based virtual hosting and TLS
## termination among other things for CouchDB deployments which are accessed
## from outside the Kubernetes cluster.
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  hosts:
    - chart-example.local
  annotations:
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls:
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local

## Optional resource requests and limits for the CouchDB container
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
resources:
  requests:
    cpu: 200m
    memory: 512Mi
  limits:
    cpu: 4
    memory: 8Gi

## erlangFlags is a map that is passed to the Erlang VM as flags using the
## ERL_FLAGS env. `name` and `setcookie` flags are minimally required to
## establish connectivity between cluster nodes.
## ref: http://erlang.org/doc/man/erl.html#init_flags
erlangFlags:
  name: couchdb
  setcookie: monster

## couchdbConfig will override default CouchDB configuration settings.
## The contents of this map are reformatted into a .ini file laid down
## by a ConfigMap object.
## ref: http://docs.couchdb.org/en/latest/config/index.html
couchdbConfig:
  # cluster:
  #   q: 8 # Create 8 shards for each database
  chttpd:
    bind_address: 0.0.0.0
    # chttpd.require_valid_user disables all the anonymous requests to the port
    # 5984 when is set to true.
    require_valid_user: false
  ssl:
    enable: true
    cert_file: /etc/couchdb/cert/certificate.pem
    key_file: /etc/couchdb/cert/key.pem
  couchdb:
    max_dbs_open: 5000
    max_document_size: 67108864
    max_attachment_size: 67108864
    max_http_request_size: 67108864

    
# Kubernetes local cluster domain.
# This is used to generate FQDNs for peers when joining the CouchDB cluster.
dns:
  clusterDomainSuffix: cluster.local

podAnnotations:
  productName: "IBM Common Core Services for IBM Cloud Pak for Data"
  productID: "shared infrastructure"
  productVersion: "3.0"

## Add arch value
archx86_64: amd64
archppc64le: ppc64le