{{- if not .Values.existingSecret }}
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ template "rabbitmq-ha.fullname" . }}-secret-config
  labels:
    app: {{ template "rabbitmq-ha.name" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/name: {{ .Chart.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation
data:
  init.sh: |
    function generateRandomString() {
      length=${1}
      < /dev/urandom tr -dc A-Za-z0-9 | head -c${1:-${length}};echo;
    }
  
{{- if and .Values.rabbitmqCert.enabled (not .Values.rabbitmqCert.existingSecret) (not .Values.global.installCerts) }}
    # generate RMQ cert and secret
    RMQ_CERT_NAME={{ template "rabbitmq-ha.fullname" . }}-cert;    
    RMQ_CERT_EXISTS=$(kubectl get secret $RMQ_CERT_NAME -n $ICPD_CONTROLPLANE_NAMESPACE);
    rc=$?
    if [[ rc -eq 1 ]]
    then
            # Generate the secret
            echo "$RMQ_CERT_NAME secret does not exist, creating...";
            # CA root
            openssl genrsa -out /certs/rmqCA.key 2048;
            openssl req -x509 -new -nodes -key /certs/rmqCA.key -sha256 -days 3650 -out /certs/rmqCA.crt -subj "/C=US/ST=CA/O=IBM, Inc./CN=wdprabbitmq.ibm.com";    
            openssl genrsa -out /certs/rmq.key 2048;    
            openssl req -new -sha256 -key /certs/rmq.key -subj "/C=US/ST=CA/O=IBM, Inc./CN=rabbitmq-ha" -reqexts SAN -config <(cat /etc/pki/tls/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:rabbitmq-ha")) -out /certs/rmq.csr;      
            openssl x509 -req -in /certs/rmq.csr -CA /certs/rmqCA.crt -CAkey /certs/rmqCA.key -CAcreateserial -extensions SAN -extfile <(cat /etc/pki/tls/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:rabbitmq-ha")) -out /certs/rmq.crt -days 3650 -sha256;
            
            RMQCAEnc=$(cat /certs/rmqCA.crt | base64 | tr -d '\n');            
            kubectl create secret generic $RMQ_CERT_NAME -n $ICPD_CONTROLPLANE_NAMESPACE --from-file=cacert.pem=/certs/rmqCA.crt --from-literal=cacertb64.pem="$RMQCAEnc" --from-file=cert.pem=/certs/rmq.crt --from-file=key.pem=/certs/rmq.key;
            kubectl label secret $RMQ_CERT_NAME -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ template "rabbitmq-ha.name" . }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
    else
            echo "$RMQ_CERT_NAME secret already exists";
    fi
{{- end }}
    
    # generate RMQ credentials secret
    RMQ_SEC_NAME={{ template "rabbitmq-ha.fullname" . }};    
    RMQ_DEF=$(cat <<-END
    {{ include "rabbitmq-ha.definitions" . | indent 4 }}
    END
    );           
    RMQ_SEC_EXISTS=$(kubectl get secret $RMQ_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE);
    rc=$?
    if [[ rc -eq 1 ]]
    then
            # Generate the secret
            echo "$RMQ_SEC_NAME secret does not exist, creating...";
            
            RMQ_PW=$(generateRandomString 24);
            RMQMGNT_PW=$(generateRandomString 24);
            RMQ_COOKIE=$(generateRandomString 32);
                
            echo "$RMQ_DEF";     
            RMQ_DEF=$(echo "${RMQ_DEF/RMQ_PW/$RMQ_PW}"); 
            RMQ_DEF=$(echo "${RMQ_DEF/RMQMGNT_PW/$RMQMGNT_PW}");          
            kubectl create secret generic $RMQ_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE --from-literal=rabbitmq-username={{ .Values.rabbitmqUsername }} --from-literal=rabbitmq-password="$RMQ_PW" --from-literal=rabbitmq-erlang-cookie="$RMQ_COOKIE" --from-literal=definitions.json="$RMQ_DEF" --from-literal=rabbitmq-mgmt-username={{ .Values.managementUsername }} --from-literal=rabbitmq-mgmt-password="$RMQMGNT_PW";
            kubectl label secret $RMQ_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ template "rabbitmq-ha.name" . }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
                        
            # url endpoint secret rabbitmq-url
            RMQ_URL=$(echo "amqps://{{ .Values.rabbitmqUsername }}:$RMQ_PW@rabbitmq-ha:5671");
            kubectl create secret generic rabbitmq-url -n $ICPD_CONTROLPLANE_NAMESPACE --from-literal=rabbitmq-url.txt="$RMQ_URL";
            kubectl label secret rabbitmq-url -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ template "rabbitmq-ha.name" . }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};            
    else
            echo "$RMQ_SEC_NAME secret already exists";
            
            # we might need to add the new missing keys...
            RMQMGNT_EXISTS=$(echo "$RMQ_SEC_EXISTS" | grep rabbitmq-mgmt-username);
            if [[ $? -eq 1 ]]
            then
               echo "$RMQ_SEC_NAME secret doesn't have rabbitmq-mgmt-username, patching secret..."
               
               RMQMGNT_PW=$(generateRandomString 24 | base64);
               
               kubectl patch secret $RMQ_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE --type='json' -p="[{'op': 'add', 'path':'/data/rabbitmq-mgmt-username', 'value': '{{ .Values.managementUsername | b64enc }}'},{'op': 'add', 'path':'/data/rabbitmq-mgmt-password', 'value': '$RMQMGNT_PW'}]"           
            fi
    fi      

{{- end }}
