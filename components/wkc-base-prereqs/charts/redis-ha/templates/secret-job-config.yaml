{{- if not .Values.existingSecret }}
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ template "redis-ha.fullname" . }}-secret-config
  labels:
    app: {{ template "redis-ha.name" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }} 
    app.kubernetes.io/name: {{ .Chart.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation
data:
  init.sh: |
    function generateRandomString() {
      length=${1}
      < /dev/urandom tr -dc A-Za-z0-9 | head -c${1:-${length}};echo;
    }
    
    REDIS_ENDPOINT={{ printf "%s-master-svc:%s" (include "redis-ha.fullname" .) (toString .Values.redis.port) }};
    REDIS_SVC={{ printf "%s-master-svc" (include "redis-ha.fullname" .) }};
    {{- if .Values.auth }}
    REDIS_PW=$(generateRandomString 12);
    REDIS_URL=$(echo "redis://:$REDIS_PW@$REDIS_ENDPOINT");
    {{- else }}
    REDIS_URL=$(echo "redis://$REDIS_ENDPOINT");
    REDIS_PW="";
    {{- end }}    
    
    {{- if .Values.ssl.enabled }}
    REDIS_SSL_ENDPOINT={{ printf "%s-master-svc:%s" (include "redis-ha.fullname" .) (toString .Values.ssl.tlsPort) }};
    {{- if .Values.auth }}
    REDIS_SSL=$(echo "rediss://:$REDIS_PW@$REDIS_SSL_ENDPOINT");
    {{- else }}
    REDIS_SSL=$(echo "rediss://$REDIS_SSL_ENDPOINT");
    {{- end }}    
    {{- else }}
    REDIS_SSL=$REDIS_URL
    {{- end }}    
             
    # generate credentials secret
    REDIS_SEC_NAME={{ template "redis-ha.fullname" . }};    
    REDIS_SEC_EXISTS=$(kubectl get secret $REDIS_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE);
    rc=$?
    if [[ rc -eq 1 ]]
    then
            # Generate the secret
            echo "$REDIS_SEC_NAME secret does not exist, creating...";
                                    
            kubectl create secret generic $REDIS_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE --from-literal=redis-url="$REDIS_URL" --from-literal=redis-url-ssl="$REDIS_SSL" {{ if .Values.auth }}--from-literal=auth="$REDIS_PW"{{ end }};
            kubectl label secret $REDIS_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ template "redis-ha.name" . }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};            

            kubectl create secret generic redis-url -n $ICPD_CONTROLPLANE_NAMESPACE --from-literal=redis-url.txt="$REDIS_URL" {{ if .Values.auth }}--from-literal=auth="$REDIS_PW"{{ end }};
            kubectl label secret redis-url --overwrite -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ template "redis-ha.name" . }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};            
           
            kubectl create secret generic redis-ha-secret-host-and-port -n $ICPD_CONTROLPLANE_NAMESPACE --from-literal=redis-host="$REDIS_SVC" --from-literal=redis-port="{{ toString .Values.redis.port }}";
            kubectl label secret redis-ha-secret-host-and-port --overwrite -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ template "redis-ha.name" . }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};            

    else
            echo "$REDIS_SEC_NAME secret already exists, annotating for fucture use";
                        kubectl annotate secret redis-url --overwrite=true -n $ICPD_CONTROLPLANE_NAMESPACE "helm.sh/resource-policy"="keep"

            kubectl annotate secret redis-ha-secret-host-and-port --overwrite=true -n $ICPD_CONTROLPLANE_NAMESPACE "helm.sh/resource-policy"="keep"
            
            # we might need to add the new missing ssl key...
            SEC=$(kubectl get secret $REDIS_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE -o yaml | grep redis-url-ssl);
            if [[ $? -eq 1 ]]
            then        
              REDIS_SSL_B64=$(echo "$REDIS_SSL" | tr -d '\n' | base64 )     
              kubectl patch secret $REDIS_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE --type='json' -p="[{'op': 'add', 'path':'/data/redis-url-ssl', 'value': '$REDIS_SSL_B64'}]"           
            fi
    fi      
    
    # generate cert and secret
    CERT_NAME={{ template "redis-ha.fullname" . }}-cert;    
    CERT_EXISTS=$(kubectl get secret $CERT_NAME -n $ICPD_CONTROLPLANE_NAMESPACE);
    rc=$?
    if [[ rc -eq 1 ]]
    then
            # Generate the secret
            echo "$CERT_NAME secret does not exist, creating...";
            # CA root
            openssl genrsa -out /certs/CA.key 2048;
            openssl req -x509 -new -nodes -key /certs/CA.key -sha256 -days 3650 -out /certs/CA.crt -subj "/C=US/ST=CA/O=IBM, Inc./CN=redis-ha.ibm.com";    
            openssl genrsa -out /certs/certkey.key 2048;    
            openssl req -new -sha256 -key /certs/certkey.key -subj "/C=US/ST=CA/O=IBM, Inc./CN=redis-ha" -reqexts SAN -config <(cat /etc/pki/tls/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:redis-ha,DNS:{{ template "redis-ha.fullname" . }}-master-svc")) -out /certs/cert.csr;      
            openssl x509 -req -in /certs/cert.csr -CA /certs/CA.crt -CAkey /certs/CA.key -CAcreateserial -extensions SAN -extfile <(cat /etc/pki/tls/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:redis-ha,DNS:{{ template "redis-ha.fullname" . }}-master-svc")) -out /certs/cert.crt -days 3650 -sha256;
            
            CAEnc=$(cat /certs/CA.crt | base64 | tr -d '\n'); 
            
            PROXYCERT=$(cat /certs/cert.crt /certs/certkey.key); 
                       
            kubectl create secret generic $CERT_NAME -n $ICPD_CONTROLPLANE_NAMESPACE --from-file=ca.crt=/certs/CA.crt --from-literal=cacertb64.pem="$CAEnc" --from-literal=certandkey.pem="$PROXYCERT" --from-file=redis.crt=/certs/cert.crt --from-file=redis.key=/certs/certkey.key;
            kubectl label secret $CERT_NAME -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ template "redis-ha.fullname" . }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
    else
            echo "$CERT_NAME secret already exists";
    fi

{{- end }}
