{{- if not .Values.existingSecret }}
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ template "redis-ha.fullname" . }}-secret-config
  labels:
    app: {{ template "redis-ha.name" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }} 
    app.kubernetes.io/name: {{ .Chart.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation
data:
  init.sh: |
    function generateRandomString() {
      length=${1}
      < /dev/urandom tr -dc A-Za-z0-9 | head -c${1:-${length}};echo;
    }
     
    # generate credentials secret
    REDIS_SEC_NAME={{ template "redis-ha.fullname" . }};    
    REDIS_SEC_EXISTS=$(kubectl get secret $REDIS_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE);
    rc=$?
    if [[ rc -eq 1 ]]
    then
            # Generate the secret
            echo "$REDIS_SEC_NAME secret does not exist, creating...";
            
            REDIS_ENDPOINT={{ printf "%s-master-svc:%s" (include "redis-ha.fullname" .) (toString .Values.redis.port) }};
            REDIS_SVC={{ printf "%s-master-svc" (include "redis-ha.fullname" .) }};
            {{- if .Values.auth }}
            REDIS_PW=$(generateRandomString 12);
            REDIS_URL=$(echo "redis://:$REDIS_PW@$REDIS_ENDPOINT");
            {{- else }}
            REDIS_URL=$(echo "redis://$REDIS_ENDPOINT");
            REDIS_PW="";
            {{- end }}    
                                    
            kubectl create secret generic $REDIS_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE --from-literal=redis-url="$REDIS_URL" {{ if .Values.auth }}--from-literal=auth="$REDIS_PW"{{ end }};
            kubectl label secret $REDIS_SEC_NAME -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ template "redis-ha.name" . }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};            

            kubectl create secret generic redis-url -n $ICPD_CONTROLPLANE_NAMESPACE --from-literal=redis-url.txt="$REDIS_URL" {{ if .Values.auth }}--from-literal=auth="$REDIS_PW"{{ end }};
            kubectl label secret redis-url -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ template "redis-ha.name" . }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};            
           
            kubectl create secret generic redis-ha-secret-host-and-port -n $ICPD_CONTROLPLANE_NAMESPACE --from-literal=redis-host="$REDIS_SVC" --from-literal=redis-port="{{ toString .Values.redis.port }}";
            kubectl label secret redis-ha-secret-host-and-port -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ template "redis-ha.name" . }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};            

    else
            echo "$REDIS_SEC_NAME secret already exists, annotating for fucture use";
                        kubectl annotate secret redis-url --overwrite=true -n $ICPD_CONTROLPLANE_NAMESPACE "helm.sh/resource-policy"="keep"

            kubectl annotate secret redis-ha-secret-host-and-port --overwrite=true -n $ICPD_CONTROLPLANE_NAMESPACE "helm.sh/resource-policy"="keep"
    fi      

{{- end }}
