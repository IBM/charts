{{- if eq .Values.global.deploymentTarget "icp4data" }}
kind: ConfigMap
apiVersion: v1
metadata:
  name: secret-generation-config
  labels:
    app: {{ .Chart.Name }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    app.kubernetes.io/name: {{ .Chart.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-101"
    "helm.sh/hook-delete-policy": before-hook-creation
data:
  init.sh: |
    CERT=$(cat <<-END
    -----BEGIN CERTIFICATE-----
    MIIEUzCCAzugAwIBAgIJANMbRG6+5SQzMA0GCSqGSIb3DQEBBQUAMIGxMQswCQYD
    VQQGEwJVUzELMAkGA1UECAwCQ0ExGzAZBgNVBAcMElNpbGljb24gVmFsbGV5IExh
    YjESMBAGA1UECgwJQW5hbHl0aWNzMRowGAYDVQQLDBFJQk0gRGF0YSBQbGF0Zm9y
    bTErMCkGCSqGSIb3DQEJARYcaWJtLWRhdGEtcGxhdGZvcm1AdXMuaWJtLmNvbTEb
    MBkGA1UEAwwSaW50ZXJuYWwtbmdpbngtc3ZjMCAXDTE4MDIyMzIyNDAzMloYDzIx
    MTgwMTMwMjI0MDMyWjCBsTELMAkGA1UEBhMCVVMxCzAJBgNVBAgMAkNBMRswGQYD
    VQQHDBJTaWxpY29uIFZhbGxleSBMYWIxEjAQBgNVBAoMCUFuYWx5dGljczEaMBgG
    A1UECwwRSUJNIERhdGEgUGxhdGZvcm0xKzApBgkqhkiG9w0BCQEWHGlibS1kYXRh
    LXBsYXRmb3JtQHVzLmlibS5jb20xGzAZBgNVBAMMEmludGVybmFsLW5naW54LXN2
    YzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANmNHxpCSywlSvooFs15
    w8oJgd/nzbnzlzcfSsjCTmDaILXNRt87fyoJibzAUzn6kRyYAuORBi1SHkUoljsF
    GaKWjGSYMkevZewvG2ywgHs5hQDbmcMHKEa2TBMLIuqp/FiK3nAtHUjUSeUM2j30
    6Gpu0N3kbK3geagzL+NvtNsjPaWkVzzJlm99uqMzakVyP3kl9opKUmMiucbmRRuK
    zIYAqERj/211MllJcMnWxVP7M9jwzCqxLU6opWP6/c+9iyRXv07gtEl0gkdjO9Bp
    t2WqSS11CoNmS8phHRZjLzFPM+YiGJTUXAX/AEBFoI825qGO6DN8PeWkgqSRsc5l
    TG8CAwEAAaNqMGgwZgYDVR0RBF8wXYISaW50ZXJuYWwtbmdpbngtc3ZjghMqLnN2
    Yy5jbHVzdGVyLmxvY2FsggdhcGktc3ZjggUqLmFwaYINaWJtLW5naW54LXN2Y4IJ
    bG9jYWxob3N0gghkc3hsLWFwaTANBgkqhkiG9w0BAQUFAAOCAQEARc8YrVsiBl4m
    qY1iRWA6KbVRRutF9ifmaf+WHX4rq7J6Wkb2zPH/w+eXwPqJvm4yCT11fJvdYPqB
    nkbKioLdu4FmuAw/hKunk+Fv5pFm/1NU208YKvTImpumz74lTEaChwvM9RooGDi4
    kPGWkXjBT0Mw8exEeq6sN4OT/ne6MklePiswfJOSkE99MthFvrdGYOHlsOSoQCSk
    q4RZTEv9VP06DlZRgFpXmXHEVlxEIwwt5BbCTxm597u3J3UtCWOlmKdIuXjVUxx0
    u8eOr37odf6po0bDfDbuElUByW3umUm42C2JvLVlL7/VR10RFC21WYk6Gjvee0gr
    KZ4VvnlEtw==
    -----END CERTIFICATE-----
    END
    );
    
    function generateRandomString() {
      length=${1}
      < /dev/urandom tr -dc A-Za-z0-9 | head -c${1:-${length}};echo;
    }

    # get nginx certificate
    NGINX_CERT_EXISTS=$(kubectl get secret internal-nginx-svc-tls -n $ICPD_CONTROLPLANE_NAMESPACE);
    rc=$?
    if [[ rc -eq 1 ]]
    then
            # Generate the secret
            echo "internal-nginx-svc-tls secret does not exist, creating...";
            kubectl create secret generic internal-nginx-svc-tls -n $ICPD_CONTROLPLANE_NAMESPACE --from-literal=certificate.pem="$CERT";
    else
            echo "internal-nginx-svc-tls secret already exists";
    fi

    NGINX_CERT=$(kubectl get secret internal-nginx-svc-tls -n $ICPD_CONTROLPLANE_NAMESPACE -o "jsonpath={.data['certificate\.pem']}" | base64 -d);

    # generate RMQ cert and secret
    RMQ_CERT_EXISTS=$(kubectl get secret rabbitmq-ha-cert -n $ICPD_CONTROLPLANE_NAMESPACE);
    rc=$?
    if [[ rc -eq 1 ]]
    then
            # Generate the secret
            echo "rabbitmq-ha-cert secret does not exist, creating...";
            # CA root
            openssl genrsa -out /certs/rmqCA.key 2048;
            openssl req -x509 -new -nodes -key /certs/rmqCA.key -sha256 -days 3650 -out /certs/rmqCA.crt -subj "/C=US/ST=CA/O=IBM, Inc./CN=wdprabbitmq.ibm.com";    
            openssl genrsa -out /certs/rmq.key 2048;    
            openssl req -new -sha256 -key /certs/rmq.key -subj "/C=US/ST=CA/O=IBM, Inc./CN=rabbitmq-ha" -reqexts SAN -config <(cat /etc/pki/tls/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:rabbitmq-ha")) -out /certs/rmq.csr;      
            openssl x509 -req -in /certs/rmq.csr -CA /certs/rmqCA.crt -CAkey /certs/rmqCA.key -CAcreateserial -out /certs/rmq.crt -days 3650 -sha256;
            
            RMQCAEnc=$(cat /certs/rmqCA.crt | base64 | tr -d '\n');            
            kubectl create secret generic rabbitmq-ha-cert -n $ICPD_CONTROLPLANE_NAMESPACE --from-file=cacert.pem=/certs/rmqCA.crt --from-literal=cacertb64.pem="$RMQCAEnc" --from-file=cert.pem=/certs/rmq.crt --from-file=key.pem=/certs/rmq.key;
            kubectl label secret rabbitmq-ha-cert -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app=rabbitmq-ha heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
    else
            echo "rabbitmq-ha-cert secret already exists";
    fi
    
    # generate couchdb cert and secret    
    COUCHDB_CERT_EXISTS=$(kubectl get secret wdp-cloudant-cert -n $ICPD_CONTROLPLANE_NAMESPACE);
    rc=$?
    if [[ rc -eq 1 ]]
    then
            # Generate the secret
            echo "wdp-cloudant-cert secret does not exist, creating...";
            # CA root
            openssl genrsa -out /certs/couchdbCA.key 2048
            openssl req -x509 -new -nodes -key /certs/couchdbCA.key -sha256 -days 3650 -out /certs/couchdbCA.crt -subj "/C=US/ST=CA/O=IBM, Inc./CN=wdpcouchdb.ibm.com";    
            openssl genrsa -out /certs/couchdb.key 2048;    
            
            COUCHDB_URL1={{ printf "wdp-cloudant.%s.svc.%s" .Release.Namespace .Values.clusterDomain }};
            COUCHDB_URL2={{ printf "couchdb-ha-svc.%s.svc.%s" .Release.Namespace .Values.clusterDomain }};
            
            openssl req -new -sha256 -key /certs/couchdb.key -subj "/C=US/ST=CA/O=IBM, Inc./CN=wdp-cloudant" -reqexts SAN -config <(cat /etc/pki/tls/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:wdp-cloudant,DNS:couchdb-ha-svc,DNS:$COUCHDB_URL1,DNS:$COUCHDB_URL2")) -out /certs/couchdb.csr;      
            openssl x509 -req -in /certs/couchdb.csr -CA /certs/couchdbCA.crt -CAkey /certs/couchdbCA.key -CAcreateserial -extensions SAN -extfile <(cat /etc/pki/tls/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:wdp-cloudant,DNS:couchdb-ha-svc,DNS:$COUCHDB_URL1,DNS:$COUCHDB_URL2")) -out /certs/couchdb.crt -days 3650 -sha256;
            
            COUCHDBCERT=$(cat /certs/couchdb.crt /certs/couchdb.key);    
            COUCHDBCACERT=$(cat /certs/couchdbCA.crt /certs/couchdbCA.key);               
            kubectl create secret generic wdp-cloudant-cert -n $ICPD_CONTROLPLANE_NAMESPACE --from-literal=certificate.pem="$COUCHDBCERT" --from-literal=ca.crt.pem="$COUCHDBCACERT" --from-file=key.pem=/certs/couchdb.key;
            kubectl label secret wdp-cloudant-cert -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app=wdp-cloudant heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
    else
            echo "wdp-cloudant-cert secret already exists";
    fi       
    
    # generate elastic cert and secret
    ES_CERT_EXISTS=$(kubectl get secret elasticsearch-master-cert -n $ICPD_CONTROLPLANE_NAMESPACE);
    rc=$?
    if [[ rc -eq 1 ]]
    then
            # Generate the secret
            echo "elasticsearch-master-cert secret does not exist, creating...";
            # CA root
            openssl genrsa -out /certs/esCA.key 2048;
            openssl req -x509 -new -nodes -key /certs/esCA.key -sha256 -days 3650 -out /certs/esCA.crt -subj "/C=US/ST=CA/O=IBM, Inc./CN=wdpelasticsearch.ibm.com";    
            openssl genrsa -out /certs/es.key 2048;    
            
            ES_URL1={{ printf "wdp-elasticsearch.%s.svc.%s" .Release.Namespace .Values.clusterDomain }};
            ES_URL2={{ printf "elasticsearch-master.%s.svc.%s" .Release.Namespace .Values.clusterDomain }};
            
            openssl req -new -sha256 -key /certs/es.key -subj "/C=US/ST=CA/O=IBM, Inc./CN=wdp-elasticsearch" -reqexts SAN -config <(cat /etc/pki/tls/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:wdp-elasticsearch,DNS:elasticsearch-master,DNS:$ES_URL1,DNS:$ES_URL2")) -out /certs/es.csr;      
            openssl x509 -req -in /certs/es.csr -CA /certs/esCA.crt -CAkey /certs/esCA.key -CAcreateserial -extensions SAN -extfile <(cat /etc/pki/tls/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:wdp-elasticsearch,DNS:elasticsearch-master,DNS:$ES_URL1,DNS:$ES_URL2")) -out /certs/es.crt -days 3650 -sha256;
            
            ESCERT=$(cat /certs/es.crt /certs/es.key); 
            
            kubectl create secret generic elasticsearch-master-cert -n $ICPD_CONTROLPLANE_NAMESPACE --from-literal=cert.pem="$ESCERT" --from-file=certificate.pem=/certs/es.crt --from-file=key.pem=/certs/es.key --from-file=ca.pem=/certs/esCA.crt;
            kubectl label secret elasticsearch-master-cert -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app=elasticsearch-master heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
    else
            echo "elasticsearch-master-cert secret already exists";
            
            # we might need to add the new missing combine cert for haproxy...
            CERT=$(kubectl get secret elasticsearch-master-cert -n $ICPD_CONTROLPLANE_NAMESPACE -o yaml | grep cert.pem);
            if [[ $? -eq 1 ]]
            then
               # combined cert not found.. add the key
               echo "patching elasticsearch-master-cert with new cert...";
               KEY=$(kubectl get secret elasticsearch-master-cert -n $ICPD_CONTROLPLANE_NAMESPACE -o=jsonpath="{.data['key\.pem']}" | base64 --decode)
               CERTIFICATE=$(kubectl get secret elasticsearch-master-cert -n $ICPD_CONTROLPLANE_NAMESPACE -o=jsonpath="{.data['certificate\.pem']}" | base64 --decode)
               COMBINED_CERT=$(echo -e "$CERTIFICATE\n\n$KEY" | base64 -w 0);
               
               kubectl patch secret elasticsearch-master-cert -n $ICPD_CONTROLPLANE_NAMESPACE --type='json' -p="[{'op': 'add', 'path':'/data/cert.pem', 'value': '$COMBINED_CERT'}]"           
            fi
    fi       
    
    # create the secret, do not base64 encode it as kube will do it for you
    COMBINED_SECRET_EXISTS=$(kubectl get secret ca-certificate-chain-trust -n $ICPD_CONTROLPLANE_NAMESPACE);
    rc=$?
    if [[ rc -eq 1 ]]
    then
            # get the RMQ certificate
            RMQ_CA_CERT=$(kubectl get secret rabbitmq-ha-cert -n $ICPD_CONTROLPLANE_NAMESPACE -o "jsonpath={.data['cacert\.pem']}" | base64 -d);

            # For the couch certificate we get the certificate only and not the private key
            COUCH_CA_CERT=$(kubectl get secret wdp-cloudant-cert -n $ICPD_CONTROLPLANE_NAMESPACE -o "jsonpath={.data['ca\.crt\.pem']}" | base64 -d | grep -B 10000 "END CERTIFICATE");

            # create combined certificate
            COMBINED_CERT=$(echo -e "$RMQ_CA_CERT\n\n$COUCH_CA_CERT\n\n$NGINX_CERT");
            
            # Generate the secret
            echo "ca-certificate-chain-trust secret does not exist, creating...";
    	    kubectl create secret generic ca-certificate-chain-trust -n $ICPD_CONTROLPLANE_NAMESPACE --from-literal=certificate.pem="$COMBINED_CERT";
    	    kubectl label secret ca-certificate-chain-trust -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ .Chart.Name }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};    	    
    else
            echo "ca-certificate-chain-trust secret already exists";
    fi
     
    # check for wdp-service-id and then create it if its there
    wdp_service_id="icp4d-dev";
    wdp_service_id_exists=$(kubectl get secret wdp-service-id);
    rc=$?
    if [[ rc -eq 1 ]]
    then
            # Generate the secret
            wdp_service_key=$(generateRandomString 13);
            wdp_service_credential=$(echo "$wdp_service_id:$wdp_service_key" | tr -d '\n' | base64);
            echo "wdp-service-id secret does not exist, creating...";
            kubectl create secret generic wdp-service-id --from-literal=service-id-credentials="$wdp_service_credential" --from-literal=service-id="$wdp_service_id";
            kubectl label secret wdp-service-id -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ .Chart.Name }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
    else
            echo "wdp-service-id secret already exists";
    fi
    
    # https-cert-key-secret
    HTTPS_CERT_EXISTS=$(kubectl get secret https-cert-key-secret -n $ICPD_CONTROLPLANE_NAMESPACE);
    rc=$?
    if [[ rc -eq 1 ]]
    then
            # Generate the secret
            echo "https-cert-key-secret secret does not exist, creating...";
            # CA root
            openssl genrsa -out /certs/httpsCA.key 2048;
            openssl req -x509 -new -nodes -key /certs/httpsCA.key -sha256 -days 3650 -out /certs/httpsCA.crt -subj "/C=US/ST=CA/O=IBM, Inc./CN=ibm.com";    
            openssl genrsa -out /certs/https.key 2048;    
            
            openssl req -new -sha256 -key /certs/https.key -subj "/C=US/ST=CA/O=IBM, Inc./CN=localhost" -reqexts SAN -config <(cat /etc/pki/tls/openssl.cnf <(printf "\n[SAN]\nsubjectAltName=DNS:localhost")) -out /certs/https.csr;      
            openssl x509 -req -in /certs/https.csr -CA /certs/httpsCA.crt -CAkey /certs/httpsCA.key -CAcreateserial -out /certs/https.crt -days 3650 -sha256;
            
            HTTPS_CERTb64=$(cat /certs/https.crt | tr -d '\n' | base64)
            HTTPS_KEYb64=$(cat /certs/https.key | tr -d '\n' | base64)
            
            kubectl create secret generic https-cert-key-secret -n $ICPD_CONTROLPLANE_NAMESPACE --from-file=self-signed-certificate.crt=/certs/https.crt --from-file=self-signed-private-key.key=/certs/https.key --from-literal=self-signed-certificate-base64="$HTTPS_CERTb64" --from-literal=self-signed-private-key-base64="$HTTPS_KEYb64";
            kubectl label secret https-cert-key-secret -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ .Chart.Name }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
    else
            echo "https-cert-key-secret secret already exists";
            kubectl annotate secret https-cert-key-secret --overwrite=true -n $ICPD_CONTROLPLANE_NAMESPACE "helm.sh/resource-policy"="keep"
    fi
{{- end }}
