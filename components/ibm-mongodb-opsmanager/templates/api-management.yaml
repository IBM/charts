apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.servicename }}-api-management"
  labels:
    {{- include "metadata_info" . | indent 4 }}
    component: mongodb
spec:
  selector:
    matchLabels:
      api-database-status: "{{ .Values.servicename }}-mongodb-api"
  replicas: 1
  revisionHistoryLimit: 2
  template:
    metadata:
      name: mongodb-api-management
      labels:
        {{- include "metadata_info" . | indent 8 }}
        api-database-status: "{{ .Values.servicename }}-mongodb-api"
        component: mongodb
        icpdsupport/app: config
        icpdsupport/addOnId: "{{ .Values.dbType }}"
        icpdsupport/createdBy: "{{ .Values.zenServiceInstanceUID | int64 }}"
        icpdsupport/serviceInstanceId: "{{ .Values.zenServiceInstanceId | int64 }}"
      annotations:
        {{- include "mongo.annotations" .  | indent 8 }}
    spec:
      {{- include "nodeaffinity" . | indent 6 }}
      {{- include "tolerations" . | indent 6 }}
      {{- include "mongo.Podsecurity" .  | indent 6 }}
      serviceAccount: {{ .Values.global.serviceAccount }}
      containers:
      - name: mongo-status
        image: {{ .Values.apiManagement.image.repository }}:{{ .Values.apiManagement.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        resources:
          requests:
            cpu: '0.10'
            memory: '128M'
          limits:
            cpu: '0.5'
            memory: '256M'
        livenessProbe:
          exec:
            command: ["/bin/bash", "-c", "ls /var/mongodb_setup"]
          initialDelaySeconds: 5
          periodSeconds: 5
        readinessProbe:
          exec:
            command: ["/bin/bash", "-c", "ls /var/mongodb_setup"]
          initialDelaySeconds: 5
          periodSeconds: 5
        {{- include "mongo.Containersecurity" . | indent 8 }}
        env:
        - name: NAMESPACE
          value: {{ .Release.Namespace }}
      restartPolicy: Always
