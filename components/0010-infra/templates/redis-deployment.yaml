{{- $compName := "redis" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  labels:
    {{- include "zenhelper.labels" (list . $compName) | indent 4 }}
spec:
  replicas: {{ .Values.redisRepo.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      {{- include "zenhelper.labels" (list . $compName) | indent 6 }}
  template:
    metadata:
      labels:
        {{- include "zenhelper.labels" (list . $compName) | indent 8 }}
      annotations:
        {{- include "zenhelper.annotations" . | indent 8 }}
    spec:
      securityContext:
        runAsNonRoot: true
      serviceAccountName: {{ .Values.redisRepo.sa }}
      terminationGracePeriodSeconds: 0
      affinity:
        {{- include "zenhelper.nodeArchAffinity" . | indent 8 }}
        {{- include "zenhelper.podAntiAffinity" (list . $compName) | indent 8 }}
      {{- if .Values.global.baseInstaller }}
      nodeSelector:
        is_storage: "true"
      {{- end }}
      containers:
      - name: redis-container
        securityContext:
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL     
        image: "{{ .Values.global.docker_registry_prefix }}/{{ .Values.redisRepo.image.repository }}:{{ .Values.global.image.tag }}"
        imagePullPolicy: {{ default "IfNotPresent" .Values.image.pullPolicy | quote }}
        command: ["redis-server","/etc/redis/redis.conf"]
        {{- if not .Values.global.baseInstaller }}
        resources:
{{ toYaml .Values.redisRepo.resources | indent 12 }}
        {{- end }}
        ports:
        - containerPort: 6379
          protocol: TCP
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "/usr/local/bin/redis-cli -h $(hostname) ping"
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "/usr/local/bin/redis-cli -h $(hostname) ping"
          initialDelaySeconds: 30
          timeoutSeconds: 5
        volumeMounts:
          - mountPath: /redis-storage
            name: redis-mount
      volumes:
        - name: redis-mount
          persistentVolumeClaim:
            {{- if .Values.redisPVC.persistence.existingClaimName }}
              claimName: {{ .Values.redisPVC.persistence.existingClaimName }}
            {{- else }}
              claimName: {{ .Values.redisPVC.name }}
            {{- end }}
