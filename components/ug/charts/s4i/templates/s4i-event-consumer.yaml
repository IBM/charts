apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.s4iEventConsumer.app_name }}-internal
  labels:
      app: {{ .Values.s4iEventConsumer.app_name }}-internal
      chart: "{{ .Chart.Name }}"
      release: "{{ .Release.Name }}"
      heritage: "{{ .Release.Service }}"
      app.kubernetes.io/name: {{ .Values.s4iEventConsumer.app_name }}-internal
      helm.sh/chart: {{ .Chart.Name }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
      app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  type: ClusterIP
  selector:
    app: {{ .Values.s4iEventConsumer.app_name }}
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080
    - name: actuator
      protocol: TCP
      port: 8090
      targetPort: 8090
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.s4iEventConsumer.app_name }}
  labels:
      app: {{ .Values.s4iEventConsumer.app_name }}
      chart: "{{ .Chart.Name }}"
      release: "{{ .Release.Name }}"
      heritage: "{{ .Release.Service }}"
      app.kubernetes.io/name: {{ .Values.s4iEventConsumer.app_name }}
      helm.sh/chart: {{ .Chart.Name }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
      app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  serviceName: "{{ .Values.s4iEventConsumer.app_name }}"
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.s4iEventConsumer.app_name }}
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Values.s4iEventConsumer.app_name }}
        chart: "{{ .Chart.Name }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
        app.kubernetes.io/name: {{ .Values.s4iEventConsumer.app_name }}
        helm.sh/chart: {{ .Chart.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        icpdsupport/app: "apis"
        {{ .Values.global.serviceabilityLabelName }}: {{ .Values.global.serviceabilityLabelValue }}
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path:   /actuator/prometheus
        prometheus.io/port:   '8090'
      {{- include "product-metering" . | indent 8 }}
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      affinity:
      {{- include "nodeaffinity" . | indent 6 }}
      # longer grace period to allow for message buffers to be fully emptied
      terminationGracePeriodSeconds: 60
      initContainers:
      - name: type-registry-wait
        image: {{ if .Values.global.dockerRegistryPrefix }}{{ trimSuffix "/" .Values.global.dockerRegistryPrefix }}/{{ end }}{{ .Values.global.image.wkcinitcontainer.repository }}:{{ .Values.global.image.wkcinitcontainer.tag }}
        imagePullPolicy: {{ .Values.global.image.pullPolicy }}
        command: ['sh', '-c', '--']
        args: [ "type_reg_status=1;
                 while [ $type_reg_status != 0  ];
                 do sleep 2;
                 type_reg_status=`nc {{ .Values.s4iRegistry.app_name }}-internal 8080 && nc {{ .Values.redis.app_name }} 6379 < /dev/null; echo $?`;
                 done;"
              ]
        resources:
          requests:
            memory: "{{ .Values.s4iEventConsumer.initcontainer.requests.memory }}"
            cpu: "{{ .Values.s4iEventConsumer.initcontainer.requests.cpu }}"
          limits:
            memory: "{{ .Values.s4iEventConsumer.initcontainer.limits.memory }}"
            cpu: "{{ .Values.s4iEventConsumer.initcontainer.limits.cpu }}"
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      containers:
        - name: {{ .Values.s4iEventConsumer.app_name }}
          image: {{ if .Values.global.dockerRegistryPrefix }}{{ trimSuffix "/" .Values.global.dockerRegistryPrefix }}/{{ end }}{{ .Values.s4iEventConsumer.repository }}:{{ .Values.s4iEventConsumer.tag }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          resources:
            requests:
              memory: "{{ .Values.s4iEventConsumer.requests.memory }}"
              cpu: "{{ .Values.s4iEventConsumer.requests.cpu }}"
            limits:
              memory: "{{ .Values.s4iEventConsumer.limits.memory }}"
              cpu: "{{ .Values.s4iEventConsumer.limits.cpu }}"
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            readOnlyRootFilesystem: false
            capabilities:
              drop:
              - ALL
          env:
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: redis-url
                  key: redis-url.txt
          ports:
            - containerPort: 8080
            - containerPort: 8090
          volumeMounts:
            - name: config-map
              mountPath: /app/application.properties
              subPath: application.properties
            - name: config-map
              mountPath: /app/jvm.options
              subPath: jvm.options
            - name: app-log
              mountPath: /app/log
            - name: secrets
              mountPath: /app/secrets
              readOnly: true
            - name: zk-probe
              mountPath: /opt/zk-probe.sh
              subPath: zk-probe.sh
          readinessProbe:
            httpGet:
              path: /actuator/ready
              port: 8090
            periodSeconds: 20
            initialDelaySeconds: 30
            timeoutSeconds: 20
            failureThreshold: 1
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8090
            periodSeconds: 20
            initialDelaySeconds: 60
            timeoutSeconds: 10
            failureThreshold: 15
      securityContext:
        runAsNonRoot: true
        {{- if .Values.s4iEventConsumer.runAsUser }}
        runAsUser: {{ .Values.s4iEventConsumer.runAsUser }}
        {{- end }}
        {{- if .Values.s4iEventConsumer.fsGroup }}
        fsGroup: {{ .Values.s4iEventConsumer.fsGroup }}
        {{- end }}
      {{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      {{- end }}
      {{- include "image-secret" . | indent 6 }}
      volumes:
        - name: config-map
          configMap:
            name: {{ .Values.s4iEventConsumer.app_name }}-config
        - name: zk-probe
          configMap:
            name: zk-probe-configmap
            defaultMode: 0755
        - name: secrets
          persistentVolumeClaim:
            claimName: iis-secrets-pv
        - name: app-log
          emptyDir: {}
