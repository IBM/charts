apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.s4iScheduler.app_name }}-config
  labels:
    app: {{ .Values.s4iScheduler.app_name }}-config
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    app.kubernetes.io/name: {{ .Values.s4iScheduler.app_name }}-config
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
data:
  application.properties: |
    #disable scheduler security, as it's internal-only service
    security.enabled=false
    # backend hosts
    graph.properties.storage.hostname={{ .Values.cassandra.app_name }}
    graph.properties.index.search.solr.zookeeper-url={{ .Values.zookeeper.app_name }}:2181/solr
    # default ports
    server.port=8080
    management.server.port=8090
    # type-registry adress and context, warn / at the end is mandatory!
    typeregistry.baseuri=http://{{ .Values.s4iRegistry.app_name }}-internal:8080/ibm/iis/api/type-registry/v1/


    # set the level of scheduler parallelism
    scheduler.properties.org.quartz.threadPool.threadCount = 5
    # compute time
    # global properties for all features that do not define their own settings

    # default schedule (crontab format)
    # start scheduler every day at midnight
    compute.defaults.schedule=0 0 0 * * ?
    # use none to disable schedule based compute
    #compute.defaults.schedule=none
    # number of vertices to process at once
    compute.defaults.batchsize=1000
    # minimum time since last compute that triggers refresh (in hours)
    # by default do update 1 week old stats
    compute.defaults.timeDelta=168
    # -- feature specific configuration
    # freshness
    # update 1 day old stats
    compute.featuresMap.freshness.compute.timeDelta=24

    # usage
    # take into consideration only usage from last month (30 days)
    compute.featuresMap.usage.feature.score=match(__.as('v').choose(or(has('types','host'), has('types','database'), has('types','database_schema')), constant(0.018), constant(0.18)).as('k'), __.as('v').inE('uses').where(values('timestamp').is(gte(System.currentTimeMillis() - 30 * 86400000))).values('count').map{ Math.max(it.get(), 0) }.sum().as('x')).map { x = it.get().get('x') / 30.0; k = it.get().get('k'); 1.0 / (-k * x - 1.0) + 1.0 }
    # update 1 day old stats
    compute.featuresMap.usage.compute.timeDelta=24
    # usageCLeanup
    # delete usage edge older than half a year (182 days)
    compute.featuresMap.usageCleanup.feature.score=inE('uses').where(values('timestamp').is(lt(System.currentTimeMillis() - 182 * 86400000))).drop()
    # update 1 day old stats
    compute.featuresMap.usageCleanup.compute.timeDelta=24
    # other features (for reference)
    #compute.featuresMap.quality
    #compute.featuresMap.avgRating
    #compute.featuresMap.totalComments
    #compute.featuresMap.personalRating
    #compute.featuresMap.personalComments

  jvm.options: |
    -Xmx2G

    -XX:+PrintCommandLineFlags
    #warning: there HAVE to be a new line at the end
