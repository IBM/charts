kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Values.gremlinConsole.app_name }}
  labels:
     app: {{ .Values.gremlinConsole.app_name }}
     chart: "{{ .Chart.Name }}"
     release: "{{ .Release.Name }}"
     heritage: "{{ .Release.Service }}"
     app.kubernetes.io/name: {{ .Values.gremlinConsole.app_name }}
     helm.sh/chart: {{ .Chart.Name }}
     app.kubernetes.io/managed-by: {{ .Release.Service }}
     app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
     matchLabels:
       app: {{ .Values.gremlinConsole.app_name }}
  template:
    metadata:
      labels:
        app: {{ .Values.gremlinConsole.app_name }}
        chart: "{{ .Chart.Name }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
        app.kubernetes.io/name: {{ .Values.gremlinConsole.app_name }}
        helm.sh/chart: {{ .Chart.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        icpdsupport/app: "apis"
        {{ .Values.global.serviceabilityLabelName }}: {{ .Values.global.serviceabilityLabelValue }}
      annotations:
      {{- include "product-metering" . | indent 8 }}
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      affinity:
      {{- include "nodeaffinity" . | indent 6 }}
      containers:
        - name: {{ .Values.gremlinConsole.app_name }}
          image: {{ if .Values.global.dockerRegistryPrefix }}{{ trimSuffix "/" .Values.global.dockerRegistryPrefix }}/{{ end }}{{ .Values.gremlinConsole.repository }}:{{ .Values.gremlinConsole.tag }}
          env:
          - name: JAVA_OPTIONS
            value: "-Djava.util.prefs.systemRoot=/tmp/.java -Djava.util.prefs.userRoot=/tmp/.java/.userPrefs -Duser.home=/tmp"
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          resources:
            requests:
              memory: "{{ .Values.gremlinConsole.requests.memory }}"
              cpu: "{{ .Values.gremlinConsole.requests.cpu }}"
            limits:
              memory: "{{ .Values.gremlinConsole.limits.memory }}"
              cpu: "{{ .Values.gremlinConsole.limits.cpu }}"
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            readOnlyRootFilesystem: false
            capabilities:
              drop:
              - ALL
          ports:
            - containerPort: 8182
          volumeMounts:
          - name: props
            mountPath: /opt/gremlin-console/conf/storage-backend.properties
            subPath: storage-backend.properties
          livenessProbe:
            exec:
              command:
              - /bin/bash
              - -c
              - ls /opt/gremlin-console/*.groovy > /dev/null
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 300
      securityContext:
        runAsNonRoot: true
        {{- if .Values.gremlinConsole.runAsUser }}
        runAsUser: {{ .Values.gremlinConsole.runAsUser }}
        {{- end }}
        {{- if .Values.gremlinConsole.fsGroup }}
        fsGroup: {{ .Values.gremlinConsole.fsGroup }}
        {{- end }}
      {{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      {{- end }}
      {{- include "image-secret" . | indent 6 }}
      volumes:
        - name: props
          configMap:
            name: s4is-config
            defaultMode: 420
