apiVersion: apps/v1
kind: Deployment
metadata:
  name: gov-insights-service
  labels:
     app: {{ .Values.insightsService.app_name }}
     chart: "{{ .Chart.Name }}"
     release: "{{ .Release.Name }}"
     heritage: "{{ .Release.Service }}"
     app.kubernetes.io/name: {{ .Values.insightsService.app_name }}
     helm.sh/chart: {{ .Chart.Name }}
     app.kubernetes.io/managed-by: {{ .Release.Service }}
     app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.insightsService.app_name }}
  template:
    metadata:
      labels:
        app: {{ .Values.insightsService.app_name }}
        chart: "{{ .Chart.Name }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
        app.kubernetes.io/name: {{ .Values.insightsService.app_name }}
        helm.sh/chart: {{ .Chart.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        icpdsupport/app: "apis"
        {{ .Values.global.serviceabilityLabelName }}: {{ .Values.global.serviceabilityLabelValue }}
      annotations:
      {{- include "product-metering" . | indent 8 }}
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      affinity:
      {{- include "nodeaffinity" . | indent 6 }}
      hostname: {{ .Values.insightsService.app_name }}
      initContainers:
      - name: gov-insights-service-config-init
        image: {{ if .Values.global.dockerRegistryPrefix }}{{ trimSuffix "/" .Values.global.dockerRegistryPrefix }}/{{ end }}{{ .Values.insightsService.repository }}:{{ .Values.insightsService.tag }}
        imagePullPolicy: {{ .Values.global.image.pullPolicy }}
        command: [ "/bin/bash", "-c", "--" ]
        args: [ "cp -r /config/* /config-writable;"
              ]
        resources:
          requests:
            memory: "{{ .Values.insightsService.initcontainer.requests.memory }}"
            cpu: "{{ .Values.insightsService.initcontainer.requests.cpu }}"
          limits:
            memory: "{{ .Values.insightsService.initcontainer.limits.memory }}"
            cpu: "{{ .Values.insightsService.initcontainer.limits.cpu }}"
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: config-dir
          mountPath: /config-writable
      containers:
      - name: {{ .Values.insightsService.app_name }}
        image: {{ if .Values.global.dockerRegistryPrefix }}{{ trimSuffix "/" .Values.global.dockerRegistryPrefix }}/{{ end }}{{ .Values.insightsService.repository }}:{{ .Values.insightsService.tag }}
        imagePullPolicy: {{ .Values.global.image.pullPolicy }}
        env:
        - name: INSIGHTS_ZOOKEEPER_HOST
          value: "zookeeper:2181"
        - name: INSIGHTS_DB_TYPE
          value: db2
        - name: INSIGHTS_DB_HOST
          value: is-xmetadocker
        - name: INSIGHTS_DB_PORT
          value: "50000"
        - name: INSIGHTS_DB_USER
          value: xmeta
        - name: INSIGHTS_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: iis-usr-secrets
              key: xmeta_password
        - name: INSIGHTS_DB_NAME
          value: xmeta
        - name: IIS_BASE_URL
          value: https://is-servicesdocker:9446/ibm/iis
        - name: IIS_USERNAME_SECRET
          value: isadmin
        - name: IIS_PASSWORD_SECRET
          valueFrom:
            secretKeyRef:
              name: iis-usr-secrets
              key: isadmin_password
        ports:
        - containerPort: 9080
        volumeMounts:
        - name: config-dir
          mountPath: /config
        - name: logs-dir
          mountPath: /logs
        - name: wlp-output-dir
          mountPath: /opt/ibm/wlp/output
        - name: tmp-dir
          mountPath: /tmp
        - name: secrets
          mountPath: /config/secrets
          readOnly: true
        readinessProbe:
          httpGet:
            path: /v3/insights
            port: 9080
          initialDelaySeconds: 5
          timeoutSeconds: 15
          periodSeconds: 60
          successThreshold: 1
        livenessProbe:
          httpGet:
            path: /v3/insights/health
            port: 9080
          initialDelaySeconds: 60
          timeoutSeconds: 15
          periodSeconds: 120
          successThreshold: 1
        resources:
          requests:
            memory: "{{ .Values.insightsService.requests.memory }}"
            cpu: "{{ .Values.insightsService.requests.cpu }}"
          limits:
            memory: "{{ .Values.insightsService.limits.memory }}"
            cpu: "{{ .Values.insightsService.limits.cpu }}"
        securityContext:
          readOnlyRootFilesystem: true
          privileged: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          capabilities:
            drop:
            - ALL
      securityContext:
        runAsNonRoot: true
        {{- if .Values.insightsService.runAsUser }}
        runAsUser: {{ .Values.insightsService.runAsUser }}
        {{- end }}
        {{- if .Values.insightsService.fsGroup }}
        fsGroup: {{ .Values.insightsService.fsGroup }}
        {{- end }}
      {{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      {{- end }}
      {{- include "image-secret" . | indent 6 }}
      volumes:
      - name: config-dir
        emptyDir: {}
      - name: logs-dir
        emptyDir: {}
      - name: wlp-output-dir
        emptyDir: {}
      - name: tmp-dir
        emptyDir: {}
      - name: secrets
        persistentVolumeClaim:
           claimName: iis-secrets-pv
