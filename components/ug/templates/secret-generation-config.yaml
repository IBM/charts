kind: ConfigMap
apiVersion: v1
metadata:
  name: ug-secret-generation-config
  labels:
    app: {{ .Chart.Name }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    app.kubernetes.io/name: {{ .Chart.Name }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
  annotations:
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-101"
    "helm.sh/hook-delete-policy": before-hook-creation
data:
  init.sh: |        
    function generateRandomString() {
      length=${1}
      < /dev/urandom tr -dc A-Za-z0-9 | head -c${1:-${length}};echo;
    }

      
    # Check if odfFA secret exists
    odfFA_secret={{ .Values.odfFA.secret_name }};
    odfFA_exists=$(kubectl get secret $odfFA_secret);
    rc=$?
    if [[ rc -eq 1 ]]
    then
      #Generate Passwords
       krb5_sec={{ .Values.release.image.odfFastAnalyzer.krb5Conf }};
       QuickscanLogin_sec={{ .Values.release.image.odfFastAnalyzer.quickScanLonginConf }};
       example_keytab_sec={{ .Values.release.image.odfFastAnalyzer.exampleKeytab }};
            
       echo "generating $odfFA_secret secret ...";
       kubectl create secret generic $odfFA_secret --from-literal=krb5.conf="$krb5_sec" --from-literal=QuickscanLogin.conf="$QuickscanLogin_sec" --from-literal=example.keytab="$example_keytab_sec"; 
       kubectl label secret $odfFA_secret -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ .Values.odfFA.app_name }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
    else
       echo "$odfFA_secret secret already exists";
       kubectl annotate secret $odfFA_secret --overwrite=true -n $ICPD_CONTROLPLANE_NAMESPACE "helm.sh/resource-policy"="keep"
    fi

    # Check if fast-analyzer secret exists
    fastAnalyzer_exists=$(kubectl get secret fast-analyzer);
    rc=$?
    if [[ rc -eq 1 ]]
    then
      #Generate Passwords
      fastAnalyser_user={{ .Values.release.image.odfFastAnalyzer.fastAnalyzerUser }};
      fastAnalyzer_sec=$(generateRandomString 7);
     
      echo "generating fast-analyzer"
      kubectl create secret generic fast-analyzer --from-literal=fast-analyzer-user="$fastAnalyser_user" --from-literal=fast-analyzer-password="$fastAnalyzer_sec";
       kubectl label secret fast-analyzer -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app=fast-analyzer heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
    else
       echo "fast-analyzer secret already exists";
       kubectl annotate secret fast-analyzer --overwrite=true -n $ICPD_CONTROLPLANE_NAMESPACE "helm.sh/resource-policy"="keep"
    fi

    # Check if ia-lib-ext secret exists
    iaSecret={{ .Values.ia.secret_name }};
    iaSecret_exists=$(kubectl get secret $iaSecret);
    rc=$?
    if [[ rc -eq 1 ]]
    then
      echo "generating $iaSecret"
      kubectl create secret generic $iaSecret ;
      kubectl label secret $iaSecret -n $ICPD_CONTROLPLANE_NAMESPACE release={{ .Release.Name }} app={{ .Values.ia.app_name }} heritage={{ .Release.Service }} chart={{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }};
    else
       echo "$iaSecret secret already exists";
       kubectl annotate secret $iaSecret --overwrite=true -n $ICPD_CONTROLPLANE_NAMESPACE "helm.sh/resource-policy"="keep"
    fi

