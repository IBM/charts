{{- include "sch.config.init" (list . "dvapi.sch.chart.config.values") -}}
{{- $appName := .sch.chart.appName -}}
{{- $compName := .sch.chart.components.dvapi.name -}}
{{- $podName := .sch.chart.pods.dvapi.name -}}
{{- $ServiceInstanceID := .Values.zenServiceInstanceId | int64 -}}
{{- $ServiceInstanceUID := .Values.zenServiceInstanceUID | int64 -}}
apiVersion: apps/v1
kind: Deployment
metadata:
{{- if .Values.deployName }}
  name: {{ .Values.deployName }}
{{- else }}
  name: {{ include "sch.names.appName" (list .) }}-{{ $compName }}
{{- end }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName (dict "ServiceInstanceID" $ServiceInstanceID "app" $appName "icpdsupport/podSelector" $podName "icpdsupport/addOnId" $appName "icpdsupport/app" $compName "icpdsupport/serviceInstanceId" $ServiceInstanceID "icpdsupport/createdBy" $ServiceInstanceUID)) | indent 4 }}
spec:
  selector:
    matchLabels:
{{ include "sch.metadata.labels.standard" (list . $compName (dict "ServiceInstanceID" $ServiceInstanceID "app" $appName "icpdsupport/podSelector" $podName "icpdsupport/addOnId" $appName "icpdsupport/app" $compName "icpdsupport/serviceInstanceId" $ServiceInstanceID "icpdsupport/createdBy" $ServiceInstanceUID)) | indent 6 }}

  template:
    metadata:
      labels:
{{ include "sch.metadata.labels.standard" (list . $compName (dict "ServiceInstanceID" $ServiceInstanceID "app" $appName "icpdsupport/podSelector" $podName "icpdsupport/addOnId" $appName "icpdsupport/app" $compName "icpdsupport/serviceInstanceId" $ServiceInstanceID "icpdsupport/createdBy" $ServiceInstanceUID)) | indent 8 }}
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering nil nil nil) | indent 8 }}
    spec:
{{- include "sch.security.securityContext" (list . .sch.chart.security.defaultPodSecurityContext) | indent 6 }}
      affinity:
{{- include "sch.affinity.nodeAffinity" (list .) | indent 8 }}
      containers:
      {{- if .Values.deployName }}
      - name: {{ .Values.deployName }}
      {{- else }}
      - name: {{ include "sch.names.appName" (list .) }}-{{ $compName }}
      {{- end }}          
      {{- if .Values.image.arch }}
        image: "{{ .Values.docker_registry_prefix }}/{{ .Values.image.docker_image }}:{{ .Values.image.tag }}-{{ .Values.image.arch }}"
      {{- else }}
        image: "{{ .Values.docker_registry_prefix }}/{{ .Values.image.docker_image }}:{{ .Values.image.tag }}"
      {{- end }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: ZEN_SERVICE_INSTANCE_ID
          value: "{{ .Values.zenServiceInstanceId }}"
        - name: DV_DATABASE_SSL_ENABLE
          value: "{{ .Values.service.databaseSSLEnabled }}"
        - name: JWT
          value: "true"
        - name: DV_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
      {{- if .Values.dvapiLogLevel }}
        - name: DVAPI_LOG_LEVEL
          value: "{{ .Values.dvapiLogLevel }}"
      {{- end }}
        volumeMounts:
        - mountPath: /mnt/PV/versioned/uc_dsserver_shared
          name: dv-data
          subPath: uc_dsserver_shared
        - name: secret-volume
          readOnly: true
          mountPath: "/etc/secret-volume"
        - mountPath: /etc/internal-nginx-svc-tls
          name: internal-nginx-svc-tls
          readOnly: true
        - mountPath: /etc/wdp-service-id-secret-volume
          name: wdp-service-id-secret-volume
          readOnly: true
        - name: zen-service-broker-secret
          mountPath: /etc/zen-service-broker-secret
          readOnly: true
        ports:
          - name: dvapi-https
            containerPort: {{ .Values.service.port }}
            protocol: TCP
        livenessProbe:
          # exec:
          #   command:
          #   - cat
          #   - /dv-api/config/config.prod.yaml
          # tcpSocket:
          #   port: dvapi-https
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          httpGet:
            path: /docs
            port: dvapi-https
            scheme: HTTPS
        readinessProbe:
          # exec:
          #   command:
          #   - cat
          #   - /dv-api/config/config.prod.yaml
          # tcpSocket:
          #   port: dvapi-https
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 5
          httpGet:
            path: /docs
            port: dvapi-https
            scheme: HTTPS
{{- include "dv.helpers.resources" (list . .Values.resources.dvapi) | indent 8 }}  
{{- include "sch.security.securityContext" (list . .sch.chart.security.dvapiContainerSecurityContext) | indent 8 }}                
      volumes:
      - name: dv-data
        persistentVolumeClaim:
          {{- if .Values.persistence.existingClaimName }}
            claimName: {{ .Values.persistence.existingClaimName }}
          {{- else }}
            claimName: dv-pvc
          {{- end }}
            
      - name: secret-volume
        secret:
          defaultMode: 420
          secretName: dv-secret
      - name: wdp-service-id-secret-volume
        secret:
          defaultMode: 420
          secretName: wdp-service-id
          optional: true
      - name: internal-nginx-svc-tls
        secret:
          defaultMode: 420
          secretName: internal-nginx-svc-tls
      - name: zen-service-broker-secret
        secret:
          defaultMode: 420
          secretName: zen-service-broker-secret
