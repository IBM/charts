{{- if .Values.global.private }}
  {{- include "sch.config.init" (list . "discovery.mantle.sch.chart.config.values") -}}
  {{- $postgresqlSecret := include "discovery.crust.postgresql.secret" . -}}
  {{- $jobName := (include "sch.names.fullCompName" (list . .sch.chart.components.postgresConfigJob.name)) -}}

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $jobName }}
  labels:
{{ include "sch.metadata.labels.standard" (list . ) | indent 4 }}
spec:
  backoffLimit: 5
  activeDeadlineSeconds: {{ .Values.dlaas.configJob.timeoutSeconds }}
  template:
    metadata:
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 8 }}
      labels:
{{ include "sch.metadata.labels.standard" (list . ) | indent 8 }}
      name: secret-gen
    spec:
      serviceAccountName: {{ .Values.global.privilegedServiceAccount.name }}
      affinity:
{{- include "sch.affinity.nodeAffinity" (list . ) | indent 8 }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedPodSecurityContext) | indent 6 }}
      imagePullSecrets:
      - name:  {{ .Values.global.image.pullSecret }}
      containers:
      - name: {{ include "sch.names.fullCompName" (list . "postgres-db-init") }}
        resources:
          limits:
            cpu: {{ .Values.dlaas.configJob.resources.limits.cpu }}
            memory: {{ .Values.dlaas.configJob.resources.limits.memory }}
          requests:
            cpu: {{ .Values.dlaas.configJob.resources.requests.cpu }}
            memory: {{ .Values.dlaas.configJob.resources.requests.memory }}
        image: {{ .Values.global.dockerRegistryPrefix }}/
          {{- .Values.dlaas.configJob.image.name }}:
          {{- .Values.dlaas.configJob.image.tag }}
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedSecurityContext) | indent 8 }}
        command:
          - "/bin/bash"
          - "-ec"
          - |
            echo "Creating database dlaas..."
            psql -U ${PGUSER} -tc "SELECT 1 FROM pg_database WHERE datname = 'dlaas'" \
               | grep -q 1 \
              || psql -U ${PGUSER} -c "CREATE DATABASE dlaas OWNER dadmin"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $postgresqlSecret }}
              key: pg_su_password
        - name: PGUSER
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.postgresql.configmap" . }}
              key: username
        - name: PGHOST
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.postgresql.configmap" . }}
              key: host
        - name: PGDATABASE
          value: postgres
      initContainers:
      - name: {{ include "sch.names.fullCompName" (list . "postgres-db-check") }}
        resources:
          limits:
            cpu: {{ .Values.dlaas.configJob.resources.limits.cpu }}
            memory: {{ .Values.dlaas.configJob.resources.limits.memory }}
          requests:
            cpu: {{ .Values.dlaas.configJob.resources.requests.cpu }}
            memory: {{ .Values.dlaas.configJob.resources.requests.memory }}
        image: {{ .Values.global.dockerRegistryPrefix }}/
          {{- .Values.dlaas.configJob.image.name }}:
          {{- .Values.dlaas.configJob.image.tag }}
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedSecurityContext) | indent 8 }}
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ $postgresqlSecret }}
              key: pg_su_password
        - name: PGUSER
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.postgresql.configmap" . }}
              key: username
        - name: PGHOST
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.postgresql.configmap" . }}
              key: host
        - name: PGPORT
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.postgresql.configmap" . }}
              key: port
        - name: PGDATABASE
          value: postgres
        command:
        - '/bin/bash'
        - '-c'
        - |
          while true; do
            sleep 2
            if pg_isready -h ${PGHOST} -p ${PGPORT}; then
              exit 0
            fi
          done
          exit 1

      restartPolicy: Never
{{- end }}
