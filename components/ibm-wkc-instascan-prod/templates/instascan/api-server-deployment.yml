apiVersion: apps/v1
kind: Deployment
metadata:
  name: instascan-api-server
  annotations:
    prod.name: {{ .Values.prod.name | quote }}
    prod.version: {{ .Values.prod.version | quote }}
  creationTimestamp: null
  labels:
    io.kompose.service: instascan-api-server
{{include "instascan.labels" . | indent 4 }}
    release: "{{ .Release.Name }}"
spec:
  replicas: 1  # ATTENTION: do not change because this service persists state
  selector:
    matchLabels:
      app: {{ .Values.global.appname }}       
      release: {{ .Release.Name | quote }}
      component: instascan-api-server
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: {{ .Values.global.appname }}      
        release: {{ .Release.Name | quote }}
        component: instascan-api-server
{{include "instascan.labels" . | indent 8 }}
      annotations:
        {{- if .Values.global.podAnnotations }}
{{ toYaml .Values.global.podAnnotations | trim | indent 8 }}
        {{- end }}    
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      serviceAccountName: {{ .Values.global.serviceAccountName }}
      affinity:
{{include "instascan.nodeAffinity" . | indent 8 }}
      {{- if eq .Values.apiServer.securityContext.enabled true }}
      securityContext:
        fsGroup: {{ .Values.apiServer.securityContext.fsGroup }}
      {{- end }}
      volumes:
      - name: internal-tls
        secret:
          defaultMode: 420
          items:
          - key: tls.crt
            path: tls.crt
          - key: tls.key
            path: tls.key
          - key: certificate.pem
            path: certificate.pem
          secretName: {{ .Values.vault.secret }}
      - name: internal-nginx-svc-tls
        secret:
          defaultMode: 400
          items:
          - key: certificate.pem
            path: certificate.pem
          secretName: internal-nginx-svc-tls
      {{- if not .Values.ibmPostgres.enabled }}
      - name: pgsql
        secret:
          defaultMode: 420
          items:
          - key: pgpass
            path: .pgpass 
          secretName: {{ .Values.postgres.secret }}
      {{- end }}
      - name: api-server-files
        persistentVolumeClaim:
          claimName: pvc-instascan-api-server-files
      - name: api-server-log-config
        configMap:
          name: instascan-api-server-configmap
      {{- if .Values.ibmPostgres.enabled }}
      - name: postgres-tls
        secret:
          secretName: {{ .Values.ibmPostgres.tlsSecret }}
          items:
          - key: "tls.crt"
            path: "tls.crt"
      {{- end }}
      {{- if .Values.ibmPostgres.enabled }}
      initContainers:
      - name: instascan-api-server-initdb
        image: {{ if .Values.global.dockerRegistryPrefix }}{{ trimSuffix "/" .Values.global.dockerRegistryPrefix }}{{ end }}/{{ .Values.ibmPostgres.image.name }}:{{ .Values.ibmPostgres.image.tag }}
        imagePullPolicy: IfNotPresent
        securityContext:
{{include "nonroot.containers.securityContext" . | indent 10 }}
          runAsUser: {{ .Values.global.nonroot.uid }}
        resources:
          requests:
            memory: 128Mi
            cpu: 10m
          limits:
            memory: 128Mi
            cpu: 50m
        volumeMounts:
        - mountPath: /opt/ibm/postgres
          name: postgres-tls
        env:
        - name: PGHOST
          value: {{ .Values.ibmPostgres.host }}
        - name: PGPORT
          value: {{ .Values.ibmPostgres.port | quote }}
        - name: PGDATABASE
          value: "postgres"
        - name: PGUSER
          value: {{ .Values.ibmPostgres.user }}
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              key: pg_su_password
              name: {{ .Values.ibmPostgres.authSecret }}
        - name: PGSSLROOTCERT
          value: "/opt/ibm/postgres/tls.crt"
        command:
        - "/bin/bash"
        - -c
        - |
          for i in $(seq 12)
          do
            pg_isready && break
            sleep 10
          done
          pg_isready || exit 1
          if [ -z "$(psql -l | awk '$1 ~ /instascan/')" ]
          then
            psql -a -c 'CREATE DATABASE instascan' || exit 1;
          fi
          if [ -z "$(psql -l | awk '$1 ~ /audit/')" ]
          then
            psql -a -c 'CREATE DATABASE audit' || exit 1;
          fi
      {{- end }}
      containers:
      - name: instascan-api-server
        {{- if .Values.global.dockerRegistryPrefix }}
        image: "{{ .Values.global.dockerRegistryPrefix }}/{{ .Values.apiServer.image.name }}:{{ .Values.instascan.image.tag }}"
        {{- else if .Values.instascan.image.repository }}
        image: "{{ .Values.instascan.image.repository }}/{{ .Values.apiServer.image.name }}:{{ .Values.instascan.image.tag }}"
        {{- else }}
        image: "{{ .Values.apiServer.image.name }}:{{ .Values.instascan.image.tag }}"
        {{- end }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        securityContext:
{{include "nonroot.containers.securityContext" . | indent 10 }}
          runAsUser: {{ .Values.global.nonroot.uid }}
        readinessProbe:
          {{- if eq .Values.isProduction true }}
          exec:
            command: ["/bin/curl", "--key", "/etc/internal-tls/tls.key", "--cert", "/etc/internal-tls/tls.crt", "--cacert", "/etc/internal-tls/certificate.pem", "https://localhost:5000/instascan/v1/ping"]
          {{- else }}
          exec:
            command: {{ .Values.testProbe.command }}
          {{- end }}
          initialDelaySeconds: 30
          failureThreshold: 20
          periodSeconds: 5
          timeoutSeconds: 5
        livenessProbe:
          {{- if eq .Values.isProduction true }}
          exec:
            command: ["/bin/curl", "--key", "/etc/internal-tls/tls.key", "--cert", "/etc/internal-tls/tls.crt", "--cacert", "/etc/internal-tls/certificate.pem", "https://localhost:5000/instascan/v1/ping"]
          {{- else }}
          exec:
            command: {{ .Values.testProbe.command }}
          {{- end }}
          initialDelaySeconds: 30
          failureThreshold: 3
          periodSeconds: 60
          timeoutSeconds: 30
        ports:
        - containerPort: 5000
        resources:
          {{- if eq .Values.isSingleNode true }}
{{ toYaml .Values.singleNode.resources | trim | indent 10 }}
          {{- else }}
{{ toYaml .Values.apiServer.resources | trim | indent 10 }}
          {{- end }}        
        volumeMounts:
        - mountPath: /etc/internal-tls
          name: internal-tls
        - mountPath: /etc/internal-nginx-svc-tls
          name: internal-nginx-svc-tls
        - mountPath: /deepfs
          name: api-server-files
          #subPath: api-server/files
        {{- if not .Values.ibmPostgres.enabled }}
        - mountPath: /etc/pgsql
          name: pgsql
        {{- end }}
        - mountPath: /instaScan/config/logging.yaml
          name: api-server-log-config
          subPath: logging.yaml
        env:
        - name: INSTASCAN_INTERNAL_TLS_CERT_FILE
          value: /etc/internal-tls/tls.crt
        - name: INSTASCAN_INTERNAL_TLS_KEY_FILE
          value: /etc/internal-tls/tls.key
        - name: INSTASCAN_INTERNAL_TLS_CAFILE
          value: /etc/internal-tls/certificate.pem
        - name: INSTASCAN_INTERNAL_NGINX_SVC_TLS_CAFILE
          value: /etc/internal-nginx-svc-tls/certificate.pem
        - name: DS_MANAGER_BASEURL
          value: 'https://instascan-ds-manager:5001'
        - name: AP_SERVICE_BASEURL
          value: 'https://ap-service:8443'
        - name: DOC_PREVIEW_SERVICE_BASEURL
          value: 'https://doc-preview-service:8443'
        {{- if .Values.ibmPostgres.enabled }}
        - name: IBM_POSTGRESQL_HOST
          value: {{ .Values.ibmPostgres.host }}
        - name: IBM_POSTGRESQL_PORT
          value: {{ .Values.ibmPostgres.port | quote }}
        - name: IBM_POSTGRESQL_USER
          value: {{ .Values.ibmPostgres.user }}
        - name: IBM_POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              key: pg_su_password
              name: {{ .Values.ibmPostgres.authSecret }}
        {{- end }}
        envFrom:
        - configMapRef:
            name: instascan-api-server-configmap
      restartPolicy: Always
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
      {{- end }}
status: {}

