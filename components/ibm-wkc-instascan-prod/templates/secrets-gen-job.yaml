apiVersion: batch/v1
kind: Job
metadata:
  name: wkc-instascan-secrets-gen
  labels:
{{include "instascan.labels" . | indent 4 }}
    release: "{{ .Release.Name }}"
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 300
  template:
    metadata:
      labels:
        app: {{ .Values.global.appname }}      
        release: {{ .Release.Name | quote }}
        component: ap-secrets-gen
{{include "instascan.labels" . | indent 8 }}
      annotations:
        {{- if .Values.global.podAnnotations }}
{{ toYaml .Values.global.podAnnotations | trim | indent 8 }}
        {{- end }}
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      serviceAccountName: {{ .Values.global.serviceAccountName }}
      affinity:
{{include "instascan.nodeAffinity" . | indent 8 }}
      securityContext:
        fsGroup: 0
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      containers:
      - name: ap-secrets-gen
        image: {{ if .Values.global.dockerRegistryPrefix }}{{ trimSuffix "/" .Values.global.dockerRegistryPrefix }}{{ end }}/{{ .Values.certGen.image.name }}:{{ .Values.certGen.image.tag }}
        imagePullPolicy: IfNotPresent
        securityContext:
{{include "nonroot.containers.securityContext" . | indent 10 }}
          runAsUser: {{ .Values.global.nonroot.uid }}
        command:
        - "/bin/bash"
        - -c
        - |
          set -e
          
{{- if not .Values.ibmPostgres.enabled }}
          SECRETNAME={{ .Values.postgres.secret | quote }}
          if kubectl get secret $SECRETNAME -n {{ .Release.Namespace }} ; then
            echo "Found existing secret $SECRETNAME, skipping secret creation..."
          else
            echo "Creating $SECRETNAME ..."
            POSTGRESS_PASS1=$(openssl rand -base64 24 | tr -d '\n' | base64 | tr -d '\n')
            POSTGRESS_PASS2=$(openssl rand -base64 24 | tr -d '\n' | base64 | tr -d '\n')
            POSTGRESS_PASS3=$(openssl rand -base64 24 | tr -d '\n' | base64 | tr -d '\n')
            echo "instascan-postgres:5432:instascan:instascan:$POSTGRESS_PASS1" > .pgpass
            echo "instascan-postgres:5432:audit:audit:$POSTGRESS_PASS2" >> .pgpass
            echo "instascan-postgres:5432:vault:vaultservice:$POSTGRESS_PASS3" >> .pgpass
            kubectl create secret generic $SECRETNAME -n {{ .Release.Namespace }} --from-file=pgpass=.pgpass
            rm -f .pgpass
          fi
{{- end }}

          SECRETNAME={{ .Values.ap.secret.keystore.name | quote }}
          if kubectl get secret $SECRETNAME -n {{ .Release.Namespace }} ; then
            echo "Found existing secret $SECRETNAME, skipping secret creation..."
          else
          echo "Creating $SECRETNAME ..."
          AP_KEYSTORE_PASS=$(openssl rand -base64 20 | tr -d '\n' | base64 | tr -d '\n')
          cat <<EOF | kubectl apply -n {{ .Release.Namespace }} -f -
          apiVersion: v1
          kind: Secret
          metadata:
            labels:
{{include "instascan.labels" . | indent 14 }}
              release: "{{ .Release.Name }}"
            name: $SECRETNAME
          data:
            password: $AP_KEYSTORE_PASS
          EOF
          fi
        resources:
          requests:
            memory: 100Mi
            cpu: 100m
          limits:
            memory: 200Mi
            cpu: 200m
      restartPolicy: Never
