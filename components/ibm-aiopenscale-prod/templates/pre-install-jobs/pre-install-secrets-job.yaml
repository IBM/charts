{{ $namePrefix := "preinstall-job" -}}
{{- include "sch.config.init" (list . "sch.chart.config.values" ) -}}
{{ $name := include "sch.names.fullCompName" (list . $namePrefix ) -}}
{{ $compName := "preinstall-job" -}}
{{ $labels := include "sch.metadata.labels.standard" (list . $compName) -}}
{{ $serviceAccount := "preinstall-aios" -}}
{{ $serviceAccountName := include "aios.serviceAccountNameEditor" (list . $serviceAccount) -}}
{{ $nonRootUser := include "aios.nonroot.uid" (list .) -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $name | quote }}
  labels:
{{ $labels | indent 4 }}
{{- include "aios.labels" . | indent 2 }}
  annotations:
{{- include "aios.metering.nocharge" . | indent 2 }}
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation
    "helm.sh/hook-weight": "3"
spec:
  activeDeadlineSeconds: 300
  template:
    metadata:
      name: {{ $name | quote }}
      labels:
{{ $labels | indent 8 }}
{{- include "aios.pod.labels" . | indent 6 }}
      annotations:
{{- include "aios.metering.nocharge" . | indent 6 }}
    spec:
      serviceAccountName: {{ $serviceAccountName | quote }}
      {{- if .Values.imagePullSecrets }}
      {{- if ne .Values.imagePullSecrets "default" }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      {{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ $nonRootUser }}
      affinity:
      {{- include "aios.nodeAffinity" . | indent 8 }}
      restartPolicy: Never
      volumes:
      - name: internal-nginx-svc-tls
        secret:
          defaultMode: 420
          secretName: internal-nginx-svc-tls
      containers:
        - name: "aios-kubectl"
          image: {{ include "aios.image" (list . .Values.kubectl.image.name .Values.kubectl.image.tag) | quote }}
          resources:
{{ toYaml .Values.ephemeralPod.resources | indent 12 }}
          imagePullPolicy: {{ default "IfNotPresent" .Values.imagePullPolicy | quote }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: {{ $nonRootUser }}
            capabilities:
              drop:
              - ALL
          volumeMounts:
          - name: internal-nginx-svc-tls
            mountPath: /home/aios/nginx-cert.pem
            subPath: certificate.pem
          - name: internal-nginx-svc-tls
            mountPath: /home/aios/nginx-tls.crt
            subPath: tls.crt
          command: 
            - "/bin/sh"
            - "-ec"
            - |
            
              secret_exists() {
                  set +e
                  kubectl -n {{ .Release.Namespace }} get secret $1 > /dev/null 2>&1
                  echo $?
                  set -e
              } 
              cd /tmp
              encryptionSecretFound=$(secret_exists '{{ include "aios.getEncryptionSecretName" (list .) }}')
              if [ $encryptionSecretFound -ne 0 ]
              then
                  # needs to be b64 encoded twice to use as b64 encoded value
                  ENCRYPTION_KEY=$(dd if=/dev/urandom bs=1 count=32 2>/dev/null | base64 | tr -d '\n' | base64 | tr -d '\n')
                  echo "ENCRYPTION_KEY: ${ENCRYPTION_KEY}"
                  cat <<EOF | kubectl -n {{ .Release.Namespace }} create -f - 
              apiVersion: v1 
              data: 
                {{ include "aios.getEncryptionSecretKeyName" . }}: ${ENCRYPTION_KEY}
              kind: Secret
              type: Opaque
              metadata:
                name: {{ include "aios.getEncryptionSecretName" (list .) }}
                namespace: {{ .Release.Namespace }}
                labels:
                  app: {{ template "fullname" . }}
                  chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
                  release: "{{ .Release.Name }}"
                  heritage: "{{ .Release.Service }}"
                  {{- include "aios.labels" . | indent 16 }}
              EOF
              else
                  echo "Secret {{ include "aios.getEncryptionSecretName" (list .) }} already exists."
              fi
              
              {{- $cn := include "sch.names.fullCompName" (list . "etcd" ) }}
              {{- $altName1 :=  printf "%s.%s.svc.%s" $cn .Release.Namespace .Values.clusterDomain }}
              {{- $altName2 :=  printf "*.%s" $altName1 }}
              
              etcdSecretFound=$(secret_exists '{{ template "fullname" . }}-etcd-secrets')
              
              if [ $etcdSecretFound -ne 0 ]
              then
                  echo '{"CN":"AI OpenScale ICP Content CA","key":{"algo":"rsa","size":2048}, "signing":{"default":{"expiry":"87600h","usages":["signing","key encipherment","server auth","client auth"]}}}' | cfssl gencert -initca - | cfssljson -bare ca -
                  echo '{"signing":{"default":{"expiry":"87600h","usages":["signing","key encipherment","server auth","client auth"]}}}' > ca-config.json
                  
                  export ADDRESS={{ $cn }},{{ $altName1 }},{{ $altName2 }},localhost,127.0.0.1
                  export NAME={{ $cn }}
                  echo '{"CN":"'$NAME'","hosts":[""],"key":{"algo":"rsa","size":2048}}' | cfssl gencert -config=ca-config.json -ca=ca.pem -ca-key=ca-key.pem -hostname="$ADDRESS" - | cfssljson -bare $NAME
                  ls -al
                  caCert=`cat ca.pem | base64 | tr -d '\n'`
                  key=`cat ${NAME}-key.pem | base64 | tr -d '\n'`
                  crt=`cat ${NAME}.pem | base64 | tr -d '\n'`
                  caCertB64=`cat ca.pem | base64 | tr -d '\n' | base64 | tr -d '\n'`
                  etcdPassword=`cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 | tr -d '\n' | base64 | tr -d '\n'`
                  cat <<EOF1 | kubectl -n {{ .Release.Namespace }} create -f - 
              apiVersion: v1 
              data: 
                etcd-root-password: ${etcdPassword}
                server.cacrt.base64: ${caCertB64}
                server.cacrt: ${caCert}
                server.crt: ${crt}
                server.key: ${key}
              kind: Secret
              type: Opaque
              metadata:
                name: {{ template "fullname" . }}-etcd-secrets
                labels:
                  app: {{ template "fullname" . }}
                  chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
                  release: "{{ .Release.Name }}"
                  heritage: "{{ .Release.Service }}"
                  component: etcd
                  {{- include "aios.labels" . | indent 16 }}
                namespace: {{ .Release.Namespace }}
              EOF1
              fi

              redisSecretFound=$(secret_exists '{{ template "fullname" . }}-redis-secrets')
              if [ $redisSecretFound -ne 0 ]
              then
                  redisPassword=`cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1 | tr -d '\n' | base64 | tr -d '\n'`
                  cat <<EOF2 | kubectl -n {{ .Release.Namespace }} create -f - 
              apiVersion: v1 
              kind: Secret
              type: Opaque
              metadata:
                name: "{{ template "fullname" . }}-redis-secrets"
                labels:
                    app: {{ template "fullname" . }}
                    chart: {{ template "chart.name" . }}
                    release: "{{ .Release.Name }}"
                    heritage: "{{ .Release.Service }}"
                    {{- include "aios.labels" . | indent 18 }}
              type: Opaque
              data:
                auth: ${redisPassword}
              EOF2
              fi
              
              serviceSecretFound=$(secret_exists '{{ template "fullname" . }}-service-secrets')
              if [ $serviceSecretFound -ne 0 ]
              then
                  route=`kubectl -n {{ .Release.Namespace }} get route |  grep ibm-nginx-svc | awk '{ print $2 }' | tr -d '\n' | base64 | tr -d '\n'`
                  servicePassword=`cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 128 | head -n 1 | sed -e 's/^/aios-/' | tr -d '\n' | base64 | tr -d '\n'`
                  cat <<EOF3 | kubectl -n {{ .Release.Namespace }} create -f - 
              apiVersion: v1
              kind: Secret
              metadata:
                name: "{{ template "fullname" . }}-service-secrets"
                labels:
                  app: {{ template "fullname" . }}
                  chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
                  release: "{{ .Release.Name }}"
                  heritage: "{{ .Release.Service }}"
                  {{- include "aios.labels" . | indent 16 }}
              type: Opaque
              data: 
                aios-service-credential: ${servicePassword}
                cpd-external-route: ${route}
              EOF3
              fi
              kafkaSecretFound=$(secret_exists '{{ template "fullname" . }}-kafka-secrets')
              if [ $kafkaSecretFound -ne 0 ]
              then
              openssl genrsa -out rootCA.key 4096
              openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 3650 -out ca-cert -subj "/C=US/ST=California/L=San Jose/O=IBM/OU=Watson"
              # create client and server trustore
              keytool -keystore kafka.server.truststore.jks -alias CARoot -import -file ca-cert -noprompt -storepass password
              keytool -keystore kafka.client.truststore.jks -alias CARoot -import -file ca-cert -noprompt -storepass password
              # create keystore
              keytool -genkey -noprompt -alias localhost -dname "CN=kafka.aiopenscale, OU=Watson, O=IBM, L=SJ, S=CA, C=US" -keystore kafka.server.keystore.jks -storepass password -keypass password
              
              #export cert from keystore
              keytool -keystore kafka.server.keystore.jks -alias localhost -certreq -file cert-file -noprompt -storepass password -keypass password
              #sign cert with CA
              openssl x509 -req -CA ca-cert -CAkey rootCA.key -in cert-file -out cert-signed -days 3650 -CAcreateserial -passin pass:password
              #import signed cert and CA to keystore
              keytool -keystore kafka.server.keystore.jks -alias CARoot -import -file ca-cert -noprompt -storepass password
              keytool -keystore kafka.server.keystore.jks -alias localhost -import -file cert-signed -noprompt -storepass password
              
              caCert=`cat ca-cert | base64 | tr -d '\n'`
              keystore=`cat kafka.server.keystore.jks | base64 | tr -d '\n'`
              serverTruststore=`cat kafka.server.truststore.jks | base64 | tr -d '\n'`
              clientTruststore=`cat kafka.client.truststore.jks | base64 | tr -d '\n'`
              #same password for truststore
              servicePassword=`printf "%s" "password" | base64 | tr -d '\n'`
              {{- $kafkaServiceName := printf "%s-%s-kafka-headless.%s.svc.%s" .Release.Name .Values.nameOverride .Release.Namespace .Values.clusterDomain }}
              {{- $kafkaName := printf "%s-%s-kafka" .Release.Name .Values.nameOverride }}
              {{- $replicaCount := int .Values.kafka.replicas }}
              brokers="{{range $i, $e := until $replicaCount }}{{ $kafkaName }}-{{ $e }}.{{ $kafkaServiceName }}:9092,{{ end }}"
              #remove trailing comma
              server=`printf "%s" "${brokers::-1}" | base64 | tr -d '\n'`
              user=`printf "%s" "user" | base64 | tr -d '\n'`
              #password=`cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1 | tr -d '\n' | base64 | tr -d '\n'`
              password=`printf "%s" "user" | base64 | tr -d '\n'`
              # use same field names as aios-eventstream-secret
              cat <<EOF4 | kubectl -n {{ .Release.Namespace }} create -f - 
              apiVersion: v1
              kind: Secret
              metadata:
                name: "{{ template "fullname" . }}-kafka-secrets"
                labels:
                  app: {{ template "fullname" . }}
                  chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
                  release: "{{ .Release.Name }}"
                  heritage: "{{ .Release.Service }}"
                  {{- include "aios.labels" . | indent 16 }}
              type: Opaque
              data: 
                es-api-key: ${password}
                es-bootstrap-server: ${server}
                es-truststore-password: ${servicePassword}
                es-username: ${user}
                es-cert.pem: ${caCert}
                es-cert.jks: ${clientTruststore}
                kafka.server.keystore.jks: ${keystore}
                kafka.server.truststore.jks: ${serverTruststore}
              EOF4
              fi
              nginxCertFound=$(secret_exists '{{ template "fullname" . }}-nginx-secrets')
              if [ $nginxCertFound -ne 0 ]
              then
                 cn={{ include "aios.fqdn2" (list . "nginx-internal") | quote }}
                 openssl req -new -newkey rsa:4096 -days 3650 -nodes -x509 -subj "/C=US/ST=California/L=San Jose/O=IBM/OU=Watson/CN=${cn}" -keyout nginx.key -out nginx.crt
                 nginxKey=`cat nginx.key | base64 | tr -d '\n'`
                 nginxCrt=`cat nginx.crt | base64 | tr -d '\n'`
                 #cp /opt/ibm/java/jre/lib/security/cacerts /tmp/
                 cp /opt/ibm/java/jre/lib/security/cacerts /tmp/
                 cp /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem /tmp/
                 chmod 666 /tmp/cacerts /tmp/tls-ca-bundle.pem
                 keytool -import -trustcacerts -keystore /tmp/cacerts -storepass changeit -alias Root -import -file nginx.crt -noprompt
                 keytool -import -trustcacerts -keystore /tmp/cacerts -storepass changeit -alias nginx -import -file /home/aios/nginx-tls.crt -noprompt
                 openssl x509 -in nginx.crt -out nginx.pem -outform PEM
                 echo "#{{ template "fullname" . }}-nginx-internal" >> /tmp/tls-ca-bundle.pem
                 cat nginx.pem >> /tmp/tls-ca-bundle.pem
                 echo "#ibm-nginx-svc" >> /tmp/tls-ca-bundle.pem
                 cat /home/aios/nginx-cert.pem >> /tmp/tls-ca-bundle.pem
                 javaCrt=`cat /tmp/cacerts | base64 | tr -d '\n'`
                 pemCrt=`cat /tmp/tls-ca-bundle.pem | base64 | tr -d '\n'`
                 cat <<EOF5 | kubectl -n {{ .Release.Namespace }} create -f - 
              apiVersion: v1
              kind: Secret
              metadata:
                name: "{{ template "fullname" . }}-nginx-secrets"
                labels:
                  app: {{ template "fullname" . }}
                  chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
                  release: "{{ .Release.Name }}"
                  heritage: "{{ .Release.Service }}"
                  {{- include "aios.labels" . | indent 16 }}
              type: Opaque
              data: 
                nginx-ca.key: ${nginxKey}
                nginx-ca.crt: ${nginxCrt}
                java-cacerts: ${javaCrt}
                ca-pem: ${pemCrt}
              EOF5
              fi