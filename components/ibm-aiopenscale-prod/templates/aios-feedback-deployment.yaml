{{ $namePrefix := "feedback" -}}
{{ $compName := "aios-feedback" -}}
{{- include "sch.config.init" (list . "sch.chart.config.values" ) -}}
{{ $name := include "sch.names.fullCompName" (list . $namePrefix ) -}}
{{ $labels := include "sch.metadata.labels.standard" (list . $compName (dict "serviceSelector" $namePrefix)) -}}
{{- $serviceAccount := include "aios.serviceAccountName" (list . "serviceAccount" ) }}
{{ $nonRootUser := include "aios.nonroot.uid" (list .) -}}
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ $name | quote }}
  labels:
{{ $labels | indent 4 }}
{{- include "aios.labels" . | indent 2 }}
spec:
  progressDeadlineSeconds: {{ .Values.progressDeadline.seconds }}
  strategy:
    rollingUpdate:
      maxUnavailable: 0
    type: RollingUpdate
  replicas: {{ .Values.feedback.replicas }}
  selector:
    matchLabels:
      release: {{ .Release.Name | quote }}
      serviceSelector: {{ $namePrefix | quote }}
  template:
    metadata:
      labels:
{{ $labels | indent 8 }}
{{- include "aios.pod.labels" . | indent 6 }}
      annotations:
      {{- include "aios.metering" . | indent 6 }}
      {{- include "aios.cpdbr.annotations" . | indent 6 }}
    spec:
      terminationGracePeriodSeconds: 0
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ $nonRootUser }}
{{ include "aios.fsGroupGid" (list . ) | indent 8 }}
      serviceAccountName: {{ $serviceAccount }}
      affinity:
      {{- include "aios.nodeAffinity" . | indent 6 }}
      # to prevent multiple replicas from deploying on the same node
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "release"
                      operator: In
                      values:
                        -  {{ .Release.Name | quote }}
                    - key: "serviceSelector"
                      operator: In
                      values:
                        -  {{ $namePrefix | quote }}
                topologyKey: {{ .Values.global.topologyKey }}
      {{- if .Values.imagePullSecrets }}
      {{- if ne .Values.imagePullSecrets "default" }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      {{- end }}
      volumes:
      {{ if .Values.etcd.tls.enabled -}}
      - name: tls
        secret:
          secretName: {{ template "fullname" . }}-etcd-secrets
      {{ end }}
      - name: nginx-tls
        secret:
          secretName: {{ template "fullname" . }}-nginx-secrets
      initContainers:
        - name: ready-check
          image: {{ include "aios.image" (list . .Values.etcd.image.name .Values.etcd.image.tag) | quote }}
          imagePullPolicy: {{ default "IfNotPresent" .Values.imagePullPolicy | quote }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: {{ $nonRootUser }}
            capabilities:
              drop:
              - ALL
          {{ if .Values.etcd.tls.enabled -}}
          resources:
{{ toYaml .Values.readyCheckContainer.resources | indent 12 }}
          volumeMounts:
          - name: tls
            mountPath: /var/etcd/certs/
            readOnly: true
          {{ end }}
          command: ['sh', '-c',
                'while true; do echo "Waiting for Ectd service to come up...";
                 etcdctl --cert="/var/etcd/certs/server.crt" --key="/var/etcd/certs/server.key" --cacert="/var/etcd/certs/server.cacrt" --insecure-skip-tls-verify=true --user root:$ETCD_PASS --endpoints={{ template "fullname" . }}-etcd:2379 endpoint health && break;
                 sleep 5; done; echo "Etcd service available!";
                 while true; do echo "Checking availability of ICP4D JWT public key...";
                 curl -ko /dev/null $AIOS_GATEWAY_URL/auth/jwtpublic && break;
                 sleep 5; done;
                 echo "ICP4D JWT public key available.";
                 while true; do echo "Waiting for ML-Gateway service to come up...";
                 curl -ko /dev/null $AIOS_GATEWAY_URL/v2/ml_deployments/version && break;
                 sleep 5; done;
                 echo "ML-Gateway service available.";
                 echo "Starting main container."']
          env:
            - name: ETCDCTL_API
              value: "3"
            - name: "ETCD_PASS"
              valueFrom:
                secretKeyRef:
                  name: {{ template "fullname" . }}-etcd-secrets
                  key: etcd-root-password
            - name: "AIOS_GATEWAY_URL"
              value: "https://{{ include "aios.fqdn2" (list . "nginx-internal") }}"
      containers:
        - name: aios-feedback
          image: {{ include "aios.image" (list . .Values.feedback.image.name .Values.feedback.image.tag) | quote }}
          imagePullPolicy: {{ default "IfNotPresent" .Values.imagePullPolicy | quote }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: {{ $nonRootUser }}
            capabilities:
              drop:
              - ALL
          resources:
{{ toYaml .Values.feedback.resources | indent 12 }}
          ports:
            - containerPort: 9443
              protocol: TCP
          livenessProbe:
            {{ include "aios.common.liveness.options" . | indent 10 }}
            httpGet:
              path: /v1/aios_feedback_service/heartbeat
              port: 9443
              scheme: HTTPS
          readinessProbe:
            {{ include "aios.common.readiness.options" . | indent 10 }}
            httpGet:
              path: /v1/aios_feedback_service/heartbeat
              port: 9443
              scheme: HTTPS
          volumeMounts:
          - name: nginx-tls
            mountPath: "/opt/ibm/java/jre/lib/security/cacerts"
            subPath: "java-cacerts"
          - name: nginx-tls
            mountPath: "/etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem"
            subPath: "ca-pem"
          env:
            - name: AIOS_GATEWAY_URL
              value: "https://{{ include "aios.fqdn2" (list . "nginx-internal") }}"
            - name: BM_APP_VERSION_ENDPOINT
              value: "/v1/aios_feedback_service/heartbeat"
            - name: FEEDBACK_PORT
              value: "9443"
            - name: FEEDBACK_AIOS_HOST
              value: "$(AIOS_GATEWAY_URL)"
            - name: FEEDBACK_AIOS_PORT
              value: "443"
            - name: CONFIGURATION_ETCD_USER
              value: root
            - name: CONFIGURATION_ETCD_PASS
              valueFrom:
                secretKeyRef:
                  key: etcd-root-password
                  name: {{ template "fullname" . }}-etcd-secrets
            - name: CONFIGURATION_ETCD_PRIMARY_URL
              value: "https://{{ template "fullname" . }}-etcd:2379"
            - name: CONFIGURATION_ETCD_SECONDARY_URL
              value: "https://{{ template "fullname" . }}-etcd:2379"
            - name: DEPLOYMENTMODE
              value: "icp4d"
            - name: ENTITLEMENTS_URL
              value: "$(AIOS_GATEWAY_URL)/v1/entitlements"
            - name: "CONFIG_SERVICE_BASE_URL"
              value: "$(AIOS_GATEWAY_URL)"
            - name: "ENABLE_ICP"
              value: "true"
            - name: ICP4D_JWT_PUBLIC_KEY_URL
              value: "$(AIOS_GATEWAY_URL)/auth/jwtpublic"
            - name: AIOS_SERVICE_CREDENTIALS
              valueFrom:
                secretKeyRef:
                  name: {{ template "fullname" . }}-service-secrets
                  key: aios-service-credential
            - name: SERVICEID_0
              value: "$(AIOS_SERVICE_CREDENTIALS)"
            - name: FEEDBACK_AIOS_API_KEY
              value: "$(AIOS_SERVICE_CREDENTIALS)"
            - name: "DEFAULT_MONITOR_MODEL_SELECTION"
              value: "all"
            - name: ICP_WML_URL
              value: "$(AIOS_GATEWAY_URL)/wml"
            - name: ICP_WML_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.icp4DToken.secretName }}
                  key: {{ .Values.icp4DToken.secretKey }}
            - name: ML_GATEWAY_ENABLE_REST_MODE
              value: "true"
            - name: ENABLE_RBAC
              value: "true"
