{{ $namePrefix := "preupgrade-job" -}}
{{- include "sch.config.init" (list . "sch.chart.config.values" ) -}}
{{ $name := include "sch.names.fullCompName" (list . $namePrefix ) -}}
{{ $compName := "preupgrade-job" -}}
{{ $labels := include "sch.metadata.labels.standard" (list . $compName) -}}
{{ $serviceAccount := "preupgrade-aios" -}}
{{ $serviceAccountName := include "aios.serviceAccountNameEditor" (list . $serviceAccount) -}}
{{ $nonRootUser := include "aios.nonroot.uid" (list .) -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $name | quote }}
  labels:
{{ $labels | indent 4 }}
{{- include "aios.labels" . | indent 2 }}
  annotations:
{{- include "aios.metering.nocharge" . | indent 2 }}
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation
    "helm.sh/hook-weight": "3"
spec:
  activeDeadlineSeconds: 100
  template:
    metadata:
      name: {{ $name | quote }}
      labels:
{{ $labels | indent 8 }}
{{- include "aios.pod.labels" . | indent 6 }}
      annotations:
{{- include "aios.metering.nocharge" . | indent 6 }}
    spec:
      serviceAccountName: {{ $serviceAccountName | quote }}
      {{- if .Values.imagePullSecrets }}
      {{- if ne .Values.imagePullSecrets "default" }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      {{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ $nonRootUser }}
      affinity:
      {{- include "aios.nodeAffinity" . | indent 8 }}
      restartPolicy: Never
      containers:
        - name: "aios-kubectl"
          image: {{ include "aios.image" (list . .Values.kubectl.image.name .Values.kubectl.image.tag) | quote }}
          resources:
{{ toYaml .Values.ephemeralPod.resources | indent 12 }}
          imagePullPolicy: {{ default "IfNotPresent" .Values.imagePullPolicy | quote }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: {{ $nonRootUser }}
            capabilities:
              drop:
              - ALL
          command: 
            - "/bin/sh"
            - "-ec"
            - |
            
              secret_exists() {
                  set +e
                  kubectl -n {{ .Release.Namespace }} get secret $1 > /dev/null 2>&1
                  echo $?
                  set -e
              } 
              cd ~
              serviceSecretFound=$(secret_exists '{{ template "fullname" . }}-service-secrets')
              echo "serviceSecretFound $serviceSecretFound"
              if [ $serviceSecretFound -eq 0 ]
              then
                 route=`kubectl -n {{ .Release.Namespace }} get route |  grep ibm-nginx-svc | awk '{ print $2 }' | tr -d '\n' | base64 | tr -d '\n'`
                 servicePassword=`kubectl -n {{ .Release.Namespace }} get secret aiopenscale-ibm-aios-service-secrets -o jsonpath='{.data.aios-service-credential}'`
                 cat <<EOF0 | kubectl -n {{ .Release.Namespace }} replace --force -f - 
              apiVersion: v1
              kind: Secret
              metadata:
                name: "{{ template "fullname" . }}-service-secrets"
                labels:
                  app: {{ template "fullname" . }}
                  chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
                  release: "{{ .Release.Name }}"
                  heritage: "{{ .Release.Service }}"
              type: Opaque
              data: 
                aios-service-credential: ${servicePassword}
                cpd-external-route: ${route}
              EOF0
              fi
              # remove ootb monitors from etcd so that they can be reinitialized
              kubectl -n {{ .Release.Namespace }} exec {{ template "fullname" . }}-etcd-0 -- etcdctl del "/aios/ootb_monitors/v2" --prefix
              # for upgrading from version that doesn not include kafka
              kafkaSecretFound=$(secret_exists '{{ template "fullname" . }}-kafka-secrets')
              echo "kafkaSecretFound $kafkaSecretFound"
              if [ $kafkaSecretFound -ne 0 ]
              then
              openssl genrsa -out rootCA.key 4096
              openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 3650 -out ca-cert -subj "/C=US/ST=California/L=San Jose/O=IBM/OU=Watson"
              # create client and server trustore
              keytool -keystore kafka.server.truststore.jks -alias CARoot -import -file ca-cert -noprompt -storepass password
              keytool -keystore kafka.client.truststore.jks -alias CARoot -import -file ca-cert -noprompt -storepass password
              # create keystore
              keytool -genkey -noprompt -alias localhost -dname "CN=kafka.aiopenscale, OU=Watson, O=IBM, L=SJ, S=CA, C=US" -keystore kafka.server.keystore.jks -storepass password -keypass password
              
              #export cert from keystore
              keytool -keystore kafka.server.keystore.jks -alias localhost -certreq -file cert-file -noprompt -storepass password -keypass password
              #sign cert with CA
              openssl x509 -req -CA ca-cert -CAkey rootCA.key -in cert-file -out cert-signed -days 3650 -CAcreateserial -passin pass:password
              #import signed cert and CA to keystore
              keytool -keystore kafka.server.keystore.jks -alias CARoot -import -file ca-cert -noprompt -storepass password
              keytool -keystore kafka.server.keystore.jks -alias localhost -import -file cert-signed -noprompt -storepass password
              
              caCert=`cat ca-cert | base64 | tr -d '\n'`
              keystore=`cat kafka.server.keystore.jks | base64 | tr -d '\n'`
              serverTruststore=`cat kafka.server.truststore.jks | base64 | tr -d '\n'`
              clientTruststore=`cat kafka.client.truststore.jks | base64 | tr -d '\n'`
              #same password for truststore
              servicePassword=`printf "%s" "password" | base64 | tr -d '\n'`
              {{- $kafkaServiceName := printf "%s-%s-kafka-headless.%s.svc.%s" .Release.Name .Values.nameOverride .Release.Namespace .Values.clusterDomain }}
              {{- $kafkaName := printf "%s-%s-kafka" .Release.Name .Values.nameOverride }}
              {{- $replicaCount := int .Values.kafka.replicas }}
              brokers="{{range $i, $e := until $replicaCount }}{{ $kafkaName }}-{{ $e }}.{{ $kafkaServiceName }}:9092,{{ end }}"
              #remove trailing comma
              server=`printf "%s" "${brokers::-1}" | base64 | tr -d '\n'`
              user=`printf "%s" "user" | base64 | tr -d '\n'`
              #password=`cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 8 | head -n 1 | tr -d '\n' | base64 | tr -d '\n'`
              password=`printf "%s" "user" | base64 | tr -d '\n'`
              # use same field names as aios-eventstream-secret
              cat <<EOF1 | kubectl -n {{ .Release.Namespace }} create -f - 
              apiVersion: v1
              kind: Secret
              metadata:
                name: "{{ template "fullname" . }}-kafka-secrets"
                labels:
                  app: {{ template "fullname" . }}
                  chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
                  release: "{{ .Release.Name }}"
                  heritage: "{{ .Release.Service }}"
              type: Opaque
              data: 
                es-api-key: ${password}
                es-bootstrap-server: ${server}
                es-truststore-password: ${servicePassword}
                es-username: ${user}
                es-cert.pem: ${caCert}
                es-cert.jks: ${clientTruststore}
                kafka.server.keystore.jks: ${keystore}
                kafka.server.truststore.jks: ${serverTruststore}
              EOF1
              # remove the old eventstream secret - with eventstream being uninstalled by the upgrade script
              # rollback will require user to reinstall eventstream and run the eventstream configuration script to recreate the secret
              set +e
              kubectl -n {{ .Release.Namespace }} delete secret aios-eventstream-secret
              fi
              # scale zookeeper and kafka so that replication doesn't occur during rolling upgrade
              # current cpd-admin-role doesn't have permission for scale
              kubectl -n {{ .Release.Namespace }} patch statefulsets {{ template "fullname" . }}-kafka -p '{"spec":{"replicas":0}}'
              kubectl -n {{ .Release.Namespace }} patch statefulsets {{ template "fullname" . }}-zookeeper -p '{"spec":{"replicas":0}}'