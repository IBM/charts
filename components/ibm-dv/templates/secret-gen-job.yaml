{{- include "sch.config.init" (list . "dv.sch.chart.config.values") -}}
{{- $appName := .sch.chart.appName -}}
{{- $compName := .sch.chart.components.secretGen.name -}}
{{- $secretName := .sch.chart.components.secret.name -}}
{{- $ServiceInstanceID := .Values.zenServiceInstanceId | int64 -}}
{{- $ServiceInstanceUID := .Values.zenServiceInstanceUID | int64 -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "sch.names.appName" (list .) }}-{{ $compName }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName (dict "ServiceInstanceID" $ServiceInstanceID "app" $appName "icpdsupport/addOnId" $appName "icpdsupport/app" $compName "icpdsupport/serviceInstanceId" $ServiceInstanceID "icpdsupport/createdBy" $ServiceInstanceUID)) | indent 4 }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      labels:
{{ include "sch.metadata.labels.standard" (list . $compName (dict "ServiceInstanceID" $ServiceInstanceID "app" $appName "icpdsupport/addOnId" $appName "icpdsupport/app" $compName "icpdsupport/serviceInstanceId" $ServiceInstanceID "icpdsupport/createdBy" $ServiceInstanceUID)) | indent 8 }}
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering nil nil nil) | indent 8 }}
    spec:
{{- include "sch.security.securityContext" (list . .sch.chart.security.commonUtilsJobPodSecurityContext) | indent 6 }}
      affinity:
{{- include "sch.affinity.nodeAffinity" (list .) | indent 8 }}
      restartPolicy: Never
      containers:
      - name: {{ $compName }}
        image: "{{ .Values.docker_registry_prefix }}/{{ .Values.commonUtils.image.dockerImage }}:{{ .Values.commonUtils.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: IS_HELM_UPGRADE
          value: "{{ .Release.IsUpgrade }}"
        command:
        - /bin/bash
        - -c
        - |
          if [ "${IS_HELM_UPGRADE}" == "true" ]; then
            # If the secret doesn't have HivePassword then we are coming from 1.3.0.0
            hasHivePassword="$(kubectl get secret {{ include "sch.names.appName" (list .) }}-{{ $secretName }} -o yaml | grep HivePassword)"
            hasHivePassword="${?}"
            if [ "${hasHivePassword}" != "0" ]; then
              set -e
              kubectl patch secret {{ include "sch.names.appName" (list .) }}-{{ $secretName }} --patch="$(cat <<EOF
              annotations:
  {{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering nil nil nil) | indent 16 }}
              data:
                HivePassword: $(openssl rand -base64 32 | head -c32 | tr -d '\n' | base64 | tr -d '\n')
                TruststorePassword: $(openssl rand -hex 32 | head -c32 | tr -d '\n' | base64 | tr -d '\n')
                BigsqlPassword: $(openssl rand -base64 32 | head -c32 | tr -d '\n' | base64 | tr -d '\n')
          EOF
          )"
            fi

            # If the secret doesn't have DMC User Password then we are coming from 1.4.1
            dmcuserPassword="$(kubectl get secret {{ include "sch.names.appName" (list .) }}-{{ $secretName }} -o yaml | grep dmcuserPassword)"
            dmcuserPassword="${?}"
            if [ "${dmcuserPassword}" != "0" ]; then
              set -e
              kubectl patch secret {{ include "sch.names.appName" (list .) }}-{{ $secretName }} --patch="$(cat <<EOF
              annotations:
  {{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering nil nil nil) | indent 16 }}
              data:
                dmcuserPassword: $(openssl rand -base64 32 | head -c32 | tr -d '\n' | base64 | tr -d '\n')
          EOF
          )"
            fi
          else
            # Not upgrade, create the whole secret
            set -e
            cat <<EOF | kubectl apply -f -
            apiVersion: v1
            kind: Secret
            type: Opaque
            metadata:
              name: {{ include "sch.names.appName" (list .) }}-{{ $secretName }}
              labels:
{{ include "sch.metadata.labels.standard" (list . $secretName) | indent 16 }}
              annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering nil nil nil) | indent 16 }}
            data:
              password: {{ .Values.zenServiceInstanceSecret | b64enc }}
              DvAdminCfgCryptoKey: $(openssl rand -base64 32 | head -c32 | tr -d '\n' | base64 | tr -d '\n')
              CacheAdminSecret: $(openssl rand -base64 32 | head -c32 | tr -d '\n' | base64 | tr -d '\n')
              HivePassword: $(openssl rand -base64 32 | head -c32 | tr -d '\n' | base64 | tr -d '\n')
              TruststorePassword: $(openssl rand -hex 32 | head -c32 | tr -d '\n' | base64 | tr -d '\n')
              BigsqlPassword: $(openssl rand -base64 32 | head -c32 | tr -d '\n' | base64 | tr -d '\n')
              dmcuserPassword: $(openssl rand -base64 32 | head -c32 | tr -d '\n' | base64 | tr -d '\n')
          EOF
          fi
{{ include "dv.helpers.resources" (list . .Values.resources.commonUtilsJob) | indent 8 }}
{{ include "sch.security.securityContext" (list . .sch.chart.security.commonUtilsJobContainerSecurityContext) | indent 8 }}
