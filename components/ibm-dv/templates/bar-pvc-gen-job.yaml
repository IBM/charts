{{- include "sch.config.init" (list . "dv.sch.chart.config.values") -}}
{{- $appName := .sch.chart.appName -}}
{{- $compName := .sch.chart.components.pvcGen.name -}}
{{- $ServiceInstanceID := .Values.zenServiceInstanceId | int64 -}}
{{- $ServiceInstanceUID := .Values.zenServiceInstanceUID | int64 -}}
{{- $pvcCompName := .sch.chart.components.upgradeBackupPVC.name -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "sch.names.appName" (list .) }}-{{ $compName }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName (dict "ServiceInstanceID" $ServiceInstanceID "app" $appName "icpdsupport/addOnId" $appName "icpdsupport/app" $compName "icpdsupport/serviceInstanceId" $ServiceInstanceID "icpdsupport/createdBy" $ServiceInstanceUID)) | indent 4 }}
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-1"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      labels:
{{ include "sch.metadata.labels.standard" (list . $compName (dict "ServiceInstanceID" $ServiceInstanceID "app" $appName "icpdsupport/addOnId" $appName "icpdsupport/app" $compName "icpdsupport/serviceInstanceId" $ServiceInstanceID "icpdsupport/createdBy" $ServiceInstanceUID)) | indent 8 }}
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering nil nil nil) | indent 8 }}
    spec:
{{- include "sch.security.securityContext" (list . .sch.chart.security.commonUtilsJobPodSecurityContext) | indent 6 }}
      affinity:
{{- include "sch.affinity.nodeAffinity" (list .) | indent 8 }}
      restartPolicy: Never
      containers:
      - name: {{ $compName }}
        image: "{{ .Values.docker_registry_prefix }}/{{ .Values.commonUtils.image.dockerImage }}:{{ .Values.commonUtils.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
        - /bin/bash
        - -c
        - |
          kubectl get pvc | grep dv-bar-pvc
          if [[ $? -eq "0" ]]; then
            echo "dv-bar-pvc already exists"
            exit 0
          fi
          echo "Creating dv-bar-pvc"
          set -e
          cat <<EOF | kubectl apply -f -
          kind: PersistentVolumeClaim
          apiVersion: v1
          metadata:
            name: {{ include "sch.names.appName" (list .) }}-{{ $pvcCompName }}
            labels:
{{ include "sch.metadata.labels.standard" (list . $pvcCompName) | indent 14 }}
          spec:
            accessModes:
              - ReadWriteMany
            resources:
              requests:
                storage: {{ .Values.persistence.size | quote }}
            {{- if .Values.persistence.useDynamicProvisioning }}
            storageClassName: {{ .Values.persistence.storageClass | quote }}
            {{- end }}
          EOF
{{ include "dv.helpers.resources" (list . .Values.resources.commonUtilsJob) | indent 8 }}
{{ include "sch.security.securityContext" (list . .sch.chart.security.commonUtilsJobContainerSecurityContext) | indent 8 }}
