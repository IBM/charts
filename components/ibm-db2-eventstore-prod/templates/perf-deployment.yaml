{{- if or ( eq .Values.development true ) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  # Unique key of the Deployment instance
  name: {{ .Values.servicename }}-tenant-perf
  labels:
    app.kubernetes.io/name: {{ template "eventstore.fullname" . }}
    helm.sh/chart: "{{ .Chart.Name }}"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    release: "{{ .Release.Name }}"
    app.kubernetes.io/managed-by: "{{ .Release.Service }}"
    component: eventstore
    {{- include "eventstore.podLabels" . | indent 4 }}
spec:
  replicas: {{ .Values.deployment.members }}
  selector:
     matchLabels:
       app.kubernetes.io/name: {{ .Values.servicename }}-tenant-perf
  template:
    metadata:
      name: {{ .Values.servicename }}-tenant-perf
      labels:
        app.kubernetes.io/name: {{ .Values.servicename }}-tenant-perf
        helm.sh/chart: "{{ .Chart.Name }}"
        name: {{ template "eventstore.name" . }}
        release: "{{ .Release.Name }}"
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        app.kubernetes.io/managed-by: "{{ .Release.Service }}"
        component: eventstore
        enabled: "true"
        {{- include "eventstore.podLabels" . | indent 8 }}
      annotations:
        {{- include "eventstore.annotations" . | indent 8 }}
    spec:
      affinity:
        {{- include "eventstore.nodeAffinity" . | indent 6 }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app.kubernetes.io/name"
                    operator: In
                    values:
                    - {{ .Values.servicename }}-tenant-perf
              topologyKey: "kubernetes.io/hostname"
      {{- include "eventstore.tolerations" . | indent 6 }}
      {{- include "eventstore.security" . | indent 6 }}
      serviceAccountName: {{ default "default" .Values.serviceAccountName }}
      containers:
      - name: perf
        {{- if .Values.perf.image.tag }}
        image: {{ .Values.perf.image.repository }}:{{ .Values.perf.image.tag }}
        {{- else }}
        image: {{ .Values.perf.image.repository }}:{{ .Values.image.universalTag }}
        {{- end }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- include "eventstore.securityContext" . | indent 8 }}
        env:
        {{- include "eventstore.environment-variables" . | indent 8 }}
        - name: SQLLIB_SHARED
          value: /system-storage/{{ .Values.servicename }}/db2inst1/sqllib_shared
        - name: BUCKET_NAME
          valueFrom:
             secretKeyRef:
                name: cos-{{ .Values.servicename }}
                key: bucket-name
                optional: true
        # STORAGE_TYPE= S3|COS
        - name: STORAGE_TYPE
          value: {{ .Values.objectStorage.type }}
          optional: true
        - name: STORAGE_URL
          valueFrom:
             secretKeyRef:
                name: cos-{{ .Values.servicename }}
                key: url
                optional: true
        - name: STORAGE_ACCESS_KEY
          valueFrom:
             secretKeyRef:
                name: cos-{{ .Values.servicename }}
                key: access-key
                optional: true
        - name: STORAGE_SECRET_KEY
          valueFrom:
             secretKeyRef:
                name: cos-{{ .Values.servicename }}
                key: secret-key
                optional: true
        - name: STORAGE_REGION
          value: {{ .Values.objectStorage.S3.region }}
          optional: true
        # BLUSPARK_AREA_CONFIGURATION_FILE=${BLUSPARK_AREA_BLUSPARK_CONF_IN_CONTAINER}
        - name: BLUSPARK_AREA_CONFIGURATION_FILE
          value: /bluspark/external_conf/bluspark.conf
        - name: CLIENT_STOREPASS
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.servicename }}-ssl-keystore-password-secrets"
              key: client_storepass
        command: ['/home/db2inst1/base_entrypoint.sh']
        args: ["sudo -E /eventstore/init.sh"]
        volumeMounts:
        {{- if ( not .Values.storage.storageLocation.dataStorage.enabled) }}
        - name: storage-underfs
          mountPath: /eventstorefs
        - name: storage-underfs
          mountPath: /system-storage
        {{- else }}
        {{- if (not .Values.objectStorage.useObjectStorage) }}
        - mountPath: /eventstorefs
          name: data-storage
        {{- end }}
        - mountPath: /system-storage
          name: system-storage
        {{- end }}
        - name: bluspark-config-volume
          mountPath: /k8s_mount/bluspark
        - name: perf-data-volume
          mountPath: /perf_runs
        - name: perf-docker-deamon-volume
          mountPath: /var/run/docker.sock
        # use  label for shared between containers
        - name: bluspark-local-db
          mountPath: /bluspark/db/ssd
        - name: user-home-mount
          mountPath: /user-home
      # Restart policy for all containers within the pod
      # One of Always, OnFailure, Never. Default to Always.
      # From env var ${UTILITIES_RESTART_POLICY}
      restartPolicy: Always
      volumes:
      {{- if ( not .Values.storage.storageLocation.dataStorage.enabled) }}
      - name: storage-underfs
        persistentVolumeClaim:
        {{- if .Values.pvcSettings.existingClaimName }}
          claimName: {{ .Values.pvcSettings.existingClaimName }}
        {{- else }}
          claimName: {{ .Values.servicename }}-pvc
        {{- end }}
      {{- else }}
      {{- if (not .Values.objectStorage.useObjectStorage) }}
        {{- include "eventstore.container.storage.dataStorage" . | indent 6 }}
      {{- end }}
        {{- include "eventstore.container.storage.systemStorage" . | indent 6 }}
      {{- end }}
      - name: bluspark-config-volume
        configMap:
          name: "{{ .Values.servicename }}-config-files"
          items:
          - key: svt-perf-conf
            path: svt-perf.conf
      - name: bluspark-local-db
        hostPath:
          path: {{ .Values.disk.computePath }}/{{ .Values.servicename }}/engine/local_db
      - name: perf-data-volume
        hostPath:
          path: {{ .Values.disk.computePath }}/{{ .Values.servicename }}/perf
      - name: perf-docker-deamon-volume
        hostPath:
          path: /var/run/docker.sock
      {{- include "eventstore.user-home-pvc" .  | indent 6 }}
{{- end }}
