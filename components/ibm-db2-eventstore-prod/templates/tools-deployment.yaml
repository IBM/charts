apiVersion: apps/v1
kind: Deployment
metadata:
  # Unique key of the Deployment instance
  name: "{{ .Values.servicename }}-tenant-tools"
  labels:
    app.kubernetes.io/name: {{ template "eventstore.fullname" . }}
    helm.sh/chart: "{{ .Chart.Name }}"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    release: "{{ .Release.Name }}"
    app.kubernetes.io/managed-by: "{{ .Release.Service }}"
    component: eventstore
    {{- include "eventstore.podLabels" . | indent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.servicename }}-tenant-tools
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.servicename }}-tenant-tools
        api-database-status: "{{ .Values.servicename }}db2eventstore-api"
        api-db-urlprovider: "{{ .Values.servicename }}db2eventstore-urlprovider"
        helm.sh/chart: "{{ .Chart.Name }}"
        release: "{{ .Release.Name }}"
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        app.kubernetes.io/managed-by: "{{ .Release.Service }}"
        component: eventstore
        {{- include "eventstore.podLabels" . | indent 8 }}
      annotations:
        {{- include "eventstore.annotations" . | indent 8 }}
    spec:
      affinity:
        {{- include "eventstore.nodeAffinity" . | indent 6 }}
      {{- include "eventstore.tolerations" . | indent 6 }}
      {{- include "eventstore.security" . | indent 6 }}
      serviceAccountName: {{ default "default" .Values.serviceAccountName }}
      {{- include "eventstore.podSecurityContext" . | indent 6 }}
      initContainers:
      {{- include "eventstore.wait-sqllib-shared" . | indent 6 }}
      containers:
      - name: eventstore-tools
        {{- if .Values.eventstoreTools.image.tag }}
        image: {{ .Values.eventstoreTools.image.repository }}:{{ .Values.eventstoreTools.image.tag }}
        {{- else }}
        image: {{ .Values.eventstoreTools.image.repository }}:{{ .Values.image.universalTag }}
        {{- end }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ['/bin/sh']
        args: ["-lcx", "/home/db2inst1/base_entrypoint.sh /eventstore/tools/init.sh"]
        {{- include "eventstore.securityContext" . | indent 8 }}
        readinessProbe:
          exec:
            command:
            - /bin/bash
            - /eventstore/tools/list.sh
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: {{ .Values.eventstoreTools.readinessProbeTimeout }}
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - /eventstore/tools/list.sh
          initialDelaySeconds: 15
          periodSeconds: 20
          timeoutSeconds: {{ .Values.eventstoreTools.livenessProbeTimeout }}
        env:
        {{- include "eventstore.environment-variables" . | indent 8 }}
        - name: BLUSPARK_AREA_CONFIGURATION_FILE
          value: /bluspark/external_conf/bluspark.conf
        - name: CREATEDB
          value: "{{ .Values.database.create }}"
        - name: DB2DBDFT
          value: "{{ .Values.database.name }}"
        - name: SSH_PORT
          value: "{{ tpl (.Values.engine.sshPort | toString) . }}"
        - name: RELEASENAME
          value: {{ .Release.Name }}
        - name: DB2INSTANCE
          value: "{{ .Values.db2InstanceUser }}"
        - name: REPLICATION_FACTOR
          value: "{{ .Values.engine.replicationFactor }}"
        - name: SQLLIB_SHARED
          value: /eventstorefs/{{ .Values.servicename }}/db2inst1/sqllib_shared
        # backup/restore depend on the following log configuration
        - name: LOCAL_LOG_PATH
          value: "/eventstore/logs"
        - name: LOCAL_LOG_PATH_ON_HOST
          value: "{{ .Values.disk.storagePath }}/{{ .Values.servicename }}/engine/shared_db/log"
        # backup/restore depend on the external storage path
        - name: EXTERNAL_STORAGE_PATH
          value: "{{ .Values.disk.storagePath }}/{{ .Values.servicename }}/engine/utils/external_db"
        - name: CLIENT_STOREPASS
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.servicename }}-ssl-keystore-password-secrets"
              key: client_storepass
        - name: ENGINE_STOREPASS
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.servicename }}-ssl-keystore-password-secrets"
              key: engine_storepass
        volumeMounts:
        - name: bluspark-config-volume
          mountPath: /k8s_mount/bluspark
        - name: user-home-mount
          mountPath: /user-home/_global_/eventstore
          subPath: "_global_/eventstore"
        - name: user-home-mount
          mountPath: /user-home/_global_/dbdrivers
          subPath: "_global_/dbdrivers"
        - mountPath: /eventstorefs
          name: storage-underfs
        - mountPath: /eventstore/tools/user-ssl-files
          name: storage-underfs
          subPath: "{{ .Values.servicename }}/db2inst1/sqllib_shared/gskit/user-files"
        # use  label for shared between containers
        - mountPath: /eventstore/logs
          name: eventstore-logs
        {{- if .Values.objectStorage.useObjectStorage }}
        - mountPath: /k8s_mount/cos-ssl-certificate-secrets/cos-ssl-cert
          subPath: cos-ssl-cert
          name: cos-ssl-certificate-secrets-volume
        {{- end }}
      # Restart policy for all containers within the pod
      # One of Always, OnFailure, Never. Default to Always.
      # From env var ${UTILITIES_RESTART_POLICY}
      restartPolicy: Always
      volumes:
      - name: eventstore-logs
        hostPath:
          path: {{ .Values.disk.storagePath }}/{{ .Values.servicename }}/engine/shared_db/log
      # TODO use persistent volume instead ?
      - name: bluspark-config-volume
        configMap:
          name: "{{ .Values.servicename }}-config-files"
          items:
          - key: bluspark-conf
            path: bluspark.conf
      {{- if .Values.objectStorage.useObjectStorage }}
      - name: cos-ssl-certificate-secrets-volume
        secret:
          secretName: cos-{{ .Values.servicename }}
      {{- end }}
      {{- if ( not .Values.storage.storageLocation.dataStorage.enabled) }}
      - name: storage-underfs
        persistentVolumeClaim:
        {{- if .Values.pvcSettings.existingClaimName }}
          claimName: {{ .Values.pvcSettings.existingClaimName }}
        {{- else }}
          claimName: {{ .Values.servicename }}-pvc
        {{- end }}
      {{- else }}
      - name: storage-underfs
        persistentVolumeClaim:
          {{- if .Values.storage.storageLocation.metaStorage.pvc.existingClaim.name }}
          claimName: {{ .Values.storage.storageLocation.metaStorage.pvc.existingClaim.name }}
          {{- else }}
          claimName: {{ .Values.servicename }}-system-pvc
          {{- end }}
      {{- end }}
      {{- include "eventstore.user-home-pvc" .  | indent 6 }}
