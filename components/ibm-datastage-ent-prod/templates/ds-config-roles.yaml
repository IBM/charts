kind: ConfigMap
apiVersion: v1
metadata:
  name: ds-roles-config
  labels:
    app: {{ .Chart.Name }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": before-hook-creation
data:
  init.sh: |
    set -x
    if [ "$COUCHDB_PASSWORD" != "" ];
    then
      DB_URL=https://$COUCHDB_USERNAME:$COUCHDB_PASSWORD@couchdb-svc
    fi

    # check if user roles db exists or not.  If not, create it
    echo "Checking if user roles DB exists or not"
    userRolesDbExists=$(curl -sS -k $DB_URL/user_roles | python -c "import sys, json; response=json.load(sys.stdin); print ('error' not in response)")
    if [ "$userRolesDbExists" = "False" ];
    then
      echo "Creating the user roles DB since it doesn't exists"
      curl -sS -k -X PUT $DB_URL/user_roles
    fi

    # check if Data Engineer exists or not and create them
    echo "Checking if Data Engineer exists or not"
    deRolesExists=$(curl -sS -k $DB_URL/user_roles/Data%20Engineer | python -c "import sys, json; response=json.load(sys.stdin); print ('error' not in response)")
    if [ "$deRolesExists" = "False" ];
    then
      echo "Creating the IIS base role"
      curl -k $DB_URL/user_roles/_bulk_docs \
        -X POST \
        -H "Content-Type: application/json" \
        -d '{
        "docs": [
            {
            "_id": "Data Engineer",
            "role_name": "Data Engineer",
            "description": "Data Engineer role",
            "permissions": [
               "virtualize_transform"
            ]
            }
        ]
      }'
    else
      echo "Update Data Engineer user with ds permissions"
      deRoleDoc=$(curl -sS -k $DB_URL/user_roles/Data%20Engineer | python -c "import sys, json; \
      deRoleJson=json.load(sys.stdin); \
      deRoleJson['permissions'].append('virtualize_transform'); \
      print (json.dumps(deRoleJson))")

      curl -sS -k -X PUT $DB_URL/user_roles/Data%20Engineer \
          -H "Content-Type: application/json" \
          -d "$deRoleDoc"
    fi

    # add base permissions into system
    echo "Adding all the base permissions into the system"
    updatedPermissionsDoc=$(curl -sS -k $DB_URL/privatecloud-config/default | python -c "import sys, json; \
    defaultConfig=json.load(sys.stdin); \
    defaultConfig['permissions'].append({'key':'virtualize_transform','label':'Integrate and transform data'}); \
    print (json.dumps(defaultConfig))")

    curl -sS -k -X PUT $DB_URL/privatecloud-config/default \
        -H "Content-Type: application/json" \
        -d "$updatedPermissionsDoc"

    # update admin user with base roles and permissions
    echo "Updating the base user with all the base roles and permissions"
    adminUserDoc=$(curl -sS -k $DB_URL/privatecloud-users/admin | python -c "import sys, json; \
    adminUserJson=json.load(sys.stdin); \
    adminUserJson['permissions'].append('virtualize_transform'); \
    adminUserJson['user_roles'].append('Data Engineer'); \
    print (json.dumps(adminUserJson))")

    curl -sS -k -X PUT $DB_URL/privatecloud-users/admin \
        -H "Content-Type: application/json" \
        -d "$adminUserDoc"

    echo "Check if Administrator role exists or not and create it"
    adminRoleExists=$(curl -sS -k $DB_URL/user_roles/Administrator | python -c "import sys, json; response=json.load(sys.stdin); print ('error' not in response)")
    if [ "$adminRoleExists" = "False" ];
    then
       curl -k $DB_URL/user_roles/_bulk_docs \
          -X POST \
          -H "Content-Type: application/json" \
          -d '{
          "docs": [
              {
                "_id": "Administrator",
                "role_name": "Administrator",
                "description": "Administrator role",
                "permissions": [
                    "virtualize_transform"
                ]
              }
          ]
        }'
    else
        echo "Update Administrator role with wkc roles and permissions"
        adminRoleDoc=$(curl -sS -k $DB_URL/user_roles/Administrator | python -c "import sys, json; \
        adminRoleJson=json.load(sys.stdin); \
        adminRoleJson['permissions'].append('virtualize_transform'); \
        print (json.dumps(adminRoleJson))")

        curl -sS -k -X PUT $DB_URL/user_roles/Administrator \
            -H "Content-Type: application/json" \
            -d "$adminRoleDoc"
    fi

    echo "Setting up ISF linkage to usermgmt"
    kubectl set env -n $ICPD_CONTROLPLANE_NAMESPACE deployment usermgmt --containers=usermgmt-container ISF_SERVICE_URL=https://is-servicesdocker:9446
    kubectl set env -n $ICPD_CONTROLPLANE_NAMESPACE deployment usermgmt --containers=usermgmt-container USING_ROLES=true
