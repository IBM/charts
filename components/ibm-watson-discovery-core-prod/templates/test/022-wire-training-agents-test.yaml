{{- include "sch.config.init" (list . "discovery.sch.chart.config.values") -}}
{{- $rankerCleanerAgentCompName := .sch.chart.components.rankerCleanerAgent.name -}}
{{- $rankerCleanerAgentTestCompName := .sch.chart.components.rankerCleanerAgentTest.name -}}
{{- $trainingAgentCompName := .sch.chart.components.trainingAgents.name -}}
{{- $dataDeletionAgentCompName := .sch.chart.components.dataDeletionAgent.name -}}
{{- $namespace := .Release.Namespace -}}
apiVersion: v1
kind: Pod
metadata:
  name: "{{ include "sch.names.fullCompName" (list . $rankerCleanerAgentTestCompName ) }}"
  labels:
{{ include "sch.metadata.labels.standard" (list . $rankerCleanerAgentTestCompName (dict "test" "test")) | indent 4 }}
  annotations:
    "helm.sh/hook": test-success
spec:
  serviceAccountName: {{ .Values.global.privilegedServiceAccount.name }}
  affinity:
{{- include "sch.affinity.nodeAffinity" (list . ) | indent 4 }}
  hostNetwork: false
  hostPID: false
  hostIPC: false
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedPodSecurityContext) | indent 2 }}
  imagePullSecrets:
  - name: {{ .Values.global.image.pullSecret }}
  containers:
  - name: {{ include "sch.names.fullCompName" (list . $rankerCleanerAgentTestCompName ) }}
    image: {{ .Values.global.dockerRegistryPrefix }}/
      {{- .Values.wire.test.image.name }}:
      {{- .Values.wire.test.image.tag}}
    resources:
      requests:
        memory: {{ .Values.wire.test.resources.requests.memory }}
        cpu: {{ .Values.wire.test.resources.requests.cpu }}
      limits:
        memory: {{ .Values.wire.test.resources.limits.memory }}
        cpu: {{ .Values.wire.test.resources.limits.cpu }}
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedSecurityContext) | indent 4 }}
    command:
    - /bin/sh
    - -c
    - >-
      for p in `kubectl -n {{ $namespace }} get po -l app.kubernetes.io/component={{ $trainingAgentCompName }},release={{ .Release.Name }} -o name`;
      do echo "Testing $p"; kubectl -n {{ $namespace }} exec ${p:4} -c {{ $rankerCleanerAgentCompName }} -- sh -c 'cat APP_VERSION';
      if [ $? != 0 ]; then timeout=$(($(date +%s) + {{ .Values.wire.test.timeout }})); while [ $(date +%s) -lt $timeout ];
      do kubectl -n {{ $namespace }} exec ${p:4} -c {{ $rankerCleanerAgentCompName }} -- sh -c 'cat APP_VERSION'; done; fi;
      if [ $? != 0 ]; then echo "Test Failed."; return 1; else echo "Test Passed."; fi; done;
      for p in `kubectl -n {{ $namespace }} get po -l app.kubernetes.io/component={{ $trainingAgentCompName }},release={{ .Release.Name }} -o name`;
      do echo "Testing $p"; kubectl -n {{ $namespace }} exec ${p:4} -c {{ $dataDeletionAgentCompName }} -- sh -c 'cat APP_VERSION';
      if [ $? != 0 ]; then timeout=$(($(date +%s) + {{ .Values.wire.test.timeout }})); while [ $(date +%s) -lt $timeout ];
      do kubectl -n {{ $namespace }} exec ${p:4} -c {{ $dataDeletionAgentCompName }} -- sh -c 'cat APP_VERSION'; done; fi;
      if [ $? != 0 ]; then echo "Test Failed."; return 1; else echo "Test Passed."; fi; done
  restartPolicy: Never
