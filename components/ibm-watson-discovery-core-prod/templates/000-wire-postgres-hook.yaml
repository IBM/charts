{{- include "sch.config.init" (list . "discovery.sch.chart.config.values") -}}
{{- $jobName := "wire-postgres" -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "sch.names.fullCompName" (list . $jobName) }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $jobName (dict "service" "discovery")) | indent 4 }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 300
  template:
    metadata:
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 8 }}
      labels:
{{ include "sch.metadata.labels.standard" (list . $jobName (dict "service" "discovery")) | indent 8 }}
      name: secret-gen
    spec:
      serviceAccountName: {{ include "discovery.admin.serviceAccount" . }}
      affinity:
{{- include "sch.affinity.nodeAffinity" (list . ) | indent 8 }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedPodSecurityContext) | indent 6 }}
      imagePullSecrets:
      - name:  {{ .Values.global.image.pullSecret }}
      containers:
      - name: db-init
        resources:
          requests:
            memory: {{ .Values.initContainers.postgresql.resources.requests.memory | quote }}
            cpu: {{ .Values.initContainers.postgresql.resources.requests.cpu | quote }}
          limits:
            memory: {{ .Values.initContainers.postgresql.resources.limits.memory | quote }}
            cpu: {{ .Values.initContainers.postgresql.resources.limits.cpu | quote }}
        image: {{ .Values.global.dockerRegistryPrefix }}/
          {{- .Values.initContainers.wire.postgresql.image.name }}:
          {{- .Values.initContainers.wire.postgresql.image.tag }}
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedSecurityContext) | indent 8 }}
        imagePullPolicy: {{ .Values.global.image.pullPolicy }}
        env:
        - name: PG_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.postgresql.configmap" . }}
              key: host
        - name: PG_PORT
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.postgresql.configmap" . }}
              key: port
        - name: PG_AUTH
          valueFrom:
            secretKeyRef:
              name: {{ include "discovery.crust.postgresql.secret" . }}
              key: pg_su_password
        - name: TRAININGCRUD_AUTH
          valueFrom:
            secretKeyRef:
              name: {{ include "discovery.crust.postgresql.secret" . }}
              key: pg_su_password
        - name: HEALTHCHECK_AUTH
          valueFrom:
            secretKeyRef:
              name: {{ include "discovery.crust.postgresql.secret" . }}
              key: pg_su_password
        - name: PG_USR
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.postgresql.configmap" . }}
              key: username
      initContainers:
      - name: db-create
        resources:
          requests:
            memory: {{ .Values.initContainers.postgresql.resources.requests.memory | quote }}
            cpu: {{ .Values.initContainers.postgresql.resources.requests.cpu | quote }}
          limits:
            memory: {{ .Values.initContainers.postgresql.resources.limits.memory | quote }}
            cpu: {{ .Values.initContainers.postgresql.resources.limits.cpu | quote }}
        image: {{ .Values.global.dockerRegistryPrefix }}/
          {{- .Values.initContainers.postgresql.image.name }}:
          {{- .Values.initContainers.postgresql.image.tag }}
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedSecurityContext) | indent 8 }}
        imagePullPolicy: {{ .Values.global.image.pullPolicy }}
        env:
        - name: PGHOST
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.postgresql.configmap" . }}
              key: host
        - name: PGPORT
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.postgresql.configmap" . }}
              key: port
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "discovery.crust.postgresql.secret" . }}
              key: pg_su_password
        - name: PGUSER
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.postgresql.configmap" . }}
              key: username
        - name: PGDATABASE
          value: postgres
        - name: PGSSLMODE
          value: "require"
        command:
        - "/bin/bash"
        - "-c"
        - |
          set +eo pipefail
          until pg_isready -h ${PGHOST} -p ${PGPORT}; do
            echo "waiting for postgres up..."
            sleep 5s
          done
          # create database if it does not exist
          echo "Creating database compose..."
          psql -tc "SELECT 1 FROM pg_database WHERE datname = 'compose'" | grep -q 1 || psql -a -v "ON_ERROR_STOP=1" -c "CREATE DATABASE compose"
          echo "Creating database ranker_training..."
          psql -tc "SELECT 1 FROM pg_database WHERE datname = 'ranker_training'" | grep -q 1 || psql -a -v "ON_ERROR_STOP=1" -c "CREATE DATABASE ranker_training"

      restartPolicy: Never
