{{- include "sch.config.init" (list . "discovery.sch.chart.config.values") -}}
{{- $app := .Values.global.appName -}}
{{- $compName := .sch.chart.components.trainingCrud.name -}}
{{- $haywireCompName := .sch.chart.components.haywire.name -}}
{{- $initContainerCompName := .sch.chart.components.trainingCrudInitContainer.name -}}
{{- $rankerCloudSecretName := include "discovery.ranker.secret" . -}}
{{- $rankerCp4dSecretName := include "sch.names.fullCompName" (list . .sch.chart.components.rankerSecret.name ) -}}
{{- $wireConfigName := include "sch.names.fullCompName" (list . "wire-config" ) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "sch.names.fullCompName" (list . $compName) }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName (dict "run" "training-data-crud" "squad" "wire" "service" "discovery" "tenant" (tpl .Values.global.tenant .))) | indent 4 }}
spec:
  replicas: {{ include "discovery.wire.trainingCrudReplicas" . }}
  selector:
    matchLabels:
{{ include "sch.metadata.labels.standard" (list . $compName (dict "run" "training-data-crud" "app.kubernetes.io/name" "training-data-crud" "squad" "wire" "app" $app "service" "discovery" "tenant" (tpl .Values.global.tenant .))) | indent 6 }}
  revisionHistoryLimit: 2
  template:
    metadata:
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 8 }}
{{- if .Values.global.metricsCollection.enabled }}
        prometheus.io/scrape: 'true'
        prometheus.io/port: '{{ .Values.wire.statsd.exporterPrometheusPort }}'
{{- end }}
      labels:
        prometheus.io/scrape: {{ .Values.global.metricsCollection.enabled | quote }}
        prometheus.io/port: {{ .Values.wire.statsd.exporterPrometheusPort | quote }}
{{ include "sch.metadata.labels.standard" (list . $compName (dict "run" "training-data-crud" "app.kubernetes.io/name" "training-data-crud" "squad" "wire" "app" $app "service" "discovery" "tenant" (tpl .Values.global.tenant .))) | indent 8 }}
    spec:
      {{- if .Values.global.private }}
      serviceAccountName: {{ .Values.global.privilegedServiceAccount.name }}
      {{- end }}
      affinity:
{{ include "sch.affinity.nodeAffinity" (list . ) | indent 8 }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedPodSecurityContext) | indent 6 }}
      imagePullSecrets:
      - name: {{ .Values.global.image.pullSecret }}
      initContainers:
{{ include "discovery.elasticInitContainer" . | indent 6 }}
{{ include "discovery.haywireInitContainer" . | indent 6 }}
      volumes:
      - name: tls
        secret:
          secretName: {{ $rankerCp4dSecretName }}
      - name: postgres-cert
        secret:
          secretName: {{ include "discovery.crust.postgresql.ca" . }}
          items:
          - key: tls.cacrt
            path: pg-crud-cert
{{- if .Values.global.metricsCollection.enabled }}
      - name: {{ .Values.wire.configVolume }}
        configMap:
          name: {{ $wireConfigName }}
{{- end }}
      containers:
      - name: {{ $compName }}
        image: {{ .Values.global.dockerRegistryPrefix }}/
          {{- .Values.wire.trainingCrud.image.name }}:
          {{- .Values.wire.trainingCrud.image.tag }}
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedSecurityContext) | indent 8 }}
        resources:
          # When changing these, be sure to keep the JAVA_TOOL_OPTIONS environment variable within these limits
          requests:
            memory: {{ .Values.wire.trainingCrud.resources.requests.memory }}
            cpu: {{ .Values.wire.trainingCrud.resources.requests.cpu }}
          limits:
            memory: {{ .Values.wire.trainingCrud.resources.limits.memory }}
            cpu: {{ .Values.wire.trainingCrud.resources.limits.cpu }}
        imagePullPolicy: {{ .Values.global.image.pullPolicy }}
        volumeMounts:
        - mountPath: /app/server.crt
          name: tls
          readOnly: true
          subPath: server.crt
        - mountPath: /app/ca.crt
          name: tls
          readOnly: true
          subPath: ca.crt
        - mountPath: /app/server.pem
          name: tls
          readOnly: true
          subPath: server.pem
          # Cert used to connect to Postgres
        - mountPath: /app/pg-crud-cert
          name: postgres-cert
          readOnly: true
          subPath: pg-crud-cert
        env:
        - name: MZR_MANUAL_RESTART_COUNT
          value: "6"
        - name: CRN_CNAME
          value: "{{ .Values.wire.trainingRest.crnCname }}"
        - name: CRN_CTYPE
          value: "{{ .Values.wire.trainingRest.crnCtype }}"
        - name: CRN_LOCATION
          value: "{{ .Values.wire.trainingRest.crnLocation }}"
        - name: TIP_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ $rankerCloudSecretName }}
              key: tip-token
        - name: JAVA_TOOL_OPTIONS
          value: {{ .Values.wire.trainingCrud.trainingCrudJavaOpts }}
        - name: SPRING_DATASOURCE_USERNAME
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.postgresql.configmap" . }}
              key: username
        - name: SPRING_DATASOURCE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "discovery.crust.postgresql.secret" . }}
              key: pg_su_password
        - name: PALM_PLAYBOOK_ROOT_URL
          value: {{ .Values.wire.trainingCrud.palmPlaybookUrl | quote }}
{{- if .Values.wire.trainingCrud.crudMaxMonitorErrors }}
        - name: TRAININGCRUD_CHECKOUT_MAX_MONITORING_ERRORS
          value: "{{ .Values.wire.trainingCrud.crudMaxMonitorErrors }}"
{{- end }}
        - name: TRAININGCRUD_CHECKOUT_MINIMUM_MILLISECONDS_BETWEEN_CHECKOUT_PENDING
          value: "5000"
{{- if .Values.wire.trainingCrud.feedbackMinimumMillisecondsBetweeenTrainingJobs }}
        - name: TRAININGCRUD_CHECKOUT_MINIMUM_MILLISECONDS_BETWEEN_ENVIRONMENT_TRAINING_JOBS
          value: "{{ .Values.wire.trainingCrud.feedbackMinimumMillisecondsBetweeenTrainingJobs }}"
{{- end }}
{{- if .Values.wire.trainingCrud.trainingcrudCheckoutMinimumMillisecondsBetweenSingleCollectionTrainingJobs }}
        - name: TRAININGCRUD_CHECKOUT_MINIMUM_MILLISECONDS_BETWEEN_TRAINING_JOBS
          value: "{{ .Values.wire.trainingCrud.trainingcrudCheckoutMinimumMillisecondsBetweenSingleCollectionTrainingJobs }}"
{{- end }}
        - name: TRAININGCRUD_CHECKOUT_MILLISECONDS_TO_LIVE_BEFORE_ORPHANED
          value: "{{ .Values.wire.trainingCrud.crudTrainingJobOrphanedMillis }}"
        - name: SPRING_DATASOURCE_TOMCAT_MAXACTIVE
          value: {{ .Values.wire.trainingCrud.database.maxActiveConn | quote }}
        - name: SPRING_DATASOURCE_TOMCAT_MINIDLE
          value: {{ .Values.wire.trainingCrud.database.minIdleConn | quote }}
        - name: SPRING_DATASOURCE_TOMCAT_LOGABANDONED
          value: "true"
        - name: SPRING_DATASOURCE_TOMCAT_REMOVEABANDONEDONBORROW
          value: "true"
        - name: SPRING_DATASOURCE_TOMCAT_REMOVEABANDONEDONMAINTENANCE
          value: "true"
        - name: SPRING_DATASOURCE_TOMCAT_REMOVEABANDONEDTIMEOUT
          value: "180"
        - name: TRAINING_NOTICES_HOST
          value: {{ include "discovery.core.notice.hostname" . }}
        - name: TRAINING_NOTICES_PORT
          value: "{{ .Values.notices.port }}"
        - name: TRAINING_NOTICES_TIMEOUT_MS
          value: "{{ .Values.notices.timeoutMs }}"
        - name: POSTGRES_TARGET
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.postgresql.configmap" . }}
              key: endpoint
        - name: POSTGRES_CERT
          value: "/app/pg-crud-cert"
{{- if .Values.global.private }}
        - name: ELASTIC_ENABLED
          value: {{ .Values.wire.trainingCrud.elasticEnabled | quote }}
        - name: ELASTIC_RANKERPUSHER_ENDPOINT
          value: "/_wire/_featureset/wire_default_featureset/_create"
        - name: ELASTIC_ADDRESSES
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.mantle.elastic.configmap" . }}
              key: endpoint
        - name: ELASTIC_USER
          valueFrom:
            secretKeyRef:
              name: {{ include "discovery.mantle.elastic.secret" . }}
              key: username
        - name: ELASTIC_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "discovery.mantle.elastic.secret" . }}
              key: password
        - name: ELASTIC_CERT
          value: "/app/server.crt"
{{- end }}
        - name: WIRE_SSL_AUTHORITY
          value: {{ include "discovery.wire.master.CN" . }}
        - name: WIRE_PRIVATE_KEY_PASSPHRASE_ENABLED
          value: {{ .Values.wire.privateKeyPassphraseEnabled | quote }}
        - name: WIRE_DOMAIN_NAME_OVERRIDE_ENABLED
          value: {{ .Values.wire.domainNameOverrideEnabled | quote }}
        - name: WIRE_PRIVATE_KEY_PASSPHRASE
          valueFrom:
            secretKeyRef:
              name: {{ $rankerCloudSecretName }}
              key: service-key-token
        - name: DEPLOYMENT_REALM
          value: "{{ .Release.Name }}"
        - name: SEGMENT_ENABLED
          value: {{ .Values.global.segment.enabled | quote }}
        - name: SEGMENT_KEY
          valueFrom:
            secretKeyRef:
              name: {{ $rankerCloudSecretName }}
              key: segment-key
{{- if .Values.global.metricsCollection.enabled }}
        - name: STATS_D_EXPORTER_FORMATTING_ENABLED
          value: "true"
{{- end }}
        livenessProbe:
          exec:
            command:
            - "./aceso"
            - "-method"
            - "health"
            - "-service_port"
            - {{ .Values.wire.trainingCrud.port | quote }}
            - "-ca_certificate"
            - "ca.crt"
            - "-domain_name"
            - "$(WIRE_DOMAIN_NAME_OVERRIDE)"
            - "-skip_hostname_verification"
          initialDelaySeconds: {{ .Values.wire.trainingCrud.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.wire.trainingCrud.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.wire.trainingCrud.livenessProbe.timeoutSeconds }}
        readinessProbe:
          exec:
            command:
            - "./aceso"
            - "-method"
            - "readiness"
            - "-service_port"
            - {{ .Values.wire.trainingCrud.port | quote }}
            - "-ca_certificate"
            - "ca.crt"
            - "-domain_name"
            - "$(WIRE_DOMAIN_NAME_OVERRIDE)"
            - "-skip_hostname_verification"
          initialDelaySeconds: {{ .Values.wire.trainingCrud.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.wire.trainingCrud.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.wire.trainingCrud.readinessProbe.timeoutSeconds }}
        lifecycle:
          preStop:
            exec:
              command:
              - "sleep"
              - "1"
        ports:
        - containerPort: {{ .Values.wire.trainingCrud.port }}
          protocol: TCP
{{ include "wire.statsdExporter.container" (list . ) | indent 6 }}
