{{- if .Values.global.private }}
{{- include "sch.config.init" (list . "discovery.sch.chart.config.values") -}}
{{- $compName := .sch.chart.components.wexCore.name }}
{{- $compCrawlerName := .sch.chart.components.wexCore.crawler.name }}
{{- $statefulSetName := include "sch.names.statefulSetName" (list . $compCrawlerName) -}}
{{- $ingestionPvcName := .sch.chart.components.wexCore.ingestion.pvc.name }}

{{- $managementServicePort := .sch.chart.components.wexCore.management.port -}}

{{- $compSduName := .sch.chart.components.sdu.name }}
{{- $sduServiceName := include "sch.names.fullCompName" (list . $compSduName ) -}}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $statefulSetName }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName (dict "tenant" (tpl .Values.global.tenant .) "service" "discovery")) | indent 4 }}
    run: {{ $compCrawlerName }}
spec:
  selector:
    matchLabels:
{{ include "sch.metadata.labels.standard" (list . $compName (dict "tenant" (tpl .Values.global.tenant .) "service" "discovery")) | indent 6 }}
      run: {{ $compCrawlerName }}
  serviceName: {{ include "sch.names.fullCompName" (list . $compCrawlerName ) }}
  replicas: {{ include "discovery.core.crawler.replicas" . }}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
{{ include "sch.metadata.labels.standard" (list . $compName (dict "tenant" (tpl .Values.global.tenant .) "service" "discovery")) | indent 8 }}
        run: {{ $compCrawlerName }}
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 8 }}
    spec:
      serviceAccountName: {{ .Values.global.serviceAccount.name }}
{{- include "sch.security.securityContext" (list . .sch.chart.wexUserSpecSecurityContext) | indent 6 }}
      affinity:
{{- include "sch.affinity.nodeAffinity" (list .) | indent 8 }}
        podAntiAffinity:
        {{- if eq .Values.core.crawler.antiAffinity "hard" }}
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: "kubernetes.io/hostname"
            labelSelector:
              matchLabels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 16 }}
                run: {{ $compCrawlerName }}
        {{- else if eq .Values.core.crawler.antiAffinity "soft" }}
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 5
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 18 }}
                  run: {{ $compCrawlerName }}
        {{- end }}
      initContainers:
{{ include "discovery.core.initContainer.managementCheck" . | indent 6 }}
{{ include "discovery.core.initContainer.rabbitmqCheck" . | indent 6 }}
      containers:
      - name: crawler
        image: "{{ .Values.global.dockerRegistryPrefix }}/{{ .Values.core.image.ingestion.name }}:{{ .Values.core.image.ingestion.tag }}"
        imagePullPolicy: "{{ .Values.global.image.pullPolicy }}"
{{- include "sch.security.securityContext" (list . .sch.chart.wexUserPodSecurityContext) | indent 8 }}
        env:
        - name: DEPLOYMENT_TYPE
          value: "CLUSTER"
        - name: INGESTION_POD_MODE
          value: "CONTROLLER"
        - name: MANAGEMENT_SERVER_ENDPOINT
          value: "https://{{ include "discovery.core.management.hostname" . }}:{{ $managementServicePort }}/wex/api/v1"
        - name: SDU_SERVER_ENDPOINT
          value: "https://{{ $sduServiceName }}:8080/api/v3"
        - name: SSL_CERTFILE
          value: "/opt/tls/wlp/tls.crt"
        - name: CONTROLLER_N_THREADS
          value: "{{ .Values.core.crawler.numberOfCrawlerInstances }}"
        - name: CONVERTER_EXECUTORS
          value: "{{ .Values.core.converter.numberOfConverterThreads }}"
        - name: PIPELINE_EXEC_MODE
          value: "DATA_PIPELINE"
        - name: DATAPIPELINE_PROCESSOR_THREAD
          value: "1"
        - name: PIPELINE_NUM_THREADS
          value: "UploadedFileConverter=1,ContentTypeConverter=1,FileExtToMimeTypeConverter=1,BinaryDetectConverter=1,GuessContentConverter=1,EncodingConverter=3,SDUDocumentRemover=1,ZipConverter=1,GZipConverter=1,TarConverter=1,MetadataConverter=3,ContentsToJsonConverter=1,SDUConverter=10,TikaConverter=1,JsonNormalizationConverter=1,JsonToAxmlConverter=1,CsvToAxmlConverter=1,HTMLCleanerConverter=1,HTMLConverter=3,FieldFilter=1,JsonMergeConverter=1,FieldNameValidator=1,FieldValueValidator=3,DocumentFilter=1"
        - name: NOTICE_SERVER_ENDPOINT
          value: "{{ include "sch.names.fullCompName" (list . .sch.chart.components.haywire.name ) }}:{{ .Values.notices.port }}"
        - name: SDU_DB_NAME
          value: "sdu"
{{ include "discovery.core.sdu.envVars" . | indent 8 }}
        - name: CK_SECRET_CK
          valueFrom:
            secretKeyRef:
              name: {{ include "discovery.core.ck.secret" . }}
              key: CK
        - name: CRAWLER_PUBLISHER_TYPE
          value: {{ .Values.core.crawler.crawlerPublisherType | quote }}
        - name: CONVERTER_PIPELINE_THREADS
          value: {{ .Values.core.converter.converterPipelineThreads | quote }}
        - name: CONVERTER_PIPELINE_DOCUMENTS
          value: {{ .Values.core.converter.converterPipelineDocuments | quote }}
        - name: CONVERTER_DOCUMENT_STORE_SHARDS
          value: {{ .Values.core.converter.converterDocumentStoreShards | quote }}
        - name: CRAWLER_CDSR_POSTGRESQL
          value: "true"
{{ include "discovery.core.etcd.envVars" . | indent 8 }}
{{ include "discovery.core.pg.envVars" . | indent 8 }}
{{ include "discovery.core.rabbitmq.envVars" . | indent 8 }}
{{ include "discovery.core.s3.envVars" . | indent 8 }}
        envFrom:
        - configMapRef:
            name: {{ include "sch.names.fullCompName" (list . $compName ) }}
        resources:
{{ toYaml .Values.core.crawler.resources | indent 12 }}
        volumeMounts:
        - name: data
          mountPath: /wexdata
        {{- if .Values.global.private }}
        - name: userdatadir
          mountPath: /mnt
        {{- end }}
        {{- if .Values.core.tls.wlp.enabled }}
        - name: certificate-wlp
          mountPath: "/opt/tls/wlp"
          readOnly: true
        {{- end }}
        - name: certificate-rabbitmq
          mountPath: "/opt/tls/rabbitmq"
          readOnly: true
        readinessProbe:
          exec:
            command:
            - bash
            - -c
            - >
              ps -ef | grep -v grep | grep -q com.ibm.es.ama.zing.control.AmaIngestionController &&
              ps -ef | grep -v grep | grep -q com.ibm.es.ama.zing.discovery.AmaIngestionDiscovery
          initialDelaySeconds: {{ .Values.core.crawler.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.core.crawler.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.core.crawler.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.core.crawler.readinessProbe.failureThreshold }}
        livenessProbe:
          exec:
            command:
            - bash
            - -c
            - >
              ps -ef | grep -v grep | grep -q com.ibm.es.ama.zing.control.AmaIngestionController &&
              ps -ef | grep -v grep | grep -q com.ibm.es.ama.zing.discovery.AmaIngestionDiscovery &&
              [[ "$(grep CK= ${WEX_DATA}/config/certs/crawler.ini)" == "$(grep CK= ${WEX_HOME}/zing/es.cfg)" ]]
          initialDelaySeconds: {{ .Values.core.crawler.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.core.crawler.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.core.crawler.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.core.crawler.livenessProbe.failureThreshold }}
      volumes:
      - name: data
        emptyDir: {}
      {{- if .Values.global.private }}
      - name: userdatadir
        {{- if .Values.core.ingestion.mount.enabled }}
        persistentVolumeClaim:
          claimName: {{ include "sch.names.persistentVolumeClaimName" (list . $ingestionPvcName) }}
        {{- else }}
        emptyDir: {}
        {{- end }}
      {{- end }}
      {{- if .Values.core.tls.wlp.enabled }}
      - name: certificate-wlp
        secret:
          secretName: {{ include "discovery.admin.tls" . }}
      {{- end }}
      - name: certificate-rabbitmq
        secret:
          secretName: {{ include "discovery.crust.rabbitmq.ca" . }}
{{- end }}
