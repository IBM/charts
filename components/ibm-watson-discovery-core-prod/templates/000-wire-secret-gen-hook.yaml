{{- include "sch.config.init" (list . "discovery.sch.chart.config.values") -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "sch.names.fullCompName" (list . "wire-secrets") }}
  labels:
{{ include "sch.metadata.labels.standard" (list . "wire-secrets" (dict "service" "discovery")) | indent 4 }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": "hook-succeeded"
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 300
  template:
    metadata:
      annotations:
{{- include "sch.metadata.annotations.metering" (list . ) | indent 8 }}
      labels:
{{ include "sch.metadata.labels.standard" (list . "wire-secrets" (dict "service" "discovery")) | indent 8 }}
      name: {{ include "sch.names.fullCompName" (list . "wire-secrets") }}
    spec:
      affinity:
{{- include "sch.affinity.nodeAffinity" (list .) | indent 8 }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedPodSecurityContext) | indent 6 }}
      restartPolicy: Never
      serviceAccountName: {{ .Values.global.privilegedServiceAccount.name }}
      imagePullSecrets:
      - name: {{ .Values.global.image.pullSecret }}
      containers:
      - name: "jks-secret-gen"
        env:
        - name: ETCD_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "discovery.crust.etcd.secret" . }}
              key: password
        - name: ETCD_USERNAME
          valueFrom:
            secretKeyRef:
              name: {{ include "discovery.crust.etcd.secret" . }}
              key: username
        - name: ETCD_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.etcd.configmap" . }}
              key: endpoint
        resources:
          requests:
            memory: {{ .Values.wire.secretGen.resources.requests.memory | quote }}
            cpu: {{ .Values.wire.secretGen.resources.requests.cpu | quote }}
          limits:
            memory: {{ .Values.wire.secretGen.resources.limits.memory | quote }}
            cpu: {{ .Values.wire.secretGen.resources.limits.cpu | quote }}
        image: {{ .Values.global.dockerRegistryPrefix }}/
          {{- .Values.wire.secretGen.image.name }}:
          {{- .Values.wire.secretGen.image.tag }}
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedSecurityContext) | indent 8 }}
        command:
        - "/bin/bash"
        - "-c"
        - |
          cxn="{\"endpoints\":\"${ETCD_ENDPOINT}\",\"userid\":\"${ETCD_USERNAME}\",\"password\":\"${ETCD_PASSWORD}\",\"root_prefix\":\"/all/ranker\",\"certificate_file\":\"etcd_certificate\"}"
          kubectl apply -n {{ .Release.Namespace }} -f - <<END
          apiVersion: v1
          kind: Secret
          type: Opaque
          metadata:
            name: {{ include "sch.names.fullCompName" (list . .sch.chart.components.rankerSecret.name) }}
            labels:
{{ include "sch.metadata.labels.standard" (list . "wire-secrets" (dict "service" "discovery")) | indent 14 }}
          data:
            pagerduty-key-high: {{ if not .Values.wire.pagerdutyKeyHigh -}}""{{- else -}}"$( echo "{{ .Values.wire.pagerdutyKeyHigh }}" | base64 -w 0 )"{{- end }}
            pagerduty-key-low: {{ if not .Values.wire.pagerdutyKeyLow -}}""{{- else -}}"$( echo "{{ .Values.wire.pagerdutyKeyLow }}" | base64 -w 0 )"{{- end }}
            tip-token: {{ if not .Values.wire.tipToken -}}""{{- else -}}"$( echo "{{ .Values.wire.tipToken }}" | base64 -w 0 )"{{- end }}
            service-key-token: {{ if not .Values.wire.serviceKeyToken -}}""{{- else -}}"$( echo "{{ .Values.wire.serviceKeyToken }}" | base64 -w 0 )"{{- end }}
            segment-key: {{ if not .Values.wire.segmentKey -}}""{{- else -}}"$( echo "{{ .Values.wire.segmentKey }}" | base64 -w 0 )"{{- end }}
            etcd_certificate: "$(cat /etc/creds/etcd-ca/tls.cacrt | base64 -w 0)"
            etcd_connection: "$(echo "${cxn}" | base64 -w 0)"
            wire-private-pem: "$(cat /etc/creds/tls/pkcs8.key | base64 -w 0)"
            server.crt: "$(cat /etc/creds/tls/tls.crt | base64 -w 0)"
            server.pem: "$(cat /etc/creds/tls/pkcs8.key | base64 -w 0)"
            ca.crt: "$(cat /etc/creds/tls/tls.cacrt | base64 -w 0)"
          END

        volumeMounts:
        - name: tls
          mountPath: /etc/creds/tls
          readOnly: true
        - name: etcd
          mountPath: /etc/creds/etcd
          readOnly: true
        - name: etcd-cert
          mountPath: /etc/creds/etcd-ca
          readOnly: true
        - name: secrets-out
          mountPath: /tmp/secret-gen
      volumes:
      - name: etcd
        secret:
          secretName: {{ include "discovery.crust.etcd.secret" . }}
          items:
          - key: username
            path: username
          - key: password
            path: password
      - name: etcd-cert
        secret:
          secretName: {{ include "discovery.crust.etcd.ca" . }}
          items:
          - key: tls.cacrt
            path: tls.cacrt
      - name: secrets-out
        emptyDir: {}
      - name: tls
        secret:
          secretName: {{ include "discovery.admin.tls" . }}
          items:
          - key: pkcs8.key
            path: pkcs8.key
          - key: tls.crt
            path: tls.crt
          - key: tls.cacrt
            path: tls.cacrt