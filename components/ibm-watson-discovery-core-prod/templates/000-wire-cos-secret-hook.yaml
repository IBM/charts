{{- include "sch.config.init" (list . "discovery.sch.chart.config.values") -}}
{{- $jobName := "wire-cos-secret" -}}
{{- if .Values.global.private }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "sch.names.fullCompName" (list . $jobName) }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $jobName (dict "service" "discovery")) | indent 4 }}
  annotations:
    "helm.sh/hook": "pre-install"
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": "hook-succeeded"
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 300
  template:
    metadata:
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 8 }}
      labels:
{{ include "sch.metadata.labels.standard" (list . $jobName (dict "service" "discovery")) | indent 8 }}
      name: {{ include "sch.names.fullCompName" (list . $jobName) }}
    spec:
      serviceAccountName: {{ .Values.global.privilegedServiceAccount.name }}
      affinity:
{{- include "sch.affinity.nodeAffinity" (list . ) | indent 8 }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedPodSecurityContext) | indent 6 }}
      imagePullSecrets:
      - name: {{ .Values.global.image.pullSecret }}
      containers:
      - name: secrets
        resources:
          limits:
            cpu: {{ .Values.wire.secretGen.resources.limits.cpu }}
            memory: {{ .Values.wire.secretGen.resources.limits.memory }}
          requests:
            cpu: {{ .Values.wire.secretGen.resources.requests.cpu }}
            memory: {{ .Values.wire.secretGen.resources.requests.memory }}
        env:
        - name: COS_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.minio.configmap" . }}
              key: endpoint
        image: {{ .Values.global.dockerRegistryPrefix }}/
          {{- .Values.wire.secretGen.image.name }}:
          {{- .Values.wire.secretGen.image.tag }}
        imagePullPolicy: {{ .Values.global.image.pullPolicy }}
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedSecurityContext) | indent 8 }}
        command:
        - "/bin/bash"
        - "-c"
        - |
          accesskey="$(cat /etc/creds/minio/accesskey)"
          secretkey="$(cat /etc/creds/minio/secretkey)"
          endpoint="${COS_ENDPOINT}"
          objstore=$(echo "s3,endpoint=${endpoint},accesskey=${accesskey},secretkey=${secretkey},bucketsuffix={{ .Values.wire.minio.bucketSuffix }}" | base64 -w 0)

          kubectl apply --namespace {{ .Release.Namespace }} -f - <<EOF
          apiVersion: v1
          kind: Secret
          type: Opaque
          metadata:
            labels:
{{ include "sch.metadata.labels.standard" (list . $jobName) | indent 14 }}
            name: {{ include "discovery.wire.cosSecretName" . }}
          data:
            cloud_objstore: "${objstore}"
            watson_objstore: "${objstore}"
          EOF

        volumeMounts:
        - name: minio
          mountPath: /etc/creds/minio
          readOnly: true
      restartPolicy: Never
      volumes:
      - name: minio
        secret:
          secretName: {{ include "discovery.crust.minio.secret" . }}
          items:
          - key: accesskey
            path: accesskey
          - key: secretkey
            path: secretkey
{{- end }}
