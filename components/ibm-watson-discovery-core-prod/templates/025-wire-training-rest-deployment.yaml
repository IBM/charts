{{- include "sch.config.init" (list . "discovery.sch.chart.config.values") -}}
{{- $compName := .sch.chart.components.trainingRest.name -}}
{{- $app := .Values.global.appName }}
{{- $tdCrudName := .sch.chart.components.trainingCrud.name -}}
{{- $rankerCp4dSecretName := include "sch.names.fullCompName" (list . .sch.chart.components.rankerSecret.name ) -}}
{{- $rankerSecretName := include "discovery.ranker.secret" . }}
{{- $wireConfigName := include "sch.names.fullCompName" (list . "wire-config" ) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "sch.names.fullCompName" (list . $compName (dict "run" "training-rest" "squad" "wire")) }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName (dict "run" "training-rest" "squad" "wire" "app" $app "service" "discovery" "tenant" (tpl .Values.global.tenant .))) | indent 4 }}
spec:
  replicas: {{ include "discovery.wire.trainingRestReplicas" . }}
  selector:
    matchLabels:
{{ include "sch.metadata.labels.standard" (list . $compName (dict "run" "training-rest" "squad" "wire" "app" $app "service" "discovery" "tenant" (tpl .Values.global.tenant .))) | indent 6 }}
  revisionHistoryLimit: 2
  template:
    metadata:
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 8 }}
{{- if .Values.global.metricsCollection.enabled }}
        prometheus.io/scrape: 'true'
        prometheus.io/port: '{{ .Values.wire.statsd.exporterPrometheusPort }}'
{{- end }}
      labels:
{{ include "sch.metadata.labels.standard" (list . $compName (dict "run" "training-rest" "squad" "wire" "app" $app "service" "discovery" "tenant" (tpl .Values.global.tenant .))) | indent 8 }}
    spec:
      serviceAccountName: {{ include "discovery.admin.serviceAccount" . }}
      affinity:
{{ include "sch.affinity.nodeAffinity" (list . ) | indent 8 }}
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedPodSecurityContext) | indent 6 }}
      imagePullSecrets:
      - name: {{ .Values.global.image.pullSecret }}
      volumes:
      - name: tls
        secret:
          secretName: {{ $rankerCp4dSecretName }}
{{- if .Values.global.activityTracker.enabled }}
      - name: at-events
        hostPath:
          path: {{ .Values.global.activityTracker.path }}
      - name: at-logger-config
        configMap:
          name: {{ .Values.global.activityTracker.configName }}
{{- end }}
{{- if .Values.global.metricsCollection.enabled }}
      - name: {{ .Values.wire.configVolume }}
        configMap:
          name: {{ $wireConfigName }}
{{- end }}
      - name: rabbitmq-secrets-crt
        secret:
          secretName: {{ include "discovery.crust.rabbitmq.ca" .}}
          items:
            - key: tls.cacrt
              path: rabbitmq-client.crt
      initContainers:
{{- include "discovery.core.initContainer.atVolumeCheck" . | indent 6 }}
      containers:
      - name: training-rest
        image: {{ .Values.global.dockerRegistryPrefix }}/
          {{- .Values.wire.trainingRest.image.name }}:
          {{- .Values.wire.trainingRest.image.tag}}
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedSecurityContext) | indent 8 }}
        resources:
          # When changing these, be sure to keep the JAVA_TOOL_OPTIONS environment variable within these limits
          requests:
            memory: {{ .Values.wire.trainingRest.resources.requests.memory }}
            cpu: {{ .Values.wire.trainingRest.resources.requests.cpu }}
          limits:
            memory: {{ .Values.wire.trainingRest.resources.limits.memory }}
            cpu: {{ .Values.wire.trainingRest.resources.limits.cpu }}
        imagePullPolicy: {{ .Values.global.image.pullPolicy }}
        volumeMounts:
        - mountPath: /app/server.crt
          name: tls
          readOnly: true
          subPath: server.crt
        - mountPath: /app/ca.crt
          name: tls
          readOnly: true
          subPath: ca.crt
        - mountPath: /app/server.pem
          name: tls
          readOnly: true
          subPath: server.pem
{{- if .Values.global.activityTracker.enabled }}
        # Mount the data volume, where logs will be written
        - name: at-events
          mountPath: {{ .Values.global.activityTracker.path }}
        # Mount the at-logger configmap
        - name: at-logger-config
          mountPath: /config/at
          readOnly: true
{{- end }}
        env:
        # POD_NAME is needed by at-logger
        - name: CRN_CNAME
          value: "{{ .Values.wire.trainingRest.crnCname }}"
        - name: CRN_CTYPE
          value: "{{ .Values.wire.trainingRest.crnCtype }}"
        - name: CRN_LOCATION
          value: "{{ .Values.wire.trainingRest.crnLocation }}"
        - name: TIP_TOKEN
          valueFrom:
            secretKeyRef:
              name: {{ $rankerSecretName }}
              key: tip-token
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MZR_MANUAL_RESTART_COUNT
          value: "6"
        - name: JAVA_TOOL_OPTIONS
          value: {{ .Values.wire.trainingRest.javaOpts }}
        - name: GRPC_SERVER_HOST
          value: {{ include "discovery.wire.trainingCrud.service" . }}
        - name: CRUD_SERVER_HOST
          value: {{ include "discovery.wire.trainingCrud.service" . }}
        - name: WIRE_DOMAIN_NAME_OVERRIDE_ENABLED
          value: {{ .Values.wire.domainNameOverrideEnabled | quote }}
        - name: WIRE_PRIVATE_KEY_PASSPHRASE_ENABLED
          value: {{ .Values.wire.privateKeyPassphraseEnabled | quote }}
        - name: WIRE_DOMAIN_NAME_OVERRIDE
          value: "{{$tdCrudName}}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}"
        - name: WIRE_PRIVATE_KEY_PASSPHRASE
          valueFrom:
            secretKeyRef:
              name: {{ $rankerSecretName }}
              key: service-key-token
{{- if not .Values.global.private }}
        - name: PALM_PLAYBOOK_ROOT_URL
          value: {{ .Values.wire.trainingRest.pagerduty.playbookUrl | quote }}
        - name: PALM_PAGER_DUTY_INTEGRATION_KEY
          valueFrom:
            secretKeyRef:
              name: {{ $rankerSecretName }}
              key: pagerduty-key-high
        - name: PALM_PAGER_DUTY_METADATA
          value: {{ printf "realm:%v" .Values.global.tenant | quote }}
{{- end }}
        - name: AUDIT_TRACKING_REQUIRED
          value: {{ .Values.wire.atLogger.enabled |quote }}
        - name: DATA_EXHAUST_ENABLED
          value: "false"
{{- if not .Values.global.private }}
        - name: PALM_STATS_D_METRIC_TYPE_PREFIX_ENABLED
          value: {{ .Values.global.metricsCollection.enabled | quote }}
        - name: PALM_STATS_D_PREFIX
          value: "training_rest"
        - name: TRAINING_STATUS_EXCLUDE_EMPTY_FIELD_DATE
          value: "2019-12-01"
{{- end }}
        livenessProbe:
          httpGet:
            scheme: HTTPS
            path: /health
            port: 9090
          initialDelaySeconds: {{ .Values.wire.trainingRest.livenessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.wire.trainingRest.livenessProbe.timeoutSeconds }}
        readinessProbe:
          httpGet:
            scheme: HTTPS
            path: /readiness
            port: 9090
          initialDelaySeconds: {{ .Values.wire.trainingRest.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.wire.trainingRest.readinessProbe.timeoutSeconds }}
        ports:
        - containerPort: 9090
          protocol: TCP
      # PostOffice container
{{- if not .Values.global.private }}
      - name: post-office
        image: {{ .Values.global.dockerRegistryPrefix }}/
        {{- .Values.wire.postOffice.image.name }}:
        {{- .Values.wire.postOffice.image.tag}}
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedSecurityContext) | indent 8 }}
        resources:
          # When changing these, be sure to keep the JAVA_TOOL_OPTIONS environment variable within these limits
          requests:
            memory: {{ .Values.wire.postOffice.resources.requests.memory }}
            cpu: {{ .Values.wire.postOffice.resources.requests.cpu }}
          limits:
            memory: {{ .Values.wire.postOffice.resources.limits.memory }}
            cpu: {{ .Values.wire.postOffice.resources.limits.cpu }}
        imagePullPolicy: Always
        env:
        - name: JAVA_TOOL_OPTIONS
          value: {{ .Values.wire.trainingRest.javaOpts }}
        - name: GRPC_SERVER_HOST
          value: {{ include "discovery.wire.trainingCrud.service" . }}
        - name: CRUD_SERVER_HOST
          value: {{ include "discovery.wire.trainingCrud.service" . }}
        - name: WIRE_PRIVATE_KEY_PASSPHRASE
          valueFrom:
            secretKeyRef:
              name: {{ $rankerSecretName }}
              key: service-key-token
        - name: PALM_PLAYBOOK_ROOT_URL
          value: {{ .Values.wire.postOffice.pagerduty.playbookUrl | quote }}
        - name: PALM_PAGER_DUTY_INTEGRATION_KEY
          valueFrom:
            secretKeyRef:
              name: {{ $rankerSecretName }}
              key: pagerduty-key-high
        - name: PALM_PAGER_DUTY_METADATA
          value: {{ printf "realm:%v" .Values.global.tenant | quote }}
        - name: PAGERDUTY_URL
          value: {{ .Values.wire.postOffice.pagerduty.pagerdutyUrl }}
        - name: RABBITMQ_HOST
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.rabbitmq.configmap" .}}
              key: host
        - name: RABBITMQ_PORT
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.rabbitmq.configmap" .}}
              key: port
        - name: RABBITMQ_ENDPOINTS
          value: "$(RABBITMQ_HOST):$(RABBITMQ_PORT)"
        - name: RABBITMQ_VIRTUALHOST
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.rabbitmq.configmap" .}}
              key: vhost
        - name: RABBITMQ_USERNAME
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.rabbitmq.configmap" .}}
              key: user
        - name: RABBITMQ_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "discovery.crust.rabbitmq.ca" .}}
              key: rabbitmq-password
        - name: RABBITMQ_CA_FILE
          value: /rabbitmq-client.crt
        - name: DATA_EXHAUST_ENABLED
          value: "false"
        livenessProbe:
          httpGet:
            scheme: HTTPS
            path: /health
            port: 9091
          initialDelaySeconds: {{ .Values.wire.postOffice.livenessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.wire.postOffice.livenessProbe.timeoutSeconds }}
        readinessProbe:
          httpGet:
            scheme: HTTPS
            path: /readiness
            port: 9091
          initialDelaySeconds: {{ .Values.wire.postOffice.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.wire.postOffice.readinessProbe.timeoutSeconds }}
        ports:
          - containerPort: 9091
            protocol: TCP
        volumeMounts:
        - name: rabbitmq-secrets-crt
          mountPath: /rabbitmq-client.crt
          subPath: rabbitmq-client.crt
          readOnly: true
{{- end }}
{{ include "wire.statsdExporter.container" (list . ) | indent 6 }}
