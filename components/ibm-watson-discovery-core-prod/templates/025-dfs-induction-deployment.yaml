{{- include "sch.config.init" (list . "discovery.sch.chart.config.values") -}}
{{- $compName := .sch.chart.components.dfs.name -}}
{{- $MMcompName := .sch.chart.components.mm.name -}}
{{- $app := .Values.global.appName -}}
{{- $elasticCredentialSecretName := include "discovery.mantle.elastic.secret" . -}}
{{- $elasticConfigMapName := include "discovery.mantle.elastic.configmap" . -}}
{{- $dbcheck := "postgres-db-check" -}}
{{- $tenantLabel := .Values.global.tenant }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "sch.names.fullCompName" (list . $compName) }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName (dict "run" $compName "squad" "wire" "service" "discovery" "tenant" $tenantLabel)) | indent 4 }}
spec:
  replicas: {{ include "discovery.dfs.dfsReplicas" . }}
  selector:
    matchLabels:
{{ include "sch.metadata.labels.standard" (list . $compName (dict "run" $compName "app.kubernetes.io/name" $compName "squad" "wire" "app" $app "service" "discovery" "tenant" $tenantLabel)) | indent 6 }}
  template:
    metadata:
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 8 }}
      labels:
{{ include "sch.metadata.labels.standard" (list . $compName (dict "run" $compName "app.kubernetes.io/name" $compName "squad" "wire" "app" $app "service" "discovery" "tenant" $tenantLabel)) | indent 8 }}
    spec:
      serviceAccountName: {{ .Values.global.privilegedServiceAccount.name }}
      affinity:
{{ include "sch.affinity.nodeAffinity" (list . ) | indent 8 }}

      hostNetwork: false
      hostPID: false
      hostIPC: false
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedPodSecurityContext) | indent 6 }}
      imagePullSecrets:
      - name: {{ .Values.global.image.pullSecret }}
{{/* Init containers are only enabled in CP4D */}}
{{- if .Values.global.private }}
      initContainers:
{{ include "discovery.elasticInitContainer" . | indent 6 }}
{{ include "discovery.etcdInitContainer" . | indent 6 }}
{{- if .Values.global.private }}
{{ include "discovery.minioInitContainer" . | indent 6 }}
{{- end }}
      - name: {{ include "sch.names.fullCompName" (list . $dbcheck) }}
        resources:
          requests:
            memory: {{ .Values.initContainers.postgresql.resources.requests.memory | quote }}
            cpu: {{ .Values.initContainers.postgresql.resources.requests.cpu | quote }}
          limits:
            memory: {{ .Values.initContainers.postgresql.resources.limits.memory | quote }}
            cpu: {{ .Values.initContainers.postgresql.resources.limits.cpu | quote }}
        image: {{ .Values.global.dockerRegistryPrefix }}/
          {{- .Values.initContainers.postgresql.image.name }}:
          {{- .Values.initContainers.postgresql.image.tag }}
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedSecurityContext) | indent 8 }}
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "discovery.crust.postgresql.secret" . }}
              key: pg_su_password
        - name: PGUSER
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.postgresql.configmap" . }}
              key: username
        - name: PGHOST
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.postgresql.configmap" . }}
              key: host
        - name: PGPORT
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.postgresql.configmap" . }}
              key: port
        - name: PGDATABASE
          value: postgres
        command:
        - '/bin/bash'
        - '-c'
        - |
          while true; do
            sleep 2
            if pg_isready -h ${PGHOST} -p ${PGPORT}; then
              exit 0
            fi
          done
          exit 1
{{ include "discovery.dfs.secretInitContainer" . | indent 6 }}
{{- end }}
{{/* End of init containers if-else block */}}
      containers:
      - name: dfs-induction
        image: {{ .Values.global.dockerRegistryPrefix }}/
          {{- .Values.dfs.image.name }}:
          {{- .Values.dfs.image.tag }}
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedSecurityContext) | indent 8 }}
        resources:
          requests:
            memory: "{{ .Values.dfs.resources.requests.memory }}"
            cpu: "{{ .Values.dfs.resources.requests.cpu }}"
          limits:
            memory: "{{ .Values.dfs.resources.limits.memory }}"
            cpu: "{{ .Values.dfs.resources.limits.cpu }}"
        volumeMounts:
{{- if .Values.global.private }}
        - name: truststore
          mountPath: /opt/ibm/java/jre/lib/security/cacerts
          subPath: truststore.jks
          readOnly: true
{{- end }}
        - name: ssl-certs-public
          mountPath: /tmp/public/public.key
          subPath: public.key
          readOnly: true
        envFrom:
        - configMapRef:
            name: {{ include "discovery.dfs.configmapName" . }}
        - secretRef:
            name: {{ include "discovery.dfs.secretName" . }}
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: CLOUD_ENVIRONMENT
          value: "CP4D"
        - name: realm
          value: "{{ .Values.dfs.env.realmInfo }}"
        - name: SERVER_MODE
          value: "kg-induction-server"
        - name: train_trigger_vocab_size_threshold
          value: "{{ .Values.dfs.env.trainTriggerVocabSizeThreshold }}"
        - name: cos_connection_url
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.minio.configmap" . }}
              key: endpoint
        - name: etcd_connection_url
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.etcd.configmap" . }}
              key: endpoint
        - name: grpc_server_port
          value: "50058"
        - name: initialize_cos
          value: "true"
        - name: initialize_postgres
          value: "true"
        - name: kgdb_url
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.postgresql.configmap" . }}
              key: endpoint
        - name: kg_grpc_ssl_override_authority
          value: {{ include "discovery.dfs.CN" . }}
        - name: LOG_LEVEL
          value: {{ .Values.dfs.env.logLevel }}
        - name: train_client_server_address
          value: {{ include "sch.names.fullCompName" (list . $compName) }}
        - name: modelmesh_server_address
          value: {{ include "sch.names.fullCompName" (list . $MMcompName) | quote }}
        - name: modelmesh_server_port
          value: {{ .Values.dfs.env.modelmeshServerPort | quote }}
        - name: elastic_user
          valueFrom:
            secretKeyRef:
              name: {{ $elasticCredentialSecretName }}
              key: username
        - name: elastic_password
          valueFrom:
            secretKeyRef:
              name: {{ $elasticCredentialSecretName }}
              key: password
        - name: elastic_url
          valueFrom:
            configMapKeyRef:
              name: {{ $elasticConfigMapName }}
              key: endpoint
        - name: cos_username
          valueFrom:
            secretKeyRef:
              name: '{{ include "discovery.crust.minio.secret" . }}'
              key: accesskey
        - name: cos_password
          valueFrom:
            secretKeyRef:
              name: '{{ include "discovery.crust.minio.secret" . }}'
              key: secretkey
        - name: kgdb_userid
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.postgresql.configmap" . }}
              key: username
        - name: kgdb_password
          valueFrom:
            secretKeyRef:
              name: '{{ include "discovery.crust.postgresql.secret" . }}'
              key: pg_su_password
        - name: etcd_username
          valueFrom:
            secretKeyRef:
              name: '{{ include "discovery.crust.etcd.secret" . }}'
              key: username
        - name: etcd_password
          valueFrom:
            secretKeyRef:
              name: '{{ include "discovery.crust.etcd.secret" . }}'
              key: password
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-service=checkEtcd", "-tls", "-tls-ca-cert=/tmp/public/public.key", "-tls-server-name={{ include "discovery.dfs.CN" . }}", "-addr=:50058"]
          initialDelaySeconds: {{ .Values.dfs.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.dfs.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.dfs.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.dfs.readinessProbe.failureThreshold }}
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-service=checkCos", "-tls", "-tls-ca-cert=/tmp/public/public.key", "-tls-server-name={{ include "discovery.dfs.CN" . }}", "-addr=:50058"]
          initialDelaySeconds: {{ .Values.dfs.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.dfs.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.dfs.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.dfs.readinessProbe.failureThreshold }}
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-service=checkDlaas", "-tls", "-tls-ca-cert=/tmp/public/public.key", "-tls-server-name={{ include "discovery.dfs.CN" . }}", "-addr=:50058"]
          initialDelaySeconds: {{ .Values.dfs.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.dfs.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.dfs.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.dfs.readinessProbe.failureThreshold }}
        readinessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-service=checkModelMesh", "-tls", "-tls-ca-cert=/tmp/public/public.key", "-tls-server-name={{ include "discovery.dfs.CN" . }}", "-addr=:50058"]
          initialDelaySeconds: {{ .Values.dfs.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.dfs.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.dfs.readinessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.dfs.readinessProbe.failureThreshold }}
        livenessProbe:
          exec:
            command: ["/bin/grpc_health_probe", "-service=liveness", "-tls", "-tls-ca-cert=/tmp/public/public.key", "-tls-server-name={{ include "discovery.dfs.CN" . }}", "-addr=:50058"]
          initialDelaySeconds: {{ .Values.dfs.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.dfs.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.dfs.livenessProbe.timeoutSeconds }}
          failureThreshold: {{ .Values.dfs.livenessProbe.failureThreshold }}
        lifecycle:
          preStop:
            exec:
              command: ["/bin/grpc_health_probe", "-service=preStop", "-tls", "-tls-ca-cert=/tmp/public/public.key", "-tls-server-name={{ include "discovery.dfs.CN" . }}", "-addr=:50058"]
        ports:
        - containerPort: 50058
        imagePullPolicy: {{ .Values.global.image.pullPolicy }}
      volumes:
      - name: ssl-certs-public
        secret:
          secretName: {{ include "discovery.admin.tls" . }}
          items:
          - key: tls.crt
            path: public.key
{{- if .Values.global.private }}
      - name: truststore
        secret:
          defaultMode: 420
          secretName: '{{ include "discovery.core.javaKeyStore" . }}'
{{- end }}
      - name: mc-config-dir
        emptyDir: {}
