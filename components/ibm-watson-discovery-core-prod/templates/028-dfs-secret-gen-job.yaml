{{- if .Release.IsInstall }}
  {{- include "sch.config.init" (list . "discovery.sch.chart.config.values") -}}
  {{- $jobNameSuffix:= "dfs-secret-gen-job" -}}
  {{- $dfsSecret := include "sch.names.fullCompName" (list . .sch.chart.components.dfsSecret.name ) -}}
  {{- $tlsSecret := include "discovery.admin.tls" . -}}
  {{- $dlaasSecret := include "dlaas.secretName" . -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "sch.names.fullCompName" (list . $jobNameSuffix ) }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $jobNameSuffix (dict "service" "discovery")) | indent 4 }}
spec:
  # This is needed only for hook.
  # backoffLimit: 5
  # activeDeadlineSeconds: 300
  template:
    metadata:
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 8 }}
      labels:
{{ include "sch.metadata.labels.standard" (list . $jobNameSuffix (dict "service" "discovery")) | indent 8 }}
      name: secret-gen
    spec:
      serviceAccountName: {{ .Values.global.privilegedServiceAccount.name }}
      affinity:
{{- include "sch.affinity.nodeAffinity" (list . ) | indent 8 }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedPodSecurityContext) | indent 6 }}
      imagePullSecrets:
      - name:  {{ .Values.global.image.pullSecret }}
      volumes:
{{- if .Values.global.private }}
      - name: dlaas-ca-cert
        secret:
          secretName: '{{ include "dlaas.secretName" . }}'
{{- end }}
      - name: etcd
        secret:
          secretName: {{ include "discovery.crust.etcd.secret" . }}
          items:
          - key: username
            path: username
          - key: password
            path: password
      - name: elastic-cert
        secret:
          secretName: {{ include "discovery.mantle.elastic.ca" . }}
          items:
          - key: tls.cacrt
            path: tls.cacrt
      - name: etcd-cert
        secret:
          secretName: {{ include "discovery.crust.etcd.ca" . }}
          items:
          - key: tls.cacrt
            path: tls.cacrt
      - name: postgres-cert
        secret:
          secretName: {{ include "discovery.crust.postgresql.ca" . }}
          items:
          - key: tls.cacrt
            path: tls.cacrt
      - name: tls
        secret:
          secretName: {{ include "discovery.admin.tls" . }}
          items:
          - key: pkcs8.key
            path: pkcs8.key
          - key: tls.crt
            path: tls.crt
          - key: tls.cacrt
            path: tls.cacrt
      containers:
      - name: cred-gen
        env:
        - name: ETCD_USER
          valueFrom:
            secretKeyRef:
              name: {{ include "discovery.crust.etcd.secret" . }}
              key: username
        - name: ETCD_PASS
          valueFrom:
            secretKeyRef:
              name: {{ include "discovery.crust.etcd.secret" . }}
              key: password
        - name: ETCD_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: {{ include "discovery.crust.etcd.configmap" . }}
              key: endpoint
        resources:
          requests:
            memory: {{ .Values.dfs.secretGen.resources.requests.memory | quote }}
            cpu: {{ .Values.dfs.secretGen.resources.requests.cpu | quote }}
          limits:
            memory: {{ .Values.dfs.secretGen.resources.limits.memory | quote }}
            cpu: {{ .Values.dfs.secretGen.resources.limits.cpu | quote }}
        volumeMounts:
{{- if .Values.global.private }}
        - name: dlaas-ca-cert
          mountPath: /etc/dlaas-ca-cert
{{- end }}
        - name: tls
          mountPath: /etc/creds/tls
          readOnly: true
        - name: etcd
          mountPath: /etc/creds/etcd
          readOnly: true
        - name: etcd-cert
          mountPath: /etc/creds/etcd-ca
          readOnly: true
        - name: elastic-cert
          mountPath: /etc/creds/elastic-ca
          readOnly: true
        - name: postgres-cert
          mountPath: /etc/creds/postgres-ca
          readOnly: true
        image: {{ .Values.global.dockerRegistryPrefix }}/
          {{- .Values.dfs.secretGen.image.name }}:
          {{- .Values.dfs.secretGen.image.tag }}
{{ include "sch.security.securityContext" (list . .sch.chart.restrictedSecurityContext) | indent 8 }}
        command:
        - "/bin/bash"
        - -c
        - |
          cxn="{\"endpoints\":\"${ETCD_ENDPOINT}\",\"userid\":\"${ETCD_USER}\",\"password\":\"${ETCD_PASS}\",\"root_prefix\":\"/all/dfs\",\"certificate_file\":\"etcd_certificate\"}"
          pullsecrettype="$(kubectl -n {{ .Release.Namespace }} get secret/{{ .Values.global.image.pullSecret }} -o jsonpath='{.type}')"
          if [[ "${pullsecrettype}" = "kubernetes.io/dockercfg" ]]; then
            auth="$(kubectl -n {{ .Release.Namespace }} get secret/{{ .Values.global.image.pullSecret }} -o jsonpath='{ .data.\.dockercfg }' | base64 -d)"
          else
            auth="$(kubectl -n {{ .Release.Namespace }} get secret/{{ .Values.global.image.pullSecret }} -o jsonpath='{ .data.\.dockerconfigjson }' | base64 -d)"
          fi
          imagepullusername=$(echo ${auth} | tr , '\n' | grep -o '\"auth\":.*' | head -n 1 | sed 's/\"auth\"://g' | tr '\r\n' ' ' | sed 's/ //g;s/\"//g;s/}//g' | base64 -d | tr ':' '\n' | head -n 1 | tr '\r\n' ' ' | sed 's/ //g' )
          imagepullpassword=$(echo ${auth} | tr , '\n' | grep -o '\"auth\":.*' | head -n 1 | sed 's/\"auth\"://g' | tr '\r\n' ' ' | sed 's/ //g;s/\"//g;s/}//g' | base64 -d | tr ':' '\n' | tail -n 1 | tr '\r\n' ' ' | sed 's/ //g' )

          cat <<EOF | kubectl apply -n {{ .Release.Namespace }} -f -
          apiVersion: v1
          kind: Secret
          type: Opaque
          metadata:
            labels:
{{ include "sch.metadata.labels.standard" (list . $jobNameSuffix (dict "service" "discovery")) | indent 14 }}
            name: {{ $dfsSecret }}
          data:
            etcd_certificate: "$(cat /etc/creds/etcd-ca/tls.cacrt | base64 -w 0)"
            etcd_connection: "$(echo "${cxn}" | base64 -w 0)"
            kg_grpc_ssl_pem: "$(cat /etc/creds/tls/pkcs8.key | base64 -w 0)"
            kg_grpc_ssl_crt: "$(cat /etc/creds/tls/tls.crt | base64 -w 0)"
{{- if .Values.global.private }}
            elastic_ssl_cert: "$(tail -n +2 /etc/creds/elastic-ca/tls.cacrt | head -n-1 | tr -d '\n' | base64 -w 0)"
{{- end }}
            kgdb_cert: "$(cat /etc/creds/postgres-ca/tls.cacrt | base64 -w 0)"
{{- if .Values.global.private }}
            dlaas_ssl_cert: "$(cat /etc/dlaas-ca-cert/tls.crt | base64 -w 0)"
{{- end }}
            dlaas_framework_image_username: $(printf '%s' "$imagepullusername" | base64 -w 0)
            dlaas_framework_image_password: $(printf '%s' "$imagepullpassword" | base64 -w 0)
          EOF

      restartPolicy: Never
{{- end }}
