## Architecture - e.g. amd64, s390x, ppc64le. Specific worker node architecture
## to deploy to.
## You can use kubectl version command to determine the architecture on the
## desired worker node.

# Specify architecture (amd64, ppc64le, s390x) and weight to be  used for scheduling as follows :
#   0 - Do not use
#   1 - Least preferred
#   2 - No preference
#   3 - Most preferred
arch:
  amd64: "2 - No preference"
  ppc64le: "2 - No preference"
  s390x: "2 - No preference"

image:
  registry: docker.io
  repository: ppc64le/wordpress
  tag: 5.1.0
  pullPolicy: IfNotPresent

wordpressTablePrefix: wp_

replicaCount: 1

externalDatabase:
## All of these values are only used when mariadb.enabled is set to false
  host: localhost
  user: wordpress
  password:
  database: wordpress
  port: 3306

## MariaDB chart configuration
##
mariadb:
  enabled: true
  database:
    name: wordpress
    user: wordpress
    ## If the password is not specified, mariadb will generates a random password
    password: ""

  service:
    port: 3306
  ## Enable persistence using Persistent Volume Claims
  ##
  persistence:
    enabled: true

  dataVolume:
    storageClassName: ""
    accessModes: ReadWriteMany
    size: 8Gi

## Kubernetes configuration
##
service:
  type: NodePort
  port: 80
  ##
  ## nodePorts:
  ##   http: <to set explicitly, choose port between 30000-32767>
  nodePorts:
    http: ""
  annotations: {}

## Configure extra options for liveness and readiness probes
livenessProbe:
  initialDelaySeconds: 120
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

## Enable persistence using Persistent Volume Claims
##
persistence:
  enabled: true
  storageClass: ""
  ## If you want to reuse an existing claim, you can pass the name of the PVC using
  ## the existingClaim variable
  existingClaim: ""
  accessMode: ReadWriteMany
  size: 10Gi
  useDynamicProvisioning: false

## Configure resource requests and limits
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 200Mi
  # requests:
  #  cpu: 100m
  #  memory: 100Mi

nodeSelector: {}

tolerations: []

affinity: {}

podAnnotations: {}
