{{/* Setting defaults if they are omitted. */}}
{{- $deployEnvironmentIKS := .Capabilities.KubeVersion.GitVersion | regexMatch "IKS" }}
{{- $usefileSystemDrive := .Values.storage.usefileSystemDrive | default false }}
{{- $drives := .Values.storage.drives | default "none" }}
{{- $usedrivesAndPartitions := .Values.storage.usedrivesAndPartitions | default false }}
{{- $secretType := .Values.secretType | default "none" }}
{{- $journalDevice := .Values.storage.journalDevice | default "none" }}
{{- $metadataSize := int64 .Values.storage.metadataSize | int64 }}
{{- $customRegistryURL := .Values.customRegistryURL | default "none" }}
{{- $registrySecret := .Values.registrySecret | default "none" }}

{{- $dataInterface := .Values.network.dataInterface | default "none" }}
{{- $managementInterface := .Values.network.managementInterface | default "none" }}

{{- $envVars := .Values.envVars | default "none" }}

{{- $internalKVDB := .Values.internalKVDB | default false }}
{{- $csi := .Values.csi | default false }}

{{- $etcdCredentials := .Values.etcd.credentials | default "none:none" }}
{{- $etcdCertPath := .Values.etcd.certPath | default "none" }}
{{- $etcdCA := .Values.etcd.ca | default "none" }}
{{- $etcdCert := .Values.etcd.cert | default "none" }}
{{- $etcdKey := .Values.etcd.key | default "none" }}
{{- $etcdEndPoints := .Values.kvdb }}

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: portworx
  namespace: kube-system
  labels:
    name: portworx
{{- include "px.labels" . | nindent 4 }}
  annotations:
    portworx.com/install-source: helm/{{.Release.Service}}-r{{.Release.Revision}}
    portworx.com/helm-vars: chart="{{.Chart.Name}}-{{.Chart.Version}}"{{range $k, $v := .Values }}{{if $v}},{{ $k }}="{{ $v }}"{{end}}{{end}}
spec:
  minReadySeconds: 0
  selector:
    matchLabels:
      name: portworx
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      annotations:
        helm.sh/charts: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
      labels:
        name: portworx
{{- include "px.labels" . | nindent 8 }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: px/enabled
                operator: NotIn
                values:
                - "false"
              - key: node-role.kubernetes.io/master
                operator: DoesNotExist
      hostNetwork: true
      hostPID: true
      {{- if not (eq $registrySecret "none") }}
      imagePullSecrets:
        - name: {{ $registrySecret }}
      {{- end }}
      containers:
      # {{ template "px.getImage"}}
        - name: portworx
          image: {{ template "px.getImage" . }}:{{ required "A valid Image tag is required in the SemVer format" .Values.imageVersion }}
          terminationMessagePath: "/tmp/px-termination-log"
          imagePullPolicy: Always
          args:
          {{- with .Values }}
            [
              {{- if eq $drives "none" }}
                {{- if eq $usedrivesAndPartitions true }}
              "-A",
                {{- else }}
              "-a",
                {{- end -}}
                {{- if or $usefileSystemDrive $deployEnvironmentIKS }}
              "-f",
                {{- end }}
              {{- else }}
                {{- $driveNames := $drives | split ";" }}
                {{- range $index, $name := $driveNames }}
              "-s", "{{ $name }}",
                {{- end -}}
              {{- end -}}

              {{- if ne $journalDevice "none" }}
              "-j", "{{ $journalDevice }}",
              {{- end -}}
  
              {{- if eq $internalKVDB true }}
                "-b",
              {{ end -}}
              
              {{- if empty $etcdEndPoints }}
                {{- if eq $internalKVDB false }}
                  {{ required "A valid ETCD url in the format etcd:http://<your-etcd-endpoint> is required. Verify that the key is correct and there isnt any typo in specifying that, also ensure it is accessible from all node of your kubernetes cluster" $etcdEndPoints }}
                {{- end -}}
              {{- else -}}
                "-k", "{{ regexReplaceAllLiteral "(;)" .kvdb "," }}",
              {{ end -}}

              "-c", "{{ required "Clustername cannot be empty" .clusterName }}",

              {{- if ne $secretType "none" }}
              "-secret_type", "{{ $secretType }}",
              {{- else }}
                {{- if $deployEnvironmentIKS }}
              "-secret_type", "ibm-kp",
                {{- end -}}
              {{- end -}}

              {{- if ne $dataInterface "none" }}
              "-d", "{{ $dataInterface }}",
              {{- end -}}

              {{- if ne $managementInterface "none" }}
              "-m", "{{ $managementInterface }}",
              {{- end -}}

              {{- if ne $etcdCredentials "none:none" }}
              "-userpwd", "{{ $etcdCredentials }}",
              {{- end -}}

              {{- if ne $etcdCA "none" }}
              "-ca", "{{ $etcdCA }}",
              {{- end -}}

              {{- if ne $etcdCert "none" }}
              "-cert", "{{ $etcdCert }}",
              {{- end -}}

              {{- if ne $etcdKey "none" }}
              "-key", "{{ $etcdKey }}",
              {{- end -}}

              "-x", "kubernetes",
              {{- if ne $metadataSize 0 }}
              "-metadata" "{{ printf "size=%d" (int64 $metadataSize) }}",
              {{- end }}
             ]
           {{- end }}
          env:
            - name: "PX_TEMPLATE_VERSION"
              value: "v2"
              {{ if not (eq $envVars "none") }}
              {{- $vars := $envVars | split ";" }}
              {{- range $key, $val := $vars }}
              {{-  $envVariable := $val | split "=" }}
            - name: {{ $envVariable._0 | trim | quote }}
              value: {{ $envVariable._1 | trim | quote }}
              {{ end }}
              {{- end }}

           {{- if not (eq $registrySecret "none") }}
            - name: REGISTRY_CONFIG
              valueFrom:
                secretKeyRef:
                  key: ".dockerconfigjson"
                  name: "{{ $registrySecret }}"
            {{- end }}

            {{- if eq $csi true }}
            - name: CSI_ENDPOINT
              value: unix:///var/lib/kubelet/plugins/com.openstorage.pxd/csi.sock
            {{- end }}

          livenessProbe:
            periodSeconds: 30
            initialDelaySeconds: 840 # allow image pull in slow networks
            httpGet:
              host: 127.0.0.1
              path: /status
              port: 9001
          readinessProbe:
            periodSeconds: 10
            httpGet:
              host: 127.0.0.1
              path: /health
              port: 9015
          securityContext:
            privileged: true
          volumeMounts:
          {{- if not (eq $etcdCertPath "none") }}
            - mountPath: /etc/pwx/etcdcerts
              name: etcdcerts
          {{- end }}
            - name: dockersock
              mountPath: /var/run/docker.sock
            - name: containerdsock
              mountPath: /run/containerd
            - name: etcpwx
              mountPath: /etc/pwx
            - name: cores
              mountPath: /var/cores
            - name: optpwx
              mountPath: /opt/pwx
            - name: sysdmount
              mountPath: /etc/systemd/system
            - name: journalmount1
              mountPath: /var/run/log
              readOnly: true
            - name: journalmount2
              mountPath: /var/log
              readOnly: true
            - name: dbusmount
              mountPath: /var/run/dbus
            - name: hostproc
              mountPath: /host_proc              
            - name: criosock
              mountPath: /var/run/crio
            - name: crioconf
              mountPath: /etc/crictl.yaml
          {{- if eq $csi true }}
        - name: csi-driver-registrar
          imagePullPolicy: Always
          {{- if eq $customRegistryURL "none" }}
          image: "quay.io/k8scsi/driver-registrar:v0.2.0"
          {{- else }}
          image: "{{ $customRegistryURL }}/quay.io/k8scsi/driver-registrar:v0.2.0"
          {{- end}}
          args:
            - "--v=5"
            - "--csi-address=$(ADDRESS)"
          env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: KUBE_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          volumeMounts:
            - name: csi-driver-path
              mountPath: /csi
           {{- end }}

      restartPolicy: Always
      serviceAccountName: px-account
      volumes:
          {{- if not (eq $etcdCertPath "none") }}
        - name: etcdcerts
          secret:
            secretName: px-etcd-certs
            items:
            - key: ca.pem
              path: ca.pem
            - key: client.pem
              path: client.pem
            - key: client-key.pem
              path: client-key.key
          {{- end}}
        - name: dockersock
          hostPath:
            path: /var/run/docker.sock
        - name: containerdsock
          hostPath:
            path: /run/containerd
          {{- if eq $csi true}}
        - name: csi-driver-path
          hostPath:
            path: /var/lib/kubelet/plugins/com.openstorage.pxd
            type: DirectoryOrCreate
          {{- end}}
        - name: etcpwx
          hostPath:
            path: /etc/pwx
        - name: cores
          hostPath:
            path: /var/cores
        - name: optpwx
          hostPath:
            path: /opt/pwx
        - name: sysdmount
          hostPath:
            path: /etc/systemd/system
        - name: journalmount1
          hostPath:
            path: /var/run/log
        - name: journalmount2
          hostPath:
            path: /var/log
        - name: dbusmount
          hostPath:
            path: /var/run/dbus
        - name: hostproc
          hostPath:
            path: /proc
        - name: criosock
          hostPath:
            path: /var/run/crio
        - name: crioconf
          hostPath:
            path: /etc/crictl.yaml
