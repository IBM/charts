
{{- if (.Values.serviceAccount.hook.create) }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ template "px.hookServiceAccount" . }}
  namespace: kube-system
  annotations:
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook": "pre-delete,post-delete,post-install"
  labels:
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{.Release.Service | quote }}
    app.kubernetes.io/instance: {{.Release.Name | quote }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  annotations:
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook": "pre-delete,post-delete,pre-upgrade"
  name: {{ template "px.hookClusterRole" . }}
rules:
  # for daemonset to operator migration, we need hooks for all resources deployed by daemonset, due to resources are
  # different in different helm charts (GCP, IKS, Rancher and portworx), we use wild card here. After daemonset
  # migration is finished for all customers we shall change this back to limited access.
  - apiGroups: ["*"]
    resources: ["*"]
    verbs: ["*"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  annotations:
    "helm.sh/hook-delete-policy": before-hook-creation
    "helm.sh/hook": "pre-delete,post-delete"
  name: {{ template "px.hookClusterRoleBinding" . }}
subjects:
  - kind: ServiceAccount
    name: {{ template "px.hookServiceAccount" . }}
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: {{ template "px.hookClusterRole" . }}
  apiGroup: rbac.authorization.k8s.io
{{- end }}
