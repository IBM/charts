apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "tensorflow-notebook.fullname" . }}
  labels:
    app: {{ template "tensorflow-notebook.name" . }}
    chart: {{ template "tensorflow-notebook.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "tensorflow-notebook.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "tensorflow-notebook.name" . }}
        release: {{ .Release.Name }}
        chart: {{ template "tensorflow-notebook.chart" . }}
        heritage: {{ .Release.Service }}
      annotations:
        productName: tensorflow_notebook
        productID: tensorflow_notebook_{{ .Chart.Version }}
        productVersion: {{ .Chart.Version }}
      {{- if .Values.annotations }}
{{ toYaml .Values.annotations | indent 8 }}
      {{- end }}
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      containers:
        - name: jupyter
          image: "{{ .Values.jupyter.image.repository }}:{{ .Values.jupyter.image.tag }}"
          imagePullPolicy: {{ .Values.jupyter.image.pullPolicy }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: true
            runAsNonRoot: false
            runAsUser: 0
            capabilities:
             drop:
             - MKNOD
          resources:
{{ toYaml .Values.resources | indent 12 }}
          ports:
            - containerPort: 8888
              name: jupyter
          command:
            - jupyter
          args:
            - notebook
            - --allow-root
            - --ip
            - 0.0.0.0    
          env:
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "tensorflow-notebook.fullname" . }}
                  key: password
          livenessProbe:
            httpGet:
              path: /
              port: 8888
          readinessProbe:
            httpGet:
              path: /
              port: 8888
          volumeMounts:
            - mountPath: /output/training_logs
              name: training-logs-volume
        - name: tensorboard
          image: "{{ .Values.tensorboard.image.repository }}:{{ .Values.tensorboard.image.tag }}"
          imagePullPolicy: {{ .Values.tensorboard.image.pullPolicy }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: true
            runAsNonRoot: false
            runAsUser: 0
            capabilities:
             drop:
             - MKNOD
          ports:
            - containerPort: 6006
              name: tensorboard
          command:
            - tensorboard
          args:
            - --logdir
            - /root/lysanne
            - --host
            - 0.0.0.0
          livenessProbe:
            httpGet:
              path: /
              port: 6006
          readinessProbe:
            httpGet:
              path: /
              port: 6006
          volumeMounts:
            - mountPath: /output/training_logs
              name: training-logs-volume
      volumes:
        - name: training-logs-volume
          emptyDir: {}
{{- if .Values.node }}
      affinity:
        {{- include "nodeaffinity" . | indent 6 }}
{{- end }}

