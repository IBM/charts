global:
  build:
    enabled: true
    namespace: "knative-build"
  eventing:
    enabled: false
    in-memory-provisioner:
      enabled: false
    kafka-provisioner:
      enabled: false
  serving:
    enabled: true
    monitoring:
      enabled: false
      elasticsearch:
        enabled: false
      prometheus:
        enabled: false
      zipkin:
        enabled: false
  istio:
    namespace: "istio-system"

build:
  clusterRole:
    name: "knative-build-admin"

  controller:
    name: "build-controller"
    replicas: 1
    port: 9090
    targetPort: 9090
    serviceAccount:
      name: "build-controller"
    image: 
      repository: "gcr.io/knative-releases/github.com/knative/build/cmd/controller@sha256"
      tag: "2667d0ff68a406e0103c58145edef916edc1b41695b38964dc6ccb0b38c0aedf"
      pullPolicy: "IfNotPresent"

  credsImage:
    repository: "gcr.io/knative-releases/github.com/knative/build/cmd/creds-init@sha256"
    tag: "c1c11fafd337f62eea18a1f02b78e6ae6949779bed72d53d19b2870723a8f104"

  gitImage:
    repository: "gcr.io/knative-releases/github.com/knative/build/cmd/git-init@sha256"
    tag: "6fa8043ed114920cd61e28db3c942647ba48415fe1208acde2fb2ac0746c9164"

  nopImage:
    repository: "gcr.io/knative-releases/github.com/knative/build/cmd/nop@sha256"
    tag: "f94e6413749759bc3f80d33e76c36509d6a63f7b206d2ca8fff167a0bb9c77f2"

  fetcherImage:
    repository: "gcr.io/cloud-builders/gcs-fetcher"

  webhook:
    name: "build-webhook"
    replicas: 1
    port: 443
    targetPort: 443
    image:
      repository: "gcr.io/knative-releases/github.com/knative/build/cmd/webhook@sha256"
      tag: "58775663a5bc0d782c8505a28cc88616a5e08115959dc62fa07af5ad76c54a97"
      pullPolicy: "IfNotPresent"

eventing:
  controller:
    name: "eventing-controller"
    replicas: 1
    serviceAccount:
      name: "eventing-controller"
    image:
      repository: "gcr.io/knative-releases/github.com/knative/eventing/cmd/controller@sha256"
      tag: "3486cb9d337b829907532e78c8098b6680fbe3aa10a0aa81e7db327bb8980640"

  webhook:
    name: "webhook"
    replicas: 1
    port: 443
    targetPort: 443
    image:
      repository: "gcr.io/knative-releases/github.com/knative/eventing/cmd/webhook@sha256"
      tag: "1ec64e26ed2b8895e783e9c1a07a11376dcb244f75ad166b2b116f124b2f2d44"
      
  in-memory-provisioner:
    controller:
      name: "in-memory-channel-controller"
      serviceAccount:
        name: "in-memory-channel-controller"
      image:
        repository: "gcr.io/knative-releases/github.com/knative/eventing/pkg/controller/eventing/inmemory/controller@sha256"
        tag: "85a6954a9ab118872f6826425b213e57589de8f9f2ac97d31aef5d5022104532"
      
    dispatcher:
      name: "in-memory-channel-dispatcher"
      replicas: 1
      serviceAccount:
        name: "in-memory-channel-dispatcher"
      image:
        repository: "gcr.io/knative-releases/github.com/knative/eventing/cmd/fanoutsidecar@sha256"
        tag: "a04bdbe0ffad3c47286ebfb961648e9f1d2b366aea243e9ea1ae591e706de06d"

  kafka-provisioner:
    controller:
      name: "kafka-channel-controller"
      serviceAccount:
        name: "kafka-channel-controller"
      bootstrapServers: ""
      image:
        repository: "gcr.io/knative-releases/github.com/knative/eventing/pkg/provisioners/kafka/cmd/controller@sha256"
        tag: "c55c577048f02a37391cab8624def297aaa9c1392a788ac37dc0d57f840f1401"

    dispatcher:
      name: "kafka-channel-dispatcher"
      serviceAccount:
        name: "kafka-channel-dispatcher"
      image:
        repository: "gcr.io/knative-releases/github.com/knative/eventing/pkg/provisioners/kafka/cmd/dispatcher@sha256"
        tag: "37ede90fc4434a3d8e330702a4c51be737a50d950456403df6744aa8faa925ca"

serving:
  activator:
    name: "activator"
    replicas: 3
    image:
      repository: "gcr.io/knative-releases/github.com/knative/serving/cmd/activator@sha256"
      tag: "5c154bf65e435b7e176f27ac4dcf3bc324678f2580c3cf6541901b5de169a136"

  autoscaler:
    name: "autoscaler"
    serviceAccount:
      name: "autoscaler"
    image:
      repository: "gcr.io/knative-releases/github.com/knative/serving/cmd/autoscaler@sha256"
      tag: "8efaffcff9cc078a9a8e4a54fe88cc2ff8036fc189589a849a1ccec8a423d63f"

  fluentd:
    image:
      repository: "k8s.gcr.io/fluentd-elasticsearch"
      tag: "v2.0.4"

  queueProxy:
    image:
      repository: "gcr.io/knative-releases/github.com/knative/serving/cmd/queue@sha256"
      tag: "df0b85347195877985d4ce91daf002febeec50c2d845b58a0a7093d8cdc7c34e"

  controller:
    name: "controller"
    serviceAccount:
      name: "controller"
    image:
      repository: "gcr.io/knative-releases/github.com/knative/serving/cmd/controller@sha256"
      tag: "0c3a179ba49bb53bb51f944013f61349d9a94b3ecf5cb75e5df37dec6d0aef79"

  ingressGateway:
    name: "knative-ingressgateway"
    type: "LoadBalancer"
    image:
      repository: "docker.io/istio/proxyv2"
      tag: "1.0.2"

  webhook:
    name: "webhook"
    image:
      repository: "gcr.io/knative-releases/github.com/knative/serving/cmd/webhook@sha256"
      tag: "1b4320c1d3d70adf4614cd7859082549630c2c3cda19176400673b8cc8df8a7d"

  monitoring:
    elasticsearch:
      elasticsearch:
        replicas: 2
        serviceAccount:
          name: "elasticsearch-logging"
        image:
          repo: "k8s.gcr.io"
          name: "elasticsearch"
          tag: "v5.6.4"
        mountPath: "/data"
        initContainer:
          image:
            name: "alpine"
            tag: 3.6

      kibana:
        name: "kibana-logging"
        port: 5601
        type: "NodePort"
        replicas: 1
        image:
          repo: "docker.elastic.co"
          name: "kibana/kibana"
          tag: 5.6.4

      fluentd:
        name: "fluentd-ds"
        port: 24224
        image:
          repo: "k8s.gcr.io"
          name: "fluentd-elasticsearch"
          tag: "v2.0.4"
        hostPath:
          varlogcontainers: "/var/log/containers"
          varlogpods: "/var/log/pods"
          varlibdockercontainers: "/var/lib/docker/containers"
          libsystemddir: "/usr/lib64"
        logHandlerName: "requestloghandler"
        logEntryName: "requestlog"
        serviceAccount:
          name: "fluentd-ds"

    prometheus:
      configMaps:
        scalingName: "scaling-config"
        prometheusScrape: "prometheus-scrape-config"

      # resources for grafana-service and deployment (pod)
      grafana:
        service:
          name: "grafana"
          port: 30802
          targetPort: 3000
          type: "NodePort"
        deployment:
          name: "grafana"
          replicas: 1
          image:
            repository: "quay.io/coreos/monitoring-grafana"
            tag: 5.0.3
            pullPolicy: "IfNotPresent"
            name: "grafana"
            ports:
              containerPort: 3000
              name: "web"
            resourceLimits:
              cpu: "200m"
              memory: "200Mi"
            resourceRequests:
              cpu: "100m"
              memory: "100Mi"
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
        configMaps:
          datasources: "grafana-datasources"
          dashboards: "grafana-dashboards"
          definitionPilot: "grafana-dashboard-definition-pilot"
          definitionMixer: "grafana-dashboard-definition-mixer"
          definitionK8sStatefulset: "grafana-dashboard-definition-kubernetes-statefulset"
          definitionK8sResourceRequests: "grafana-dashboard-definition-kubernetes-resource-requests"
          definitionK8sPods: "grafana-dashboard-definition-kubernetes-pods"
          definitionK8sNodes: "grafana-dashboard-definition-kubernetes-nodes"
          definitionK8sDeployment: "grafana-dashboard-definition-kubernetes-deployment"
          definitionK8sControlPlaneStatus: "grafana-dashboard-definition-kubernetes-control-plane-status"
          definitionK8sClusterStatus: "grafana-dashboard-definition-kubernetes-cluster-status"
          definitionK8sClusterHealth: "grafana-dashboard-definition-kubernetes-cluster-health"
          definitionK8sCapacityPlanning: "grafana-dashboard-definition-kubernetes-capacity-planning"
          definitionKnativeEfficiency: "grafana-dashboard-definition-knative-efficiency"
          definitionKnative: "grafana-dashboard-definition-knative"
          definitionIstio: "grafana-dashboard-definition-istio"

      # resources for kube-controller-service
      kubeControllerService:
        portName: "http-metrics"
        name: "kube-controller-manager"
        port: 10252
        targetPort: 10252
        type: "ClusterIP"

      # resources for kube-state-metrics-service and deployment (pod)
      kubeState:
        service:
          name: "kube-state-metrics"
          mainPort:
            name: "https-main"
            port: 8443
            targetPort: https-main
          selfPort:
            name: "https-self"
            port: 9443
            targetPort: "https-self"
        deployment:
          name: "kube-state-metrics"
          replicas: 1
          proxyMainImage:
            repository: "quay.io/coreos/kube-rbac-proxy"
            tag: "v0.3.0"
            pullPolicy: "IfNotPresent"
            name: "kube-rbac-proxy-main"
            ports:
              containerPort: 8443
              name: "https-main"
            resourceLimits:
              cpu: "20m"
              memory: "40Mi"
            resourceRequests:
              cpu: "10m"
              memory: "20Mi"
          proxySelfImage:
            repository: "quay.io/coreos/kube-rbac-proxy"
            tag: "v0.3.0"
            pullPolicy: "IfNotPresent"
            name: "kube-rbac-proxy-self"
            ports:
              containerPort: 9443
              name: "https-self"
            resourceLimits:
              cpu: "20m"
              memory: "40Mi"
            resourceRequests:
              cpu: "10m"
              memory: "20Mi"
          metricsImage:
            repository: "quay.io/coreos/kube-state-metrics"
            tag: "v1.3.0"
            pullPolicy: "IfNotPresent"
            name: "kube-state-metrics"
            container: "kube-state-metrics"
            cpu: "100m"
            extraCpu: "1m"
            memory: "100Mi"
            extraMemory: "2Mi"
            threshold: 5
            deployment: "kube-state-metrics"
          resizerImage:
            repository: "k8s.gcr.io/addon-resizer"
            tag: "1.7"
            pullPolicy: "IfNotPresent"
            name: "addon-resizer"
            resourceLimits:
              cpu: "100m"
              memory: "30Mi"
            resourceRequests:
              cpu: "100m"
              memory: "30Mi"
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534

      # resources for node-exporter-service
      nodeExporterService:
        name: "node-exporter"
        portName: "https"
        port: 9102
        type: "ClusterIP"
        image:
          repository: "quay.io/coreos/kube-rbac-proxy"
          tag: "v0.3.0"

      # resources for prometheus-system-discovery-service
      prometheusSystemDiscoveryService:
        name: "prometheus-system-discovery"
        app: "prometheus"
        portName: "web"
        port: 9090
        targetPort: "web"
        type: "ClusterIP"

      # resources for:
      # prometheus-system-np-service, prometheus-system-StatefulSet
      prometheusSystemNp:
        service:
          name: "prometheus-system-np"
          app: "prometheus"
          port: 8080
          targetPort: 9090
          type: "NodePort"
        statefulSet:
          name: "prometheus-system"
          podManagementPolicy: Parallel
          replicas: 2
          app: "prometheus"
          image:
            repository: "prom/prometheus"
            tag: "v2.2.1"
            imagePullPolicy: "IfNotPresent"
            livenessProbe:
              failureThreshold: 10
              port: "web"
              scheme: "HTTP"
              initialDelaySeconds: 30
              timeoutSeconds: 3
              name: "prometheus"
              ports:
                containerPort: 9090
                name: "web"
            readinessProbe:
              failureThreshold: 10
              port: "web"
              scheme: "HTTP"
              timeoutSeconds: 3
            requestResouceMemory: "400Mi"
          terminationGracePeriodSeconds: 600
          updateStrategyType: "RollingUpdate"

      # resources for kube-state-metrics
      # ClusterRoleBinding, ClusterRole, RoleBinding
      kubeStateMetrics:
        crb:
          name: "kube-state-metrics"
        cr:
          name: "kube-state-metrics"
        rb:
          name: "kube-state-metrics"
          roleName: "kube-state-metrics-resizer"
        svcacct:
          name: "kube-state-metrics"

      # resources for node-exporter
      # ClusterRoleBinding, ClusterRole
      nodeExporter:
        cr:
          name: "node-exporter"
        crb:
          name: "node-exporter"
        svcacct:
          name: "node-exporter"
        image:
          repository: "quay.io/prometheus/node-exporter"
          tag: "v0.15.2"

      # resources for prometheus-system
      # ClusterRoleBinding, ClusterRole, RoleBinding, Role
      prometheusSystem:
        crb:
          name: "prometheus-system"
        cr:
          name: "prometheus-system"
        rb:
          name: "prometheus-system"
          namespace: "default"
        role:
          namespace: "default"
        svcacct:
          name: "prometheus-system"

      revision:
        metrics:
          requestCountName: "revisionrequestcount"
          requestDurationName: "revisionrequestduration"
          requestSizeName: "revisionrequestsize"
          responseSizeName: "revisionresponsesize"
        rule:
          promHttpName: "revisionpromhttp"
        prometheus:
          promHandlerName: "revisionpromhandler"

    zipkin:
      name: "zipkin"
      port: 9411
      replicas: 1
      image:
        name: "docker.io/openzipkin/zipkin"
        tag: "2.12.1"
        pullPolicy: "IfNotPresent"

      elasticsearch:
        index: "zipkin"
        kibana: 
          host: "localhost"
          port: 8001
          serviceName: "kibana-logging"
          appPath: "app/kibana#/"
