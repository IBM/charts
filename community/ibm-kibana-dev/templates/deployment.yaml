apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ template "kibana.name" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  name: {{ template "kibana.fullname" . }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "kibana.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        productName: kibana
        productID: kibana_{{ .Chart.Version }}
        productVersion: {{ .Chart.Version }}
      {{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
      {{- end }}
      labels:
        app: {{ template "kibana.name" . }}
        release: "{{ .Release.Name }}"
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        heritage: {{ .Release.Service }}
    spec:
      {{- if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: "{{ .Values.priorityClassName }}"
      {{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: true
            runAsNonRoot: false
            runAsUser: 0
            capabilities:
             drop:
             - MKNOD
        livenessProbe:
          httpGet:
            path: /status
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        readinessProbe:
          httpGet:
            path: /status
            port: {{ .Values.service.internalPort }}
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
        {{- if .Values.commandline.args }}
        args:
          - "/bin/bash"
          - "/usr/local/bin/kibana-docker"
{{ toYaml .Values.commandline.args | indent 10 }}
        {{- end }}
        env:
        {{- range $key, $value := .Values.env }}
        - name: "{{ $key }}"
          value: "{{ $value }}"
        {{- end }}
        ports:
        - containerPort: {{ .Values.service.internalPort }}
          name: {{ template "kibana.name" . }}
          protocol: TCP
        resources:
{{ toYaml .Values.resources | indent 10 }}
        volumeMounts:
        {{- range $configFile := (keys .Values.files) }}
        - name: {{ template "kibana.name" $ }}
          mountPath: "/usr/share/kibana/config/{{ $configFile }}"
          subPath: {{ $configFile }}
        {{- end }}
    {{- if .Values.image.pullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.image.pullSecrets | indent 8 }}
    {{- end }}
    {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
    {{- end }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      volumes:
        - name: {{ template "kibana.name" . }}
          configMap:
            name: {{ template "kibana.fullname" . }}
{{- if .Values.node }}
      affinity:
        {{- include "nodeaffinity" . | indent 6 }}
{{- end }}

