# Licensed to the Apache Software Foundation (ASF) under one or more contributor
# license agreements; and to You under the Apache License, Version 2.0.
{{ if not .Values.kafka.external }}

apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.kafka.name | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    name: {{ .Values.kafka.name | quote }}
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    chart: "{{.Chart.Name}}-{{.Chart.Version}}"
    app: {{ template "fullname" . }}
spec:
  ports:
  - name: broker
    port: {{ .Values.kafka.port }}
  selector:
    app: {{ .Values.kafka.name | quote }}

---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ .Values.kafka.name | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    name: {{ .Values.kafka.name | quote }}
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    chart: "{{.Chart.Name}}"
    app: {{ template "fullname" . }}
spec:
  podManagementPolicy: "Parallel"
  name: {{ .Values.kafka.name | quote }}
  replicas: {{ .Values.kafka.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ .Values.kafka.name | quote }}
        name: {{ .Values.kafka.name | quote }}
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        chart: "{{.Chart.Name}}"
      annotations:
        productName: OpenWhisk
        productVersion: 9.9.9
        productID: none
    spec:
      restartPolicy: {{ .Values.kafka.restartPolicy }}

      {{- if .Values.affinity.enabled }}
      affinity:
{{ include "nodeaffinity" . | indent 6 }}
{{ include "affinity.selfAntiAffinity" ( .Values.kafka.name | quote ) | indent 6 }}
      {{- end }}

{{- if .Values.kafka.persistence.enabled }}
      volumes:
      - name: kafka-data
        persistentVolumeClaim:
          claimName: {{ .Values.kafka.persistence.pvcName | quote }}
{{- end }}

      initContainers:
{{ include "readiness.waitForZookeeper" . | indent 6 }}

      containers:
      - name: {{ .Values.kafka.name | quote }}
        image: {{ .Values.kafka.image | quote }}
        imagePullPolicy: {{ .Values.kafka.imagePullPolicy | quote }}
        readinessProbe:
          tcpSocket:
            port: {{ .Values.kafka.port }}
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: {{ .Values.kafka.port }}
          initialDelaySeconds: 15
          periodSeconds: 20
{{- if .Values.kafka.persistence.enabled }}
        volumeMounts:
        - mountPath: /kafka
          name: kafka-data
{{- end }}
        ports:
        - containerPort: {{ .Values.kafka.port }}
          name: kafka
        env:
        - name: "KAFKA_BROKER_ID"
          value: "0"
        - name: "KAFKA_ADVERTISED_HOST_NAME"
          value: {{ .Values.kafka.name | quote }}
        - name: "KAFKA_ADVERTISED_PORT"
          value: "{{ .Values.kafka.port }}"
        - name: "KAFKA_HOST_NAME"
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: "KAFKA_PORT"
          value: "{{ .Values.kafka.port }}"

        # zookeeper info
        - name: "KAFKA_ZOOKEEPER_CONNECT"
          value: "{{ include "zookeeper_connect" . }}"

{{- if .Values.kafka.persistence.enabled }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.kafka.persistence.pvcName | quote }}
  namespace: {{ .Release.Namespace | quote }}
spec:
  storageClassName: {{ .Values.kafka.persistence.storageClass }}
  accessModes:
    - {{ .Values.kafka.persistence.accessMode }}
  resources:
    requests:
      storage: {{ .Values.kafka.persistence.size }}
{{- end }}
{{- end }}
