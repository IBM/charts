# begin_generated_IBM_copyright_prolog                             
#                                                                  
# This is an automatically generated copyright prolog.             
# After initializing,  DO NOT MODIFY OR MOVE                       
# **************************************************************** 
# Licensed Materials - Property of IBM                             
# 5724-Y95                                                         
# (C) Copyright IBM Corp.  2018, 2019    All Rights Reserved.      
# US Government Users Restricted Rights - Use, duplication or      
# disclosure restricted by GSA ADP Schedule Contract with          
# IBM Corp.                                                        
#                                                                  
# end_generated_IBM_copyright_prolog     
# license specifies if you read the license agreement and agree to the terms. Set the license value to 'accept'. This value is required.
license: "not accepted"

# affinityRules specifies additional affinity rules by which pod label-values influence scheduling for the zookeeper pod. By default zookeeper pod will only run on x86_64 resources.
affinityRules: {}

# debug specifies if want to debug the delete helm hooks.
debug: false

# initLimit specifies the number of ticks that a member of the ZooKeeper ensemble is allowed to perform leader election.
initLimit: 15

# jvmFlags specifies the default JVMFLAGS for the ZooKeeper server (if specified, the computed JVM heap size is ignored). For example: -verbose:gc -Xmx3g -Xms1g.
jvmFlags:

# logLevel specifies the log level for ZooKeeper logger. Valid values are: FATAL, ERROR, WARN, INFO, DEBUG, TRACE.
logLevel: "INFO"

# maxClientCnxns specifies the number of concurrent connections that a client may make to a single ZooKeeper member. Specify the value 0 for no limit.
maxClientCnxns: 0

# maxSessionTimeout specifies the maximum session timeout in milliseconds(ms) that the server will allow the client to negotiate (20 * tickTime).
maxSessionTimeout: 40000

# minSessionTimeout specifies the minimum session timeout in milliseconds(ms) that the server will allow the client to negotiate. (2 * tickTime).
minSessionTimeout: 4000

# nodeSelector specifies the node labels for pod assignment.
nodeSelector: {}

# podLabels specifies key/value pairs labels that are attached to zookeeper pods.
podLabels: {}

# podManagementPolicy specifies the policy to use when launching and terminating pods.
podManagementPolicy: "Parallel"

# purgeInterval specifies the time interval in hours for which the purge task has to be triggered. Specify 0 to disable.
purgeInterval: 1

# replicaCount specifies the number of ZooKeeper nodes.
replicaCount: 1

# serviceAccount specifies the service account. If specified, it must be granted permissions for required Kubernetes objects.  If not specified, one will be created with necessary role based access control objects.
serviceAccount:

# snapRetainCount specifies the number of snapshots that the ZooKeeper server will retain.
snapRetainCount: 5

# syncLimit specifies the number of ticks by which a follower may lag behind the ZooKeeper ensemble leader.
syncLimit: 10

# tickTime specifies the basic time unit in milliseconds(ms) used for heartbeats and timeouts.
tickTime: 2000

# tolerations specifies the toleration labels for pod assignment.
tolerations: []

image:
  # image.prefix specifies the repository for the docker images. If specified, this value will be pre-appended to the image names.
  prefix:

  # image.pullPolicy specifies the policy used to pull images from docker registry. Valid values are: Always, IfNotPresent.
  pullPolicy: "Always"

  # image.pullSecrets specifies the secret used to pull images from docker registry.
  pullSecrets:

  # image.repository specifies the image to configure for the ZooKeeper. This value is required.
  repository: "streams-zookeeper-el7"

  # image.tag specifies the tag portion of the ZooKeeper image. This value is required.
  tag: "5.1.0.2"

persistence:
  # persistence.enabled specifies if dynamic persistence is enabled.
  enabled: false

  # persistence.storageClass specifies the storage class for the persistent volume claim. If persistence.enabled is true, and no storage class name is specified, uses default class.
  storageClass:

  # persistence.accessMode specifies the access mode for the persistent volume claim.
  accessMode: "ReadWriteOnce"

  # persistence.size specifies the size for the persistent volume claim.
  size: "10Gi"

resources:
  # resources.cpu specifies the minimum required amount of CPU core resources for ZooKeeper Must be less than or equal to resources.cpuLimit. This value is required.
  cpu: "1"

  # resources.cpuLimit specifies the upper limit of CPU core resource for ZooKeeper. This value is required.
  cpuLimit: "1"

  # resources.memory specifies the minimum required amount of memory for ZooKeeper. Must be less than or equal to resources.memoryLimit. This value is required.
  memory: "2Gi"

  # resources.memoryLimit specifies the upper limit for memory in bytes for ZooKeeper. This value is required.
  memoryLimit: "2Gi"

service:
  # service.type specifies the type of Kubernetes service to create for exposing ZooKeeper.
  type: "ClusterIP"

  # service.electionPort specifies the election port value for the ZooKeeper service.
  electionPort: 3888

  # service.port specifies the port value for the ZooKeeper service.
  port: 2181

  # service.serverPort specifies the server port value for the ZooKeeper service.
  serverPort: 2888

  # service.annotations specifies arbitrary non-identifying metadata for ZooKeeper service.
  annotations: {}

  # service.protocol specifies the protocol for the ZooKeeper service.
  protocol: "TCP"

updateStrategy:
  # updateStrategy.type specifies the update stratgey for ZooKeeper.
  type: "RollingUpdate"
