# ##############################################################################
######################## IBM DSM ##############################################
###############################################################################

###############################################################################
## Common image variables
###############################################################################
## Architecture - e.g. amd64, s390x, ppc64le. Specific worker node architecture
## to deploy to.
## You can use kubectl version command to determine the architecture on the
## desired worker node.

# Specify architecture (amd64, ppc64le, s390x) and weight to be  used for scheduling as follows :
#   0 - Do not use
#   1 - Least preferred
#   2 - No preference
#   3 - Most preferred
arch:
  amd64: "2 - No preference"
  ppc64le: "2 - No preference"
  s390x: "2 - No preference"

clusterDomainName: "svc.cluster.local"
consoleArch: "standalone"
clusterName: "multi_tenant"
enableMesh: false
customLabels: ""
customAnnotations: ""
deployUCCanary: false
debug: false
externalHost: ""
customNodeSelectorTerms: ""
customPodAffinity: ""
customPodAntiAffinity: ""
customTolerations: ""
autoDiscoverDataServer: true
role: ""
clusterRole: ""
docker_registry_prefix: ""
allow_sudo: true
ingress:
  name: ""
  enabled: false
image:
  repository: "icr.io/obs/hdm/db2u/unified-console"
  docker_image: ""
  tag: "rhos-db2u-56-x86_64"
  arch: ""
  pullPolicy: Always

global:
  serviceAccount: ""
  dockerRegistryPrefix: ""
  image:
    secretName: ""
customLabelValues:
  app: ""
  appKubeIo:
   name: ""
   instance: ""
  serviceInstanceID: ""

ucui:
  image:
    repository: "icr.io/obs/hdm/db2u/unified-console-zdtproxy"
    docker_image: ""
    tag: "rhos-db2u-56-x86_64"
  resources:
    requests:
      memory: 500Mi
      cpu: 300m
    limits:
      memory: 1Gi
      cpu: 500m
  service:
    httpsPort: 8443
    httpsPort2: 443
    type: ClusterIP
    name: ""
  deployment:
    name: ""
ucapi:
  image:
    repository: "icr.io/obs/hdm/db2u/unified-console"
    docker_image: ""
    tag: "rhos-db2u-56-x86_64"
  resources:
    requests:
      memory: 2Gi
      cpu: 1
    limits:
      memory: 4Gi
      cpu: 2
  service:
    httpsPort: 11081
    type: ClusterIP
    name: ""
  deployment:
    name: ""
dbapi:
  image:
    repository: "gunified-console-dbapi"
    tag: "latest"
  service:
    name: dbapi
    replicas: 2
  resources:
    requests:
      memory: 500Mi
      cpu: 250m
    limits:
      memory: 16Gi
      cpu: 2

repository:
  enabled: true
  dbType: ""

runsql:
  image:
    repository: "gunified-console-runsql"
    tag: "latest"
  service:
    name: runsql
    replicas: 2
  resources:
    requests:
      memory: 500Mi
      cpu: 250m
    limits:
      memory: 16Gi
      cpu: 2

admin:
  image:
    repository: "gunified-console-admin"
    tag: "latest"
  service:
    name: admin
    replicas: 2
  resources:
    requests:
      memory: 500Mi
      cpu: 250m
    limits:
      memory: 16Gi
      cpu: 2

monitor:
  image:
    repository: "gunified-console-monitor"
    tag: "latest"
  service:
    name: monitor
    replicas: 2
  resources:
    requests:
      memory: 1Gi
      cpu: 500m
    limits:
      memory: 16Gi
      cpu: 2

scheduler:
  image:
    repository: "gjob-scheduler"
    tag: "latest"
  service:
    name: job-scheduler
    httpsPort: 8443
    httpPort: 8080
  resources:
    requests:
      memory: 100Mi
      cpu: 250m
    limits:
      memory: 500Mi
      cpu: 1

registry:
  image:
    repository: "registry-manager"
    tag: "latest"
  service:
    name: registry-manager
    httpsPort: 8443
    httpPort: 8080
  resources:
    requests:
      memory: 100Mi
      cpu: 250m
    limits:
      memory: 500Mi
      cpu: 1

nginx:
  image:
    repository: "zdtproxy"
    tag: "latest"
  service:
    type: NodePort
    name: nginx
    httpsPort: 8443
    httpsPort2: 443
    nodePort: 30443
    nodePort2: 30444
    replicas: 2
  resources:
    requests:
      memory: 500Mi
      cpu: 250m
    limits:
      memory: 1Gi
      cpu: 2
redis:
  enabled: false
  replicas: 3
  redis:
    masterGroupName: "ucmaster"
  name: redis
  dev:
    sentinelPort0: 31360
    sentinelPort1: 31361
    sentinelPort2: 31362
    port0: 31370
    port1: 31371
    port2: 31372

ucinfluxdb:
  image:
    repository: "ibm-unified-console"
    docker_image: ""
    tag: "1.4.0.0"
  service:
    name: ""
    httpsPort: 8086
    type: ClusterIP
  resources:
    requests:
      memory: 256Mi
      cpu: 100m
    limits:
      memory: 2Gi
      cpu: 1000m

ucgoapi:
  enabled: false
  image:
    repository: "guc-utils-api"
    docker_image: ""
    tag: "1.4.0.0"
  deployment:
    name: ""
    port: 3500
  service:
    name: uc-utils-api
    httpsPort: 3500
    httpPort: 3500
    type: ClusterIP
    targetPort: 3500
  resources:
    requests:
      memory: 100Mi
      cpu: 250m
    limits:
      memory: 500Mi
      cpu: 1

uccollector:
  deployment:
    name: ""

components:
 - dbapi
 - admin
 - runsql
pvInitJob:
  name: ""
  resources:
    requests:
      memory: 512Mi
      cpu: 100m
    limits:
      memory: 512Mi
      cpu: 100m
deployment:
  name: ""
adminServiceAccountName: ""
serviceAccountName: ""
###############################################################################
## product env setting
###############################################################################
dataServer:
  ldap:
    host: ""
    port: ""
    rootPwd: ""
    rootPwdSecretName: ""
    baseDn: ""
    rootDn: ""
    adminGroup: ""
    userGroup: ""
    sslMethod: ""
  metadb:
    host: ""
    port: ""
    nonSSLPort: ""
    sslPort: ""
    alternateHost: ""
    alternatePort: ""
    user: ""
    pwd: ""
    pwdSecretName: ""
    dbName: ""
    ssl: ""
    sslCertFileName: ""
    securityMechanism: ""
    dsExtType: ""
    db2iadm1GroupId: ""
  createCustomerDBProfile: ""
  customerDBProfileName: ""
  db2zAgent:
    host: ""
    port: ""
  sharedPVC:
    enabled: false
    name: ""
    mountRootPath: "/mnt/pv/uc_dsserver_shared"
    onlyForShare: false
    subPath:
      downloads: "downloads"
      config: "config"
      userHome: "user-home"
  userHome: ""
runNginx: "1"
logToStdoutStderr: true
platformCode: ""
disableHostCheck: "true"
serviceName: ""
platform: ""
product: ""
zenNamespace: ""
zenServiceInstanceId: ""
useConfigMap: false
configMapName: ""
productName: "IBM Unified Console"
productID: "ICP4D-IBMUnifiedConsole_Prod_00000"
productVersion: ""

ucConfigMapName: "ucconfigmap"
jobsConfigMapName: "jobsconfigmap"
###############################################################################
## Persistent Storage
###############################################################################

## Global persistence settings
persistence:
  enabled: true
  useDynamicProvisioning: false
  initJob: false
  waitInit: "false"

## Persistence enabled by default
dataVolume:
  name: "datavolume"

  ## Specify the name of the Existing Claim to be used by your application
  existingClaimName: ""

  mountPath: "/mnt/pv/unified_console_data"


  ## Specify the name of the StorageClass
  ## empty string means don't use a StorageClass
  storageClassName: ""

  ## Required minimum Persistence Storage volume size
  size: 4Gi

service:
  httpPort: 11080
  httpsPort: 8443
  httpsPort2: 443
  type: ClusterIP
  name: console
## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  requests:
    memory: 4Gi
    cpu: 2
  limits:
    memory: 16Gi
    cpu: 4


secret:
  ## if ucApiKey is not provided, will auto generate one
  ucApiKey: ""
  etcdPassword: ""
  scheduler:
    user: "user"
  ## if password is not provided, will auto generate one
    password: ""
  registry:
    user: "user"
  ## if password is not provided, will auto generate one
    password: ""
  vault:
     role: ""
     secrets: ""
  ## Nginx predefined certification
  nginx_tls:
     cert: ""
     key: ""
  ## Influxdb creds
  ucInfluxdb:
    user: "influx"
    userPassword: ""
    db: "uc-historical-monitoring"
    writeUser: "influx_write"
    writePassword: ""
    readUser: "influx_read"
    readPassword: ""
    adminUser: "influx_admin"
    adminPassword: ""
    authEnabled: "true"

  ## cloud service api key
  service_api_key: ""
  ## ssl cert for icd test cluster
  sslCert:

# traffic
productionDeployment:
  weight: 100
canaryDeployment:
  weight: 0
# DB2 repository for DSM
#repository:
## Architecture
#  enabled: false
#  arch:
#    amd64: "2 - No preference"
#    ppc64le: "2 - No preference"
#    s390x: "2 - No preference"

#  image:
#    repository: "store/ibmcorp/db2_developer_c"
#    tag: "11.1.2.2b"
#    pullPolicy: IfNotPresent
#    arch: ""
  ## global persistence settings
#  persistence:
#    useDynamicProvisioning: false
  ## Persistence parameters for /database
#  dataVolume:

    ## Specify the name of the StorageClass
    ## empty string means don't use a StorageClass
#    storageClassName: ""
#    size: 20Gi

  ## Configure resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
#  resources:
#    requests:
#      memory: 2Gi
#      cpu: 2000m
#    limits:
#      memory: 16Gi
#      cpu: 4000m

