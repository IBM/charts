{{ if and (not .Values.storage.storageLocation.dataStorage.enablePodLevelClaim) (.Values.storage.storageLocation.dataStorage.enabled) (eq .Values.storage.storageLocation.dataStorage.volumeType "pvc") -}}
  {{ if (not .Values.storage.storageLocation.dataStorage.pvc.existingClaim.name) -}}
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: {{ template "fullname" . }}-db2u-data-storage
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  {{- if .Values.storage.storageLocation.dataStorage.pvc.claim.useDynamicProvisioning }}
  storageClassName: {{ default nil .Values.storage.storageLocation.dataStorage.pvc.claim.storageClassName | quote }}
  {{- else }}
  storageClassName: {{ .Values.storage.storageLocation.dataStorage.pvc.claim.storageClassName | quote }}
  {{- end }}
  accessModes:
    - "ReadWriteMany"
  resources:
    requests:
      storage: {{ .Values.storage.storageLocation.dataStorage.pvc.claim.size | quote }}
    {{- if and (not (empty .Values.storage.storageLocation.dataStorage.pvc.claim.volumeLabel)) (not (empty .Values.storage.storageLocation.dataStorage.pvc.claim.volumeLabelValue)) }}
  selector:
    matchLabels:
      {{ .Values.storage.storageLocation.dataStorage.pvc.claim.volumeLabel }}: {{ .Values.storage.storageLocation.dataStorage.pvc.claim.volumeLabelValue }}
    {{- end }}
  {{- end }}
{{- end }}
