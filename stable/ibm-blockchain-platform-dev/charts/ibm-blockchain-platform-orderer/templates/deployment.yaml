# Â© Copyright IBM Corporation 2018
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
{{- include "sch.config.init" (list . "sch.chart.config.values") -}}
{{- $compName := .sch.chart.components.orderer.compName }}
{{- $labels := include "sch.metadata.labels.standard" (list . $compName) }}
{{- $annotations := include "sch.metadata.annotations.metering" (list . .sch.chart.metering) }}

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-orderer
  labels:
{{ $labels | indent 4 }}
  annotations:
    helm.sh/created: {{ .Release.Time.Seconds | quote }}
spec:
  replicas: 1
  template:
    metadata:
      labels:
{{ $labels | indent 8 }}
      annotations:
{{- $annotations | indent 8 }}
    spec:
      hostIPC: false
      hostNetwork: false
      hostPID: false
      serviceAccountName: {{ .Values.global.serviceAccountName }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - {{ .Values.app.arch }}
      volumes:
      - name: orderer-data
      {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{  default ( printf "%s-%s" .Release.Name "orderer") .Values.pvc.existingClaimName }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      - name: msp-secret
        secret:
          secretName: {{ .Values.app.mspsecret }}
      - name: configtx-yaml
        configMap:
          name: {{ .Release.Name }}-genesis
      - name: orderer-msp
        emptyDir:
          medium: Memory
      {{- if .Values.app.config }}
      - name: orderer-config
        configMap: 
          name: {{ .Release.Name }}-orderer-config
      {{- end }}
      - name: init-temp
        emptyDir:
          medium: Memory
      initContainers:
      - name: init
{{- if .Values.global.multiarch }}
        image: "{{ .Values.image.initimage }}:{{ .Values.image.inittag }}"
{{- else }}
        image: "{{ .Values.image.initimage }}-{{ .Values.app.arch }}:{{ .Values.image.inittag }}"
{{- end }}
        imagePullPolicy: Always
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        resources:
{{ toYaml .Values.resources | indent 12 }}
        volumeMounts:
        - name: msp-secret
          mountPath: /secret
        - name: orderer-msp
          mountPath: /certs
        - name: init-temp
          mountPath: /opt       
        env:
        {{- include "license.accept.env.ref" . | indent 8 }}
        - name: TYPE
          value: orderer
        - name: CRYPTO_JSON_LOCATION
          value: /secret/secret.json
        - name: ORDERER_GENERAL_LOCALMSPDIR
          value: /certs/msp
        - name: MSP_SECRET_NAME
          value: {{ .Release.Name }}-orderer-mspsecret
        - name: GENERATE_GENESIS_BLOCK
          value: "true"
        - name: ORDERER1_URL
          value: {{ .Release.Name }}-orderer:7050
        - name: ORDERERORG1_NAME
          value: {{ .Values.ord.orgName }}
        - name: ORDERERORG1_ROLE
          value: Role.MEMBER
        - name: "MY_POD_NAMESPACE"
          valueFrom:
            fieldRef:
              fieldPath: "metadata.namespace"
      containers:
      - name: orderer
{{- if .Values.global.multiarch }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
{{- else }}
        image: "{{ .Values.image.repository }}-{{ .Values.app.arch }}:{{ .Values.image.tag }}"
{{- end }}
        imagePullPolicy: Always
        securityContext:
          privileged: false
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        envFrom:
        - configMapRef:
            name: {{ .Release.Name }}-env
        env:
        {{- include "license.accept.env.ref" . | indent 8 }}
        ports:
        - containerPort: 7050
        livenessProbe:
          tcpSocket:
            port: 7050
          initialDelaySeconds: 90
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          tcpSocket:
            port: 7050
          initialDelaySeconds: 90
          timeoutSeconds: 5
          failureThreshold: 6
        resources:
{{ toYaml .Values.resources | indent 12 }}
        volumeMounts:
        - name: orderer-data
          mountPath: /data
        - name: configtx-yaml
          mountPath: /etc/hyperledger/fabric/configtx.yaml
          subPath: configtx.yaml
        - name: orderer-msp
          mountPath: /certs
        {{- if .Values.app.config }} 
        - name: orderer-config
          mountPath: /etc/hyperledger/fabric/orderer.yaml
          subPath: orderer.yaml
        {{- end }}
