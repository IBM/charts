# Â© Copyright IBM Corporation 2017
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# The transadv-server pod deploys Transformation Advisor in Liberty server as a container
#

kind: Deployment
apiVersion: apps/v1beta2 

metadata:
  name: {{ template "fullname" . }}-server
  labels:
    app: {{ template "fullname" . }}-server
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "fullname" . }}-server
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}-server
        chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
      annotations:
        productName: "{{ .Chart.Description }}"
        productID: "Tool"
        productVersion: "{{ .Chart.Version }}"
    spec:
      hostIPC: false
      hostNetwork: false
      hostPID: false
      securityContext:
        runAsNonRoot: true 
        runAsUser: 1001
      affinity:
        {{- include "nodeAffinity" . | indent 6 }}
      serviceAccountName: {{ .Values.security.serviceAccountName  | default "default" }}
      containers:
        - name: {{ .Chart.Name }}-server
          image: "{{ .Values.transadv.image.repository }}:{{ .Values.transadv.image.tag }}"
          imagePullPolicy: {{ .Values.transadv.image.pullPolicy }}
          resources:
{{ toYaml .Values.transadv.resources | indent 12 }}
          ports:
            - containerPort: 9080
              name: server
          env:
            - name: TA_DEMO_ENABLED
              value:  "{{ .Values.demo.enabled }}"
            - name: TA_ON_ICP
              value: "true"
            - name: TA_DB_HOST
              value: http://{{ template "fullname" . }}-couchdb
            - name: TA_DB_PORT
              value: $({{ template "k8name" . }}_COUCHDB_SERVICE_PORT)
            - name: TA_DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.authentication.icp.secretName | default "xxplaceholderxx" }}
                  key: db_username
                  optional: true
            - name:  TA_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.authentication.icp.secretName | default "xxplaceholderxx" }}
                  key: secret
                  optional: true
            - name:  TA_LA_HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name:  TA_PUBLIC_ACCESSIBLE_API_SERVER_URL
              value: "{{ .Values.transadv.publicUrl }}"
            - name:  TA_LA_CLUSTER_HOST
              value: http://$(TA_LA_HOST_IP)
            - name: TA_API_SERVER_INGRESS_PATH
              value: /{{ .Release.Name }}-server # need forward slash is required
            - name:  TA_LA_NODE_PORT
              {{ if .Values.ingress.enabled -}}
              value: ""
              {{- else }}
              value: "{{ .Values.transadv.service.nodePort }}"
              {{- end }}
            - name:  TA_ALLOW_CORS
              value: "true"
            - name: TA_UI_SERVICE_NAME
              value: {{ template "fullname" . }}-ui
            - name:  TA_UI_HOST
              value: http://$(TA_UI_SERVICE_NAME)
            - name:  TA_UI_PORT
              value: "{{ .Values.transadvui.internal.port }}"
            - name: TA_AUTH_LIBERTY_DISABLED
              {{ if .Values.ingress.enabled -}}
              value: "false"
              {{- else }}
              value: "true"
              {{- end }}
            - name: TA_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.authentication.icp.secretName | default "xxplaceholderxx" }}
                  key: secret
                  optional: true
            - name: TA_AUTH_ICP_MASTER_IP
              value: "{{ .Values.authentication.icp.edgeIp }}"
            - name: TA_AUTH_ICP_ENDPOINT_PORT #8443
              value: "{{ .Values.authentication.icp.endpointPort }}"
            - name: TA_AUTH_OIDC_ENDPOINT_PORT #9443
              value: "{{ .Values.authentication.oidc.endpointPort }}"
            - name: TA_AUTH_OIDC_CLIENT_ID
              value:  "{{ .Values.authentication.oidc.clientId }}"
            - name: TA_AUTH_OIDC_CLIENT_SECRET
              value: "{{ .Values.authentication.oidc.clientSecret }}"
          securityContext:
            allowPrivilegeEscalation: true
            readOnlyRootFilesystem: false
            runAsNonRoot: true 
            runAsUser: 1001
            privileged: false
            capabilities:
              drop:
              - ALL 
              add:
              - CHOWN
              - DAC_OVERRIDE
              - FOWNER
              - FSETID
              - KILL
              - SETGID
              - SETUID
              - SETPCAP
              - NET_BIND_SERVICE
              - NET_RAW
              - SYS_CHROOT
              - AUDIT_WRITE
              - SETFCAP
          # set liveness probe to determine if container needs to be restarted
          # this test is the same as the readiness probe however this tests for multiple long periods
          # of time of non-responsiveness - if fails the tests, restarts the container
          # - command, http, or tcp
          # ref : https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
          livenessProbe:
            exec:
              command:
              - bash
              - -c
              - curl -s -k localhost:9080 | grep "WebSphere Liberty"
            initialDelaySeconds: {{ .Values.transadv.livenessProbe.initialDelaySeconds }} 
            timeoutSeconds: {{ .Values.transadv.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.transadv.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.transadv.livenessProbe.failureThreshold }}
          # set readiness probe to determine if container is ready to accept traffic
          # - command, http, or tcp
          # looks for short durations of non-responsiveness to identify as unavail to accept traffic
          # ref : https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
          readinessProbe:
            exec:
              command:
              - bash
              - -c
              - curl -s -k localhost:9080 | grep "WebSphere Liberty"
            initialDelaySeconds: {{ .Values.transadv.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.transadv.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.transadv.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.transadv.readinessProbe.failureThreshold }}
