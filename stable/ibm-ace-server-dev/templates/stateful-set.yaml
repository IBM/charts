# Â© Copyright IBM Corporation 2019
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
{{- if eq .Values.imageType "acemqserver" }}
{{- include "sch.config.init" (list . "ibm-ace.sch.chart.config.values") }}
{{- $saName := include "sch.names.fullCompName" (list . "serviceaccount") }}
{{- $pvcName := .Values.dataPVC.name }}
{{- $fullName := include "sch.names.fullName" (list .) }}
{{- $statefulSetName := include "sch.names.statefulSetName" (list . ) }}
{{- $designerFlowsName := include "sch.names.fullCompName" (list . "designer-flows") }}
{{- $tracingAgentName := include "sch.names.fullCompName" (list . "od-tracing-agent") }}
{{- $tracingCollectorName := include "sch.names.fullCompName" (list . "od-tracing-collector") }}
{{- $secretName := .Values.integrationServer.configurationSecret | default (printf "%s-%s" $statefulSetName "configuration") }}
{{- $volumeClaimTemplateName := include "sch.names.volumeClaimTemplateName" (list . $pvcName $statefulSetName) }}
{{- $saName := include "sch.names.fullCompName" (list . "serviceaccount") }}
{{- $serverName := .Values.integrationServer.name | default .Release.Name | replace "-" "" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $statefulSetName }}
  labels:
{{ include "sch.metadata.labels.standard" (list . ) | indent 4 }}
  annotations:
    appconnectenterprise: 'dev'
{{- if .Values.contentServerURL }}
    appconnectenterpriseContentUrl: {{ index (splitList "?" (trim .Values.contentServerURL)) 0 | quote }}
{{- end }}
    serverName: {{ print $serverName | quote }}
spec:
  selector:
    matchLabels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 6 }}
  serviceName: acemq
  replicas: 1
  template:
    metadata:
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 8 }}
      name: {{ $statefulSetName }}
      labels:
{{ include "sch.metadata.labels.standard" (list . ) | indent 8 }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - {{ .Values.arch }}
      serviceAccountName: {{ $saName }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        fsGroup: {{ default 888 .Values.integrationServer.fsGroupGid }}
      containers:
        - name: {{ $statefulSetName }}
          image: "{{ .Values.image.acemq }}-{{ .Values.arch }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
          - containerPort: {{ .Values.service.webuiPort }}
            name: webui
          - containerPort: {{ .Values.service.serverlistenerPort }}
            name: ace-http
          - containerPort: {{ .Values.service.serverlistenerTLSPort }}
            name: ace-https
          - containerPort: 1414
          - containerPort: 9443
          - containerPort: 9157
          env:
            - name: LICENSE
              value: {{ .Values.license | quote }}
            - name: USE_QMGR
              value: "true"
            - name: DEV_QMGR
              value: "true"
            - name: MQ_QMGR_NAME
              value: {{ .Values.acemq.qmname | default .Release.Name | replace "-" "" | quote }}
            - name: ACE_SERVER_NAME
              value: {{ print $serverName | quote }}
            - name: SERVICE_NAME
              value: {{ include "sch.names.fullName" (list .) }}
            {{- if .Values.contentServerURL }}
            - name: ACE_CONTENT_SERVER_URL
              value: {{ index (splitList "?" (trim .Values.contentServerURL)) 0 | quote }}
            - name: ACE_CONTENT_SERVER_NAME
              value: {{ index (splitList ":" (index (splitList "/" (trim .Values.contentServerURL)) 2)) 0 | quote }}
            - name: ACE_CONTENT_SERVER_TOKEN
              value: {{ index (splitList "?" (trim .Values.contentServerURL)) 1 | quote }}
            {{- end }}
            - name: LOG_FORMAT
              value: {{ .Values.log.format | default "json" | quote }}
            - name: MQ_ENABLE_METRICS
              value: {{ .Values.metrics.enabled | default true | quote }}
            - name: ACE_ENABLE_METRICS
              value: {{ .Values.metrics.enabled | default true | quote }}
            - name: ACE_ENABLE_OPEN_TRACING
              value: {{ .Values.odTracingConfig.enabled | default false | quote }}
            - name: MQSI_OVERRIDE_HOSTNAME
              value: {{ .Values.service.iP }}
            - name: "ACE_KEYSTORE_PASSWORD"
              valueFrom:
                 secretKeyRef:
                   name: {{ $secretName }}
                   optional: true
                   key: keystorePassword
            - name: "ACE_TRUSTSTORE_PASSWORD"
              valueFrom:
                 secretKeyRef:
                   name: {{ $secretName }}
                   optional: true
                   key: truststorePassword
            - name: ACE_DEFAULT_APPLICATION_NAME
              value: {{ .Values.integrationServer.defaultAppName | quote }}
            - name: MQ_EPHEMERAL_PREFIX
              value: "/run/mqm"
            - name: MQ_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  optional: true
                  key: adminPassword
            - name: MQ_APP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  optional: true
                  key: appPassword
            - name: DEFAULT_CONTENT_SERVER
              value: "true"
          volumeMounts:
            {{- if .Values.contentServerURL }}
            - name: webusers
              mountPath: "/home/aceuser/initial-config/webusers"
            {{- end }}
            {{- if .Values.integrationServer.keystoreKeyNames }}
            - name: keystore
              mountPath: "/home/aceuser/initial-config/keystore"
            {{- end }}
            {{- if .Values.integrationServer.truststoreCertNames }}
            - name: truststore
              mountPath: "/home/aceuser/initial-config/truststore"
            {{- end }}
            - name: odbcini
              mountPath: "/home/aceuser/initial-config/odbcini"
            - name: mqsc
              mountPath: "/home/aceuser/initial-config/mqsc"
            - name: policy
              mountPath: "/home/aceuser/initial-config/policy"
            - name: serverconf
              mountPath: "/home/aceuser/initial-config/serverconf"
            - name: setdbparms
              mountPath: "/home/aceuser/initial-config/setdbparms"
            - name: extensions
              mountPath: "/home/aceuser/initial-config/extensions"
            - name: agent
              mountPath: "/home/aceuser/initial-config/agent"
            - name: ssl
              mountPath: "/home/aceuser/initial-config/ssl"
            {{- if .Values.persistence.enabled }}
            - name: {{ $volumeClaimTemplateName }}
              mountPath: "/mnt/mqm"
            {{- end }}
            {{- if .Values.contentServerURL }}
            - name: contentservertls
              mountPath: "/home/aceuser/ssl"
            {{- end }}
            {{- if .Values.acemq.pki.trust }}
            {{- range $index, $source := .Values.acemq.pki.trust }}
            - name: trust{{- $index }}
              mountPath: "/etc/mqm/pki/trust/{{- $index }}"
              readonly: true
            {{- end }}
            {{- end }}
            {{- if .Values.acemq.pki.keys }}
            {{- range $index, $source := .Values.acemq.pki.keys }}
            - name: {{ $source.name }}
              mountPath: "/etc/mqm/pki/keys/{{- $source.name }}"
              readonly: true
            {{- end }}
            {{- end }}
            {{- if .Values.designerFlowsEnabled }}
            - name: tmp
              mountPath: "/tmp"
            - name: workdir
              mountPath: "/home/aceuser/ace-server"
            {{- end }}
          securityContext:
            seLinuxOptions:
              type: spc_t
            allowPrivilegeEscalation: true
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 888
            privileged: false
            capabilities:
              add:
              - SETPCAP
              - AUDIT_WRITE
              - CHOWN
              - NET_RAW
              - DAC_OVERRIDE
              - FOWNER
              - FSETID
              - KILL
              - SETUID
              - SETGID
              - NET_BIND_SERVICE
              - SYS_CHROOT
              - SETFCAP
              drop:
              - ALL
          # Set liveness probe to determine if the Integration Server is running
          livenessProbe:
            exec:
              command:
              - chkacehealthy
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          # Set readiness probe to determine if the Integration Server admin endpoint is running
          readinessProbe:
            exec:
              command:
              - chkaceready
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          resources:
            limits:
{{ toYaml .Values.acemq.resources.limits | indent 14 }}
            requests:
{{ toYaml .Values.acemq.resources.requests | indent 14 }}
          {{- if .Values.designerFlowsEnabled }}
        - name: "{{ $designerFlowsName }}"
          image: "{{ .Values.image.designerflows }}-{{ .Values.arch }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: ACE_VERSION
              value: {{ .Values.image.tag }}
            - name: bunyan__logfile__filename
              value: "/opt/ibm/app/ace-server/log/integration_server.{{ $serverName }}.designer_flows.txt"
          volumeMounts:
            - name: tmp
              mountPath: "/tmp"
            - name: workdir
              mountPath: "/opt/ibm/app/ace-server"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
            privileged: false
            capabilities:
              drop:
                - ALL
          # Set liveness probe to determine if the designer flow sidecar is running
          livenessProbe:
            exec:
              command:
                - "/readiness/ready.sh"
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          # Set readiness probe to determine if the designer flow sidecar is running
          readinessProbe:
            exec:
              command:
                - "/readiness/ready.sh"
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          resources:
            limits:
{{ toYaml .Values.designerflows.resources.limits | indent 14 }}
            requests:
{{ toYaml .Values.designerflows.resources.requests | indent 14 }}
          {{- end }}
        {{- if .Values.odTracingConfig.enabled }}
        # OD Agent
        - name: "{{ $tracingAgentName }}"
          image: "{{ .Values.odTracingConfig.odAgentImageRepository }}:{{ .Values.odTracingConfig.odAgentImageTag }}-{{ .Values.arch }}"
          volumeMounts:
            - name: icp4i-od-ca-certificate
              mountPath: "/usr/share/jaeger/ca/certs" 
          command: ["/go/bin/agent-linux"]
          args:
            - "--jaeger.tags=sourceNamespace={{ .Release.Namespace }}"
          ports:
            - containerPort: 5775
              protocol: UDP
            - containerPort: 6831
              protocol: UDP
            - containerPort: 6832
              protocol: UDP
            - containerPort: 5778
              protocol: TCP
          env:
            - name: COLLECTOR_HOST_PORT
              value : {{ template "odTracing.collector.host-port" . }}
            - name: REPORTER_TYPE
              value : "grpc"
            - name: REPORTER_GRPC_HOST_PORT
              value : {{ template "odTracing.collector.grpc-host-port" . }}
            - name: REPORTER_GRPC_TLS
              value : "false"
            - name: OD_SOURCE_NAMESPACE
              value : {{ .Release.Namespace }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
            privileged: false
            capabilities:
              drop:
                - ALL
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 256m
              memory: 128Mi
          readinessProbe:
            httpGet:
              path: /?service=health
              port: 5778
            initialDelaySeconds: {{ .Values.odTracingConfig.odAgentReadinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.odTracingConfig.odAgentReadinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.odTracingConfig.odAgentReadinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.odTracingConfig.odAgentReadinessProbe.failureThreshold }}
          livenessProbe:
            tcpSocket:
              port: 5778
            initialDelaySeconds: {{ .Values.odTracingConfig.odAgentLivenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.odTracingConfig.odAgentLivenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.odTracingConfig.odAgentLivenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.odTracingConfig.odAgentLivenessProbe.failureThreshold }}
        # OD Collector
        - name: "{{ $tracingCollectorName }}"
          image: "{{ .Values.odTracingConfig.odCollectorImageRepository }}:{{ .Values.odTracingConfig.odCollectorImageTag }}-{{ .Values.arch }}"
          volumeMounts:
            - name: icp4i-od-ca-certificate
              mountPath: "/usr/share/jaeger/ca/certs"
          ports:
            - containerPort: 14250
              name: grpc
              protocol: TCP
            - containerPort: 14267
              name: tchannel
              protocol: TCP
            - containerPort: 14268
              name: http
              protocol: TCP
            - containerPort: 14269
              name: healthcheck
              protocol: TCP
            - containerPort: 9411
              name: zipkin
              protocol: TCP
            - containerPort: 14987
              name: liveliness
              protocol: TCP
          env:
            - name: SPAN_STORAGE_TYPE
              value: elasticsearch
            - name: ES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "odTracing.collector.elasticsearch-secret-name" . }}
                  key: password
            - name: ES_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ template "odTracing.collector.elasticsearch-secret-name" . }}
                  key: username
            - name: ES_SERVER_URLS
              value: {{ template "odTracing.collector.elasticsearch-url" . }}
            - name: ES_TLS_CA
              value: '/usr/share/jaeger/ca/certs/icp4i-od-cacert.pem'
            - name: COLLECTOR_PORT
              value: "14267"
            - name: COLLECTOR_HTTP_PORT
              value: "14268"
            - name: COLLECTOR_ZIPKIN_HTTP_PORT
              value: "9411"
            - name: COLLECTOR_GRPC_TLS
              value: "false"
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
            privileged: false
            capabilities:
              drop:
                - ALL
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 256m
              memory: 128Mi
          readinessProbe:
            httpGet:
              port: 14269
            initialDelaySeconds: {{ .Values.odTracingConfig.odCollectorReadinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.odTracingConfig.odCollectorReadinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.odTracingConfig.odCollectorReadinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.odTracingConfig.odCollectorReadinessProbe.failureThreshold }}
          livenessProbe:
            tcpSocket:
              port: 14987
            initialDelaySeconds: {{ .Values.odTracingConfig.odCollectorLivenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.odTracingConfig.odCollectorLivenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.odTracingConfig.odCollectorLivenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.odTracingConfig.odCollectorLivenessProbe.failureThreshold }}
        {{- end }}
      {{- if .Values.acemq.initVolumeAsRoot }}
      initContainers:
        - name: qmgr-init
          image: "{{ .Values.image.acemq }}-{{ .Values.arch }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["runmqserver", "-i"]
          env:
          - name: LICENSE
            value: {{ .Values.license }}
          - name: MQ_QMGR_NAME
            value: {{ .Values.acemq.qmname | default .Release.Name | replace "-" "" | quote }}
          - name: LOG_FORMAT
            value: {{ .Values.log.format | default "json" | quote }}
          {{- if .Values.persistence.enabled }}
          volumeMounts:
          - mountPath: "/mnt/mqm"
            name: {{ $volumeClaimTemplateName }}
          {{- end }}
          securityContext:
            seLinuxOptions:
              type: spc_t
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
            runAsUser: 0
            privileged: false
            capabilities:
              add:
                - CHOWN
                - FOWNER
                - DAC_OVERRIDE
              drop:
                - ALL
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 256m
              memory: 128Mi  
      {{- end }}
      volumes:
        {{- if .Values.contentServerURL }}
        - name: webusers
          secret:
            secretName: {{ $fullName }}
            optional: true
            items:
            - key: adminusers
              path: admin-users.txt
            - key: operatorusers
              path: operator-users.txt
            - key: viewerusers
              path: viewer-users.txt
            - key: editorusers
              path: editor-users.txt
            - key: auditusers
              path: audit-users.txt
        {{- end }}
        - name: extensions
          secret:
            secretName: {{ $secretName }}
            optional: true
            items:
            - key: extensions
              path: extensions.zip
        - name: agent
          secret:
            secretName: {{ $secretName }}
            optional: true
            items:
            - key: agentc
              path: agentc.json
            - key: agentp
              path: agentp.json
            - key: agentx
              path: agentx.json
            - key: switch
              path: switch.json
        - name: mqsc
          secret:
            secretName: {{ $secretName }}
            optional: true
            items:
            - key: mqsc
              path: config.mqsc
        {{- if .Values.integrationServer.keystoreKeyNames }}
        # Marked as optional as the passphrase is not required and may not be provided
        - name: keystore
          secret:
            secretName: {{ $secretName }}
            optional: true
            items:
            {{- range $key := splitList "," .Values.integrationServer.keystoreKeyNames }}
            - key: keystoreKey-{{ nospace $key }}
              path: {{ nospace $key }}.key
            - key: keystoreCert-{{ nospace $key }}
              path: {{ nospace $key }}.crt
            - key: keystorePass-{{ nospace $key }}
              path: {{ nospace $key }}.pass
            {{- end }}
        {{- end }}
        {{- if .Values.integrationServer.truststoreCertNames }}
        # Not marked as optional as the user has specified this certificate should exist in the secret
        - name: truststore
          secret:
            secretName: {{ $secretName }}
            items:
            {{- range $cert := splitList "," .Values.integrationServer.truststoreCertNames }}
            - key: truststoreCert-{{ nospace $cert }}
              path: {{ nospace $cert }}.crt
            {{- end }}
        {{- end }}
        - name: odbcini
          secret:
            secretName: {{ $secretName }}
            optional: true
            items:
            - key: odbcini
              path: odbc.ini
        - name: policy
          secret:
            secretName: {{ $secretName }}
            optional: true
            items:
            - key: policy
              path: default.policyxml
            - key: policyDescriptor
              path: policy.descriptor
        - name: serverconf
          secret:
            secretName: {{ $secretName }}
            optional: true
            items:
            - key: serverconf
              path: server.conf.yaml
        - name: setdbparms
          secret:
            secretName: {{ $secretName }}
            optional: true
            items:
            - key: setdbparms
              path: setdbparms.txt
        - name: ssl
          secret:
            secretName: {{ $secretName }}
            optional: true
            items:
            - key: ca.crt
              path: ca.crt.pem
            - key: tls.key
              path: tls.key.pem
            - key: tls.crt
              path: tls.crt.pem
        {{- if .Values.contentServerURL }}
        - name: contentservertls
          secret:
            secretName: {{ index (splitList ":" (index (splitList "/" (trim .Values.contentServerURL)) 2)) 0 | quote }}
            items:
            - key: contentServerCACert
              path: cacert.pem
        {{- end }}
        {{- if .Values.acemq.pki.trust }}
        {{- range $index, $source := .Values.acemq.pki.trust }}
        {{- if $source.secret }}
        - name: trust{{- $index }}
          secret:
            secretName: {{ $source.secret.secretName }}
            defaultMode: 0440
            items:
            {{- range $source.secret.items }}
              - key: {{ . }}
                path: {{ . }}
            {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.acemq.pki.keys }}
        {{- range $index, $source := .Values.acemq.pki.keys }}
        {{- if $source.secret }}
        - name: {{ $source.name }}
          secret:
            secretName: {{ $source.secret.secretName }}
            defaultMode: 0440
            items:
            {{- range $source.secret.items }}
              - key: {{ . }}
                path: {{ . }}
            {{- end }}
        {{- end }}
        {{- end }}
        {{- end }}
        {{- if .Values.designerFlowsEnabled }}
        - name: tmp
          emptyDir: {}
        - name: workdir
          emptyDir: {}
        {{- end }}
        {{- if .Values.odTracingConfig.enabled }}
        - name: icp4i-od-ca-certificate
          secret:
            secretName: icp4i-od-store-cred
            optional: true
        {{ end }}
  volumeClaimTemplates:
  {{- if .Values.persistence.enabled }}
  - metadata:
      name: {{ $volumeClaimTemplateName }}
      labels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 8 }}
    spec:
      {{- if .Values.persistence.useDynamicProvisioning }}
      # If present, use the storageClassName from the values.yaml, else use the
      # default storageClass setup by Kubernetes Administrator
      #
      # Setting storageClassName to nil means use the default storage class
      storageClassName: {{ default nil .Values.dataPVC.storageClassName | quote }}
      {{- else }}
      # Disable dynamic provisioning
      storageClassName: ""
      {{- end }}
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.dataPVC.size | quote }}
  {{- end }}
{{- end }}
