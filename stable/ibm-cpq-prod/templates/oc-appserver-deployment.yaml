# Licensed Materials - Property of IBM
# IBM Sterling Configure Price Quote Software (5725-D11)
# (C) Copyright IBM Corp. 2018, 2019 All Rights Reserved.
# US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
{{ if eq .Values.global.install.configurator.enabled true -}}
{{- include "sch.config.init" (list . "om-chart.sch.chart.config.values") }}
{{- $httpPort := .Values.ocappserver.service.http.port | default 9081 }}
{{- $httpsPort := .Values.ocappserver.service.https.port | default 9444 }}
{{- $readyProbePeriod := .Values.ocappserver.readyProbePeriod | default 30 }}
{{- $readinessProbeInitialDelaySeconds := .Values.ocappserver.readinessProbeInitialDelaySeconds | default 60 }}
{{- $readinessProbeTimeoutSeconds := .Values.ocappserver.readinessProbeTimeoutSeconds | default 10 }}
{{- $libertyStartupWrapper := .Values.ocappserver.config.libertyStartupWrapper }}
{{- $liveProbeBeginDelay := .Values.ocappserver.livenessCheckBeginAfterSeconds | default 900 }}
{{- $liveProbePeriod := .Values.ocappserver.liveProbePeriod | default 60 }}
{{- $liveFailRestartSeconds := (mul .Values.ocappserver.livenessFailRestartAfterMinutes 60) | default 600 }}
{{- $liveFailThreshold := div $liveFailRestartSeconds $liveProbePeriod }}
{{- $livenessProbeTimeoutSeconds := .Values.ocappserver.livenessProbeTimeoutSeconds | default 1 }}
{{- $jvmOptionsPath := "/config/jvm.options" }}
{{- $sysOverridesPath := "/config/dropins/smcfs.ear/properties.jar/system_overrides.properties" }}
{{- $sysOverridesInitPath := "/opt/ssfs/system_overrides.properties.init" }}
{{- $stdPodLabel := "role" }}
{{- $stdPodLabelVal := "ocappserver" }}
{{- $custLabels := .Values.ocappserver.podLabels | default (dict) }}
{{- $varSslEnabled := .Values.ifsappserver.ingress.ssl.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "om-chart.fullname" . }}-ocappserver
  labels:
{{ include "sch.metadata.labels.standard" (list .) | indent 4 }}
spec:
  replicas: {{ .Values.ocappserver.replicaCount }}
  selector:
    matchLabels:
{{ include "sch.metadata.labels.standard" (list . "" (set $custLabels $stdPodLabel $stdPodLabelVal)) | indent 6 }}
  template:
    metadata:
      labels:
{{ include "sch.metadata.labels.standard" (list . "" (set $custLabels $stdPodLabel $stdPodLabelVal)) | indent 8 }}
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 8 }}
    spec:
{{- with .Values.ocappserver.tolerations }}
      tolerations:
{{ toYaml . | indent 6 }}
{{- end }}
      affinity:
{{- include "om-chart.nodeAffinity" (list . .Values.ocappserver.nodeAffinity) | indent 8 }}
{{- include "om-chart.podAffinity" (list . .Values.ocappserver.podAffinity) | indent 8 }}
{{- include "om-chart.podAntiAffinity" (list . .Values.ocappserver.podAntiAffinity $stdPodLabel $stdPodLabelVal) | indent 8 }}
      serviceAccountName: {{ .Values.global.serviceAccountName | default "default" }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: {{ .Values.global.persistence.securityContext.fsGroup | default 0 }}
        supplementalGroups: [{{ .Values.global.persistence.securityContext.supplementalGroup | default 0 }}]
      {{- if .Values.global.image.pullsecret }}
      imagePullSecrets:
      - name: {{ .Values.global.image.pullsecret }}
      {{- end }}
      containers:
      - name: {{ template "om-chart.fullname" . }}-ocappserver
        image: "{{ regexReplaceAll "(^cp\\.(stg\\.)?icr\\.io/)" .Values.global.image.repository "${1}cp/" }}/{{ .Values.ocappserver.image.name }}:{{ .Values.ocappserver.image.tag }}"
        imagePullPolicy: {{ .Values.ocappserver.image.pullPolicy }}
        securityContext:
          privileged: false
          runAsUser: 1001
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL          
        command: ["/bin/bash", "-c"]
        args: 
        - "/ocprocesscerts.sh && /ocupdateconfigs.sh && 
        {{ $libertyStartupWrapper }} /opt/ibm/wlp/bin/server run defaultServer"
        resources:
{{ toYaml .Values.ocappserver.resources | indent 10 }}
        envFrom:
        - configMapRef:
            name: {{ template "om-chart.fullname" . }}-oc-config
        ports:
        - name: https
          containerPort: {{ $httpsPort }}
          protocol: TCP
        - name: http
          containerPort: {{ $httpPort }}
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /ConfiguratorUI
            port: {{ $httpPort }}
            scheme: HTTP
          {{- /* give some buffer time to the appserver startup */}}
          initialDelaySeconds: {{ $liveProbeBeginDelay }}
          {{- /* check for liveness every minute */}}
          periodSeconds: {{ $liveProbePeriod }}
          {{- /* A successful http probe must return in less than 1 seconds */}}
          timeoutSeconds: {{ $livenessProbeTimeoutSeconds }}
          {{- /* once probing begins keep trying. e.g with 1 min period and 10 tries, restart pod after 10 minutes */}}
          failureThreshold: {{ $liveFailThreshold }}
        readinessProbe:
          httpGet:
            path: /ConfiguratorUI
            port: {{ $httpPort }}
            scheme: HTTP
          {{- /* wait for some time (1 mins) before beginning to probe readiness */}}
          initialDelaySeconds: {{ $readinessProbeInitialDelaySeconds }}
          {{- /* check for readiness every n seconds */}}
          periodSeconds: {{ $readyProbePeriod  }}
          {{- /* A successful http probe must return in less than 1 seconds */}}
          timeoutSeconds: {{ $readinessProbeTimeoutSeconds }}
          {{- /* keeping max attempts in sync with liveness probe. E.g. if liveness probe starts after 10 minutes
               and takes another 10 minutes to restart pod. keep trying till approx 20 minutes */}}
          failureThreshold: {{ div (add $liveProbeBeginDelay $liveFailRestartSeconds ) ($readyProbePeriod) }}          
        volumeMounts:
        - name: config
          mountPath: "{{ $jvmOptionsPath }}.init"
          subPath: jvm.options
        - name: config
          mountPath: "/ocupdateconfigs.sh"
          subPath: ocupdateconfigs.sh
        - name: config
          mountPath: "/home/default/server1.xml"
          subPath: server_oc.xml
        - name: {{ .Values.global.persistence.claims.name }}-common
          mountPath: /omscommonfile/configrepo
        - name: config
          mountPath: "/ocprocesscerts.sh"
          subPath: ocprocesscerts.sh
          {{- if and $varSslEnabled .Values.ifsappserver.ingress.host }}
        - name: ifscerts
          mountPath: "/config/security"
          readOnly: true
          {{- end}}
          {{- if .Values.ocappserver.importcert.secretname }}
        - name: importcert
          mountPath: "/config/security/importedcert"
          readOnly: true
          {{- end}}
      volumes:
      - name: config
        configMap:
          name: {{ template "om-chart.fullname" . }}-oc-config
          items:
          - key: jvm.options
            path: jvm.options
          - key: ocupdateconfigs.sh
            path: ocupdateconfigs.sh
            mode: 0754
          - key: server_oc.xml
            path: server_oc.xml
            mode: 0754
          - key: ocprocesscerts.sh
            path: ocprocesscerts.sh
            mode: 0754
      - name: {{ .Values.global.persistence.claims.name }}-common
        persistentVolumeClaim:
          claimName: {{ .Values.global.persistence.claims.name  | lower }}
          {{- if and $varSslEnabled .Values.ifsappserver.ingress.host }}
      - name: ifscerts
        secret:
          secretName: {{ .Values.ifsappserver.ingress.ssl.secretname }}
        {{- end }}
        {{- if .Values.ocappserver.importcert.secretname }}
      - name: importcert
        secret:
          secretName: {{ .Values.ocappserver.importcert.secretname }}
          {{- end }}
    {{ end -}}
