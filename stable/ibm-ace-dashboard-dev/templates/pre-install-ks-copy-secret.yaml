# Â© Copyright IBM Corporation 2019
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

###############################################################################
# Runs a container that ensures a pull secret is defined for the image that
# will run the job to register the dashbaord as an oauth application.
###############################################################################
{{- if .Values.image.pullSecret }}
{{- include "sch.config.init" (list . "ibm-ace.sch.chart.config.values") }}
{{- $jobName := include "sch.names.fullCompName" (list . "image-secret-copy") }}
{{- $saName := include "sch.names.fullCompName" (list . "handle-secret-serviceaccount") }}
{{- $secretName := include "sch.names.fullCompName" (list . "pull-image-secret") }}
{{- $labels := include "sch.metadata.labels.standard" (list . "" (dict "serviceSelector" "image-secret-copy")) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $jobName }}
  namespace: {{ .Release.Namespace }}
  labels:
{{ $labels | indent 4 }}
  annotations:
    # This needs to run before we deploy, as the icp-configurator installs
    # depend on the secrets existing already, and will fail to start
    # otherwise.
    "helm.sh/hook": pre-install
    # We don't delete this if it fails, as the logs may be useful to
    # diagnose a failed install
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation
    # This needs to happen before all other jobs as they will need access to this
    # image pull secret
    "helm.sh/hook-weight": "3"
spec:
  activeDeadlineSeconds: 600
  template:
    metadata:
      labels:
{{ $labels | indent 8 }}
    spec:
      serviceAccountName: {{ $saName }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: {{ default 1001 .Values.fsGroupGid }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: beta.kubernetes.io/arch
                    operator: In
                    values:
                      - amd64
      restartPolicy: Never
      containers:
        - name: "ips-copier"
          image: "{{ .Values.image.configurator }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
              - ALL
          command:
            - sh
            - -c
            - "kubectl get secret {{ .Values.image.pullSecret }} -n {{ .Release.Namespace }} -o yaml | \
sed 's/namespace: {{ .Release.Namespace }}/namespace: kube-system/' | \
sed 's/name: {{ .Values.image.pullSecret }}/name: {{ $secretName }}/' | \
kubectl create --namespace=kube-system -f - && \
kubectl label secret {{ $secretName }} -n kube-system release={{ .Release.Name }} --overwrite && \
echo Done"
          resources:
            requests:
              cpu: "250m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "1028Mi"
{{- end }}
