Please wait while the application is getting deployed.

1. Run the below command to check the status of application server replica sets. At least 1 replica must be in 'READY' state. 
  kubectl get replicasets -l release={{ .Release.Name }},role=appserver -n {{ .Release.Namespace }}

2. Run the below command to check the status of the application server pods for the release.
  kubectl get po -l release={{ .Release.Name }},role=appserver -n {{ .Release.Namespace }} -o wide
    
    If the status of an application server pod is 'Init:0/1', it means that the pod is still initializing. Run the below command to view the log of the init container.
  kubectl logs <pod name> {{ template "om-chart.fullname" . }}-appserver-init -n {{ .Release.Namespace }}
    
    To view the logs for a pod, run the below command.
  kubectl logs <pod name> -n {{ .Release.Namespace }}

3. Access the apps by running the following urls
{{- $contextList := .Values.appserver.ingress.contextRoots | default (list "smcfs" "sbc" "sma" "sfs" "isccs" "wsc") -}}
{{- $imgConfList := .Values.appserver.image.names }}
{{- if and .Values.appserver.exposeRestService (.Capabilities.APIVersions.Has "route.openshift.io/v1") }}
    {{- $imgConfList = append $imgConfList (dict "name" "om-app" "purpose" "xapirest") -}}
{{- end }}
{{- $varRoot := .}}
{{- $appConfig := list -}}
{{- range $imgConfList }}
  {{- $imgConf := .}}
  {{- if $imgConf }}
    {{- if index $imgConf "applications" }}
      {{- $paths := list -}}
      {{- range $imgConf.applications }}
        {{- $apps := .}}
        {{- if $apps }}
          {{- if contains "smcfsdocs" $apps.path }}
            {{- $docpathsdict := dict "api-javadocs" "/yfscommon/api_javadocs" "core-javadocs" "/yfscommon/core_javadocs" "ERD" "/yfscommon/ERD/HTML" }}
              {{- range $dockey, $docpath := $docpathsdict }}
                {{- $paths = append $paths (((cat ($apps.path | trimAll "/") $docpath) | nospace) | trimAll "/") }}
                {{- $path := ((cat ($apps.path | trimAll "/") $docpath) | nospace) | trimAll "/" }}
                {{- $appConfig = append $appConfig (dict "path" $path "dockey" $dockey "routePrefix" ($apps.routePrefix | default (printf "%s-path-%s" $path "default"))) -}}
              {{- end }}
          {{- else }}
            {{- $paths = append $paths ($apps.path | trimAll "/") }}
            {{- $path := $apps.path | trimAll "/" }}
            {{- $appConfig = append $appConfig (dict "path" $path "routePrefix" ($apps.routePrefix | default (printf "%s-path-%s" $path "default"))) -}}
          {{- end }}
        {{- end }}
      {{- end }}
    {{- else }}
      {{- if eq $imgConf.name "om-app" }}
        {{- if hasKey $imgConf "purpose" }}
        {{- if eq $imgConf.purpose "xapirest" }}
          {{ $appConfig = append $appConfig (dict "path" "smcfs" "routePrefix" "xapirest") -}}
        {{- end }}
        {{- else }}
          {{- range $contextList }}
          {{- $path := .}}
          {{- $appConfig = append $appConfig (dict "path" $path "routePrefix" (printf "%s-%s" $path "default")) -}}
          {{- end }}
        {{- end }}
      {{- else }}
        {{- $paths := regexSplit "_" ($imgConf.name | trimPrefix "om-app-") -1 }}
        {{- range $paths }}
          {{- $path := .}}
          {{- $appConfig = append $appConfig (dict "path" $path "routePrefix" (printf "%s-app-%s" $path "default")) -}}
        {{- end }}
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
{{- $protocol := ternary "https" "http" $varRoot.Values.appserver.ingress.ssl.enabled -}}
{{- if ($varRoot.Capabilities.APIVersions.Has "route.openshift.io/v1") -}}
  {{ include "om-chart.routes.paths.notes" (list $varRoot $protocol ($varRoot.Values.appserver.ingress.host | default "<proxy node domain>") $appConfig) | indent 2 }}
{{- else }}
  {{ include "om-chart.ingress.paths.notes" (list $varRoot (printf "%s://%s" $protocol ($varRoot.Values.appserver.ingress.host | default "<proxy node domain>")) $appConfig) | indent 2 }}
{{- end }}
{{- ternary "" "\n\n  Warning: It is recommended to enable SSL" $varRoot.Values.appserver.ingress.ssl.enabled -}}