###############################################################################
#
# Licensed Materials - Property of IBM
#
# 5737-H33
#
# (C) Copyright IBM Corp. 2019  All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
###############################################################################
# Defines the pod that runs the Schema Registry API server
###############################################################################
{{- include "sch.config.init" (list . "sch.chart.config.values") -}}
{{- include "sch.config.init" (list . "schemaregistry.sch.chart.config.values" ) -}}
{{- include "sch.config.init" (list . "securitycontext.sch.chart.config.values") | trim -}}
{{ $namePrefix := .sch.chart.components.schemaregistry.statefulSet.name -}}
{{ $statefulSetName := include "sch.names.statefulSetName" (list . $namePrefix ) -}}
{{ $id := (include "ibm-eventstreams.asDnsLabel" .Release.Name) -}}
# Component is 'schemaregistry' as this makes up part of implementing the Schema Registry
{{ $compName := .sch.chart.components.schemaregistry.compName -}}
{{ $labels := include "sch.metadata.labels.standard" (list . $compName (dict "serviceSelector" $namePrefix)) -}}
# import port definitions
{{- include "sch.config.init" (list . "ports.sch.chart.config.values") | trim -}}
{{ $ports := .sch.config.ports }}
# Name of configmap to get rest proxy external endpoint
{{ $releaseConfigMap := .sch.chart.components.essential.releaseConfigMap.name -}}
{{ $releaseConfigMapName := include "sch.names.fullCompName" (list . $releaseConfigMap) -}}
#Name of secret to get external IP
{{ $proxySecret := .sch.chart.components.proxy.secret.name -}}
{{ $proxySecretName := include "sch.names.fullCompName" (list . $proxySecret) | quote -}}
# Service Account to grant Kubernetes access
{{ $serviceAccount := .sch.chart.components.schemaregistry.serviceAccount.name -}}
{{ $serviceAccountName := include "sch.names.fullCompName" (list . $serviceAccount ) -}}
# Service associated with this stateful set
{{ $serviceNamePrefix := .sch.chart.components.schemaregistry.service.name -}}
{{ $serviceName := include "sch.names.fullCompName" (list . $serviceNamePrefix) -}}
# Retrieve the secret from the proxy in order to be passed as env var to the schema registry pod
{{ $proxySecret := .sch.chart.components.proxy.secret.name -}}
{{ $tlsSecretName := include "sch.names.fullCompName" (list . $proxySecret) | quote -}}
# rest proxy external service name
{{ $restProxyService := .sch.chart.components.restproxy.externalservice.name -}}
{{ $restProxyServiceName := include "sch.names.fullCompName" (list . $restProxyService) -}}
# kafka proxy configmap name
{{ $kafkaProxyConfigMap := .sch.chart.components.proxy.configMap.name -}}
{{ $kafkaProxyConfigMapName := include "sch.names.fullCompName" (list . $kafkaProxyConfigMap) -}}
# Access Controller service name
{{ $accessControllerService := .sch.chart.components.security.accesscontroller.service.name -}}
{{ $accessControllerServiceName := include "sch.names.fullCompName" (list . $accessControllerService) -}}
# Default user for security context
{{ $defaultUser := .sch.securityContext.defaultUser -}}
# pvc name
{{ $pvcNamePrefix := .sch.chart.components.schemaregistry.persistentVolumeClaim.name -}}
{{ $pvcName := printf "%s-%s-%s-%s" .Release.Name .sch.chart.appName $pvcNamePrefix .Values.dataPVC.name -}} # datadir-release-ibm-es-schemaregistry-sts
# k8s configuration
{{ $clusterName := .Values.global.k8s.clusterName -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $statefulSetName | quote }}
  namespace: {{ include "restrict.namespace" (list . .Release.Namespace) }}
  labels:
{{ $labels | indent 4 }}
    internalCertificate: {{ .Values.global.security.internalCertificateLabel | quote }}
spec:
  {{- if lt (int .Values.replicas) 0 }}
    {{ fail "Configuration error: Minimum of 1 schema registry worker is required." }}
  {{- end }}
  {{- if .Values.persistence.enabled }}
    {{- if and .Values.persistence.mode (eq .Values.persistence.mode "ReadWriteOnce")}}
  replicas: 1
    {{- else}}
  replicas: {{ default 2 (int .Values.replicas) }}
    {{- end }}
  {{- else }}
    {{- if gt (int .Values.replicas) 1 }}
      {{ fail "Configuration error: Maximum of 1 schema registry worker if persistence is not enabled." }}
    {{- end }}
  replicas: 1
  {{- end }}
  serviceName: {{ $serviceName | quote }}
  selector:
    matchLabels:
      release: {{ .Release.Name | quote }}
      serviceSelector: {{ $namePrefix | quote }}
  template:
    metadata:
      namespace: {{ include "restrict.namespace" (list . .Release.Namespace) }}
      labels:
{{ $labels | indent 8 }}
        internalCertificate: {{ .Values.global.security.internalCertificateLabel | quote }}
      annotations:
{{ include "ibm-eventstreams.metering" (list . ) | indent 8 }}
    spec:
      serviceAccountName: {{ $serviceAccountName | quote }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
{{- include "sch.security.securityContext" (list . .sch.chart.securitycontexts.pod) | indent 8 }}
{{ include "ibm-eventstreams.fsGroupGid" (list . ) | indent 8 }}
      volumes:
        - name: release-configmap-volume
          configMap:
            name: {{ $releaseConfigMapName }}
            items:
            - key: "restProxyExternalPort"
              path: restProxyExternalPort
        - name: tempdir
          emptyDir: {}
{{- if not .Values.persistence.enabled }}
  # Validate persistence
  {{- if .Values.persistence.useDynamicProvisioning }}
    {{ fail "Cannot use dynamic provisioning with persistence disabled" }}
  {{- end  }}
  {{- if not (eq .Values.dataPVC.storageClassName "") }}
    {{ fail "Cannot use a storage class if persistence disabled" }}
  {{- end  }}
{{- end  }}
{{- if .Values.persistence.enabled }}
        - name: shared
          persistentVolumeClaim:
            claimName: {{ $pvcName }}
{{- else }}
        - name: shared
          emptyDir: {}
{{- end }}
      {{- include "license.accept.ref" . | indent 6 }}
      affinity:
{{ include "ibm-eventstreams.customNodeaffinity"  (list .) | indent 8 }}
      containers:
        - name: "schemaregistry"
          image: {{ include "eventstreams.image" (list . "eventstreams-registry" .Values.global.image.imageTags.registryTag) | quote }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          securityContext:
{{- include "sch.security.securityContext" (list . .sch.chart.securitycontexts.containerReadOnlyFilesystem) | indent 12 }}
          resources:
            limits:
{{ toYaml .Values.resources.limits | indent 14 }}
            requests:
{{ toYaml .Values.resources.requests | indent 14 }}
          readinessProbe:
            httpGet:
              path: /ready
              port: {{ $ports.schemaregistry.server }}
              scheme: HTTPS
              httpHeaders:
                - name: Accept
                  value: '*/*'
            initialDelaySeconds: 30
            periodSeconds: 60
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 2
          livenessProbe:
            httpGet:
              path: /live
              port: {{ $ports.schemaregistry.server }}
              scheme: HTTPS
              httpHeaders:
                - name: Accept
                  value: '*/*'
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 2
          volumeMounts:
            - name: tempdir
              mountPath: /var/lib/tmp
            - name: shared
              mountPath: /var/lib/schemas
          env:
            {{- include "license.accept.env.ref" . | indent 10 }}
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: {{ $ports.schemaregistry.server | quote }}
            - name: TLS_CERT
              valueFrom:
                secretKeyRef:
                  name: {{ $tlsSecretName }}
                  key: "podtls.cert"
            - name: TLS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $tlsSecretName }}
                  key: "podtls.key"
            - name: TLS_ENABLED
              value: "true"
            - name: AVRO_CONTAINER_HOST
              value: "127.0.0.1"
            - name: AVRO_CONTAINER_PORT
              value: {{ $ports.schemaregistry.javaServer | quote }}
            - name: SCHEMA_DATA_DIRECTORY
              value: /var/lib/schemas
            - name: SCHEMA_TEMP_DIRECTORY
              value: /var/lib/tmp
            - name: ID
              value: "{{ $id }}"
            - name: ACCESS_CONTROLLER_PROTOCOL
              value: "https"
            - name: ACCESS_CONTROLLER_SERVICE_NAME
              value: "{{ $accessControllerServiceName }}.{{ $.Release.Namespace }}.svc.{{ $clusterName }}"
            - name: ACCESS_CONTROLLER_SERVICE_PORT
              value: {{ $ports.security.accessController | quote }}
            - name: ACCESS_CONTROLLER_AUTHZ_URL
              value: "/v1/auth"
            - name: NAMESPACE
              value: {{ .Release.Namespace | quote }}
            - name: CONFIGMAP
              value: {{ $releaseConfigMapName | quote }}
            - name: CLUSTER_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName }}
                  key: "CLUSTER_NAME"
            - name: TRACE_LEVEL
              value: "INFO"
        - name: "avroservice"
          image: {{ include "eventstreams.image" (list . "eventstreams-avro" .Values.global.image.imageTags.avroTag) | quote }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          resources:
            limits:
{{ toYaml .Values.avroServiceResources.limits | indent 14 }}
            requests:
{{ toYaml .Values.avroServiceResources.requests | indent 14 }}
          securityContext:
{{- include "sch.security.securityContext" (list . .sch.chart.securitycontexts.containerReadOnlyFilesystem) | indent 12 }}
          readinessProbe:
            tcpSocket:
              port: {{ $ports.schemaregistry.javaServer }}
            initialDelaySeconds: 30
            periodSeconds: 60
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 2
          livenessProbe:
            tcpSocket:
              port: {{ $ports.schemaregistry.javaServer }}
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 2
          volumeMounts:
            - name: release-configmap-volume
              mountPath: /var/lib/config
            - name: tempdir
              mountPath: /var/lib/tmp
            - name: shared
              mountPath: /var/lib/schemas
          env:
            {{- include "license.accept.env.ref" . | indent 10 }}
            - name: NODE_ENV
              value: "production"
            - name: AVRO_CONTAINER_PORT
              value: {{ $ports.schemaregistry.javaServer | quote }}
            - name: SCHEMA_DATA_DIRECTORY
              value: /var/lib/schemas
            - name: SCHEMA_TEMP_DIRECTORY
              value: /var/lib/tmp
            - name: RELEASE_CM_MOUNT_LOCATION
              value: /var/lib/config/restProxyExternalPort
            - name: EXTERNAL_IP
              valueFrom:
                secretKeyRef:
                  name: {{ $proxySecretName }}
                  key: "externalHostOrIP"
