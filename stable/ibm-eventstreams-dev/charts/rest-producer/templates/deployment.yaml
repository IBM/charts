###############################################################################
#
# Licensed Materials - Property of IBM
#
# 5737-H33
#
# (C) Copyright IBM Corp. 2018, 2019  All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
###############################################################################
# Defines the pod that runs the REST Producer API
###############################################################################
{{ $root := . -}}
{{- include "sch.config.init" (list . "ports.sch.chart.config.values") | trim -}}
{{- include "sch.config.init" (list . "securitycontext.sch.chart.config.values") | trim -}}
{{ $namePrefix := .sch.chart.components.restproducer.deployment.name -}}
{{ $name := include "sch.names.fullCompName" (list . $namePrefix ) -}}
# Component is 'restproducer' as this makes up part of implementing the REST Producer API
{{ $compName := .sch.chart.components.restproducer.compName -}}
{{ $labels := include "sch.metadata.labels.standard" (list . $compName) -}}
# import port definitions
{{ $ports := .sch.config.ports }}
# Service Account to grant Kubernetes access
{{ $serviceAccount := .sch.chart.components.restproducer.serviceAccount.name -}}
{{ $serviceAccountName := include "sch.names.fullCompName" (list . $serviceAccount ) -}}
# Service allowing access to the Kafka cluster
{{ $kafkaHeadlessService := .sch.chart.components.kafka.externalHeadless.name -}}
{{ $kafkaHeadlessServiceName := include "sch.names.fullCompName" (list . $kafkaHeadlessService) -}}
# Service allowing access to the rest proxy
{{ $restProxyService := .sch.chart.components.restproxy.internalservice.name -}}
{{ $restProxyServiceName := include "sch.names.fullCompName" (list . $restProxyService) -}}
# Proxy secret name which is used to get the cluster ca cert
{{ $proxySecret := .sch.chart.components.proxy.secret.name -}}
{{ $proxySecretName := include "sch.names.fullCompName" (list . $proxySecret) | quote -}}
# k8s configuration
{{ $clusterName := .Values.global.k8s.clusterName -}}
# Internal configmap name for cluster env vars
{{ $releaseConfigMap := .sch.chart.components.essential.releaseConfigMap.name -}}
{{ $releaseConfigMapName := include "sch.names.fullCompName" (list . $releaseConfigMap) -}}


{{ $zones := int (include "zones.to.template" (list .)) -}}
{{ range $zoneIndex, $e := until $zones -}}

{{ $nameLabel := include "name.including.zone" (list $namePrefix $zoneIndex) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "name.including.zone" (list $name $zoneIndex) | quote }}
  labels:
{{ $labels | indent 4 }}
    internalCertificate: {{ $root.Values.global.security.internalCertificateLabel | quote }}
    serviceSelector: {{ $nameLabel | quote }}
spec:
  replicas: {{ include "replicas.for.zone" (list $root 1 $root.Values.global.zones.restProducerReplicas) }}
  selector:
    matchLabels:
      release: {{ $root.Release.Name | quote }}
      serviceSelector: {{ $nameLabel | quote }}
  template:
    metadata:
      namespace: {{ include "restrict.namespace" (list $root $root.Release.Namespace) }}
      labels:
{{ $labels | indent 8 }}
        internalCertificate: {{ $root.Values.global.security.internalCertificateLabel | quote }}
        serviceSelector: {{ $nameLabel | quote }}
      annotations:
{{ include "ibm-eventstreams.metering" (list $root ) | indent 8 }}
    spec:
      serviceAccountName: {{ $serviceAccountName | quote }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
{{- include "sch.security.securityContext" (list $root $root.sch.chart.securitycontexts.pod) | indent 8 }}
      volumes:
      {{- include "license.accept.ref" $root | indent 6 }}
        - name: proxy-certs-volume
          secret:
            secretName: {{ $proxySecretName }}
            items:
            - key: podtls.cert
              path: podtls.crt
            - key: podtls.key
              path: podtls.key
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
{{- include "ibm-eventstreams.archMatchExpression"  (list $root) | indent 16 }}
{{- include "ibm-eventstreams.zoneMatchExpression"  (list $root $zoneIndex) | indent 16 }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 10
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "release"
                      operator: In
                      values:
                        -  {{ $root.Release.Name | quote }}
                    - key: "serviceSelector"
                      operator: In
                      values:
                        -  {{ $nameLabel | quote }}
                topologyKey: "kubernetes.io/hostname"
      containers:
        - name: "rest-producer"
          image: {{ include "eventstreams.image" (list $root "eventstreams-rest-producer" $root.Values.global.image.imageTags.restProducerTag) | quote }}
          imagePullPolicy: {{ $root.Values.global.image.pullPolicy }}
          securityContext:
{{- include "sch.security.securityContext" (list $root $root.sch.chart.securitycontexts.containerReadOnlyFilesystem) | indent 12 }}
          resources:
            requests:
{{ toYaml $root.Values.global.resources.restProducer.requests | indent 14 }}
            limits:
{{ toYaml $root.Values.global.resources.restProducer.limits | indent 14 }}
          readinessProbe:
            httpGet:
              path: /alive
              port: {{ $ports.restproducer.server }}
              scheme: HTTPS
              httpHeaders:
                - name: Accept
                  value: '*/*'
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /alive
              port: {{ $ports.restproducer.server }}
              scheme: HTTPS
              httpHeaders:
                - name: Accept
                  value: '*/*'
            initialDelaySeconds: 60
            periodSeconds: 20
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 6
          env:
            {{- include "license.accept.env.ref" $root | indent 10 }}
            - name: DEPLOYMENT_MODE
              value: "onprem"
            - name: LOGGING_LEVEL
              value: "INFO"
            - name: LOG_FORMAT
              value: "json"
            - name: KAFKA_BOOTSTRAP_URL
              value: "{{ $kafkaHeadlessServiceName }}.{{ $root.Release.Namespace }}.svc.{{ $clusterName }}:{{ $ports.kafka.internalLoopbackIntercept }}"
            - name: SECURITY_PROTOCOL
              value: "{{- if eq $root.Values.global.security.tlsInternal "enabled" -}}sasl_ssl{{- else -}}sasl_plaintext{{- end -}}"
            - name: "TLS_CERT"
              value: "/etc/ssl/certs/podtls.crt"
            - name: "TLS_PRIKEY"
              value: "/etc/ssl/certs/podtls.key"
            - name: REST_PROXY_URL
              value: "https://{{ $restProxyServiceName }}.{{ $root.Release.Namespace }}.svc.{{ $clusterName }}:{{ $ports.restproxy.internal }}"
            - name: NAMESPACE
              value: {{ $root.Release.Namespace | quote }}
            - name: CONFIGMAP
              value: {{ $releaseConfigMapName | quote }}
          volumeMounts:
            - name: proxy-certs-volume
              mountPath: /etc/ssl/certs
              readOnly: true
{{ if lt $zoneIndex (sub $zones 1) -}}
---
{{ end -}}
{{ end -}}
