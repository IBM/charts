###############################################################################
#
# Licensed Materials - Property of IBM
#
# (C) Copyright IBM Corp. 2018. All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
###############################################################################
# Defines the pod that runs the UI web server
###############################################################################
{{- include "sch.config.init" (list . "rest.sch.chart.config.values") -}}
{{- include "sch.config.init" (list . "security.sch.chart.config.values") -}}
{{ $namePrefix := .sch.chart.components.ui.deployment.name -}}
{{ $name := include "sch.names.fullCompName" (list . $namePrefix ) -}}
{{ $id := (include "asDnsLabel" .Release.Name) }}
# Component is 'ui' as this makes up part of implementing the web UI
{{ $compName := .sch.chart.components.ui.compName -}}
{{ $labels := include "sch.metadata.labels.standard" (list . $compName (dict "serviceSelector" $namePrefix)) -}}
# Service allowing access to the REST API server
{{ $restService := .sch.chart.components.rest.service.name -}}
{{ $restServiceName := include "sch.names.fullCompName" (list . $restService) -}}
# Oauth secret name which is used by the UI
{{ $uiOauthSecretName := .sch.chart.components.ui.oauthSecret.name -}}
{{ $oauthSecretName := include "sch.names.fullCompName" (list . $uiOauthSecretName) -}}
# Service Account to grant Kubernetes access
{{ $serviceAccount := .sch.chart.components.ui.serviceAccount.name -}}
{{ $serviceAccountName := include "sch.names.fullCompName" (list . $serviceAccount ) -}}
# Secret and config map used by the proxy container
{{ $secret := .sch.chart.components.proxy.secret.name -}}
{{ $secretName := include "sch.names.fullCompName" (list . $secret) | quote -}}
# Check if geo-replication is enabled
{{- $features := fromYaml (include "features" . ) -}}
{{- $replicatorEnabled := index $features "replicator" "enabled" -}}
# Import product version which is used by Feedback
{{ $edition := .sch.chart.edition }}
{{ $values := fromYaml (include "sch.chart.config.values" . ) -}}
{{ $productName := index $values.sch.chart.productName $edition | trim -}}
{{ $productVersion := .sch.chart.productVersion -}}
# import port definitions
{{- include "sch.config.init" (list . "ports.sch.chart.config.values") | trim -}}
{{ $ports := .sch.config.ports }}
# Get accessController service name
{{ $accessControllerService := .sch.chart.components.security.accesscontroller.service.name -}}
{{ $accessControllerServiceName := include "sch.names.fullCompName" (list . $accessControllerService) -}}
# Default user for security context
{{ $defaultUser := .sch.securityContext.defaultUser -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $name | quote }}
  namespace: {{ include "restrict.namespace" (list . .Release.Namespace) }}
  labels:
{{ $labels | indent 4 }}
spec:
  replicas: {{ .sch.config.ui.replicas }}
  selector:
    matchLabels:
      release: {{ .Release.Name | quote }}
      serviceSelector: {{ $namePrefix | quote }}
  template:
    metadata:
      namespace: {{ include "restrict.namespace" (list . .Release.Namespace) }}
      labels:
{{ $labels | indent 8 }}
      annotations:
{{ include "metering" (list . ) | indent 8 }}
    spec:
      serviceAccountName: {{ $serviceAccountName | quote }}
      {{- if .Values.global.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.global.image.pullSecret }}
      {{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ $defaultUser }}
      volumes:
        - name: redis-storage
          emptyDir: {}
      {{- include "license.accept.ref" . | indent 6 }}
      affinity:
{{ include "customNodeaffinity"  (list .) | indent 8 }}
      terminationGracePeriodSeconds: 60
      # UI pods are made up of two containers
      #  1) UI web server
      #  2) redis container for persisting user sessions
      containers:
        #
        # UI web server pods
        - name: "ui"
          image: {{ include "eventstreams.image" (list . "eventstreams-ui" .Values.global.image.imageTags.uiTag "true") | quote }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: {{ $defaultUser }}
            capabilities:
              drop:
              - all
          resources:
            limits:
{{ toYaml .sch.config.ui.resources.limits | indent 14 }}
            requests:
{{ toYaml .sch.config.ui.resources.requests | indent 14 }}
          readinessProbe:
            httpGet:
              path: /status
              port: {{ $ports.ui.webserver }}
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /status
              port: {{ $ports.ui.webserver }}
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          env:
            {{- include "license.accept.env.ref" . | indent 10 }}
            - name: ID
              value: "{{ $id }}"
            - name: NAMESPACE
              value: {{ .Release.Namespace | quote }}
            - name: EVENT_STREAMS_EDITION
              value: "{{ $productName }}"
            - name: EVENT_STREAMS_VERSION
              value: "{{ $productVersion }}"
            - name: "API_URL"
              value: "http://{{ $restServiceName }}:{{ $ports.rest.server }}"
            - name: "CLIENT_ID"
              valueFrom:
                secretKeyRef:
                  name: {{ $oauthSecretName }}
                  key: "username"
            - name: "CLUSTER_NAME"
              valueFrom:
                secretKeyRef:
                  name: {{ $oauthSecretName }}
                  key: "clusterName"
            - name: "CLIENT_SECRET"
              valueFrom:
                secretKeyRef:
                  name: {{ $oauthSecretName }}
                  key: "password"
            - name: "CLUSTER_EXTERNAL_IP"
              valueFrom:
                secretKeyRef:
                  name: {{ $oauthSecretName }}
                  key: "clusterExternalIP"
            - name: "CLUSTER_EXTERNAL_PORT"
              valueFrom:
                secretKeyRef:
                  name: {{ $oauthSecretName }}
                  key: "clusterExternalPort"
            - name: "PROXY_EXTERNAL_IP"
              valueFrom:
                secretKeyRef:
                  name: {{ $oauthSecretName }}
                  key: "proxyExternalIP"
            - name: "CLUSTER_CA_DOMAIN"
              valueFrom:
                secretKeyRef:
                  name: {{ $oauthSecretName }}
                  key: "clusterCADomain"
            - name: "EXTERNAL_IP"
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: "externalHostOrIP"
            - name: "ACCESS_CONTROLLER_SERVICE_NAME"
              value: {{ $accessControllerServiceName | quote }}
            - name: "ACCESS_CONTROLLER_SERVICE_PORT"
              value: {{ $ports.security.accessController | quote}}
            {{- if $replicatorEnabled }}
            - name: GEOREPLICATION_ENABLED
              value: "true"
            {{- end }}
            - name: TRACE_STATE
              value: "{\"ExpressApp\":false,\"Simulated\":false,\"KubernetesClient\":false}"
        #
        # redis pods
        - name: redis
          image: {{ include "eventstreams.image" (list . "eventstreams-redis" .Values.global.image.imageTags.redisTag "ibmcom") | quote }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          volumeMounts:
          - name: redis-storage
            mountPath: /data
          securityContext:
            privileged: false
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: {{ $defaultUser }}
            capabilities:
              drop:
              - all
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - /usr/local/bin/redis-cli -h $(hostname) ping
            failureThreshold: 2
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - /usr/local/bin/redis-cli -h $(hostname) ping
            failureThreshold: 2
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
        # Proxy server container
        - name: "proxy"
          image: {{ include "eventstreams.image" (list . "eventstreams-proxy" .Values.global.image.imageTags.proxyTag "true") | quote }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: {{ $defaultUser }}
            capabilities:
              drop:
              - all
          env:
            {{- include "license.accept.env.ref" . | indent 10 }}
            - name: TLS_CERT
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: "https.cert"
            - name: TLS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: "https.key"
            - name: ES_PROXY_CONFIG
              value: |-
                {
                  "routes": "[{\"port\":{{ $ports.ui.proxy }}, \"service\": \"localhost:{{ $ports.ui.webserver }}\"}]",
                  "tlsEnabled": "true",
                  "connectionTimeoutMs": "3600000",
                  "traceLevel": "0",
                  "logFormat": "json"
                }
          ports:
            - name: uiendpoint
              containerPort: {{ $ports.ui.proxy }}
          readinessProbe:
            httpGet:
              path: "/ready"
              port: {{ $ports.ui.health }}
            initialDelaySeconds: 1
            periodSeconds: 5
          livenessProbe:
            httpGet:
              path: "/live"
              port: {{ $ports.ui.health }}
            initialDelaySeconds: 15
            periodSeconds: 15
