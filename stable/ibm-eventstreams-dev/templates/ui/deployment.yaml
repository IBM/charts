###############################################################################
#
# Licensed Materials - Property of IBM
#
# 5737-H33
#
# (C) Copyright IBM Corp. 2019  All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
###############################################################################
# Defines the pod that runs the UI web server
###############################################################################
{{- include "sch.config.init" (list . "rest.sch.chart.config.values") -}}
{{- include "sch.config.init" (list . "security.sch.chart.config.values") -}}
{{- include "sch.config.init" (list . "securitycontext.sch.chart.config.values") | trim -}}
{{ $namePrefix := .sch.chart.components.ui.deployment.name -}}
{{ $name := include "sch.names.fullCompName" (list . $namePrefix ) -}}
{{ $id := (include "ibm-eventstreams.asDnsLabel" .Release.Name) -}}
{{ $version := .Chart.Version }}
# Component is 'ui' as this makes up part of implementing the web UI
{{ $compName := .sch.chart.components.ui.compName -}}
{{ $labels := include "sch.metadata.labels.standard" (list . $compName (dict "serviceSelector" $namePrefix)) -}}
# Service allowing access to the REST API server
{{ $restProxyService := .sch.chart.components.restproxy.internalservice.name -}}
{{ $restProxyServiceName := include "sch.names.fullCompName" (list . $restProxyService) -}}
{{ $restProxyRoute := .sch.chart.components.restproxy.adminRestRoute.name -}}
{{ $restProxyRouteName := include "sch.names.fullCompName" (list . $restProxyRoute) -}}
# Oauth secret name which is used by the UI
{{ $uiOauthSecretName := .sch.chart.components.ui.oauthSecret.name -}}
{{ $oauthSecretName := include "sch.names.fullCompName" (list . $uiOauthSecretName) -}}
# Service Account to grant Kubernetes access
{{ $serviceAccount := .sch.chart.components.ui.serviceAccount.name -}}
{{ $serviceAccountName := include "sch.names.fullCompName" (list . $serviceAccount ) -}}
# Secret and config map used by the proxy container
{{ $secret := .sch.chart.components.proxy.secret.name -}}
{{ $secretName := include "sch.names.fullCompName" (list . $secret) | quote -}}
# Configmap to get rest proxy external endpoint
{{ $releaseConfigMap := .sch.chart.components.essential.releaseConfigMap.name -}}
{{ $releaseConfigMapName := include "sch.names.fullCompName" (list . $releaseConfigMap) -}}
# Check if geo-replication is enabled
{{- $features := fromYaml (include "ibm-eventstreams.features" . ) -}}
{{- $replicatorEnabled := index $features "replicator" "enabled" -}}
# Import product version which is used by Feedback
{{ $edition := .sch.chart.edition }}
{{ $values := fromYaml (include "sch.chart.config.values" . ) -}}
{{ $productName := index $values.sch.chart.productName $edition | trim -}}
{{ $appVersion := .Chart.AppVersion -}}
# Import kafka version
{{ $kafkaVersion := .sch.chart.components.kafka.kafkaVersion -}}
# import port definitions
{{- include "sch.config.init" (list . "ports.sch.chart.config.values") | trim -}}
{{ $ports := .sch.config.ports }}
# Get accessController service name
{{ $accessControllerService := .sch.chart.components.security.accesscontroller.service.name -}}
{{ $accessControllerServiceName := include "sch.names.fullCompName" (list . $accessControllerService) -}}
# k8s configuration
{{ $clusterName := .Values.global.k8s.clusterName -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $name | quote }}
  labels:
{{ $labels | indent 4 }}
    externalCertificate: {{ .Values.global.security.externalCertificateLabel | quote }}
    externalHost: {{ .Values.proxy.externalEndpoint | quote }}
spec:
  replicas: {{ .sch.config.ui.replicas }}
  selector:
    matchLabels:
      release: {{ .Release.Name | quote }}
      serviceSelector: {{ $namePrefix | quote }}
  template:
    metadata:
      namespace: {{ include "restrict.namespace" (list . .Release.Namespace) }}
      labels:
{{ $labels | indent 8 }}
        externalCertificate: {{ .Values.global.security.externalCertificateLabel | quote }}
        externalHost: {{ .Values.proxy.externalEndpoint | quote }}
      annotations:
{{ include "ibm-eventstreams.metering" (list . ) | indent 8 }}
    spec:
      serviceAccountName: {{ $serviceAccountName | quote }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
{{- include "sch.security.securityContext" (list . .sch.chart.securitycontexts.pod) | indent 8 }}
      volumes:
        - name: release-configmap-volume
          configMap:
            name: {{ $releaseConfigMapName }}
            items:
            - key: {{ .sch.config.ui.restProxyExternalPort }}
              path: {{ .sch.config.ui.restProxyExternalPort }}
            - key: {{ .sch.config.ui.externalAddress }}
              path: {{ .sch.config.ui.externalAddress }}
        - name: redis-storage
          emptyDir: {}
      {{- include "license.accept.ref" . | indent 6 }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
{{- include "ibm-eventstreams.archMatchExpression"  (list .) | indent 16 }}
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
{{- if eq (int (include "zones.to.template" (list .)) ) 2 }}
{{- include "ibm-eventstreams.zoneMatchExpression"  (list . 0) | indent 16 }}
{{- end }}
      terminationGracePeriodSeconds: 60
      # UI pods are made up of two containers
      #  1) UI web server
      #  2) redis container for persisting user sessions
      containers:
        #
        # UI web server pods
        - name: "ui"
          image: {{ include "eventstreams.image" (list . "eventstreams-ui" .Values.global.image.imageTags.uiTag) | quote }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          securityContext:
{{- include "sch.security.securityContext" (list . .sch.chart.securitycontexts.containerReadOnlyFilesystem) | indent 12 }}
          volumeMounts:
            - name: release-configmap-volume
              mountPath: {{ .sch.config.ui.releaseConfigMapMountPath }}
          resources:
            limits:
{{ toYaml .Values.global.resources.ui.limits | indent 14 }}
            requests:
{{ toYaml .Values.global.resources.ui.requests | indent 14 }}
          readinessProbe:
            httpGet:
              path: /status
              port: {{ $ports.ui.webserver }}
              scheme: HTTPS
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 10
          livenessProbe:
            httpGet:
              path: /status
              port: {{ $ports.ui.webserver }}
              scheme: HTTPS
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 10
          env:
            {{- include "license.accept.env.ref" . | indent 10 }}
            - name: TLS_CERT
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: "https.cert"
            - name: TLS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: "https.key"
            - name: TLS_ENABLED
              value: "true"
            - name: ID
              value: "{{ $id }}"
            - name: NAMESPACE
              value: {{ .Release.Namespace | quote }}
            - name: CONFIGMAP
              value: {{ $releaseConfigMapName | quote }}
            - name: EVENT_STREAMS_EDITION
              value: "{{ $productName }}"
            - name: EVENT_STREAMS_VERSION
              value: "{{ $appVersion }}"
            - name: KAFKA_VERSION
              value: "{{ $kafkaVersion }}"
            - name: EVENT_STREAMS_CHART_VERSION
              value: "{{ $version }}"
            - name: "API_URL"
              value: "https://{{ $restProxyServiceName }}.{{ .Release.Namespace }}.svc.{{ $clusterName }}:{{ $ports.restproxy.internal }}"
            - name: REDIS_HOST
              value: "127.0.0.1"
            - name: "CLIENT_ID"
              valueFrom:
                secretKeyRef:
                  name: {{ $oauthSecretName }}
                  key: "CLIENT_ID"
            - name: "CLIENT_SECRET"
              valueFrom:
                secretKeyRef:
                  name: {{ $oauthSecretName }}
                  key: "CLIENT_SECRET"
            - name: "CLUSTER_NAME"
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName }}
                  key: "CLUSTER_NAME"
            - name: "CLUSTER_EXTERNAL_IP"
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName }}
                  key: "CLUSTER_ADDRESS"
            - name: "CLUSTER_EXTERNAL_PORT"
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName }}
                  key: "CLUSTER_ROUTER_HTTPS_PORT"
            - name: "PROXY_EXTERNAL_IP"
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName }}
                  key: "PROXY_ADDRESS"
            - name: "CLUSTER_CA_DOMAIN"
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName }}
                  key: "CLUSTER_CA_DOMAIN"
            - name: "EXTERNAL_IP"
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: "externalHostOrIP"
            - name: "ACCESS_CONTROLLER_SERVICE_NAME"
              value: "{{ $accessControllerServiceName }}.{{ $.Release.Namespace }}.svc.{{ $clusterName }}"
            - name: "ACCESS_CONTROLLER_SERVICE_PORT"
              value: {{ $ports.security.accessController | quote}}
            {{- if $replicatorEnabled }}
            - name: GEOREPLICATION_ENABLED
              value: "true"
            {{- end }}
            - name: TRACE_STATE
              value: "ExpressApp;INFO,Simulated;INFO,KubernetesClient;INFO"
            - name: EXTERNAL_REST_PROXY_PORT_FILE
              value: "{{ .sch.config.ui.releaseConfigMapMountPath }}/{{ .sch.config.ui.restProxyExternalPort }}"
            - name: EXTERNAL_HOST_FILE
              value: "{{ .sch.config.ui.releaseConfigMapMountPath }}/{{ .sch.config.ui.externalAddress }}"
            - name: "OPENSHIFT_DOMAIN"
              valueFrom:
                configMapKeyRef:
                  name: {{ $releaseConfigMapName | quote }}
                  key: "OPENSHIFT_DOMAIN"
                  optional: true
            - name: "OPENSHIFT_REST_PROXY_ROUTE"
              value: "{{ $restProxyRouteName }}-{{ $.Release.Namespace }}"
          ports:
            - name: uiendpoint
              containerPort: {{ $ports.ui.webserver }}
        #
        # redis pods
        - name: redis
          image: {{ include "eventstreams.image" (list . "eventstreams-database" .Values.global.image.imageTags.databaseTag) | quote }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          resources:
            limits:
{{ toYaml .Values.global.resources.database.limits | indent 14 }}
            requests:
{{ toYaml .Values.global.resources.database.requests | indent 14 }}
          volumeMounts:
          - name: redis-storage
            mountPath: /data
          securityContext:
{{- include "sch.security.securityContext" (list . .sch.chart.securitycontexts.containerReadOnlyFilesystem) | indent 12 }}
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - /usr/local/bin/redis-cli -h $(hostname) ping
            failureThreshold: 2
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - /usr/local/bin/redis-cli -h $(hostname) ping
            failureThreshold: 2
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          env:
            {{- include "license.accept.env.ref" . | indent 12 }}
