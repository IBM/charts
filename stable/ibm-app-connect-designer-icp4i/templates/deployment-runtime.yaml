# Â© Copyright IBM Corporation 2019
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
{{- include "sch.config.init" (list . "ibm-ac.sch.chart.config.values") }}
{{- $deploymentName := include "sch.names.fullCompName" (list . "runtime") }}
{{- $jobName := include "sch.names.fullCompName" (list . "couch-finish-setup") }}
{{- $saName := include "sch.names.fullCompName" (list . "designer-serviceaccount") }}
{{- $labels := include "sch.metadata.labels.standard" (list . "" (dict "serviceSelector" "runtime")) }}
{{- $serverChartName := .sch.chart.serverChartName }}
{{- $fullName := include "sch.names.fullName" (list .) }}
{{- $secretName := include "sch.names.fullCompName" (list . "is") }}
{{- $envConfigMapName := include "sch.names.fullCompName" (list . "env")}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $deploymentName }}
  labels:
{{ $labels | indent 4 }}
spec:
  strategy:
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  replicas: {{ .Values.global.replicaCount }}
  selector:
    matchLabels:
{{ $labels | indent 6 }}
  template:
    metadata:
      annotations:
{{- include "sch.metadata.annotations.metering" (list . .sch.chart.metering) | indent 8 }}
      name: {{ $deploymentName }}
      labels:
{{ $labels | indent 8 }}
        type: fireflyMicroservice
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                - {{ .Values.arch }}
      serviceAccountName: {{ $saName }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1200
        fsGroup: 1200
      initContainers:
      - name: {{ include "sch.names.fullCompName" (list . "runtime-init") }}
        image: "{{ regexReplaceAll "(^cp\\.(stg\\.)?icr\\.io/)" .Values.image.configurator "${1}cp/icp4i/ace/" }}-{{ .Values.arch }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        command: ["sh"]
        args: ["-c", 'until [ $(/usr/local/bin/kubectl get job {{ $jobName }} -o jsonpath="{.status.succeeded}") = 1 ]; do sleep 1; done && echo "CouchDB Started & Initialised"']
        resources:
          requests:
            cpu: "250m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "1028Mi"
      containers:
        # This is the configuration for the firefly-runtime
        - name: {{ include "sch.names.fullCompName" (list . "firefly-runtime") }}
          image: "{{ regexReplaceAll "(^cp\\.(stg\\.)?icr\\.io/)" .Values.image.fireflyRuntime "${1}cp/icp4i/ace/" }}-{{ .Values.arch }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
          - bash
          - -c
          - |
            export CDB_URL=https://$COUCHDB_USER:$COUCHDB_PASSWORD@{{ include "sch.names.fullCompName" (list . "svc-couchdb") }} ;
            npx bytenode app.jsc
          env:
          - name: APPLICATION_NAME
            value: "firefly-runtime"
          {{- if .Values.featureTogglesOverride }}
          - name: FEATURE_TOGGLES_OVERRIDE
            value: {{ .Values.featureTogglesOverride }}
          {{- end }}
          - name: MUTUAL_AUTH
            value: {{ .Release.Name }}
          - name: port
            value: "3000"
          - name: FIREFLY_ROUTE_RUNTIME
            value: "http://localhost:3000"
          - name: bunyan
            value: "{\"loglevel\" : \"info\", \"logsrc\" : true, \"logfile\" : { \"filename\": \"/opt/ibm/app/logs/firefly-runtime.txt\", \"rotate\": \"true\", \"rotatecount\":12, \"rotateperiod\":\"1h\" }}"
          - name: "COUCHDB_USER"
            valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-couchdb
                  key: adminUsername
          - name: "COUCHDB_PASSWORD"
            valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-couchdb
                  key: adminPassword
          - name: "FIREFLY_AUTH_JWT_PUB_KEY"
            valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: jwt.pub
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1200
            privileged: false
            capabilities:
              drop:
                - ALL
          # Set liveness probe to determine if firefly-runtime is running
          livenessProbe:
            exec:
              command:
              - /readiness/ready-http.sh
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 1
          # Set readiness probe to determine if firefly-runtime is running
          readinessProbe:
            exec:
              command:
              - /readiness/ready-http.sh
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 1
          resources:
            limits:
{{ toYaml .Values.fireflyRuntime.resources.limits | indent 14 }}
            requests:
{{ toYaml .Values.fireflyRuntime.resources.requests | indent 14 }}
          envFrom:
            - configMapRef:
                name: {{ $envConfigMapName }}
          volumeMounts:
            - name: certificates-keys
              mountPath: /opt/ibm/app/ssl
        # This is the configuration for the Stunnel proxy
        - name: {{ include "sch.names.fullCompName" (list . "proxy") }}
          image: "{{ regexReplaceAll "(^cp\\.(stg\\.)?icr\\.io/)" .Values.image.proxy "${1}cp/icp4i/ace/" }}-{{ .Values.arch }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1200
            privileged: false
            capabilities:
              drop:
                - ALL
          lifecycle:
            preStop:
              exec:
                command: ["kill `cat /var/run/stunnel4/haproxy.pid`"]
          livenessProbe:
            exec:
              command:
              - /readiness/ready.sh
            initialDelaySeconds: 60
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 1
          readinessProbe:
            exec:
              command:
              - /readiness/ready.sh
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 1
          ports:
          - name: https-port
            containerPort: 3001
          resources:
            limits:
{{ toYaml .Values.proxy.resources.limits | indent 14 }}
            requests:
{{ toYaml .Values.proxy.resources.requests | indent 14 }}
          volumeMounts:
            - name: certificates-keys
              mountPath: /etc/stunnel/secrets
      volumes:
        - name: certificates-keys
          secret:
            secretName: {{ $secretName }}
            items:
            - key: tls.key
              path: stunnel.key.pem
              mode: 384
            - key: tls.crt
              path: stunnel.cert.pem
              mode: 384
            - key: ca.crt
              path: stunnel.ca.pem
              mode: 384
