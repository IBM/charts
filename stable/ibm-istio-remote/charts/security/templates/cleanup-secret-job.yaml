apiVersion: batch/v1
kind: Job
metadata:
  name: istio-cleanup-secrets
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": post-delete
    "helm.sh/hook-delete-policy": hook-succeeded
    "helm.sh/hook-weight": "3"
  labels:
    app: {{ template "security.name" . }}
    chart: {{ template "security.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
spec:
  template:
    metadata:
      labels:
        app: {{ template "security.name" . }}
        chart: {{ template "security.chart" . }}
        heritage: {{ .Release.Service }}
        release: {{ .Release.Name }}
      annotations:
        sidecar.istio.io/inject: "false"
        scheduler.alpha.kubernetes.io/critical-pod: ""
    spec:
      serviceAccountName: istio-cleanup-secrets-service-account
{{- if .Values.global.priorityClassName }}
      priorityClassName: "{{ .Values.global.priorityClassName }}"
{{- end }}
      containers:
      - name: kubectl
        image: "{{ .Values.global.kubectl.repository }}:{{ .Values.global.kubectl.tag }}"
        imagePullPolicy: "{{ .Values.global.imagePullPolicy }}"
        command:
        - /bin/sh
        - -c
        - >
            kubectl get secret --all-namespaces | grep "istio.io/key-and-cert" |  while read -r entry; do
              ns=$(echo $entry | awk '{print $1}');
              name=$(echo $entry | awk '{print $2}');
              kubectl delete secret $name -n $ns;
            done
      restartPolicy: OnFailure
      nodeSelector:
      {{- include "security.nodeselector" . | indent 6 }}
      tolerations:
      {{- include "security.tolerations" . | indent 6 }}
      affinity:
      {{- include "nodeaffinity" . | indent 6 }}
