{{- if eq .Values.mode "managed" -}}

# Licensed Materials - Property of IBM
# 5737-E67
# @ Copyright IBM Corporation 2016, 2018. All Rights Reserved.
# US Government Users Restricted Rights - Use, duplication or disclosure restricted by GSA ADP Schedule Contract with IBM Corp.

apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: {{ template "prometheus.fullname" . }}
    component: prometheus
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  name: {{ template "prometheus.fullname" . }}-lua-scripts-config
data:
  rewrite.lua: |-
    local cjson = require "cjson"
    local cookiejar = require "resty.cookie"
    local http = require "lib.resty.http"

    local function exit_401()
        ngx.status = ngx.HTTP_UNAUTHORIZED
        ngx.header["Content-Type"] = "text/html; charset=UTF-8"
        ngx.header["WWW-Authenticate"] = "oauthjwt"
        ngx.say('BODY_401_ERROR_RESPONSE')
        return ngx.exit(ngx.HTTP_UNAUTHORIZED)
    end

    local function exit_500()
        ngx.status = ngx.HTTP_INTERNAL_SERVER_ERROR
        ngx.header["Content-Type"] = "text/html; charset=UTF-8"
        ngx.header["WWW-Authenticate"] = "oauthjwt"
        ngx.say('Internal Error')
        return ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
    end

    local function get_auth_token()
        local auth_header = ngx.var.http_Authorization

        local token = nil
        if auth_header ~= nil then
            ngx.log(ngx.DEBUG, "Authorization header found. Attempt to extract token.")
            _, _, token = string.find(auth_header, "Bearer%s+(.+)")
        end

        if (auth_header == nil or token == nil) then
            ngx.log(ngx.DEBUG, "Authorization header not found.")
            -- Presence of Authorization header overrides cookie method entirely.
            -- Read cookie. Note: ngx.var.cookie_* cannot access a cookie with a
            -- dash in its name.
            local cookie, err = cookiejar:new()
            token = cookie:get("cfc-access-token-cookie")
            if token == nil then
                ngx.log(ngx.ERR, "cfc-access-token-cookie not found.")
            else
                ngx.log(
                    ngx.NOTICE, "Use token from cfc-access-token-cookie, " ..
                    "set corresponding Authorization header for upstream."
                    )
            end
        end

        if token == nil then
            ngx.log(ngx.DEBUG, "to check user_agent")
            local user_agent = ngx.req.get_headers()["user-agent"]
            --- if request is from go client skip the rbac check
            ngx.log(ngx.DEBUG, "user_agent is ",user_agent)
            if user_agent == "Go-http-client/1.1" then
                ngx.log(ngx.NOTICE, "skip rbac check for request from go client")
            else
                ngx.log(ngx.ERR, "No auth token in request.")
                return nil, exit_401()
            end
        end

        return token
    end

    local function get_user_id(token)
        local user_id = ""
        local httpc = http.new()
        ngx.req.set_header('Authorization', 'Bearer '.. token)
        local res, err = httpc:request_uri("https://platform-identity-provider.kube-system.svc.{{ .Values.clusterDomain }}:4300/v1/auth/userInfo", {
            method = "POST",
            body = "access_token=" .. token,
            headers = {
              ["Content-Type"] = "application/x-www-form-urlencoded"
            },
            ssl_verify = false
        })

        if not res then
            ngx.log(ngx.ERR, "Failed to request userinfo due to ",err)
            return nil, exit_401()
        end
        if (res.body == "" or res.body == nil) then
            ngx.log(ngx.ERR, "Empty response body")
            return nil, exit_401()
        end
        local x = tostring(res.body)
        local uid = cjson.decode(x).sub
        ngx.log(ngx.DEBUG, "UID is ",uid)
        return uid
    end

    local function get_user_role(token, uid)
        local httpc = http.new()
        local res, err = httpc:request_uri("https://platform-identity-management.kube-system.svc.{{ .Values.clusterDomain }}:4500/identity/api/v1/users/" .. uid .. "/getHighestRoleForCRN", {
            method = "GET",
            headers = {
              ["Content-Type"] = "application/json",
              ["Authorization"] = "Bearer ".. token
            },
            query = {
                ["crn"] = "crn:v1:icp:private:k8:{{ .Values.clusterName }}:n/{{ .Release.Namespace }}:::"
            },
            ssl_verify = false
        })
        if not res then
            ngx.log(ngx.ERR, "Failed to request user role due to ",err)
            return nil, exit_401()
        end
        if (res.body == "" or res.body == nil) then
            ngx.log(ngx.ERR, "Empty response body")
            return nil, exit_401()
        end
        local role_id = tostring(res.body)
        ngx.log(ngx.DEBUG, "user role ", role_id)
        return role_id
    end

    local function get_user_namespaces(token, uid)
        local httpc = http.new()
        res, err = httpc:request_uri("https://platform-identity-management.kube-system.svc.{{ .Values.clusterDomain }}:4500/identity/api/v1/users/" .. uid .. "/getTeamResources", {
            method = "GET",
            headers = {
              ["Content-Type"] = "application/json",
              ["Authorization"] = "Bearer ".. token
            },
            query = {
                ["resourceType"] = "namespace"
            },
            ssl_verify = false
        })
        if not res then
            ngx.log(ngx.ERR, "Failed to request user's authorized namespaces due to ",err)
            return nil, exit_401()
        end
        if (res.body == "" or res.body == nil) then
            ngx.log(ngx.ERR, "Empty response body")
            return nil, exit_401()
        end
        local x = tostring(res.body)
        ngx.log(ngx.DEBUG, "namespaces ",x)
        local namespaces = cjson.decode(x)
        return namespaces
    end

    local function inject_query(namespaces, query)
        local query_string = 'kubernetes_namespace=~"'
        for i, entry in ipairs(namespaces) do
          x = tostring(entry)
          query_string = query_string .. entry.namespaceId
          query_string = query_string .. "|"
        end
        if query_string == 'kubernetes_namespace=~"' then
            return nil, exit_401()
        end
        --- remove the last |
        query_string = string.sub(query_string, 1, -2)
        query_string = query_string .. '"'
        ngx.log(ngx.DEBUG, "query_string ", query_string)
        
        --- assume metric's name format is A_B_C
        --- first step is to retrieve all metric names in query string
        --- remove 4 exceptions: 1. by (A_B_C) 2. {A_B_C=""} 3. [A_B_C] 4. A_B_C()
        local metrics_str = query:gsub("by %([^%(%)]+%)", "---")
        metrics_str = metrics_str:gsub("{[^%}]+}", "---")
        metrics_str = metrics_str:gsub("%[[^%]]+%]", "---")
        metrics_str = metrics_str:gsub("([_%w]+_[_%w]+)%(", "---")

        --- To inject query string
        --- if there is already label filter append the query string to existing ones
        --- if no label filter add it
        for metric in string.gmatch(metrics_str, "([_%w]+_[_%w]+)") do
            if string.find(query, metric .."{") then
                query = query:gsub(metric .."{([^%}]*)}", metric .. "{%1," .. query_string .. "}")
            else
                query = query:gsub(metric, metric .. "{" .. query_string .. "}")
            end
        end
        ngx.log(ngx.DEBUG, "updated query " .. query)
        return query
    end

    local function get_releases(token, time)
        local httpc = http.new()
        local res, err = httpc:request_uri("http://helm-api.kube-system.svc.{{ .Values.clusterDomain }}:3000/api/v1/releases", {
            method = "GET",
            headers = {
              ["Content-Type"] = "application/json",
              ["Authorization"] = "Bearer ".. token,
              ["cookie"] = "cfc-access-token-cookie="..token
            }
        })
        if not res then
            ngx.log(ngx.ERR, "Failed to get helm releases",err)
            return nil, exit_500()
        end
        if (res.body == "" or res.body == nil) then
            ngx.log(ngx.ERR, "Empty response body")
            return nil, exit_500()
        end
        local x = tostring(res.body)
        ngx.log(ngx.DEBUG, "response is ",x)
        local releases_result = cjson.decode(x).data
        local release_list = {}
        for index, release in ipairs(releases_result) do 
            local release_attrs = {}
            release_attrs.__name__ = "helm_release_info"
            release_attrs.release_name = release.attributes.name
            release_attrs.chart_name = release.attributes.chartName
            release_attrs.chart_version = release.attributes.chartVersion
            release_attrs.status = release.attributes.status
            release_attrs.namespace = release.attributes.namespace
            table.insert(release_list, release_attrs)
            local release_str = cjson.encode(release_list)
        end
        return release_list, nil
    end

    local function get_release_pods(token, release_name)
        ngx.log(ngx.DEBUG, "Check pod of release ",release_name)
        local no_pods_str = "NONE"
        if release_name == "" then
            return no_pods_str
        end
        local httpc = http.new()
        local res, err = httpc:request_uri("http://helm-api.kube-system.svc.{{ .Values.clusterDomain }}:3000/api/v1/releases/"..release_name, {
            method = "GET",
            headers = {
              ["Content-Type"] = "application/json",
              ["Authorization"] = "Bearer ".. token,
              ["cookie"] = "cfc-access-token-cookie="..token
            }
        })
        if not res then
            ngx.log(ngx.ERR, "Failed to get pods of release ",err)
            return no_pods_str
        end
        if res.status == 404 then
            ngx.log(ngx.ERR, "The release does not exist: ", release_name)
            return no_pods_str
        end
        if (res.body == "" or res.body == nil) then
            ngx.log(ngx.ERR, "Empty response body")
            return no_pods_str
        end
        local x = tostring(res.body)
        ngx.log(ngx.DEBUG, "response is ",x)
        local resources_str = cjson.decode(x).data.attributes.resources
        local s_index = string.find(resources_str, "==> v1/Pod")
        if s_index == nil then
            return no_pods_str
        end
        local e_index = string.find(resources_str, "==>", s_index + 1)
        local pod_str
        if e_index ~= nil then
            pod_str = string.sub(resources_str, s_index, e_index)
        else
            pod_str = string.sub(resources_str, s_index)
        end
        local i=1
        local pods=""
        for pod_line in string.gmatch(pod_str, "([^\n]+)") do
            if string.find(pod_line, " ") ~= nil then
                if i > 2 then
                    pod_name = string.sub(pod_line, 1, string.find(pod_line, " ") - 1)
                    if i ~= 3 then
                        pod_name = "|"..pod_name
                    end
                    pods=pods..pod_name
                end
            end
            i = i + 1
        end
        ngx.log(ngx.DEBUG, "pods string is ",pods)
        return pods        
    end

    local function write_release_response()
        local token, err = get_auth_token()
        if err ~= nil then
            err()
        else
            local release_list, err = get_releases(token, nil)
            if err ~= nil then
                err()
            else
                local response = {}
                response.status = "success"
                response.data = release_list
                local response_str = cjson.encode(response)
                ngx.log(ngx.DEBUG, "resp is ", response_str)
                ngx.header["Content-type"] = "application/json"
                ngx.say(response_str)
                ngx.exit(200)
            end
        end
    end

    local function rewrite_query()
        local args = ngx.req.get_uri_args()
        local query_key = nil
        if args["query"] ~= nil then
            query_key = "query"
        else
            if args["match[]"] ~= nil then
                query_key = "match[]"
            end
        end
        if query_key ~= nil then
            local query = args[query_key]
            local token, err = get_auth_token()
            if err ~= nil then
                return err
            end
            if token ~= nil then
                local uid, err = get_user_id(token)
                if err ~= nil then
                    return err
                end
                local role_id, err = get_user_role(token, uid)
                if err ~= nil then
                    return err
                end
                if (role_id ~= '"ClusterAdministrator"' ) then
                    local namespaces, err = get_user_namespaces(token, uid)
                    if err ~= nil then
                        return err
                    end
                    local updated_query, err = inject_query(namespaces, query)
                    if err ~= nil then
                        return err
                    end
                    args[query_key] = updated_query
                    ngx.req.set_uri_args(args)
                end

                --- replace release_name="release1" to pod_name=~"pod1|pod2|pod3"
                if (string.find(query, "release_name=") ~= nil) then
                    local start_index,end_index = string.find(query, "release_name=[^},]+")
                    local release_name = string.sub(query, start_index + 14, end_index - 1)
                    local pod_list = get_release_pods(token, release_name)
                    local updated_query = string.gsub(query, "release_name=[^},]+", "pod_name=~\""..pod_list.."\"")
                    ngx.log(ngx.DEBUG, 'updated_query is ', updated_query)
                    args[query_key] = updated_query
                    ngx.req.set_uri_args(args)
                end
            end
        end
    end

    -- Expose interface.
    local _M = {}
    _M.rewrite_query = rewrite_query
    _M.write_release_response = write_release_response

    return _M
{{- end -}}