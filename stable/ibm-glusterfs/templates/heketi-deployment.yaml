###############################################################################
# Licensed Materials - Property of IBM
# 5737-E67
# (C) Copyright IBM Corporation 2016, 2018 All Rights Reserved
# US Government Users Restricted Rights - Use, duplication or disclosure
# restricted by GSA ADP Schedule Contract with IBM Corp.
################################################################################

{{- include "sch.config.init" (list . "glusterfs.sch.chart.config.values") }}
{{- $heketideployName :=  .sch.chart.components.heketideploy.name }}
{{- $heketitopocmName :=  .sch.chart.components.heketitopocm.name }}
{{- $heketicfgcmName :=  .sch.chart.components.heketicfgcm.name }}

kind: Deployment
apiVersion: apps/v1beta2
metadata:
  name: {{ include "sch.names.fullCompName" (list . $heketideployName) }}
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $heketideployName) | indent 4 }}
    glusterfs: "heketi-deployment"
    version: "{{ .Values.heketi.image.tag }}"
  annotations:
    description: Defines how to deploy Heketi
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "sch.names.appName" (list .) }}
      release: "{{ .Release.Name }}"
      heritage: "{{ .Release.Service }}"
      glusterfs: "heketi-pod"
      version: "{{ .Values.heketi.image.tag }}"
  template:
    metadata:
      name: {{ include "sch.names.fullCompName" (list . $heketideployName) }}
      labels:
        app: {{ include "sch.names.appName" (list .) }}
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
        chart: "{{ .Chart.Name }}"
        glusterfs: "heketi-pod"
        version: "{{ .Values.heketi.image.tag }}"
      annotations:
        productName: "Heketi"
        productID: "Heketi_{{ .Values.heketi.image.tag }}_free_00000"
        productVersion: "{{ .Values.heketi.image.tag }}"

        prometheus.io/scrape: "{{ .Values.prometheus.enabled }}"
        prometheus.io/path: "{{ .Values.prometheus.path }}"
        prometheus.io/port: "{{ .Values.prometheus.port }}"

        scheduler.alpha.kubernetes.io/critical-pod: ""
    spec:
      #serviceAccountName: default
      {{- if .Values.podPriorityClass }}
      priorityClassName: "{{ .Values.podPriorityClass }}"
      {{- end }}
      initContainers:
        - image: "{{ .Values.preValidation.image.repository }}:{{ .Values.preValidation.image.tag }}"
          imagePullPolicy: "{{ .Values.preValidation.image.pullPolicy }}"
          name: init-gluster-check

          command: ["/gluster-check/is_gluster_daemon_up.sh"]

          volumeMounts:
            - name: topology
              mountPath: "/gluster-check"

        - image: "{{ .Values.heketi.image.repository }}:{{ .Values.heketi.image.tag }}"
          imagePullPolicy: "{{ .Values.heketi.image.pullPolicy }}"
          name: init-heketi

          command: ["/topology/heketi-topology-load.sh"]
          env:
            - name: HEKETI_EXECUTOR
              value: kubernetes
            - name: HEKETI_FSTAB
              value: "/var/lib/heketi/fstab"
            - name: HEKETI_SNAPSHOT_LIMIT
              value: '14'
            - name: HEKETI_KUBE_GLUSTER_DAEMONSET
              value: "y"
            - name: HEKETI_KUBE_DB_SECRET_NAME
              value: "{{ .Values.heketi.backupDbSecret }}"
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: "heketi-db-secret"
              mountPath: "/backupdb"
            - name: config
              mountPath: "/etc/heketi"
            - name: topology
              mountPath: "/topology"
      containers:
        - image: "{{ .Values.heketi.image.repository }}:{{ .Values.heketi.image.tag }}"
          imagePullPolicy: "{{ .Values.heketi.image.pullPolicy }}"
          name: heketi

          env:
            - name: HEKETI_EXECUTOR
              value: kubernetes
            - name: HEKETI_FSTAB
              value: "/var/lib/heketi/fstab"
            - name: HEKETI_SNAPSHOT_LIMIT
              value: '14'
            - name: HEKETI_KUBE_GLUSTER_DAEMONSET
              value: "y"
            - name: HEKETI_IGNORE_STALE_OPERATIONS
              value: "true"
            - name: HEKETI_ADMIN_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.heketi.authSecret }}
                  key: admin_password
            - name: HEKETI_KUBE_DB_SECRET_NAME
              value: "{{ .Values.heketi.backupDbSecret }}"
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: "heketi-db-secret"
              mountPath: "/backupdb/heketi.db.gz"
              subPath: heketi.db.gz
            - name: config
              mountPath: "/etc/heketi"
          readinessProbe:
            timeoutSeconds: 3
            initialDelaySeconds: 10
            httpGet:
              path: "/hello"
              port: 8080
          livenessProbe:
            timeoutSeconds: 3
            initialDelaySeconds: 30
            httpGet:
              path: "/hello"
              port: 8080
          resources:
{{ toYaml .Values.heketi.resources| indent 12 }}
      volumes:
        - name: topology
          configMap:
            name: {{ include "sch.names.fullCompName" (list . $heketitopocmName) }}
            defaultMode: 0744
        - name: heketi-db-secret
          secret:
            defaultMode: 420
            secretName: "{{ .Values.heketi.backupDbSecret }}"
        - name: config
          configMap:
            name: {{ include "sch.names.fullCompName" (list . $heketicfgcmName) }}
            defaultMode: 420
            items:
            - key: heketi.json
              path: heketi.json

      nodeSelector:
        {{ .Values.nodeSelector.key }}: {{ .Values.nodeSelector.value }}
      affinity:
      {{- include "nodeaffinity" . | indent 6 }}
      tolerations:
        - key: dedicated
          operator: Exists
        - key: CriticalAddonsOnly
          operator: Exists
{{- with .Values.tolerations }}
{{ toYaml . | indent 8 }}
{{- end }}
