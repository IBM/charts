{{- if eq .Values.mode "distributed" }}
{{ $nodeCount := .Values.replicas | int }}
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "minio.fullname" . }}
  labels:
    app: {{ template "minio.name" . }}
    chart: {{ template "minio.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  updateStrategy:
    type: {{ .Values.statefulSetUpdate.updateStrategy }}
  serviceName: {{ template "minio.fullname" . }}
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ template "minio.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      name: {{ template "minio.fullname" . }}
      labels:
        app: {{ template "minio.name" . }}
        release: {{ .Release.Name }}
        chart: {{ template "minio.chart" . }}
        heritage: {{ .Release.Service }}
      annotations:
        productName: "Minio"
        productID: "Minio_{{ .Values.image.tag }}_free_00000"
        productVersion: "{{ .Values.image.tag }}"
        scheduler.alpha.kubernetes.io/critical-pod: ""
{{- with .Values.podAnnotations }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
      {{- if .Values.priorityClassName }}
      {{- if and ( eq .Values.priorityClassName "system-cluster-critical" ) ( not ( ( eq  .Release.Namespace "kube-system"))) }}
        {{ fail "Configuration error: system-cluster-critical is available only in kube-system namespace."}}
      {{  end }}
      priorityClassName: "{{ .Values.priorityClassName }}"
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.tls.enabled }}
          command: [ "/bin/sh",
          "-ce",
          "/usr/bin/docker-entrypoint.sh minio -C {{ .Values.configPath }} server
          {{- range $i := until $nodeCount }}
          https://{{ template `minio.fullname` $ }}-{{ $i }}.{{ template `minio.fullname` $ }}.{{ $.Release.Namespace }}.svc.{{ $.Values.tls.clusterDomain }}{{ $.Values.mountPath }}
          {{- end }}" ]
          {{ else }}
          command: [ "/bin/sh",
          "-ce",
          "/usr/bin/docker-entrypoint.sh minio -C {{ .Values.configPath }} server
          {{- range $i := until $nodeCount }}
          http://{{ template `minio.fullname` $ }}-{{ $i }}.{{ template `minio.fullname` $ }}.{{ $.Release.Namespace }}.svc.{{ $.Values.tls.clusterDomain }}{{ $.Values.mountPath }}
          {{- end }}" ]
          {{- end }}
          volumeMounts:
            - name: export
              mountPath: {{ .Values.mountPath }}
              {{- if and .Values.persistence.enabled .Values.persistence.subPath }}
              subPath: "{{ .Values.persistence.subPath }}"
              {{- end }}
            - name: minio-config-dir
              mountPath: {{ .Values.configPath }}
            {{- if .Values.tls.enabled }}
            - name: secret-volume
              mountPath: {{ .Values.configPath }}/certs
            {{- end }}
          ports:
            - name: service
              containerPort: 9000
          env:
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.minioAccessSecret }}
                  key: accesskey
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.minioAccessSecret }}
                  key: secretkey
            {{- range $index, $val := .Values.environment }}
            - name: {{ $val.name }}
              value: {{ $val.value | quote }}
            {{- end}}
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: service
              {{- if .Values.tls.enabled }}
              scheme: HTTPS
              {{ else }}
              scheme: HTTP
              {{- end }}
            initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
      affinity:
{{- include "nodeaffinity" . | indent 8 }}
      tolerations:
        - key: CriticalAddonsOnly
          operator: Exists
{{- with .Values.tolerations }}
{{ toYaml . | indent 8 }}
    {{- end }}
      securityContext:
        runAsUser: 5001
        runAsGroup: 5001
        fsGroup: 5001
        runAsNonRoot: true
      volumes:
{{- if .Values.tls.enabled }}
        - name: secret-volume
          secret:
          {{- if or (eq .Values.tls.type  "selfsigned") (eq .Values.tls.type  "cert-manager-generated") }}
            secretName: {{ template "minio.fullname" . }}-tls-secret
            defaultMode: 420
            items:
            - key: tls.crt
              path: public.crt
            - key: tls.key
              path: private.key
            - key: tls.crt
              path: CAs/ca.crt
          {{- else if eq .Values.tls.type  "provided" }}
            {{- if empty .Values.tls.minioTlsSecret }}
              {{ fail "Configuration error: Please enter name of secret containing TLS certificate and key." }}
            {{- end }}
            secretName: {{ .Values.tls.minioTlsSecret }}
            defaultMode: 420
            items:
            - key: public.crt
              path: public.crt
            - key: private.key
              path: private.key
            - key: ca.crt
              path: CAs/ca.crt
          {{- end }}
{{- end }}
        - name: minio-user
          secret:
            secretName: {{ .Values.minioAccessSecret }}
        - name: minio-server-config
          configMap:
            name: {{ template "minio.fullname" . }}
        - name: minio-config-dir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: export
      spec:
        accessModes: [ {{ .Values.persistence.accessMode | quote }} ]
        {{- if .Values.persistence.useDynamicProvisioning }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
{{- end }}
