{{- include "sch.config.init" (list .) -}}
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: {{ include "sch.names.fullName" (list .) }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: "jenkins-ingress-job"
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  name: {{ include "sch.names.fullName" (list .) }}-fixup-jenkins-ingress
  namespace: {{ .Release.Namespace }}
data:
  replace_jenkins_ingress.sh: |
    #!/bin/bash
    cn={{ template "jenkins.ingress-host" . }}
    cd
    mkdir $cn.ssl
    cd $cn.ssl
    csr=$(pwd)/$cn.csr
    key=$(pwd)/$cn.key
    crt=$(pwd)/$cn.crt
    openssl genrsa -out $key 2048
    openssl req -new -sha256 -key $key -out $csr -subj "/C=US/ST=NC/O=IBM Inc./CN=$cn" \
        -reqexts SAN \
        -config <(cat /etc/ssl/openssl.cnf <(printf "[SAN]\nsubjectAltName=DNS:${cn},DNS:jenkins.127.0.0.1.nip.io"))
    cd ..
    (cat <<EOF
    apiVersion: certificates.k8s.io/v1beta1
    kind: CertificateSigningRequest
    metadata:
      name: ${cn}
    spec:
      groups:
      - system:authenticated
      request: $(cat $csr | base64 | tr -d '\n')
      usages:
      - digital signature
      - key encipherment
      - server auth
    EOF
    ) | kubectl create -f - 2>output.txt
    cat output.txt
    var=$(grep "error" output.txt)
    if [[ !  -z  "$var"  ]]
    then
     openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN={{ template "jenkins.ingress-host" . }}"
     kubectl create secret tls {{ .Release.Name }}-tls-secret  --key tls.key --cert tls.crt
    else 
     kubectl certificate approve ${cn}
     kubectl get csr ${cn} -o jsonpath='{.status.certificate}' | base64 -d > $crt
     kubectl create secret tls {{ .Release.Name }}-tls-secret  --key $key --cert $crt 2>output.txt 
     var=$(grep "error" output.txt)
     if [[ !  -z  "$var"  ]]
     then
      openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN={{ template "jenkins.ingress-host" . }}"
      kubectl create secret tls {{ .Release.Name }}-tls-secret  --key tls.key --cert tls.crt
     fi 
    fi
    cat <<EOF | kubectl replace -f -
    apiVersion: extensions/v1beta1
    kind: Ingress
    metadata:
      name: {{ .Release.Name }}-jenkins
    spec:
      rules:
      - host: {{ template "jenkins.ingress-host" . }}
        http:
          paths:
          - backend:
              serviceName: {{ .Release.Name }}-jenkins
              servicePort: 8080
      tls:
      - hosts:
        - {{ template "jenkins.ingress-host" . }}
        secretName: {{ .Release.Name }}-tls-secret
    EOF
