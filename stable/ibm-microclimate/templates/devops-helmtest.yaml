apiVersion: v1
kind: ConfigMap
# script for helm test of devops
# This waits for devops and jenkins containers coming up and issues one rest api call to devops
metadata:
  name: {{ .Release.Name }}-helmtest-devops
  labels:
    app: {{ include "sch.names.fullName" (list .) }}-devops
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  helmtest.sh: |-
    #!/bin/sh
    # get all types of status of the pods
    function queryPodConditions() {
        local queryString=$1
        local namespace=$2
            podConditions=$(kubectl get pods -n $namespace -o json | sed 's#\\"##g' | jq --compact-output -r ".items[] | {name: .metadata.name, type: .status.conditions[].type, status: .status.conditions[].status}" | uniq | egrep $queryString)
            echo $podConditions
    }
    # get devops and jenkins pods prefixes
    function getPodPrefix() {
        local release=$1
        local namespace=$2
        local pods=$(kubectl get pods -l release=$release --namespace=$namespace | egrep "devops" | cut -d ' '  -f 1)
        pods=$pods"|"$(kubectl get pods -l release=$release --namespace=$namespace | egrep "jenkins" | cut -d ' '  -f 1)
        echo $pods
    }
    namespace=$1
    release=$2
    requesturl=$3
    sleepTime=30
    timeout=10
    waitLoops=$(( ($timeout * 60)/$sleepTime ))
    checkScheduleLoop=$(( $waitLoops / 2 ))  # Half way through check if scheduling issue
    found=false #Default to found incase no deployments are part of release
    counter=0 ;
    found=false;
    podPrefixStr=$(getPodPrefix $release $namespace)
    echo "Checking status of $release deployments"
    until [ $counter -eq $waitLoops ]; do
        echo "$(kubectl get deployments -l release=$release -n $namespace)"
        let counter+=1
        podConditions="$(queryPodConditions $podPrefixStr $namespace)"
        # check any of the status is False
        if echo "$podConditions" | grep -q 'False'; then
            podNames=$(echo $podConditions | tr ' ' '\n' | grep False | uniq | tr '\n' ' ' | jq -r ".name" | uniq)
            for i in ${podNames//|/ }
            do
                echo "Waiting for Pod $i - see current pod status :"
                status="$(kubectl get po/$i --namespace $namespace -o json | sed 's#\\"##g' | jq -r \".status\" )" || echo "$podConditions"
                echo "$status"
            done
        else
            # Check for not found failure
            [[ $(echo $podConditions | wc -l) -eq 0 ]] && { echo "Pods w/ prefix $podPrefixStr for deployment not found when expected" ; exit 1 ; }
            found=true
            break;
        fi
        if [ $counter -eq $checkScheduleLoop ]; then
            unscheduleable=$(echo $status | grep '"reason": "unschedulable"') || true
            [[ $unscheduleable ]] && { echo "Halting as half way thru wait period and job is still unscheduleable" ; break ; }
        fi
        echo "$release deployment check : $counter/$waitLoops checks completed"
        sleep $sleepTime
    done
    if $found; then
        echo "Checking for devops response"
        counter=0
        until [ $counter -eq $waitLoops ]; do
            let counter+=1
            # getting response e of /v1/namespaces/projects Rest c and checks if it has [ in it
            lines=$(wget -T 3 --no-check-certificate -O /var/tmp/tmp https://$requesturl/v1/namespaces/$namespace/projects ; cat /var/tmp/tmp | egrep '\[' | wc -l)
            if [ $lines -gt 0 ]; then
                echo "good"
                exit 0;
            fi
            sleep $sleepTime
        done
    fi
    echo done
    exit 1;
