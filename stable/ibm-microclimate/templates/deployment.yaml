{{- include "sch.config.init" (list .) -}}
#*******************************************************************************
# Licensed Materials - Property of IBM
# "Restricted Materials of IBM"
#
# Copyright IBM Corp. 2018 All Rights Reserved
#
# US Government Users Restricted Rights - Use, duplication or disclosure
# restricted by GSA ADP Schedule Contract with IBM Corp.
#*******************************************************************************

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ include "sch.names.fullName" (list .) }}
  labels:
    app: {{ include "sch.names.fullName" (list .) }}-portal
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"

spec:
  selector:
    matchLabels:
      app: {{ include "sch.names.fullName" (list .) }}-portal
      release: {{ .Release.Name }}
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ include "sch.names.fullName" (list .) }}-portal
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: "{{ .Release.Name }}"
        heritage: "{{ .Release.Service }}"
      annotations:
        productName: "IBM Microclimate v1"
        productID: "IBMMicroclimate_{{ .Chart.AppVersion }}_perpetual_00000"
        productVersion: "{{ .Chart.AppVersion }}"

    spec:
      # As provided in the chart. Used by Portal and File Watcher
      {{- if .Values.global.rbac.serviceAccountName }}
      serviceAccountName: {{ .Values.global.rbac.serviceAccountName }}
      {{- end }}
      affinity:
      {{- include "nodeaffinity" . | indent 8 }}
      volumes:
      - name: shared-workspace
      {{- if and .Values.persistence.enabled .Values.persistence.existingClaimName}}
        persistentVolumeClaim:
          claimName: {{ .Values.persistence.existingClaimName}}
      {{- else if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ include "sch.names.fullName" (list .) }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      {{- if .Values.jenkins.Pipeline.Registry.Secret }}
      - name: registry-secret
        secret:
          secretName: "{{ .Values.jenkins.Pipeline.Registry.Secret}}"
      {{- end }}
      # Don't try using a helm secret if on 2.1.0.2
      {{- if and .Values.global.helm.tlsSecretName }}
      - name: helm-secret
        secret:
          secretName: "{{ .Values.global.helm.tlsSecretName }}"
      {{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      {{- if .Values.global.useSecurityContext }}
      securityContext:
        runAsNonRoot: {{ .Values.global.runAsNonRoot }}
        runAsUser: {{ .Values.global.runAsUser }}
        {{- if .Values.global.runAsNonRoot }}
        fsGroup: 1000
        {{- end }}
      {{- end }}
      containers:
      - name: microclimate-portal
        image: {{ .Values.portal.repository}}:{{ .Values.portal.tag}}
        imagePullPolicy: "{{ .Values.imagePullPolicy}}"
        {{- if .Values.global.useSecurityContext }}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
            add:
            - AUDIT_WRITE
            - CHOWN
            - DAC_OVERRIDE
            - SETUID
            - SETGID
        {{- end }}
        volumeMounts:
        - name: shared-workspace
          mountPath: /microclimate-workspace
        env:
          - name: IN_K8
            value: "true"
          - name: MULTI_USER
            value: "true"
          - name: PORTAL_HTTPS
            value: "true"
          - name: KUBE_NAMESPACE
            value: "{{ .Release.Namespace }}"
          - name: FULL_NAME
            value: {{ include "sch.names.fullName" (list .) }}
          - name: LOADRUNNER_IMAGE
            value: {{ .Values.loadrunner.repository}}:{{ .Values.loadrunner.tag}}
          - name: LOADRUNNER_MEM_REQUEST
            value: {{ .Values.loadrunner.resources.requests.memory}}
          - name: LOADRUNNER_CPU_REQUEST
            value: {{ .Values.loadrunner.resources.requests.cpu}}
          - name: LOADRUNNER_MEM_LIMIT
            value: {{ .Values.loadrunner.resources.limits.memory}}
          - name: LOADRUNNER_CPU_LIMIT
            value: {{ .Values.loadrunner.resources.limits.cpu}}
          - name: SERVICE_NAME
            value: {{ include "sch.names.fullName" (list .) }}
          {{- if .Values.jenkins.Pipeline.Registry.Secret }}
          - name: DOCKER_REGISTRY_SECRET
            value: "{{ .Values.jenkins.Pipeline.Registry.Secret }}"
          {{- end }}
          {{- if .Values.jenkins.Pipeline.Registry.Url }}
          - name: DOCKER_REGISTRY_URL
            value: "{{ .Values.jenkins.Pipeline.Registry.Url }}/{{ .Release.Namespace }}"
          {{- end }}
          {{- if and .Values.global.helm.tlsSecretName }}
          - name: HELM_SECRET
            value: "{{ .Values.global.helm.tlsSecretName }}"
          {{- end }}
          {{- if .Values.global.rbac.serviceAccountName }}
          - name: SERVICE_ACCOUNT_NAME
            value: {{ .Values.global.rbac.serviceAccountName }}
          {{- end }}
          {{- if .Values.global.helmHost }}
          - name: HELM_HOST
            value: {{ .Values.global.helmHost }}
          {{- end }}
          - name: EDITOR_IMAGE
            value: {{ .Values.theia.repository}}:{{ .Values.theia.tag}}
          - name: EDITOR_MEM_REQUEST
            value: {{ .Values.theia.resources.requests.memory}}
          - name: EDITOR_CPU_REQUEST
            value: {{ .Values.theia.resources.requests.cpu}}
          - name: EDITOR_MEM_LIMIT
            value: {{ .Values.theia.resources.limits.memory}}
          - name: EDITOR_CPU_LIMIT
            value: {{ .Values.theia.resources.limits.cpu}}
          - name: FILE_WATCHER_IMAGE
            value: {{ .Values.filewatcher.repository}}:{{ .Values.filewatcher.tag}}
          - name: FILE_WATCHER_MEM_REQUEST
            value: {{ .Values.filewatcher.resources.requests.memory}}
          - name: FILE_WATCHER_CPU_REQUEST
            value: {{ .Values.filewatcher.resources.requests.cpu}}
          - name: FILE_WATCHER_MEM_LIMIT
            value: {{ .Values.filewatcher.resources.limits.memory}}
          - name: FILE_WATCHER_CPU_LIMIT
            value: {{ .Values.filewatcher.resources.limits.cpu}}
          - name: MICROCLIMATE_VERSION
            value: "{{ .Chart.AppVersion }}"
          - name: BEACON_IMAGE
            value: {{ .Values.beacon.repository}}:{{ .Values.beacon.tag}}
          - name: BEACON_MEM_REQUEST
            value: {{ .Values.beacon.resources.requests.memory}}
          - name: BEACON_CPU_REQUEST
            value: {{ .Values.beacon.resources.requests.cpu}}
          - name: BEACON_MEM_LIMIT
            value: {{ .Values.beacon.resources.limits.memory}}
          - name: BEACON_CPU_LIMIT
            value: {{ .Values.beacon.resources.limits.cpu}}
          - name: MICROCLIMATE_RELEASE_NAME
            value: {{ .Release.Name }}
          - name: OIDC_CLOCK_TOLERANCE
            value: "{{ .Values.portal.clock.tolerance}}"
          - name: EXTRA_GIT_OPTION
            value: "{{ .Values.global.gitOption }}"
          - name: ICP_TARGET
            value: "{{ .Values.global.icpTarget }}"

        ports:
        - containerPort: 9191
        livenessProbe:
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 10
          httpGet:
            path: /health
            port: 9191
            scheme: HTTPS
        readinessProbe:
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 10
          httpGet:
            path: /health
            port: 9191
            scheme: HTTPS
        resources:
          requests:
            memory: {{ .Values.portal.resources.requests.memory }}
            cpu: {{ .Values.portal.resources.requests.cpu }}
          limits:
            memory: {{ .Values.portal.resources.limits.memory }}
            cpu: {{ .Values.portal.resources.limits.cpu }}
