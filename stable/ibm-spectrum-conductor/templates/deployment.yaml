apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "master-fullname" . }}
  labels:
    heritage: {{.Release.Service | quote }}
    release: {{.Release.Name | quote }}
    chart: "{{.Chart.Name}}"
    app: {{ template "master-fullname" . }}
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: {{ template "master-fullname" . }}
      heritage: {{.Release.Service | quote }}
      release: {{.Release.Name | quote }}
      chart: "{{.Chart.Name}}"
  template:
    metadata:
      labels:
        heritage: {{.Release.Service | quote }}
        release: {{.Release.Name | quote }}
        chart: "{{.Chart.Name}}"
        app: {{ template "master-fullname" . }}
      annotations:
        {{- if .Values.dli.enabled }}
        productName: "IBM Spectrum Conductor Deep Learning Impact"
        productVersion: "1.2"
        productID: "IBMSpectrumDLI-Eval"
        {{- else }}
        productName: "IBM Spectrum conductor"
        productVersion: "2.3"
        productID: "IBMSpectrumConductor-Eval"
        {{- end }}
    spec:
      affinity:
      {{- include "nodeaffinity" . | indent 6 }}
      hostname: {{ template "master-fullname" . }}
      serviceAccountName: cws-{{ .Release.Name }}
      imagePullSecrets:
        - name: {{ .Release.Name }}-registrykey
      initContainers:
      {{- if eq (include "global.icpVersion" .) "2.x" }}
      - name: helmget
        image: {{ template "helmImage" . }}
        resources:
          requests:
            cpu: 0.5
            memory: 512Mi
          limits:
            cpu: 0.5
            memory: 512Mi
        command:
        - /bin/cp
        {{- if eq (.Capabilities.KubeVersion.GitVersion | trunc 7) "v1.10.0" }}
        - -r
        - "/usr/src/app/public/cli"
        {{- else }}
        - "/helm"
        {{- end }}
        - "/helmdir/"
        volumeMounts:
        - name: helmdir
          mountPath: "/helmdir"
      {{- end }}
      - name: kubectlget
        image: {{ template "kubectlImage" . }}
        resources:
          requests:
            cpu: 0.5
            memory: 256Mi
          limits:
            cpu: 0.5
            memory: 256Mi
        command:
        - /bin/cp
        - "/kubectl"
        - "/kubedir"
        volumeMounts:
        - name: kubedir
          mountPath: "/kubedir"
      containers:
        - args:
          - /kubectl
          - proxy
          - -p
          - "8001"
          image: {{ template "kubectlImage" . }}
          resources:
            requests:
              cpu: 0.5
              memory: {{ template "memoryReq" . }}
            limits:
              cpu: 0.5
              memory: {{ template "memoryReq" . }}
          imagePullPolicy: IfNotPresent
          name: kubectlproxy
          readinessProbe:
            exec:
              command:
                - ls
                - /kubectl
            initialDelaySeconds: 30
            periodSeconds: 100
          livenessProbe:
            exec:
              command:
                - ls
                - /kubectl
            initialDelaySeconds: 300
            periodSeconds: 100
        {{- if eq .Values.cluster.proxyOption "IngressProxy" }}
        - image: {{ template "dnsmasqImage" . }}
          name: {{ template "master-fullname" . }}-dnsmasq
          command: ["/bin/sh","-c"]
          args: ["$(sh /var/tmp/cfc/startDnsmasq.sh)"]
          volumeMounts:
           - mountPath: /var/tmp/cfc
             name: license
          resources:
            requests:
              cpu: 0.5
              memory: {{ template "memoryReq" . }}
            limits:
              cpu: 0.5
              memory: {{ template "memoryReq" . }}
          readinessProbe:
            exec:
              command:
                - ls
                - /var/tmp/cfc/startDnsmasq.sh
            initialDelaySeconds: 30
            periodSeconds: 100
          livenessProbe:
            exec:
              command:
                - ls
                - /var/tmp/cfc/startDnsmasq.sh
            initialDelaySeconds: 300
            periodSeconds: 100
        - image: ibmcom/icp-management-ingress:2.2.0
          name: {{ template "master-fullname" . }}-proxy
          ports:
           - containerPort: {{ template "proxyHttpsPort" . }}
          resources:
            requests:
              cpu: 1
              memory: 512Mi
            limits:
              cpu: 1
              memory: 512Mi
          command: ["/bin/sh", "-c"]
          args: ["$(sh /nginx/startnginx.sh)"]
          volumeMounts:
           - mountPath: /nginx
             name: license
           - mountPath: /var/share
             name: sharedir
          readinessProbe:
            exec:
              command:
                - ls
                - /nginx/startnginx.sh
            initialDelaySeconds: 30
            periodSeconds: 100
          livenessProbe:
            exec:
              command:
                - ls
                - /nginx/startnginx.sh
            initialDelaySeconds: 300
            periodSeconds: 100
        {{- end }}
        - name: {{ template "master-fullname" . }}
          image: {{ template "cwsImage" . }}
          command: ["/bin/bash","-c"]
          args: ["$(bash /var/tmp/cfc/startMaster.sh)"]
          imagePullPolicy: {{.Values.master.imagePullPolicy}}
          readinessProbe:
            tcpSocket:
              {{- if eq .Values.cluster.proxyOption "IngressProxy" }}
              port: {{ template "guiPort" . }}
              {{- else }}
              port: 8443
              {{- end }}
            initialDelaySeconds: 120
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: 17869
            initialDelaySeconds: 300
            periodSeconds: 10
          securityContext:
            capabilities:
              add:
                - SETGID
                - SETUID
                - SYS_CHROOT
                - SYS_ADMIN
                - SYS_NICE
                - SYS_RESOURCE
                - SYS_TIME
                - NET_BROADCAST
                - NET_ADMIN
                - LEASE
          resources:
            requests:
              cpu: "{{.Values.master.cpu}}"
              memory: "{{.Values.master.memory}}"
            limits:
              cpu: "16000m"
              memory: "16000Mi"
          env:
              - name: HELM_HOST
                value: {{ template "helmHost" . }}
              - name: LDAP_SERVER_IP
                value: {{.Values.cluster.ldapServerIp}}
              - name: BASE_DN
                value: {{.Values.cluster.ldapBaseDn}}
              {{- if and (eq (include "securedHelm" .) "true") (eq .Values.helm.credentialType "UsernamePassword") }}
              - name: ADMIN_USERNAME
                valueFrom:
                  secretKeyRef:
                    name: {{ .Release.Name }}-admin-secret
                    key: username
              - name: ADMIN_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: {{ .Release.Name }}-admin-secret
                    key: password
              {{- end }}
          volumeMounts:
              {{- if .Values.dli.enabled }}
              {{- if eq (include "isPAIE" .) "no" }}
              - mountPath: /opt/DL
                name: dldir
              {{- end }}
              - mountPath: /mygpfs
                name: mygpfs
              {{- end }}
              - mountPath: /var/shareDir
                name: persistsharedir
              - mountPath: /var/tmp/cfc
                name: license
              - mountPath: /var/tmp/prerequisite
                name: prerequisite
              - mountPath: /var/run/docker.sock
                name: docker-sock
              {{- if eq .Values.cluster.proxyOption "IngressProxy" }}
              - mountPath: /var/share
                name: sharedir
              {{- end }}
              {{- if eq (include "global.icpVersion" .) "2.x" }}
              - name: helmdir
                mountPath: /tmp/helmdir
              {{- end }}
              - name: kubedir
                mountPath: /tmp/kubedir
              - name: dshm
                mountPath: /dev/shm
              - name: host-timezone
                mountPath: /etc/localtime
                readOnly: true
              {{- if and (eq (include "securedHelm" .) "true") (and (eq .Values.helm.credentialType "Secret") .Values.helm.credentialName) }}
              - name: helm-tls
                mountPath: /var/tmp/helm
              {{- end }}
      volumes:
        {{- if .Values.dli.enabled }}
        {{- if eq (include "isPAIE" .) "no" }}
        - name: dldir
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-dl
        {{- end }}
        - name: mygpfs
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-mygpfs
        {{- end }}
        - name: persistsharedir
          persistentVolumeClaim:
            claimName: "{{ .Release.Name }}-cws-share"
        - name: license
          configMap:
            name: "{{ .Release.Name }}-conductor-master-bootstrap"
        - name: prerequisite
          configMap:
            name: {{ .Release.Name }}-prerequisite
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock
        {{- if eq .Values.cluster.proxyOption "IngressProxy" }}
        - name: sharedir
          emptyDir: {}
        {{- end }}
        {{- if eq (include "global.icpVersion" .) "2.x" }}
        - name: helmdir
          emptyDir: {}
        {{- end }}
        - name: kubedir
          emptyDir: {}
        - name: dshm
          emptyDir:
            medium: Memory
        - name: host-timezone
          hostPath:
            path: /etc/localtime
        {{- if and (eq (include "securedHelm" .) "true") (and (eq .Values.helm.credentialType "Secret") .Values.helm.credentialName) }}
        - name: helm-tls
          secret:
            secretName: {{ .Values.helm.credentialName }}
            defaultMode: 0644
            items:
              - key: cert.pem
                path: cert.pem
              - key: ca.pem
                path: ca.pem
              - key: key.pem
                path: key.pem
        {{- end }}
      terminationGracePeriodSeconds: 30
