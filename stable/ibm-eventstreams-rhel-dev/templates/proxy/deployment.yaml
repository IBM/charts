###############################################################################
#
# Licensed Materials - Property of IBM
#
# 5737-H33
#
# (C) Copyright IBM Corp. 2018, 2019  All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
###############################################################################
# Defines the Kubernetes pods that make up the proxy for external access to Kafka
###############################################################################
{{ if eq .Values.license "accept" -}}
{{ $kafkaconfig := include "sch.config.init" (list . "kafka.listeners.sch.chart.config.values") -}}
{{ $namePrefix := .sch.chart.components.proxy.controller.name -}}
{{ $name := include "sch.names.fullCompName" (list . $namePrefix ) -}}
# Component is 'proxy' as this makes up part of implementing the external access proxy
{{ $compName := .sch.chart.components.proxy.compName -}}
{{ $labels := include "sch.metadata.labels.standard" (list . $compName (dict "serviceSelector" $namePrefix)) -}}
# Name of the kafka stateful set which we will use for constructing affinity rules
{{ $kafkaName := .sch.chart.components.kafka.statefulSet.name -}}
# number of Kafka brokers in the cluster - needed as a port will be created for each
{{ $rep := int .Values.kafka.brokers -}}
# Starting number for the ports that will be created
{{ $nodePort := int 30000 -}}
# Names of other elements to refer to
{{ $secret := .sch.chart.components.proxy.secret.name -}}
{{ $secretName := include "sch.names.fullCompName" (list . $secret) | quote -}}
{{ $configMap := .sch.chart.components.proxy.configMap.name -}}
{{ $configMapName := include "sch.names.fullCompName" (list . $configMap) | quote -}}
# Secret containing cert and key for pod to pod security
{{ $proxySecretNamePrefix := .sch.chart.components.proxy.secret.name -}}
{{ $proxySecretName := include "sch.names.fullCompName" (list . $proxySecretNamePrefix) | quote -}}
# IAM Secret name containing the API Key
{{ $iamSecret := .sch.chart.components.security.iamSecret.name -}}
{{ $iamSecretName := include "sch.names.fullCompName" (list . $iamSecret ) -}}
# Eventstreams IAM Service Name
{{ $iamServiceName := .sch.chart.components.security.serviceName -}}
# Service Account to grant Kubernetes access
{{ $serviceAccount := .sch.chart.components.proxy.serviceAccount.name -}}
{{ $serviceAccountName := include "sch.names.fullCompName" (list . $serviceAccount ) -}}
# Get the list of Kafka Listener Ports. We'll need to create node ports for each of these.
{{ $listenerPorts := .sch.config.kafka.listeners -}}
{{ $listeners := $listenerPorts | splitList "," }}
# import port definitions
{{- include "sch.config.init" (list . "ports.sch.chart.config.values") | trim -}}
{{ $ports := .sch.config.ports }}
# Default user for security context
{{ $defaultUser := .sch.securityContext.defaultUser -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $name | quote }}
  labels:
{{ $labels | indent 4 }}
spec:
  # Number of instances of the external access proxy to run Deploy 1 the proxy will then scale up to the number of brokers
  replicas: 1
  selector:
    matchLabels:
      release: {{ .Release.Name | quote }}
      serviceSelector: {{ $namePrefix | quote }}
  template:
    metadata:
      labels:
{{ $labels | indent 8 }}
      annotations:
{{ include "metering" (list . ) | indent 8 }}
    spec:
      volumes:
        - name: es-cert-volume
          secret:
            secretName: {{ $proxySecretName }}
            items:
            - key: podtls.cert
              path: ca-certificates.crt
      serviceAccountName: {{ $serviceAccountName | quote }}
      {{- if .Values.global.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.global.image.pullSecret }}
      {{- end }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: {{ $defaultUser }}
      affinity:
{{ include "customNodeaffinity"  (list .) | indent 8 }}
        # We don't want to co-locate proxies as this would cause
        # traffic to be shared by the network on the associated
        # node, meaning that we get little benefit from the extra
        # proxy. Instead we should spread proxies over the nodes.
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "release"
                      operator: In
                      values:
                        -  {{ .Release.Name | quote }}
                    - key: "serviceSelector"
                      operator: In
                      values:
                        -  {{ $namePrefix | quote }}
                topologyKey: "kubernetes.io/hostname"
        # Co-locating proxy and Kafka pods makes sense as
        # traffic that flows through the proxy will flow to
        # Kafka.
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
             - weight: 1
               podAffinityTerm:
                 labelSelector:
                    matchExpressions:
                      - key: "release"
                        operator: In
                        values:
                          -  {{ .Release.Name | quote }}
                      - key: "serviceSelector"
                        operator: In
                        values:
                          -  {{ $kafkaName }}
                 topologyKey: "kubernetes.io/hostname"
      containers:
        - name: "proxy"
          image: {{ include "eventstreams.image" (list . "eventstreams-kafka-proxy" .Values.global.image.imageTags.kafkaProxyTag) | quote }}
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          resources:
            limits:
{{ toYaml .Values.global.resources.proxy.limits | indent 14 }}
            requests:
{{ toYaml .Values.global.resources.proxy.requests | indent 14 }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: {{ $defaultUser }}
            capabilities:
              drop:
              - ALL
          env:
            {{- include "license.accept.env.ref" . | indent 10 }}
            - name: CONFIG_MAP_NAME
              value: {{ $configMapName }}
            - name: PROXY_DEPLOY_NAME
              value: {{ $name | quote }}
            - name: REST_ADMIN
              value: "enabled"
            - name: TLS_CERT
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: "tls.cert"
            - name: TLS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: "tls.key"
            - name: ES_EXTERNAL_IP_OR_HOST
              valueFrom:
                secretKeyRef:
                  name: {{ $secretName }}
                  key: "externalHostOrIP"
            - name: "ES_API_KEY"
              valueFrom:
                secretKeyRef:
                  name: "{{ $iamSecretName }}"
                  key: "{{ $iamServiceName }}-{{ $.Release.Name }}-api-key"
          ports:
            - name: bootstrap
              containerPort: {{ $nodePort }}
            {{- range $brokerIndex, $broker := until $rep }}
            {{- range $listenerIndex, $listenerType := $listeners -}}
            {{ $portType := $listenerType | split ":" -}}
            {{ if hasPrefix "INTERNAL" $portType._0 -}}
            {{ else }}
            - name: "brk{{ $brokerIndex }}-{{ $portType._0 | lower}}"
              {{- $portNum := mul $brokerIndex 50 | add $listenerIndex}}
              containerPort: {{ add $nodePort $portNum }}
          {{- end }}
          {{- end }}
          {{- end }}
          readinessProbe:
            httpGet:
              path: "/ready"
              port: {{ $ports.proxy.health }}
            initialDelaySeconds: 1
            periodSeconds: 5
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: "/live"
              port: {{ $ports.proxy.health }}
            initialDelaySeconds: 15
            periodSeconds: 15
            timeoutSeconds: 15
          volumeMounts:
          - name: es-cert-volume
            mountPath: /etc/ssl/certs
{{ end -}}
