###############################################################################
#
# Licensed Materials - Property of IBM
#
# 5737-H33
#
# (C) Copyright IBM Corp. 2018, 2019  All Rights Reserved.
#
# US Government Users Restricted Rights - Use, duplication or
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
#
###############################################################################
# Defines a config map that allows configuration of the proxy
###############################################################################
{{ if eq .Values.license "accept" -}}
{{ $kafkaconfig := include "sch.config.init" (list . "kafka.listeners.sch.chart.config.values") -}}
{{ $namePrefix := .sch.chart.components.proxy.configMap.name -}}
{{ $name := include "sch.names.fullCompName" (list . $namePrefix) -}}
# Component is 'proxy' as this makes up part of implementing the Kafka proxy
{{ $compName := .sch.chart.components.proxy.compName -}}
{{ $labels := include "sch.metadata.labels.standard" (list . $compName) -}}
# number of Kafka brokers in the cluster to enable external access to
{{ $rep := int .Values.kafka.brokers -}}
# Names of proxy resources
{{ $service := .sch.chart.components.proxy.service.name -}}
{{ $serviceName := include "sch.names.fullCompName" (list . $service) -}}
# Names of Kafka elements to refer to
{{ $kafkaHeadless := .sch.chart.components.kafka.headless.name -}}
{{ $kafkaHeadlessName := include "sch.names.fullCompName" (list . $kafkaHeadless) -}}
{{ $kafkaService := .sch.chart.components.kafka.brokerService.name -}}
{{ $kafkaServiceName := include "sch.names.fullCompName" (list . $kafkaService) -}}
{{ $restProxyService := .sch.chart.components.restproxy.internalservice.name -}}
{{ $restProxyServiceName := include "sch.names.fullCompName" (list . $restProxyService) -}}
# Get the list of Kafka Listener Ports. We'll need to create node ports for each of these.
{{ $listenerPorts := .sch.config.kafka.listeners -}}
{{ $kafkaInternalAdvertisedListeners := .sch.config.kafka.internalAdvertisedListeners -}}
{{ $listeners := $listenerPorts | splitList "," -}}
# Get the mapping of kafka proxy ports and read them into a dictionary
{{ $kafkaProxyMappings := .sch.config.kafka.kafkaProxyMappings -}}
{{ $kafkaProxyMappingsList := $kafkaProxyMappings | splitList "," -}}
{{ $kafkaProxyMappingsDict := dict -}}
{{ range $MapIndex, $portMapping := $kafkaProxyMappingsList -}}
{{ $ports := $portMapping | split ":" -}}
{{ $_ := set $kafkaProxyMappingsDict $ports._0 $ports._1 -}}
{{ end -}}
# import port definitions
{{- include "sch.config.init" (list . "ports.sch.chart.config.values") | trim -}}
{{ $portdefs := .sch.config.ports }}
# Define a tlsEnabled var from Values.
{{- include "sch.config.init" (list . "tls.sch.chart.config.values") -}}
{{ $tlsEnabled := .sch.config.tlsInternal.enabled | quote }}
# k8s configuration
{{ $clusterName := .Values.global.k8s.clusterName -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ $name | quote }}
  labels:
{{ $labels | indent 4 }}
data:
  adminService: "{{ $restProxyServiceName }}.{{ .Release.Namespace }}.svc.{{ $clusterName }}:{{ $portdefs.restproxy.internal }}"
  adminServiceProtocol: "https"
  bootstrapServers: "[]"
  # The string that sandwiches the broker ID between a '.'
  # e.g. [release]-[chart_name]-kafka-broker-svc-[broker_id].<namespace>:[port]
  brokerService: "-{{ $kafkaService }}-"
  headlessService: "-{{ $kafkaHeadless }}."
  serviceName: {{ $serviceName | quote }}
  connectionTimeoutMs: "3600000"
  externalAccessEnabled: "true"
  externalHostOrIP: "{{ .Values.proxy.externalEndpoint }}"
  # Set revision to current time (filling remaining nanoseconds) so config-map is re-read on upgrade
  revision: "{{ .Release.Time.Seconds }}999999999"
  internalAdvertisedListeners: "{{ $kafkaInternalAdvertisedListeners }}"
  {{- if eq .Values.global.security.tlsInternal "enabled" }}
  # must use the latest version of the listeners if running in secure mode
  interBrokerListener: "INTERNAL://127.0.0.1:11%03d"
  {{- else }}
  interBrokerListener: "INTERNAL://:9092"
  {{- end }}
  tlsHandshakeTimeoutMs: "10000"
  traceLevel: "0"
  tlsEnabled: "true"
  logFormat: "json"
  closeOnSwitch: "false"
  listenerTypes: |
    [
      {{- $kafkalisteners := dict "types" (list) -}}
      {{- range $ListenerIndex, $listenerType := $listeners -}}
      {{- $portType := $listenerType | split ":" -}}
      {{ if hasPrefix "INTERNAL" $portType._0 -}}
      {{ else if hasKey $kafkaProxyMappingsDict $portType._2 }}
      {{ range $MapIndex, $portMapping := $kafkaProxyMappingsList -}}
      {{ $ports := $portMapping | split ":" -}}
      {{ if eq $portType._2 $ports._0 }}
      {{- $noOp := printf "{\"ListenerType\": \"%s\", \"Port\": %s}" $portType._0 $ports._1 | append $kafkalisteners.types | set $kafkalisteners "types" -}}
      {{- end -}}
      {{- end -}}
      {{- end -}}
      {{- end -}}
      {{- join "," $kafkalisteners.types -}}
    ]
  routes: |
    [
      {
        "Port": 0,
        "NodePort": 0,
        "Service": "{{ $kafkaHeadlessName }}.{{ $.Release.Namespace }}.svc.{{ $clusterName }}:{{ $portdefs.kafka.externalProxySecure }}",
        "TLSIn": "enabled",
        "TLSOut": {{ $tlsEnabled }}
      }
      {{- range $brokerIndex, $broker := until $rep }}
      {{- range $ListenerIndex, $listenerType := $listeners -}}
      {{- $portType := $listenerType | split ":" -}}
      {{- if hasPrefix "INTERNAL" $portType._0 -}}
      {{ else if hasKey $kafkaProxyMappingsDict $portType._2 }}
      {{ range $MapIndex, $portMapping := $kafkaProxyMappingsList -}}
      {{ $ports := $portMapping | split ":" -}}
      {{ if eq $portType._2 $ports._0 }}
      ,{
        "Port": 0,
        "NodePort": 0,
        "Service": "{{ $kafkaServiceName }}-{{ $brokerIndex }}.{{ $.Release.Namespace }}.svc.{{ $clusterName }}:{{ $ports._1 }}",
        "TLSIn": "enabled",
        "TLSOut": {{ $tlsEnabled }}
      }
      {{- end -}}
      {{- end -}}
      {{- else }}
      ,{
        "Port": 0,
        "NodePort": 0,
        "Service": "{{ $kafkaServiceName }}-{{ $brokerIndex }}.{{ $.Release.Namespace }}.svc.{{ $clusterName }}:{{ $portType._2 }}",
        "TLSIn": "enabled",
        "TLSOut": {{ $tlsEnabled }}
      }
      {{- end -}}
      {{- end -}}
      {{- end -}}
    ]
{{ end -}}
