{{/*********************************************************** {COPYRIGHT-TOP} ****
* Licensed Materials - Property of IBM
*
* "Restricted Materials of IBM"
*
*  5737-H89, 5737-H64
*
* Â© Copyright IBM Corp. 2015, 2019  All Rights Reserved.
*
* US Government Users Restricted Rights - Use, duplication, or
* disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
********************************************************* {COPYRIGHT-END} ****/}}
{{- $compName := "datalayer-cron" -}}
{{- include "sch.config.init" (list . "cem.sch.chart.config.values") -}}
{{- $jobName := include "sch.names.fullCompName" (list . $compName) -}}
{{- $rootData := fromYaml (include "root.data" .) -}}
{{- $rootMetering := $rootData.metering -}}
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ $jobName }}
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 4 }}
    origin: helm-cem
spec:
  concurrencyPolicy: Forbid
  schedule: '15 1 * * *'
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 12 }}
            origin: helm-cem
          annotations:
{{- include "sch.metadata.annotations.metering" (list . $rootMetering) | indent 12 }}
        spec:
{{ include "cem.ingress.hostAlias" . | indent 10 }}
          hostNetwork: false
          hostPID: false
          hostIPC: false
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            fsGroup: 1001
            supplementalGroups:
            {{- range $group := .Values.global.persistence.supplementalGroups }}
              - {{ $group -}}
            {{ end }}
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              #If you specify multiple nodeSelectorTerms associated with nodeAffinity types,
              #then the pod can be scheduled onto a node if one of the nodeSelectorTerms is satisfied.
              #
              #If you specify multiple matchExpressions associated with nodeSelectorTerms,
              #then the pod can be scheduled onto a node only if all matchExpressions can be satisfied.
              #
              #valid operators: In, NotIn, Exists, DoesNotExist, Gt, Lt
                nodeSelectorTerms:
                - matchExpressions:
                  - key: beta.kubernetes.io/arch
                    operator: In
                    values:
                    {{- range $arch := .Values.arch }}
                      - {{ $arch -}}
                    {{ end }}
{{ if .Values.global.image.pullSecret }}
          imagePullSecrets:
          - name: {{ .Values.global.image.pullSecret }}
{{ end }}
          containers:
          - name: expirycheck
            image: "{{ include "cem.getImageRepo" . }}/{{ .Values.commonimages.datalayer.image.name }}:{{ .Values.commonimages.datalayer.image.tag }}"
            command:
              - /bin/sh
              - -c
              - 'node expirycheck'
            env:
            - name: NODE_CONFIG_ENV
              value: icp
            - name: CASSANDRA_CONTACTPOINTS
              value: '[{{- template "cem.datalayer.contactPoints" . }}]'
{{- if .Values.global.cassandra.superuserRole }}
            - name: CASSANDRA_USERID
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-cassandra-auth-secret
                  key: username
            - name: CASSANDRA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-cassandra-auth-secret
                  key: password
{{- end }}
            - name: CASSANDRA_NODE_REPLICAS
              value: '{{ .Values.global.cassandraNodeReplicas }}'
            - name: KAFKA_SECURED
              value: '{{- if eq .Values.kafka.ssl.enabled true }}true{{ else }}false{{ end }}'
            - name: KAFA_BROKERS
              value: '{{ include "cem.services.kafkabrokers.json" . }}'
            - name: KAFKA_USER
              value: '{{ .Values.kafka.client.username }}'
            - name: KAFKA_PASSWORD
              value: '{{ .Values.kafka.client.password }}'
            - name: KAFKA_SSL_PASSWORD
              value: '{{ .Values.kafka.ssl.password }}'
            - name: KAFKA_ADMIN_URL
              value: '{{ include "cem.services.kafkaadmin" . }}'
            - name: KAFKA_CLUSTER_SIZE
              value: '{{ .Values.global.kafka.clusterSize }}'
{{- if (or (eq .Values.productName "IBM Cloud App Management for Multicloud Manager") (or (eq .Values.productName "IBM Cloud App Management") (eq .Values.productName "IBM Cloud App Management Advanced"))) }}
            - name: EVENTS_TO_KAFKA
              value: 'true'
{{- end }}
            - name: CEM_ICP_EDITION
              value: '{{ if eq .Values.productName "IBM Cloud Event Management Community Edition" }}community{{ else }}standard{{ end }}'
            resources: {}
            terminationMessagePath: "/dev/termination-log"
            imagePullPolicy: IfNotPresent
            securityContext:
              privileged: false
              readOnlyRootFilesystem: false
              allowPrivilegeEscalation: false
              runAsNonRoot: true
              runAsUser: 1001
              capabilities:
                drop:
                - ALL
            resources:
{{ include "cem.resources.comp.size.data" (list . "datalayer" "resources") | indent 14 }}
          restartPolicy: Never
