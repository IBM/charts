{{/*********************************************************** {COPYRIGHT-TOP} ****
* Licensed Materials - Property of IBM
*
* "Restricted Materials of IBM"
*
*  5737-H89, 5737-H64
*
* Â© Copyright IBM Corp. 2015, 2019  All Rights Reserved.
*
* US Government Users Restricted Rights - Use, duplication, or
* disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
********************************************************* {COPYRIGHT-END} ****/}}
{{- $compName := "rba-as" -}}
{{- include "sch.config.init" (list . "cem.sch.chart.config.values") -}}
{{- $appFullName := include "sch.names.fullName" (list .) -}}
{{- $deploymentName := include "sch.names.fullCompName" (list . $compName) -}}
{{- $rbaTlsTemplateName := include "sch.names.volumeClaimTemplateName" (list . "config" $deploymentName) -}}
{{- $rootData := fromYaml (include "root.data" .) -}}
{{- $rootMetering := $rootData.metering -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $deploymentName }}
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 4 }}
    origin: helm-cem
spec:
  replicas: {{ .Values.rba.as.clusterSize }}
  selector:
    matchLabels:
      release: {{ .Release.Name }}
      app: {{ include "sch.names.appName" (list .) | quote }}
      component: {{ $compName | quote }}
  template:
    metadata:
      labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 8 }}
        origin: helm-cem
      annotations:
{{- include "sch.metadata.annotations.metering" (list . $rootMetering) | indent 8 }}
    spec:
{{ include "cem.ingress.hostAlias" . | indent 6 }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          #If you specify multiple nodeSelectorTerms associated with nodeAffinity types,
          #then the pod can be scheduled onto a node if one of the nodeSelectorTerms is satisfied.
          #
          #If you specify multiple matchExpressions associated with nodeSelectorTerms,
          #then the pod can be scheduled onto a node only if all matchExpressions can be satisfied.
          #
          #valid operators: In, NotIn, Exists, DoesNotExist, Gt, Lt
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                {{- range $arch := .Values.arch }}
                  - {{ $arch -}}
                {{ end }}
{{ include "cem.affinity.resilience" (dict "root" . "comp" $compName) | indent 8 }}
      initContainers:
      - name: waitforcouchdb
        image: "{{ include "cem.getImageRepo" . }}/{{ .Values.commonimages.rba.as.image.name }}:{{ .Values.commonimages.rba.as.image.tag }}"
        command: ["sh", "-c", "i=1;until getent hosts {{ template "cem.releasename" . }}-couchdb.{{ .Release.Namespace }}.svc; do echo waiting for couchdb $i;i=$((i+1)); sleep 2; done;"]
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        resources:
{{ include "cem.resources.comp.size.data" (list . "as" "resources") | indent 10 }}
      - name: migratedata
        image: "{{ include "cem.getImageRepo" . }}/{{ .Values.commonimages.rba.as.image.name }}:{{ .Values.commonimages.rba.as.image.tag }}"
        # ignore if subscription migrations were failing, but crash on coding or configuration issue
        # existing subscriptions could have issues while migrating, if data was not deleted, but secrets were regenerated during a new installation
        command: ["sh", "-c", "npm run migration; RC=$?; if [ ${RC} -eq 2 ]; then exit 0; else exit ${RC}; fi"]
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        resources:
{{ include "cem.resources.comp.size.data" (list . "as" "resources") | indent 10 }}
        env:
{{ include "rbaas.env" . | indent 8 }}
{{ if .Values.global.image.pullSecret }}
      imagePullSecrets:
      - name: {{ .Values.global.image.pullSecret }}
{{ end }}
      containers:
      - name: rba-as
        image: "{{ include "cem.getImageRepo" . }}/{{ .Values.commonimages.rba.as.image.name }}:{{ .Values.commonimages.rba.as.image.tag }}"
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        args:
        - npm
        - start
        ports:
        - containerPort: 3080
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /bmhealth
            port: 3080
            scheme: {{ include "cem.service.protocol" (list . "cem.services.rbaas") | upper | quote }}
          initialDelaySeconds: 120
          periodSeconds: 30
          successThreshold: 1
        readinessProbe:
          httpGet:
            path: /bmhealth
            port: 3080
            scheme: {{ include "cem.service.protocol" (list . "cem.services.rbaas") | upper | quote }}
          initialDelaySeconds: 20
          periodSeconds: 30
        resources:
{{ include "cem.resources.comp.size.data" (list . "as" "resources") | indent 10 }}
        env:
{{ include "rbaas.env" . | indent 8 }}
{{- if .Values.global.internalTLS.enabled }}
        volumeMounts:
        - name: servercrt
          mountPath: /home/node/keys
{{- end }}
      restartPolicy: Always
{{- if .Values.global.internalTLS.enabled }}
      volumes:
      - name: servercrt
        secret:
          defaultMode: 0444
          items:
          - key: tls.crt
            path: server.crt
          - key: tls.key
            path: server.key
          secretName: {{ $appFullName }}-certificate
{{- end }}
{{ if eq .Values.rba.as.updateStrategy "RollingUpdate" }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
{{ else }}
  strategy:
    type: Recreate
    rollingUpdate: null
{{ end }}
