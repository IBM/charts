{{/*********************************************************** {COPYRIGHT-TOP} ****
* Licensed Materials - Property of IBM
*
* "Restricted Materials of IBM"
*
*  5737-H89, 5737-H64
*
* Â© Copyright IBM Corp. 2015, 2018  All Rights Reserved.
*
* US Government Users Restricted Rights - Use, duplication, or
* disclosure restricted by GSA ADP Schedule Contract with IBM Corp.
********************************************************* {COPYRIGHT-END} ****/}}
{{- $compName := "datalayer" -}}
{{- include "sch.config.init" (list . "cem.sch.chart.config.values") -}}
{{- $statefulSetName := include "sch.names.statefulSetName" (list . $compName) -}}
{{- $serviceName := include "sch.names.fullCompName" (list . $compName) -}}
{{- $dlJobsTemplateName := include "sch.names.volumeClaimTemplateName" (list . "jobs" $statefulSetName) -}}
{{- $dlKeystoreTemplateName := include "sch.names.volumeClaimTemplateName" (list . "keystore" $statefulSetName) -}}
{{- $rootData := fromYaml (include "root.data" .) -}}
{{- $rootMetering := $rootData.metering -}}
{{- if semverCompare ">=1.11.1" .Capabilities.KubeVersion.GitVersion }}
apiVersion: apps/v1
{{- else if .Capabilities.APIVersions.Has "apps/v1beta2" }}
apiVersion: apps/v1beta2
{{- else -}}
apiVersion: apps/v1beta1
{{- end }}
kind: StatefulSet
metadata:
  name: {{ $statefulSetName }}
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 4 }}
    origin: helm-cem
spec:
  serviceName: {{ $serviceName }}
  replicas: {{ .Values.datalayer.clusterSize }}
  selector:
    matchLabels:
      release: {{ .Release.Name }}
      app: {{ include "sch.names.appName" (list .) | quote }}
      component: {{ $compName | quote }}
      heritage: {{ .Release.Service }}
{{- if semverCompare ">=1.7.0" .Capabilities.KubeVersion.GitVersion }}
  updateStrategy:
    type: RollingUpdate
{{- end }}
  template:
    metadata:
      labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 8 }}
        origin: helm-cem
      annotations:
{{- include "sch.metadata.annotations.metering" (list . $rootMetering) | indent 8 }}
    spec:
{{ include "ingress-host-alias" . | indent 6 }}
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
        supplementalGroups:
        {{- range $group := .Values.global.persistence.supplementalGroups }}
          - {{ $group -}}
        {{ end }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          #If you specify multiple nodeSelectorTerms associated with nodeAffinity types,
          #then the pod can be scheduled onto a node if one of the nodeSelectorTerms is satisfied.
          #
          #If you specify multiple matchExpressions associated with nodeSelectorTerms,
          #then the pod can be scheduled onto a node only if all matchExpressions can be satisfied.
          #
          #valid operators: In, NotIn, Exists, DoesNotExist, Gt, Lt
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                {{- range $arch := .Values.arch }}
                  - {{ $arch -}}
                {{ end }}
      containers:
      - name: datalayer
        image: "{{ include "ibm-cem.getImageRepo" . }}/hdm-datalayer:{{ .Values.commonimages.datalayer.image.tag }}"
        ports:
        - containerPort: 10010
          protocol: TCP
        # Early polls of /servicemonitor can take a while, use a higher
        # initialDelaySeconds for liveness.
        livenessProbe:
          tcpSocket:
            port: 10010
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 20
        readinessProbe:
          tcpSocket:
            port: 10010
          initialDelaySeconds: 20
          timeoutSeconds: 20
        env:
        - name: LICENSE
          value: {{ .Values.license | default "not accepted" }}
        - name: ENV_ICP
          value: "1"
        - name: BASEURL
          value: '{{ include "cem.services.datalayer" . }}'
        - name: NODE_CONFIG
          value: '{"cassandra": {"contactPoints": [{{- template "datalayer.contactPoints" . }}],"localDataCenter":"datacenter1","keyspace": "datalayer","authProvider": { "userid": "cassandra", "password": "cassandra" }, "watchdogPeriodSeconds": 60},"jobstore": {"directory": "/home/dataapi/jobstore","limit": 5000},"kafka":{"enabled": true,"secured":{{- if eq .Values.kafka.ssl.enabled true }}true{{ else }}false{{ end }},"kafka_brokers_sasl":{{ include "cem.services.kafkabrokers.json" . }},"user": "{{ .Values.kafka.client.username }}","password": "{{ .Values.kafka.client.password }}","sslcalocation": "/etc/keystore/ca-cert","sslcertlocation": "/etc/keystore/client.pem","sslkeylocation": "/etc/keystore/client.key","sslkeypassword": "{{ .Values.kafka.ssl.password }}","kafka_admin_url":"{{ include "cem.services.kafkaadmin" . }}","topics":[{"name":"cem-notifications","partitions":6,"replication":{{ .Values.kafka.clusterSize }},"config":"retention.ms=3600000"},{"name":"incidents","partitions":6,"replication":{{ .Values.kafka.clusterSize }},"config":"retention.ms=3600000"},{"name":"incidentResourceDashboard","partitions":6,"replication":{{ .Values.kafka.clusterSize }},"config":"retention.ms=3600000"},{"name":"incidentStateDashboard","partitions":6,"replication":{{ .Values.kafka.clusterSize }},"config":"retention.ms=3600000"},{"name":"incidentTrendDashboard","partitions":6,"replication":{{ .Values.kafka.clusterSize }},"config":"retention.ms=3600000"},{"name":"timeline","partitions":6,"replication":{{ .Values.kafka.clusterSize }},"config":"retention.ms=3600000"}]}, "logging": {"useStdout": true}, "maintenance": {"kafkaConcurrencyLimit":  10, "ignoreKafkaSubscriptions": "(AUTOTEST-).*", "kafkacqueuesizekb": 10000}, "consumerName": "{{ $serviceName }}", {{ if (or (eq .Values.productName "IBM Cloud App Management") (eq .Values.productName "IBM Cloud App Management Advanced")) }}"eventstokafka": true, {{ end }}"edition": {{ if eq .Values.productName "IBM Cloud Event Management Community Edition" }}"community"{{ else }}"standard"{{ end }}}'
        - name: LD_LIBRARY_PATH
          value: '/app/node_modules/node-rdkafka/build/Release'
        - name: SASL_PATH
          value: '/app/node_modules/node-rdkafka/build/Release'
        resources:
{{ include "ibmcemprod.comp.size.data" (list . "datalayer" "resources") | indent 10 }}
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
        volumeMounts:
        - name: {{ $dlJobsTemplateName }}
          mountPath: "/home/dataapi/jobstore"
{{- if eq .Values.kafka.ssl.enabled true }}
        - name: {{ $dlKeystoreTemplateName }}
          mountPath: /etc/keystore
{{ end }}
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
      initContainers:
{{- if eq .Values.global.privileged true }}
      - name: set-volume-permissions
        image: "{{ include "ibm-cem.getImageRepo" . }}/hdm-datalayer:{{ .Values.commonimages.datalayer.image.tag }}"
        command: ["sh", "-c", "chown -R dataapi:dataapi /home/dataapi/jobstore"]
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        volumeMounts:
        - name: {{ $dlJobsTemplateName }}
          mountPath: "/home/dataapi/jobstore"
{{- end }}
      - name: waitforcassandra
        image: "{{ include "ibm-cem.getImageRepo" . }}/hdm-datalayer:{{ .Values.commonimages.datalayer.image.tag }}"
        command: ["sh", "-c", "i=1;until [ `getent hosts {{ template "releasename" . }}-cassandra.{{ .Release.Namespace }}.svc | wc -l` -gt 0 ]; do echo waiting for cassandra $i;i=$((i+1)); sleep 10; done;"]
      - name: setupdb
        image: "{{ include "ibm-cem.getImageRepo" . }}/hdm-datalayer:{{ .Values.commonimages.datalayer.image.tag }}"
        # Only run setupdb on the first pod
        command:
          - /bin/sh
          - -c
          - '[ "${HOSTNAME##*-}" -ne "0" ] || npm run setupdb'
        env:
        - name: LICENSE
          value: {{ .Values.license | default "not accepted" }}
        - name: NODE_CONFIG
          value: '{"cassandra": {"contactPoints": [{{- template "datalayer.contactPoints" . }}],"localDataCenter":"datacenter1","keyspace": "datalayer","authProvider": { "userid": "cassandra", "password": "cassandra" },"socketOptions":{"readTimeout": {{ .Values.datalayer.socketReadTimeout }}}, "cassandraNodeReplicas": {{ .Values.global.cassandraNodeReplicas }}},"jobstore": {"directory": "/home/dataapi/jobstore","limit": 5000},"kafka":{"enabled":{{- if eq .Values.kafka.ssl.enabled true }}true{{ else }}false{{ end }},"secured":{{- if eq .Values.kafka.ssl.enabled true }}true{{ else }}false{{ end }},"kafka_brokers_sasl":{{ include "cem.services.kafkabrokers.json" . }},"user": "{{ .Values.kafka.client.username }}","password": "{{ .Values.kafka.client.password }}","sslcalocation": "/etc/keystore/ca-cert","sslcertlocation": "/etc/keystore/client.pem","sslkeylocation": "/etc/keystore/client.key","sslkeypassword": "{{ .Values.kafka.ssl.password }}","kafka_admin_url":"{{ include "cem.services.kafkaadmin" . }}"}, "logging": {"useStdout": true}}'
        resources: {}
        terminationMessagePath: "/dev/termination-log"
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
      - name: waitforkafka
        image: "{{ include "ibm-cem.getImageRepo" . }}/hdm-datalayer:{{ .Values.commonimages.datalayer.image.tag }}"
        command: ["sh", "-c", "i=1;until [ `getent hosts {{ template "releasename" . }}-kafka.{{ .Release.Namespace }}.svc | wc -l` -gt 0 ]; do echo waiting for kafka $i;i=$((i+1)); sleep 10; done;"]
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      volumes:
{{- if eq .Values.kafka.ssl.enabled true }}
      - name: {{ $dlKeystoreTemplateName }}
        secret:
          secretName: cem-trust
{{ end }}
  {{ if not .Values.global.persistence.enabled }}
      - name: {{ $dlJobsTemplateName }}
        emptyDir: {}
  {{ else }}
  volumeClaimTemplates:
  - metadata:
      name: {{ $dlJobsTemplateName }}
      labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 8 }}
    spec:
      {{ if eq .Values.global.persistence.storageClassOption.datalayerjobs "default" }}
      storageClassName: {{ .Values.global.persistence.storageClassName }}
      {{ else }}
      storageClassName: {{ .Values.global.persistence.storageClassOption.datalayerjobs }}
      {{ end }}
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: {{ .Values.global.persistence.storageSize.datalayerjobs }}
  {{ end }}
