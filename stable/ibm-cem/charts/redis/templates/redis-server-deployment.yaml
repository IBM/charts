{{- $compName := "server" -}}
{{- include "sch.config.init" (list . "redis.sch.chart.config.values") -}}
{{- $deploymentName := include "sch.names.fullCompName" (list . $compName) -}}
{{- $rootData := fromYaml (include "root.data" .) -}}
{{- $rootMetering := $rootData.metering -}}
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  # Pay attention to the redis-role label at runtime. The self-determination logic in the image sets this value accordingly.
  name: "{{ $deploymentName }}"
  labels:
    name: "redis-server"
    redis-node: "true"
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 4 }}
spec:
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 100%
    type: RollingUpdate
  replicas: {{ .Values.replicas.servers }}
  selector:
    matchLabels:
      app: {{ include "sch.names.appName" (list .) | quote }}
      release: {{ .Release.Name | quote }}
      heritage: {{ .Release.Service | quote }}
      component: {{ $compName | quote }}
  template:
    metadata:
      annotations:
{{- include "sch.metadata.annotations.metering" (list . $rootMetering) | indent 8 }}
      labels:
        name: "redis-server"
        redis-node: "true"
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 8 }}
    spec:
      securityContext:
        runAsUser: 100
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          #If you specify multiple nodeSelectorTerms associated with nodeAffinity types,
          #then the pod can be scheduled onto a node if one of the nodeSelectorTerms is satisfied.
          #
          #If you specify multiple matchExpressions associated with nodeSelectorTerms,
          #then the pod can be scheduled onto a node only if all matchExpressions can be satisfied.
          #
          #valid operators: In, NotIn, Exists, DoesNotExist, Gt, Lt
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                {{- if .Values.arch }}
                  - {{ .Values.arch }}
                {{- else }}
                  - {{ template "arch" . }}
                {{- end }}
      serviceAccountName: {{ template "redis-ha.serviceAccountName" . }}
      containers:
      - name: redis
        image: "{{ .Values.global.image.repository }}/hdm-redis-ha:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote  }}
        resources:
{{ include "redis.comp.size.data" (list . "server" "resources") | indent 10 }}
        env:
          - name: REDIS_SENTINEL_SERVICE_HOST
            value: "redis-sentinel"
          - name: REDIS_CHART_PREFIX
            value: {{ template "fullname" . }}-
        ports:
          - containerPort: 6379
        volumeMounts:
          - mountPath: /redis-master-data
            name: data
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h $(hostname) ping"
          initialDelaySeconds: 15
          timeoutSeconds: 45
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "redis-cli -h $(hostname) ping"
          initialDelaySeconds: 20
          periodSeconds: 30
      volumes:
      - name: data
