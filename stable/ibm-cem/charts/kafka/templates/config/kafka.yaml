{{/*********************************************************** {COPYRIGHT-TOP} ****
* Licensed Materials - Property of IBM
*
* (C) Copyright IBM Corporation 2019.  All rights reserved.
*
* The source code for this program is not published or otherwise
* divested of its trade secrets, irrespective of what has been
* deposited with the U.S. Copyright Office.
********************************************************* {COPYRIGHT-END} ****/}}
{{- include "sch.config.init" (list . "kafka.sch.chart.config.values") -}}
{{- $configMapName := include "sch.names.fullName" (list .) -}}
{{- $root := . -}}
kind: ConfigMap
metadata:
  name: {{ $configMapName | quote }}
  labels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 4 }}
apiVersion: v1
data:
{{- if kindIs "slice" .Values.advertisedListeners }}
  get-service-nodeport.py: |-
    import json
    import requests
    import os
    from time import sleep
    import urllib3
    urllib3.disable_warnings()
    podname = os.environ['PODNAME']
    service = podname + "-ext"
    apiServer='https://' + os.environ['KUBERNETES_SERVICE_HOST'] + ':' + os.environ['KUBERNETES_SERVICE_PORT']
    token= open("/var/run/secrets/kubernetes.io/serviceaccount/token","r").read()
    namespace= open("/var/run/secrets/kubernetes.io/serviceaccount/namespace","r").read()
    url= apiServer + '/api/v1/namespaces/' + namespace + '/services/' + service
    head = {'Authorization':'Bearer ' + token,'Accept':'application/json'}
    resp = requests.get(url, headers=head, verify=False).json()
    # check for lack of permissions
    if 'reason' in resp and resp['reason']=='Forbidden':
      print("The default serviceaccount does not have the required permissions to query the services API")
      exit(9)

    if 'spec' in resp and 'ports' in resp['spec']:
      f = open("/tmp/externalPorts.env", "w")
      for port in resp['spec']['ports']:
        if 'external-kafka' == port['name']:
          f.write("EXTERNAL_KAFKA_PORT=" + str(port['nodePort']) + "\n" )
        if 'external-kafka-secure' == port['name']:
          f.write("EXTERNAL_KAFKA_SECURE_PORT=" + str(port['nodePort']) + "\n")

{{- end }}
  init.sh: |-
    #!/bin/bash
    set -x
    # if there is an env file with nodeport, source it.
    if [ -e /tmp/externalPorts.env ]; then
      source /tmp/externalPorts.env
      echo "NodePort for service 'external-kafka' is : $EXTERNAL_KAFKA_PORT"
      echo "NodePort for service 'external-kafka-secure' is : $EXTERNAL_KAFKA_SECURE_PORT"
    fi

    KAFKA_BROKER_ID=${HOSTNAME##*-}
    cp -f /etc/kafka/server.properties /var/lib/kafka/data/server.properties
    sed -i "s/#init#broker.id=#init#/broker.id=$KAFKA_BROKER_ID/" /var/lib/kafka/data/server.properties

    # configure the advertised.listeners
    listenerHostnames=({{ template "kafka.advertisedListenersAsBashArray" . }})
    # add some new lines to the broker config
    echo -e "\n\n"  >> /var/lib/kafka/data/server.properties

    # lookup hostname in array based on KAFKA_BROKER_ID
    if [ ! -z ${listenerHostnames[$KAFKA_BROKER_ID]} ]; then
      EXTERNAL_KAFKA_HOSTNAME=${listenerHostnames[$KAFKA_BROKER_ID]}
    # fail back to first defined listener hostname
    elif [ ! -z ${listenerHostnames[0]} ]; then
      EXTERNAL_KAFKA_HOSTNAME=${listenerHostnames[0]}
    fi

    # generate advertised listeners based on tls/allowInsecure/advertisedListeners settings
    CLUSTERDOMAIN=$(cat /etc/resolv.conf | grep -v '^#' | grep search | awk '{print $4}')
    echo "advertised.listeners={{ template "kafka.advertisedListeners" . }}" >> /var/lib/kafka/data/server.properties

    # configure protocol map
    echo "listener.security.protocol.map=PLAINTEXT:PLAINTEXT,PLAINTEXT_EXTERNAL:PLAINTEXT,SASL_SSL_EXTERNAL:SASL_SSL,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL" >> /var/lib/kafka/data/server.properties

  server.properties: |-
    # Licensed to the Apache Software Foundation (ASF) under one or more
    # contributor license agreements.  See the NOTICE file distributed with
    # this work for additional information regarding copyright ownership.
    # The ASF licenses this file to You under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with
    # the License.  You may obtain a copy of the License at
    #
    #    http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    # see kafka.server.KafkaConfig for additional details and defaults
    ############################# Server Basics #############################
    # The id of the broker. This must be set to a unique integer for each broker.
    #init#broker.id=#init#
    #init#broker.rack=#init#
    # Switch to enable topic deletion or not, default value is false
    delete.topic.enable=true
    ############################# Socket Server Settings #############################
    # The address the socket server listens on. It will get the value returned from
    # java.net.InetAddress.getCanonicalHostName() if not configured.
    #   FORMAT:
    #     listeners = listener_name://host_name:port
    #   EXAMPLE:
    #     listeners = PLAINTEXT://your.host.name:9092
    #listeners=PLAINTEXT://:9092
    # Hostname and port the broker will advertise to producers and consumers. If not set,
    # it uses the value for "listeners" if configured.  Otherwise, it will use the value
    # returned from java.net.InetAddress.getCanonicalHostName().
    #advertised.listeners=PLAINTEXT://your.host.name:9092
    # Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
    #listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL
    # The number of threads that the server uses for receiving requests from the network and sending responses to the network
    num.network.threads=3
    # The number of threads that the server uses for processing requests, which may include disk I/O
    num.io.threads=8
    # The send buffer (SO_SNDBUF) used by the socket server
    socket.send.buffer.bytes=102400
    # The receive buffer (SO_RCVBUF) used by the socket server
    socket.receive.buffer.bytes=102400
    # The maximum size of a request that the socket server will accept (protection against OOM)
    socket.request.max.bytes=104857600
    ############################# Log Basics #############################
    # A comma seperated list of directories under which to store log files
    log.dirs=/tmp/kafka-logs
    # The default number of log partitions per topic. More partitions allow greater
    # parallelism for consumption, but this will also result in more files across
    # the brokers.
    num.partitions={{ .Values.defaultTopicPartitions }}
    # The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
    # This value is recommended to be increased for installations with data dirs located in RAID array.
    num.recovery.threads.per.data.dir=1
    ############################# Internal Topic Settings  #############################
    # The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
    # For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
    offsets.topic.replication.factor={{ template "kafka.topicReplicationFactor" . }}
    transaction.state.log.replication.factor={{ template "kafka.topicReplicationFactor" . }}
    transaction.state.log.min.isr={{ template "kafka.minInSyncReplicas"  . }}
    ############################# Log Flush Policy #############################
    # Messages are immediately written to the filesystem but by default we only fsync() to sync
    # the OS cache lazily. The following configurations control the flush of data to disk.
    # There are a few important trade-offs here:
    #    1. Durability: Unflushed data may be lost if you are not using replication.
    #    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
    #    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to exceessive seeks.
    # The settings below allow one to configure the flush policy to flush data after a period of time or
    # every N messages (or both). This can be done globally and overridden on a per-topic basis.
    # The number of messages to accept before forcing a flush of data to disk
    #log.flush.interval.messages=10000
    # The maximum amount of time a message can sit in a log before we force a flush
    #log.flush.interval.ms=1000
    ############################# Log Retention Policy #############################
    # The following configurations control the disposal of log segments. The policy can
    # be set to delete segments after a period of time, or after a given size has accumulated.
    # A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
    # from the end of the log.
    # The minimum age of a log file to be eligible for deletion due to age
    log.retention.hours=4
    log.retention.ms=14400000
    # The period of time after which Kafka will force the log to roll, even if the
    # segment file isn't full, to ensure that retention can delete or compact old data.
    log.roll.hours=4
    log.roll.ms=14400000
    # A size-based retention policy for logs. Segments are pruned from the log as long as the remaining
    # segments don't drop below log.retention.bytes. Functions independently of log.retention.hours.
    #log.retention.bytes=1073741824
    # The maximum size of a log segment file. When this size is reached a new log segment will be created.
    log.segment.bytes=536870912
    # The interval at which log segments are checked to see if they can be deleted according
    # to the retention policies
    log.retention.check.interval.ms=60000
    # By default the log cleaner is disabled and the log retention policy will default to just delete segments after their retention expires.
    # If log.cleaner.enable=true is set the cleaner will be enabled and individual logs can then be marked for log compaction.
    log.cleaner.enable=true
    # Amount of time to retain delete tombstone markers for log compacted topics - 12 hrs
    log.cleaner.delete.retention.ms=43200000
    ############################# Zookeeper #############################
    # Zookeeper connection string is dynamically set in the overrides of start-kafka.sh
    #zookeeper.connect=localhost:2181
    # Timeout in ms for connecting to zookeeper
    zookeeper.connection.timeout.ms=1000000
    #######  CUSTOM CONFIGURATION   ##########
    auto.leader.rebalance.enabled=true
    controlled.shutdown.enable=true
    replica.fetch.max.bytes=2097152
    message.max.bytes=2097152
    min.insync.replicas={{ template "kafka.minInSyncReplicas"  . }}
    #num.replica.fetchers=REPLACE_NUM_REPLICA_FETCHERS
    default.replication.factor={{ template "kafka.topicReplicationFactor" . }}
    ############################# Group Coordinator Settings #############################
    # The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
    # The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
    # The default value for this is 3 seconds.
    # We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
    # However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
    group.initial.rebalance.delay.ms=3000
{{ if .Values.global.kafka.clientEncryption }}
    inter.broker.listener.name=SASL_SSL
    listeners={{ if .Values.global.kafka.allowInsecure }}PLAINTEXT://0.0.0.0:9092,{{ if kindIs "slice" .Values.advertisedListeners }}PLAINTEXT_EXTERNAL://0.0.0.0:19092,{{ end }}{{ end }}SASL_SSL://0.0.0.0:9093,{{ if kindIs "slice" .Values.advertisedListeners }}SASL_SSL_EXTERNAL://0.0.0.0:19093{{ end }}
{{ else }}
    inter.broker.listener.name=PLAINTEXT
    listeners=PLAINTEXT://0.0.0.0:9092{{ if kindIs "slice" .Values.advertisedListeners }},PLAINTEXT_EXTERNAL://0.0.0.0:19092{{ end }}
{{ end }}
    ####################### OTHER #############################
    authorizer.class.name=kafka.security.auth.SimpleAclAuthorizer
    allow.everyone.if.no.acl.found=true
    auto.create.topics.enable=false
  log4j.properties: |-
    # Licensed to the Apache Software Foundation (ASF) under one or more
    # contributor license agreements.  See the NOTICE file distributed with
    # this work for additional information regarding copyright ownership.
    # The ASF licenses this file to You under the Apache License, Version 2.0
    # (the "License"); you may not use this file except in compliance with
    # the License.  You may obtain a copy of the License at
    #
    #    http://www.apache.org/licenses/LICENSE-2.0
    #
    # Unless required by applicable law or agreed to in writing, software
    # distributed under the License is distributed on an "AS IS" BASIS,
    # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    # See the License for the specific language governing permissions and
    # limitations under the License.
    # Unspecified loggers and loggers with additivity=true output to server.log and stdout
    # Note that INFO only applies to unspecified loggers, the log level of the child logger is used otherwise
    log4j.rootLogger=INFO, stdout
    log4j.appender.stdout=org.apache.log4j.ConsoleAppender
    log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
    log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n
    log4j.appender.kafkaAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.kafkaAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.kafkaAppender.File=${kafka.logs.dir}/server.log
    log4j.appender.kafkaAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.kafkaAppender.layout.ConversionPattern=[%d] %p %m (%c)%n
    log4j.appender.stateChangeAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.stateChangeAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.stateChangeAppender.File=${kafka.logs.dir}/state-change.log
    log4j.appender.stateChangeAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.stateChangeAppender.layout.ConversionPattern=[%d] %p %m (%c)%n
    log4j.appender.requestAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.requestAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.requestAppender.File=${kafka.logs.dir}/kafka-request.log
    log4j.appender.requestAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.requestAppender.layout.ConversionPattern=[%d] %p %m (%c)%n
    log4j.appender.cleanerAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.cleanerAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.cleanerAppender.File=${kafka.logs.dir}/log-cleaner.log
    log4j.appender.cleanerAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.cleanerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n
    log4j.appender.controllerAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.controllerAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.controllerAppender.File=${kafka.logs.dir}/controller.log
    log4j.appender.controllerAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.controllerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n
    log4j.appender.authorizerAppender=org.apache.log4j.DailyRollingFileAppender
    log4j.appender.authorizerAppender.DatePattern='.'yyyy-MM-dd-HH
    log4j.appender.authorizerAppender.File=${kafka.logs.dir}/kafka-authorizer.log
    log4j.appender.authorizerAppender.layout=org.apache.log4j.PatternLayout
    log4j.appender.authorizerAppender.layout.ConversionPattern=[%d] %p %m (%c)%n
    # Change the two lines below to adjust ZK client logging
    log4j.logger.org.I0Itec.zkclient.ZkClient=INFO
    log4j.logger.org.apache.zookeeper=INFO
    # Change the two lines below to adjust the general broker logging level (output to server.log and stdout)
    log4j.logger.kafka=INFO
    log4j.logger.org.apache.kafka=INFO
    # Change to DEBUG or TRACE to enable request logging
    log4j.logger.kafka.request.logger=WARN, requestAppender
    log4j.additivity.kafka.request.logger=false
    # Uncomment the lines below and change log4j.logger.kafka.network.RequestChannel$ to TRACE for additional output
    # related to the handling of requests
    #log4j.logger.kafka.network.Processor=TRACE, requestAppender
    #log4j.logger.kafka.server.KafkaApis=TRACE, requestAppender
    #log4j.additivity.kafka.server.KafkaApis=false
    log4j.logger.kafka.network.RequestChannel$=WARN, requestAppender
    log4j.additivity.kafka.network.RequestChannel$=false
    log4j.logger.kafka.controller=TRACE, controllerAppender
    log4j.additivity.kafka.controller=false
    log4j.logger.kafka.log.LogCleaner=INFO, cleanerAppender
    log4j.additivity.kafka.log.LogCleaner=false
    log4j.logger.state.change.logger=TRACE, stateChangeAppender
    log4j.additivity.state.change.logger=false
    # Change to DEBUG to enable audit log for the authorizer
    log4j.logger.kafka.authorizer.logger=WARN, authorizerAppender
    log4j.additivity.kafka.authorizer.logger=false
