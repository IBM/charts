## create map for my data
{{- $rootData := fromYaml (include "root.data" .) }}
## get root metering data
{{- $rootMetering := $rootData.metering -}}
{{- include "sch.config.init" (list . "kafka.sch.chart.config.values") -}}
{{- $statefulSetName := include "sch.names.statefulSetName" (list .) -}}
{{- $kkConfigTemplateName := include "sch.names.volumeClaimTemplateName" (list . "config" $statefulSetName) -}}
{{- $kkDataTemplateName := include "sch.names.volumeClaimTemplateName" (list . "data" $statefulSetName) -}}
{{- $kkKeystoreTemplateName := include "sch.names.volumeClaimTemplateName" (list . "keystore" $statefulSetName) -}}
{{- $resSize := (index .Values .Values.global.environmentSize ) -}}
{{- if semverCompare ">=1.11.1" .Capabilities.KubeVersion.GitVersion }}
apiVersion: apps/v1
{{- else if .Capabilities.APIVersions.Has "apps/v1beta2" }}
apiVersion: apps/v1beta2
{{- else }}
apiVersion: apps/v1beta1
{{- end }}
kind: StatefulSet
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubernetes.io/change-cause: Initial application creation.
  labels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 4 }}
  name: {{ $statefulSetName }}
spec:
  serviceName:  {{ include "sch.names.fullCompName" (list . ) | quote }}
  podManagementPolicy: "Parallel"
  {{- if .Values.global.kafka.clusterSize }}
  replicas: {{ .Values.global.kafka.clusterSize }}
  {{- else }}
  replicas: {{ .Values.clusterSize }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ include "sch.names.appName" (list .) | quote }}
      heritage: {{ .Release.Service }}
      release: {{ .Release.Name }}
  {{- if semverCompare ">=1.7.0" .Capabilities.KubeVersion.GitVersion }}
  updateStrategy:
    type: RollingUpdate
  {{- end }}
  template:
    metadata:
      name: {{ include "sch.names.fullCompName" (list .) | quote }}
      labels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 8 }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/config/kafka.yaml") . | sha256sum }}
{{- include "sch.metadata.annotations.metering" (list . $rootMetering) | indent 8 }}
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
        supplementalGroups:
        {{- range $group := .Values.global.persistence.supplementalGroups }}
          - {{ $group -}}
        {{ end }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          #If you specify multiple nodeSelectorTerms associated with nodeAffinity types,
          #then the pod can be scheduled onto a node if one of the nodeSelectorTerms is satisfied.
          #
          #If you specify multiple matchExpressions associated with nodeSelectorTerms,
          #then the pod can be scheduled onto a node only if all matchExpressions can be satisfied.
          #
          #valid operators: In, NotIn, Exists, DoesNotExist, Gt, Lt
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                {{- range $arch := .Values.arch }}
                  - {{ $arch -}}
                {{ end }}
      terminationGracePeriodSeconds: 10
      initContainers:
      - name: waitforzookeeper
        image: "{{ include "kafka.getImageRepo" . }}/hdm-kafka:{{ .Values.image.tag }}"
        command: ["sh", "-c", "i=1;until getent hosts {{ template "kafka.releasename" . }}-zookeeper.{{ .Release.Namespace }}.svc; do echo waiting for zookeeper $i;i=$((i+1)); sleep 2; done;"]
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
      {{- if kindIs "slice" .Values.advertisedListeners }}
      - name: get-nodeports
        image: "{{ include "kafka.getImageRepo" . }}/hdm-kafka:{{ .Values.image.tag }}"
        command:
        - /bin/sh
        - -c
        - python3 /etc/kafka/get-service-nodeport.py
        env:
        - name: PODNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['statefulset.kubernetes.io/pod-name']
        volumeMounts:
        - name: {{ $kkConfigTemplateName }}
          mountPath: /etc/kafka
        - name: tmp
          mountPath: /tmp
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
      {{- end }}
      - name: init-config
        image: "{{ include "kafka.getImageRepo" . }}/hdm-kafka:{{ .Values.image.tag }}"
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        command: ['/bin/bash', '/etc/kafka/init.sh']
        volumeMounts:
        - name: {{ $kkConfigTemplateName }}
          mountPath: /etc/kafka
{{ if .Values.ssl.enabled }}
        - name: {{ $kkKeystoreTemplateName }}
          mountPath: /etc/keystore
{{ end }}
        - name: {{ $kkDataTemplateName }}
          mountPath: /var/lib/kafka/data
        - name: tmp
          mountPath: /tmp
        securityContext:
          privileged: false
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
      containers:
        - name: {{ include "sch.names.fullCompName" (list .) | quote }}
          image: "{{ include "kafka.getImageRepo" . }}/hdm-kafka:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
            capabilities:
              drop:
              - ALL
          ports:
            - containerPort: 9092
              protocol: TCP
{{ if .Values.ssl.enabled }}
            - containerPort: 9093
              protocol: TCP
{{ end }}
          command:
            - /opt/kafka/bin/start-kafka.sh
          env:
            - name: KAFKA_HEAP_OPTS
              value: {{ include "kafka.comp.size.data" (list . "kafka" "kafkaHeapOpts") | quote }}
{{ if .Values.ssl.enabled }}
            - name: KAFKA_OPTS
              value: "-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf"
{{ end }}
            - name: KAFKA_LOG4J_OPTS
              value: "-Dlog4j.configuration=file:/etc/kafka/log4j.properties"
            - name: ZOOKEEPER_URL
              value: "{{ template "kafka.releasename" . }}-zookeeper:2181"
            - name: KAFKA_NUM_BROKERS
              {{- if .Values.global.kafka.clusterSize }}
              value: {{ .Values.global.kafka.clusterSize | quote }}
              {{- else }}
              value: {{ .Values.clusterSize | quote }}
              {{- end }}
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          resources:
{{ include "kafka.comp.size.data" (list . "kafka" "resources") | indent 12 }}
          livenessProbe:
            exec:
              command:
              - /opt/kafka/liveness.sh
            initialDelaySeconds: 60
            timeoutSeconds: 60
          readinessProbe:
            exec:
              command:
              - /opt/kafka/readiness.sh
            initialDelaySeconds: 60
            timeoutSeconds: 60
          volumeMounts:
          - name: {{ $kkDataTemplateName }}
            mountPath: /var/lib/kafka/data
          - name: {{ $kkConfigTemplateName }}
            mountPath: /etc/kafka
{{ if .Values.ssl.enabled }}
          - name:  {{ $kkKeystoreTemplateName }}
            mountPath: /etc/keystore
{{ end }}
{{ if .Values.kafkarest.enabled }}
        - name: {{ include "sch.names.fullCompName" (list . "rest") | quote }}
          image: "{{ include "kafka.getImageRepo" . }}/hdm-kafkarest:{{ .Values.kafkarest.image.tag }}"
          imagePullPolicy: {{ .Values.kafkarest.image.pullPolicy }}
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            {{- if .Values.kafkarest.enablePrivilegedPorts }}
            runAsNonRoot: false
            runAsUser: 0
            {{- else }}
            runAsNonRoot: true
            runAsUser: 1001
            {{- end }}
            capabilities:
              drop:
              - ALL
          ports:
            - containerPort: 8080
              name: rest-client
              protocol: TCP
            - containerPort: 8443
              name: secure-client
              protocol: TCP
          env:
            - name: KAFKA_SERVICE_HOST
              value: {{ include "sch.names.fullCompName" (list . ) | quote }}
            - name: KAFKA_SERVICE_PORT
              value: "9092"
            - name: LOG_LEVEL
              value: "INFO"
            - name: ZOOKEEPER_URL
              value: "{{ template "kafka.releasename" . }}-zookeeper:2181"
            - name: TOPIC_REPLICATION_FACTOR
              {{- if .Values.global.kafka.clusterSize }}
              value: {{ .Values.global.kafka.clusterSize | quote }}
              {{- else }}
              value: {{ .Values.clusterSize | quote }}
              {{- end }}
            - name: TOPIC_PARTITIONS
              value: {{ .Values.defaultTopicPartitions | quote }}
            - name: JVM_ARGS
              value: {{ include "kafka.comp.size.data" (list . "kafkarest" "jvmArgs") | quote }}
          resources:
{{ include "kafka.comp.size.data" (list . "kafkarest" "resources") | indent 12 }}
          livenessProbe:
            httpGet:
              path: 1.0/kafkarest/status
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 180
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: 1.0/kafkarest/readiness
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 10
          volumeMounts:
            - name: {{ $kkConfigTemplateName }}
              mountPath: /opt/kafka/config/shared
              readOnly: true
            - name: class-cache
              mountPath: /opt/ibm/wlp/usr/servers/.classCache
            - name: logs
              mountPath: /opt/generic-kafka/logs
{{ end }}
      volumes:
      - name: class-cache
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      - name: {{ $kkConfigTemplateName }}
        configMap:
          name: {{ template "kafka.fullname" . }}
{{ if .Values.ssl.enabled }}
      - name: {{ $kkKeystoreTemplateName }}
        secret:
          secretName: {{ .Values.ssl.secret }}
{{ end }}
{{ if .Values.global.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: {{ $kkDataTemplateName }}
        labels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 10 }}
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.global.persistence.storageSize.kafkadata }}
        {{ if eq .Values.global.persistence.storageClassOption.kafkadata "default" }}
        storageClassName: {{ .Values.global.persistence.storageClassName }}
        {{ else }}
        storageClassName: {{ .Values.global.persistence.storageClassOption.kafkadata }}
        {{ end }}
{{ else }}
      - name: {{ $kkDataTemplateName }}
        emptyDir: {}
{{ end }}
