{{- $compName := "couchdb" -}}
{{- include "sch.config.init" (list . "couchdb.sch.chart.config.values") -}}
{{- $statefulSetName := include "sch.names.statefulSetName" (list .) -}}
{{- $configMapName := include "sch.names.fullCompName" (list .) -}}
{{- $serviceName := include "sch.names.fullCompName" (list .) -}}
{{- $cdbDataTemplateName := include "sch.names.volumeClaimTemplateName" (list . "data" $statefulSetName) -}}
{{- $cdbConfigTemplateName := include "sch.names.volumeClaimTemplateName" (list . "config" $statefulSetName) -}}
{{- $rootData := fromYaml (include "root.data" .) -}}
{{- $rootMetering := $rootData.metering -}}
{{- if semverCompare ">=1.11.1" .Capabilities.KubeVersion.GitVersion }}
apiVersion: apps/v1
{{- else if .Capabilities.APIVersions.Has "apps/v1beta2" }}
apiVersion: apps/v1beta2
{{- else -}}
apiVersion: apps/v1beta1
{{- end }}
kind: StatefulSet
metadata:
  name: {{ $statefulSetName }}
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 4 }}
    origin: helm-cem
spec:
  serviceName: {{ $serviceName }}
  replicas: {{ include "couchdb.replicationFactor" . }}
  selector:
    matchLabels:
      release: {{ .Release.Name }}
      app: {{ include "sch.names.appName" (list .) | quote }}
      heritage: {{ .Release.Service }}
      component: {{ $compName | quote }}
{{- if semverCompare ">=1.7.0" .Capabilities.KubeVersion.GitVersion }}
  updateStrategy:
    type: RollingUpdate
{{- end }}
  template:
    metadata:
      labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 8 }}
        origin: helm-cem
      annotations:
{{- include "sch.metadata.annotations.metering" (list . $rootMetering) | indent 8 }}
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
        supplementalGroups:
        {{- range $group := .Values.global.persistence.supplementalGroups }}
          - {{ $group -}}
        {{ end }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          #If you specify multiple nodeSelectorTerms associated with nodeAffinity types,
          #then the pod can be scheduled onto a node if one of the nodeSelectorTerms is satisfied.
          #
          #If you specify multiple matchExpressions associated with nodeSelectorTerms,
          #then the pod can be scheduled onto a node only if all matchExpressions can be satisfied.
          #
          #valid operators: In, NotIn, Exists, DoesNotExist, Gt, Lt
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                {{- range $arch := .Values.arch }}
                  - {{ $arch -}}
                {{ end }}
{{- if eq .Values.global.privileged true }}
      initContainers:
      - name: set-volume-permissions
        image: {{ include "couchdb.getImageRepo" . }}/{{ .Values.image.name }}:{{ .Values.image.tag }}
        command: ["sh", "-c", "chown -R couchdb:couchdb /opt/couchdb/data"]
        securityContext:
          runAsUser: 0
          runAsNonRoot: false
        volumeMounts:
        - name: {{ $cdbDataTemplateName }}
          mountPath: /opt/couchdb/data
        - name: {{ $cdbConfigTemplateName }}
          mountPath: /opt/couchdb/etc/default.d
{{- end }}
{{ if .Values.global.image.pullSecret }}
      imagePullSecrets:
      - name: {{ .Values.global.image.pullSecret }}
{{ end }}
      containers:
        - name: couchdb
          image: {{ include "couchdb.getImageRepo" . }}/{{ .Values.image.name }}:{{ .Values.image.tag }}
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
            readOnlyRootFilesystem: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
            capabilities:
              drop:
              - ALL
          ports:
            - name: couchdb
              containerPort: 5984
            - name: epmd
              containerPort: 4369
            - containerPort: 9100
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NAMESPACE
              value: {{ .Release.Namespace }}
            - name: RELEASE_NAME
              value: {{ template "couchdb.releasename" . }}
            - name: COUCHDB_USER
              valueFrom:
                secretKeyRef:
                  name: '{{ template "couchdb.releasename" . }}-{{ .Values.secretName }}'
                  key: username
            - name: COUCHDB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: '{{ template "couchdb.releasename" . }}-{{ .Values.secretName }}'
                  key: password
            - name: COUCHDB_SECRET
              valueFrom:
                secretKeyRef:
                  name: '{{ template "couchdb.releasename" . }}-{{ .Values.secretName }}'
                  key: secret
            - name: ERL_FLAGS
              value: " -setcookie monster "
          resources:
{{ include "couchdb.comp.size.data" (list . "couchdb" "resources") | indent 12 }}
          livenessProbe:
            httpGet:
              path: /
              port: 5984
            failureThreshold: 3333
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            httpGet:
              path: /_up
              port: 5984
          volumeMounts:
            - name: {{ $cdbDataTemplateName }}
              mountPath: /opt/couchdb/data
            - name: {{ $cdbConfigTemplateName }}
              mountPath: /opt/couchdb/etc/default.d
      volumes:
        - name: {{ $cdbConfigTemplateName }}
          configMap:
            name: {{ $configMapName }}-configmap
  {{ if not .Values.global.persistence.enabled }}
        - name: {{ $cdbDataTemplateName }}
          emptyDir: {}
  {{ else }}
  volumeClaimTemplates:
    - metadata:
        name: {{ $cdbDataTemplateName }}
        labels:
{{ include "sch.metadata.labels.standard" (list . $compName) | indent 10 }}
          origin: helm-cem
      spec:
        {{ if eq .Values.global.persistence.storageClassOption.couchdbdata "default" }}
        storageClassName: {{ .Values.global.persistence.storageClassName }}
        {{ else }}
        storageClassName: {{ .Values.global.persistence.storageClassOption.couchdbdata }}
        {{ end }}
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.global.persistence.storageSize.couchdbdata }}
  {{ end }}
