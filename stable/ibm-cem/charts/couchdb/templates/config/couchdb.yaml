{{- include "sch.config.init" (list . "couchdb.sch.chart.config.values") -}}
{{- $configMapName := include "sch.names.fullCompName" (list .) -}}
kind: ConfigMap
metadata:
  name: {{ $configMapName }}-configmap
  namespace: {{ .Release.Namespace }}
  labels:
{{ include "sch.metadata.labels.standard" (list .) | indent 4 }}
    origin: helm-cem
apiVersion: v1
data:
  cem.ini: |-
    ; CouchDB Configuration Settings - Cloud Event Management

    [query_server_config]
    ; Resolve reduce-overflow error for RBA
    reduce_limit = false

    [cluster]
    q={{ .Values.numShards }}
    n={{ .Values.numReplicas }}
    ; placement = metro-dc-a:2,metro-dc-b:1

    [ssl]
    ;cert_file = /full/path/to/server_cert.pem
    ;key_file = /full/path/to/server_key.pem
    ;password = somepassword
    ; set to true to validate peer certificates
    ;verify_ssl_certificates = false
    ; Set to true to fail if the client does not send a certificate. Only used if verify_ssl_certificates is true.
    ;fail_if_no_peer_cert = false
    ; Path to file containing PEM encoded CA certificates (trusted
    ; certificates used for verifying a peer certificate). May be omitted if
    ; you do not want to verify the peer.
    ;cacert_file = /full/path/to/cacertf
    ; The verification fun (optional) if not specified, the default
    ; verification fun will be used.
    ;verify_fun = {Module, VerifyFun}
    ; maximum peer certificate depth
    ;ssl_certificate_max_depth = 1
    ;
    ; Reject renegotiations that do not live up to RFC 5746.
    ;secure_renegotiate = true
    ; The cipher suites that should be supported.
    ; Can be specified in erlang format "{ecdhe_ecdsa,aes_128_cbc,sha256}"
    ; or in OpenSSL format "ECDHE-ECDSA-AES128-SHA256".
    ;ciphers = ["ECDHE-ECDSA-AES128-SHA256", "ECDHE-ECDSA-AES128-SHA"]
    ; The SSL/TLS versions to support
    ;tls_versions = [tlsv1, 'tlsv1.1', 'tlsv1.2']

    {{ range $section, $settings := .Values.couchdbConfig -}}
    {{ printf "[%s]" $section }}
    {{ range $key, $value := $settings -}}
    {{ printf "%s = %s" $key ($value | toString) }}
    {{ end }}
    {{ end }}
