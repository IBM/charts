{{/*********************************************************** {COPYRIGHT-TOP} ****
* Licensed Materials - Property of IBM
*
* (C) Copyright IBM Corporation 2019.  All rights reserved.
*
* The source code for this program is not published or otherwise
* divested of its trade secrets, irrespective of what has been
* deposited with the U.S. Copyright Office.
********************************************************* {COPYRIGHT-END} ****/}}
## create map for my data
{{- $rootData := fromYaml (include "root.data" .) }}
## get root metering data
{{- $rootMetering := $rootData.metering -}}
{{- include "sch.config.init" (list . "zookeeper.sch.chart.config.values") -}}
{{- $statefulSetName := include "sch.names.statefulSetName" (list .) -}}
{{- $zkconfigTemplateName := include "sch.names.volumeClaimTemplateName" (list . "config" $statefulSetName) -}}
{{- $zkdataTemplateName := include "sch.names.volumeClaimTemplateName" (list . "data" $statefulSetName) -}}
{{- if semverCompare ">=1.11.1" .Capabilities.KubeVersion.GitVersion }}
apiVersion: apps/v1
{{- else if .Capabilities.APIVersions.Has "apps/v1beta2" }}
apiVersion: apps/v1beta2
{{- else }}
apiVersion: apps/v1beta1
{{- end }}
kind: StatefulSet
metadata:
  annotations:
    deployment.kubernetes.io/revision: "1"
    kubernetes.io/change-cause: Initial application creation.
  labels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 4 }}
  name: {{ $statefulSetName }}
spec:
  serviceName:  {{ include "sch.names.fullCompName" (list .) | quote | replace "zookeeper" "zkensemble" }}
  podManagementPolicy: "Parallel"
  replicas: {{ include "zookeeper.replicationFactor" . }}
  selector:
    matchLabels:
      app: {{ include "sch.names.appName" (list .) | quote }}
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
  {{- if semverCompare ">=1.7.0" .Capabilities.KubeVersion.GitVersion }}
  updateStrategy:
    type: RollingUpdate
  {{- end }}
  template:
    metadata:
      name: {{ include "sch.names.fullCompName" (list .) | quote }}
      labels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 8 }}
      annotations:
        #container.apparmor.security.beta.kubernetes.io/{{ include "sch.names.fullCompName" (list .) }}: runtime/default
        #container.apparmor.security.beta.kubernetes.io/init-config: runtime/default
        #seccomp.security.alpha.kubernetes.io/pod: docker/default
{{- include "sch.metadata.annotations.metering" (list . $rootMetering) | indent 8 }}
    spec:
      hostNetwork: false
      hostPID: false
      hostIPC: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
        supplementalGroups:
        {{- range $group := .Values.global.persistence.supplementalGroups }}
          - {{ $group -}}
        {{ end }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          #If you specify multiple nodeSelectorTerms associated with nodeAffinity types,
          #then the pod can be scheduled onto a node if one of the nodeSelectorTerms is satisfied.
          #
          #If you specify multiple matchExpressions associated with nodeSelectorTerms,
          #then the pod can be scheduled onto a node only if all matchExpressions can be satisfied.
          #
          #valid operators: In, NotIn, Exists, DoesNotExist, Gt, Lt
            nodeSelectorTerms:
            - matchExpressions:
              - key: beta.kubernetes.io/arch
                operator: In
                values:
                {{- range $arch := .Values.arch }}
                  - {{ $arch -}}
                {{ end }}
      terminationGracePeriodSeconds: 10
      initContainers:
{{- if eq .Values.global.privileged true }}
      - name: set-volume-permissions
        image: "{{ include "zookeeper.getImageRepo" . }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["sh", "-c", "chown -R zookeeper:zookeeper /var/lib/zookeeper/"]
        securityContext:
          runAsNonRoot: false
          runAsUser: 0
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "32Mi"
            cpu: "50m"
        volumeMounts:
        - name: {{ $zkconfigTemplateName }}
          mountPath: /opt/zookeeper/conf
        - name: {{ $zkdataTemplateName }}
          mountPath: /var/lib/zookeeper/data
{{- end }}
      - name: init-config
        image: "{{ include "zookeeper.getImageRepo" . }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ['/bin/bash', '/opt/zookeeper/conf/init.sh']
        volumeMounts:
        - name: {{ $zkconfigTemplateName }}
          mountPath: /opt/zookeeper/conf
        - name: {{ $zkdataTemplateName }}
          mountPath: /var/lib/zookeeper/data
        securityContext:
          privileged: false
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        resources:
          requests:
            memory: "32Mi"
            cpu: "50m"
          limits:
            memory: "32Mi"
            cpu: "50m"
{{ if .Values.global.image.pullSecret }}
      imagePullSecrets:
      - name: {{ .Values.global.image.pullSecret }}
{{ end }}
      containers:
      - name: {{ include "sch.names.fullCompName" (list .) | quote }}
        image: "{{ include "zookeeper.getImageRepo" . }}/{{ .Values.image.name }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: 2181
          protocol: TCP
        - containerPort: 2888
          protocol: TCP
        - containerPort: 3888
          protocol: TCP
        resources:
{{ include "zookeeper.comp.size.data" (list . "resources") | indent 10 }}
        env:
        - name: JVMFLAGS
          value: {{ include "zookeeper.comp.size.data" (list . "jvmArgs") | quote }}
          # This ensures a restart of all pods after scaling
        - name: ZK_NUM_BROKERS
          value: {{ include "zookeeper.replicationFactor" . | quote }}
{{ if .Values.global.zookeeper.clientUserSecret }}
        - name: ZK_CLIENT_USERNAME
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.global.zookeeper.clientUserSecret }}"
              key: username
        - name: ZK_CLIENT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.global.zookeeper.clientUserSecret }}"
              key: password
{{ end }}
{{ if .Values.global.zookeeper.kafkaClientUserSecret }}
        - name: ZK_KAFKA_CLIENT_USERNAME
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.global.zookeeper.kafkaClientUserSecret }}"
              key: username
        - name: ZK_KAFKA_CLIENT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.global.zookeeper.kafkaClientUserSecret }}"
              key: password
{{ end }}
{{- if or .Values.global.zookeeper.clientUserSecret .Values.global.zookeeper.kafkaClientUserSecret }}
        - name: SERVER_JVMFLAGS
          value: "-Djava.security.auth.login.config=/tmp/secureconfig/jaas.conf"
{{ end }}
        command:
        - /opt/start-zookeeper.sh
        - start-foreground
        - /var/lib/zookeeper/data/zoo.cfg
        securityContext:
          privileged: false
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        readinessProbe:
          exec:
            command:
            - bash
            - -c
            - "/opt/readiness.sh"
          initialDelaySeconds: 1
          timeoutSeconds: 10
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "/opt/liveness.sh"
          initialDelaySeconds: 1
          timeoutSeconds: 10
        volumeMounts:
        - name: {{ $zkconfigTemplateName }}
          mountPath: /opt/zookeeper/conf
        - name: {{ $zkdataTemplateName }}
          mountPath: /var/lib/zookeeper/data
        - name: secureconfig
          mountPath: /tmp/secureconfig
      volumes:
      - name: {{ $zkconfigTemplateName }}
        configMap:
          name: {{ $statefulSetName }}
      - name: secureconfig
        emptyDir:
          medium: "Memory"
{{ if .Values.global.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: {{ $zkdataTemplateName }}
        labels:
{{ include "sch.metadata.labels.standard" (list . "") | indent 10 }}
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.global.persistence.storageSize.zookeeperdata }}
        {{ if eq .Values.global.persistence.storageClassOption.zookeeperdata "default" }}
        storageClassName: {{ .Values.global.persistence.storageClassName }}
        {{ else }}
        storageClassName: {{ .Values.global.persistence.storageClassOption.zookeeperdata }}
        {{ end }}
{{ else }}
      - name: {{ $zkdataTemplateName }}
        emptyDir: {}
{{ end }}
